<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++虚函数知识点总结</title>
      <link href="2021/09/24/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/24/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p><strong>注意</strong>：</p><ul><li><p>在函数声明的返回类型之前加virtual。</p></li><li><p>并且只在函数的声明中添加virtual,在该成员函数的实现中不用加。</p></li></ul><hr><h2 id="虚函数的继承"><a href="#虚函数的继承" class="headerlink" title="虚函数的继承"></a>虚函数的继承</h2><ul><li>如果某个成员函数被声明成虚函数，那么他的子类，以及子类中的子类 ，所计继承的这个成员函数，也自动是虚函数。</li><li>如果在子类中重写这个虚函数，可以不用再加virtual,但仍然建议加上virtual，提高代码的可读性。</li></ul><hr><h2 id="虚函数原理——虚函数表"><a href="#虚函数原理——虚函数表" class="headerlink" title="虚函数原理——虚函数表"></a>虚函数原理——虚函数表</h2><p>对应虚函数的类，该类的对象所占内存大小为，数据成员的大小+一个指向虚函数表指针 (4字节)。</p><p><strong>例如</strong>：如下所示Father类所创建的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非func4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Father::z = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father father;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(father)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>结果为12</strong>，两个int的数据成员4+4一共占了8个字节，再加上一个虚函数表指针(4个字节)，一共是12个字节</p><p>( 如果该类中没有虚函数，就没有虚函数表指针，也就少4个字节)</p><p><strong>如下图所示</strong>:</p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923162312616.png" alt="image-20210923162312616"></p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923175606957.png" alt="image-20210923175606957"></p><p><strong>思考</strong>：它尽然是个指针，那我们就能通过这个指针来访问它所指向内存所对应的内容。</p><p>(先存的是虚函数表指针，然后才是数据成员。)</p><p><strong>所以说</strong>，对象地址就是虚函数表地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>*)&amp;father&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>强转成指针。</p><p><strong>接着</strong>，取出虚函数表的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* vptr = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)(&amp;father);</span><br></pre></td></tr></table></figure><p>为了编译器能通过，前面加上int*。</p><p><strong>然后</strong>，就找到了虚函数，并执行方法。</p><p>为了便于调用，这里定义个函数指针类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">func_t</span>)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>func_t指针，指向参数为void，返回值为void的函数。</p><p>调用虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((<span class="keyword">func_t</span>)*(vptr))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">1</span>))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">2</span>))();</span><br></pre></td></tr></table></figure><p><strong>调用成功</strong>。</p><p>接着调用x,y两个数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>取到地址，转成int整数，加上偏移量，通过编译器加上(int*),再解引用，得到里面的值。</p><p>(+上偏移量要先转成int)</p><p><strong>多态的使用</strong>：<strong>父类指针指向子类对象</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father* father1 = &amp;son;</span><br><span class="line">father1-&gt;Func1();<span class="comment">//调用对应的func1函数，son中的</span></span><br></pre></td></tr></table></figure><h2 id="使用继承的虚函数表"><a href="#使用继承的虚函数表" class="headerlink" title="使用继承的虚函数表"></a>使用继承的虚函数表</h2><p>在上面的基础上，为Father类添加一个派生类。并且对Father的func1进行重写，再添加一个它独有的func5,声明为虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Func5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/imges/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923180943284.png" alt="image-20210923180943284"></p><p><strong>同上面通过使用指向虚函数表的指针来访问对应的内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取到这个地址的内容，然后通过自定义指针类型转换，调用该函数,加()</span></span><br><span class="line">((<span class="keyword">func_t</span>) * (vptr + i))();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问两个成员</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子类虚函数表"><a href="#子类虚函数表" class="headerlink" title="子类虚函数表"></a>子类虚函数表</h2><ol><li><p>直接复制父类的虚函数表</p><p><img src="/imges/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924120520593.png" alt="image-20210924120520593"></p></li><li><p>如果子类重写了父类的某个虚函数，那么就在这个虚函数表中进行相应的替换</p><p><img src="/imges/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924121032927.png" alt="image-20210924121032927"></p></li><li><p>如果子类中添加的新的虚函数，就把这个虚函数添加到虚函数表中(尾部添加)</p></li></ol><img src="/imges/C++虚函数知识点总结.assets/image-20210924121136461.png" alt="image-20210924121136461" style="zoom:;" /><h2 id="使用多重继承的虚函数表"><a href="#使用多重继承的虚函数表" class="headerlink" title="使用多重继承的虚函数表"></a>使用多重继承的虚函数表</h2><p><strong>在上面的基础上再添加一个Mother类</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//便于测试，所以权限定为public</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">500</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此时的Son类对象</strong></p><p>vs编译器中把子类自己的虚函数放到了第一个父类的虚函数表最后</p><p><img src="/imges/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924123011972.png" alt="image-20210924123011972"></p><p><strong>同样通过指针访问对应的虚函数表内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Son son;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;son &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第一个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr1 = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)&amp;son;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr1 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x y </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span> + <span class="number">4</span> * i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二盒个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr2 = (<span class="keyword">int</span>*)*((<span class="keyword">int</span>*)&amp;son + <span class="number">3</span>);<span class="comment">//取出来的是指向第二个虚函数表的指针 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr2 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">16</span> + i * <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小补充</strong>：</p><p><strong>对象地址+偏移量</strong></p><p>转化int类型 + 对应的字节个数</p><p>转化int*类型 + 走几步(几个步长)</p><hr><h2 id="虚函数的修饰"><a href="#虚函数的修饰" class="headerlink" title="虚函数的修饰"></a>虚函数的修饰</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p><strong>final</strong>——C++11更新</p><p>1.用来修饰类，让该类不能被继承。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi2</span> <span class="keyword">final</span>:</span>XiaoMi</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi3</span> :</span>XiaoMi3<span class="comment">//报错——XiaoMI2不能被继承</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>补充</strong>:C++默认继承方式为private)</p><p>2.用来修饰虚函数，使得该虚函数在子类中，不得被重写。但是还可以使用。</p><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>override仅能修饰虚函数。</p><p>只能用在函数的声明，函数的实现不要写。</p><p><strong>作用</strong>：</p><ol><li>提示程序的阅读者，这个函数是重写父类的功能。</li><li>防止程序员在重写父类的函数时，把函数名写错。</li></ol><h2 id="父类的虚析构函数"><a href="#父类的虚析构函数" class="headerlink" title="父类的虚析构函数"></a>父类的虚析构函数</h2><p>把father类的指针定义为virtual时，并且对父类的指针执行delete操作时, 就是对该指针使用”动态析构”。</p><p>如果这个指针指向的是子类对象，那么会先调用该子类的析构函数，再调用父类的析构函数。</p><p>如果指向的是父类对象，那么只调用父类的析构函数。 </p><p><strong>注意</strong>：<br>为了防止内存泄露，最好在基类的虚构函数上添加virtual关键字，使基类析构函数为虚函数。</p><h2 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h2><p><strong>什么时候使用纯虚函数</strong>？</p><p>某些类，现实项目和实现角度吗，都<strong>不需要实例化</strong>(不需要创建它的对象)。</p><p>这个类中定义的某些成员函数只是为了提供一个形式上的接口，准备让自子类来做具体的实现。</p><p>此时这个函数就可以定义为”<strong>纯虚函数</strong>“，包含纯虚函数的类，就叫做<strong>抽象类</strong>(不能创建对象)。</p><p>继承该抽象类的子类如果不重写这个纯虚函数，那么它也是不能创建对象的。</p><p><strong>用法</strong>：<br>virtual  +  = 0</p><p><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Shape(<span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">~Shape()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Circle(<span class="keyword">float</span> radius = <span class="number">0</span>, <span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>) :Shape(color), r(radius)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">&#125;</span><br><span class="line">~Circle()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">float</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Circle <span class="title">c1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.area() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>纯虚函数的注意事项</strong>：<br>父类声明为某纯虚函数之后,它的子类：</p><ol><li>实现这个纯虚函数</li><li>继续把这个纯虚函数声明为纯虚函数，这个子类也称为抽象类</li><li>不对这个纯虚函数做任何处理，等效于上一种情况(不推荐)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位图算法</title>
      <link href="2021/09/19/%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
      <url>2021/09/19/%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="位图算法"><a href="#位图算法" class="headerlink" title="位图算法"></a>位图算法</h1><p><strong>已空间换时间</strong>。</p><p>很多不重复的整数，其中最大值不超过40亿，最小值是0，要求判断某个指定的整数，是否在这个集合中。</p><p>使用2个字节，表示16个数，的状态(有或者没有)</p><p><strong>上面为表示的数，下面为该数的个数。</strong></p><table><thead><tr><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p> <strong>例如：要表示1,13,4,5,6</strong></p><table><thead><tr><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p><strong>要表示40亿个数</strong></p><p>4000000000/8 = 500000000字节</p><p>500000000字节/1024=  488281K</p><p> 488281k/1024 = 476.837M</p><p><strong>单位换算</strong></p><p> 1字节==  8比特位</p><p>1K == 1024字节</p><p>1M == 1024K</p><p><strong>代码实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//初始化容器内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tempN = len * <span class="number">8</span>;<span class="comment">//40亿个数——40亿个位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假定需求:这个容器中存的是40亿以前能被3整数的数</span></span><br><span class="line"><span class="comment">//就将他对应的比特位改成1(默认是0——memset())</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempN; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到这个数对应的字节</span></span><br><span class="line"><span class="keyword">char</span>* p = data + (i / <span class="number">8</span>);</span><br><span class="line"><span class="comment">//找到对应的位，并且将对应的位改成1</span></span><br><span class="line">*p = *p | (<span class="number">1</span> &lt;&lt; (i % <span class="number">8</span>));<span class="comment">//解释如下:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何将这个数对应的位(在比特位中的第几位数)改成1？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对1进行左移操作,这个数 % 8等于多少</span></span><br><span class="line"><span class="comment">(就是该数与该字节的最右侧中间间隔了几个位)，</span></span><br><span class="line"><span class="comment">1就左移几位，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后和这个字节进行按位或操作，例如</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i = 12;</span></span><br><span class="line"><span class="comment">//上面是对应的数,下面是对应比特位的数</span></span><br><span class="line"><span class="comment">15 14 13 12 11 10 9 8</span></span><br><span class="line"><span class="comment">0  0  0  0  0  0  0 0 </span></span><br><span class="line"><span class="comment">与   1 &lt;&lt; (i % 8)  进行按位或操作</span></span><br><span class="line"><span class="comment">0  0  0  1  0  0  0 0</span></span><br><span class="line"><span class="comment">得到</span></span><br><span class="line"><span class="comment">15 14 13 12 11 10 9 8</span></span><br><span class="line"><span class="comment">0  0  0  1  0  0  0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位图算法实现</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>* data,<span class="keyword">int</span> len,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到对应的字节</span></span><br><span class="line"><span class="keyword">char</span>* p = data + value / <span class="number">8</span>;</span><br><span class="line"><span class="comment">//找到对应的位，并判断是否存在</span></span><br><span class="line"><span class="keyword">bool</span> ret = *p &amp; (<span class="number">1</span> &lt;&lt; (value % <span class="number">8</span>));<span class="comment">//解释如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对1进行的左移操作同上</span></span><br><span class="line"><span class="comment">然后将这个所在的字节与1左移后的值，进行按位与</span></span><br><span class="line"><span class="comment">1 &amp; 1 = 1</span></span><br><span class="line"><span class="comment">1 &amp; 0 = 0</span></span><br><span class="line"><span class="comment">0 &amp; 0 = 0</span></span><br><span class="line"><span class="comment">0 &amp;1 = 0；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">4000000000</span>;<span class="comment">//这个40亿代表40个数(80亿个比特位)</span></span><br><span class="line"><span class="keyword">int</span> len = n / <span class="number">8</span> + <span class="number">1</span>;<span class="comment">//40亿个数对应的字节个数</span></span><br><span class="line"><span class="keyword">char</span>* data = <span class="keyword">new</span> <span class="keyword">char</span>[len];<span class="comment">//创建对应字节个数这么大的一个数组(容器)</span></span><br><span class="line"><span class="built_in">memset</span>(data, <span class="number">0</span>, len);<span class="comment">//容器清0</span></span><br><span class="line">init(data, len);<span class="comment">//往容器中存数据</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输入测试</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要查找的数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (check(data, len, a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;被找到啦&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;找不到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侯捷C++面向对象高级编程(上)笔记</title>
      <link href="2021/09/09/%E4%BE%AF%E6%8D%B7C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0/"/>
      <url>2021/09/09/%E4%BE%AF%E6%8D%B7C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面向对象，就是将数据和处理这些数据的函数包在一起。数据只有这个函数能够看到，不会和其他的混杂在一起。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c++ <span class="class"><span class="keyword">class</span> -&gt;</span>  c <span class="class"><span class="keyword">struct</span> + 更多的特性</span></span><br></pre></td></tr></table></figure><p>C++的结构几乎等同于class。</p><h1 id="C-Programs代码基本形式"><a href="#C-Programs代码基本形式" class="headerlink" title="C++ Programs代码基本形式"></a>C++ Programs代码基本形式</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.h(header files)</span><br><span class="line">.cpp </span><br></pre></td></tr></table></figure><p>延伸文件名(extension file name)不一定是.h Or .cpp,也可能是.hpp或者其他甚至无扩展名。</p><h2 id="头文件写法"><a href="#头文件写法" class="headerlink" title="头文件写法"></a>头文件写法</h2><p><strong>防止头文件重复包含</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906123808403.png" alt="image-20210906123808403"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _XXX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _XXX_</span></span><br></pre></td></tr></table></figure><h2 id="头文件布局"><a href="#头文件布局" class="headerlink" title="头文件布局"></a>头文件布局</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前置声明</span><br><span class="line">类——声明</span><br><span class="line">类——定义-功能实现</span><br></pre></td></tr></table></figure><h1 id="class1——complex"><a href="#class1——complex" class="headerlink" title="class1——complex"></a>class1——complex</h1><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906160932608.png" alt="image-20210906160932608"></p><h2 id="inline——内联函数"><a href="#inline——内联函数" class="headerlink" title="inline——内联函数"></a>inline——内联函数</h2><p>增加了 inline 关键字的函数称为“内联函数”。内联函数和普通函数的区别在于：当编译器处理调用内联函数的语句时，不会将该语句编译成函数调用的指令，而是直接将整个函数体的代码插人调用语句处，就像整个函数体在调用处被重写了一遍一样。(<a href="http://c.biancheng.net/view/199.html">链接</a>)</p><p>inline是C++关键字，在函数声明或定义中，函数返回类型前加上关键字inline，即可以把函数指定为内联函数。这样可以解决一些频繁调用的函数大量消耗栈空间（栈内存）的问题。关键字inline必须与函数定义放在一起才能使函数成为内联函数，仅仅将inline放在函数声明前面不起任何作用。inline是一种“用于实现”的关键字，而不是一种“用于声明”的关键字。(<a href="https://baike.baidu.com/item/inline/10566989">链接</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> 函数返回值类型 函数名()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class访问级别-access-level"><a href="#class访问级别-access-level" class="headerlink" title="class访问级别(access level)"></a>class访问级别(access level)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>——放所有函数(几乎)</span><br><span class="line"><span class="keyword">private</span>——数据</span><br><span class="line"><span class="keyword">protected</span>——受保护的(暂时不说)</span><br></pre></td></tr></table></figure><p>数据一定要通过类中的函数来传递出去(或者被设定)。除非这些数据是public,但我们要避免的就是这种。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906162631950.png" alt="image-20210906162631950"></p><h2 id="构造函数-ctors"><a href="#构造函数-ctors" class="headerlink" title="构造函数(ctors)"></a>构造函数(ctors)</h2><ol><li>与类名相同</li><li>可以有默认参数</li><li>没有返回类型</li></ol><h2 id="构造函数特有语法"><a href="#构造函数特有语法" class="headerlink" title="构造函数特有语法"></a>构造函数特有语法</h2><p>（充分运用特殊写法）</p><p><strong>注意</strong>：括号中要有接收参数double r ,double i </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一个变量的赋值使用有两个阶段，</span></span><br><span class="line">    <span class="comment">//1.初始化</span></span><br><span class="line">    <span class="comment">//2.赋值，使用</span></span><br><span class="line">    <span class="comment">//如果不用构造函数的特殊写法，就相当于跳过了初始化，直接在函数中赋值了</span></span><br><span class="line">      <span class="built_in">complex</span>(<span class="keyword">double</span> r = <span class="number">0</span>,<span class="keyword">double</span> i = <span class="number">0</span>):re(r),im(i)</span><br><span class="line">          <span class="comment">//传进来的两个数赋到类内变量中</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test(<span class="keyword">int</span> c,<span class="keyword">int</span> d):a(c),b(d)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FanHui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">s1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1.FanHui() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与构造函数对应的析构函数，不带指针的类，大多不用写析构函数。</p><p>构造函数可以有很多个——overloading(重载)，同名的函数可以同时存在(在编译器看来其实不同名)，函数重载长长发生在构造函数上，但是这种不行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">complex</span>(<span class="keyword">double</span> r = <span class="number">0</span>,<span class="keyword">double</span> i = <span class="number">0</span>):re(r),im(i)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">complex</span>():re(<span class="number">0</span>),im(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="构造函数放到private"><a href="#构造函数放到private" class="headerlink" title="构造函数放到private?"></a>构造函数放到private?</h2><p>什么情况会这样做？</p><p>不允许外接创建对象，那这个类有什么用呢？‘</p><p><strong>例</strong>:设计模式中的<strong>Singleton</strong>(单体)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> A&amp; <span class="title">gentInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup()&#123;......&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A&amp; <span class="title">A::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量成员函数const-member-functions"><a href="#常量成员函数const-member-functions" class="headerlink" title="常量成员函数const member functions"></a>常量成员函数const member functions</h2><p>class里面的函数分为会改变数据内容的，和不会改变数据内容的，不会改变数据的内容的函数<strong>加const</strong>。</p><p>加不加const看传进来的参数经过这一系列运算会不会发生改变。(全局函数同理)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span><span class="keyword">const</span></span>&#123;    <span class="keyword">return</span> re;&#125;</span><br></pre></td></tr></table></figure><p><strong>该加const的位置一定要加const</strong>——创建类对象前面加了const</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906170251208.png" alt="image-20210906170251208"></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><strong>首先考虑传引用，注意看是否可以传引用。</strong></p><p><strong>pass by value</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常参数传递 类型 名称</span><br></pre></td></tr></table></figure><p><strong>pass by reference (to const)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是传引用,相当于传指针。效果也同样相同    <span class="keyword">const</span> <span class="built_in">complex</span>&amp;   ————传引用加<span class="keyword">const</span>防止被修改</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><strong>首先考虑传引用，注意看是否可以传引用。</strong></p><p><strong>return by value</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型</span><br></pre></td></tr></table></figure><p><strong>return by reference (to const)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引用</span><br></pre></td></tr></table></figure><p><strong>什么时候不能返回引用</strong></p><p>如果新得到的结果放到了已经有的空间位置上，就OK。(如图)</p><p>但是，将两个已有的数据加在一起，不能放到原来已经有的位置上，这时候就需要在函数中创建一个新的变量用来接收的这个新得到的值，这时候不能返回这个新创建的变量，因为局部变量( local变量)在函数结束之后就消失了。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906174311493.png" alt="image-20210906174311493"></p><h2 id="友元friend"><a href="#友元friend" class="headerlink" title="友元friend"></a>友元friend</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906173119933.png" alt="image-20210906173119933"></p><h2 id="同一个class的各个object互为友元"><a href="#同一个class的各个object互为友元" class="headerlink" title="同一个class的各个object互为友元"></a>同一个class的各个object互为友元</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906173635470.png" alt="image-20210906173635470"></p><h2 id="操作符重载operator-overloading-成员函数"><a href="#操作符重载operator-overloading-成员函数" class="headerlink" title="操作符重载operator overloading(成员函数)"></a>操作符重载operator overloading(成员函数)</h2><p><strong>操作符重载通过成员函数或者非成员函数实现</strong>。</p><p>c++中操作符就是一种函数，因为它可以重新定义。</p><p>所有的成员函数都带着一个隐藏dispointer,指向调用者。</p><p><strong>传递者无需知道接收者是以reference形式接收</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906194143586.png" alt="image-20210906194143586"></p><h2 id="操作符重载operator-overloading-非成员函数"><a href="#操作符重载operator-overloading-非成员函数" class="headerlink" title="操作符重载operator overloading(非成员函数)"></a>操作符重载operator overloading(非成员函数)</h2><p>为了应对client_使用者的不同用法，我们这里给出3种写法。</p><p><strong>注意到</strong>：运算的数写的位置不同，所重载的版本不同。</p><p>并且这几个绝对不可return by reference,因为他们返回的必定是local object，不是赋值给了已经存在的空间位置上，而是从这个函数中创建出一个complex，然后将它返回。 </p><p><strong>是从哪里创建的呢？</strong></p><p><strong>这里有个特殊语法</strong>：</p><p><strong>typename()</strong>;——<strong>创建临时对象</strong>，它的生命到下一行就结束了。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906195013096.png" alt="image-20210906195013096"></p><p><strong>重载返回值的特殊情况</strong>：</p><p>注意到连用情况，在本次重载&lt;&lt;运算符中，如果client_user按照标准库中的cout使用方式连用，那么我们重载所设置的返回值就还得是个ostream类型，因为它从左向右运算，完成第一个之后，得到的类型还得是ostream类型才能接受这个&lt;&lt;。</p><p><strong>但是</strong>,如果client_user不连用，只是cout&lt;&lt;xxx;那么本次运算之后的返回值是什么就无所谓了，我们可以填个void,并且注意，没有return。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906202138200.png" alt="image-20210906202138200"></p><h1 id="complex类实现过程"><a href="#complex类实现过程" class="headerlink" title="complex类实现过程"></a>complex类实现过程</h1><p><strong>注意</strong>：成员函数实现重载，作用在运算符左边。传进来的参数是另一个。</p><p><strong>简单实现</strong>：</p><p><strong>MyComplex.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> mycomplex</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mycomplex</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComplex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyComplex(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>) :re(r), im(i) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span><span class="keyword">const</span><span class="comment">//得到实部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span><span class="keyword">const</span><span class="comment">//得到虚部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> im;</span><br><span class="line">&#125;</span><br><span class="line">MyComplex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> MyComplex&amp; c);<span class="comment">//一个复数加到另一个复数上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MyComplex&amp; c);<span class="comment">//判断两个复数是否相等</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re, im;</span><br><span class="line"><span class="comment">//在函数前加friend变为友元函数，写在这里，这个函数就能取到这个类的私有数据了。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> MyComplex&amp; <span class="title">GetBody1</span><span class="params">(MyComplex* ths, <span class="keyword">const</span> MyComplex&amp; tempC)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个虚数的实部和虚部加到另一个上</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> MyComplex&amp; <span class="title">GetBody1</span><span class="params">(MyComplex* ths, <span class="keyword">const</span> MyComplex&amp; tempC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ths-&gt;re += tempC.re;</span><br><span class="line">ths-&gt;im += tempC.im;</span><br><span class="line"><span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个虚部进行相加</span></span><br><span class="line"><span class="comment">/*为什么要把对两个复数的运算操作写成成员函数？</span></span><br><span class="line"><span class="comment">因为可以利用到this指针，书写简单*/</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex&amp; MyComplex::<span class="keyword">operator</span>+=(<span class="keyword">const</span> MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> GetBody1(<span class="keyword">this</span>, c1);<span class="comment">//注意到this是个指向调用者的指针，所以上面的GetBody1的参数1类型要写MyComplex*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载&lt;&lt;运算符，在屏幕上打印输出负数</span></span><br><span class="line"><span class="keyword">inline</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp; os,<span class="keyword">const</span> MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; c1.real() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; c1.imag() &lt;&lt; <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个复数类的相加运算，并且加到一个新的复数类上</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> + (<span class="keyword">const</span>  MyComplex&amp; c1,<span class="keyword">const</span> MyComplex&amp; c2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(c1.real() + c2.real(), c1.imag() + c2.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个复数和一个double数进行运算</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> + (MyComplex&amp; c1, <span class="keyword">double</span> x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  MyComplex(c1.real() + x, c1.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对这个复数进行取反</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> - (MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(-c1.real(), -c1.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两个复数是否相等</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> MyComplex::<span class="keyword">operator</span> == (<span class="keyword">const</span> MyComplex&amp; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;im == c.im &amp;&amp; <span class="keyword">this</span>-&gt;re == c.re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到一个复数的共轭复数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> MyComplex <span class="title">GetRatherImag</span><span class="params">(<span class="keyword">const</span> MyComplex&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(c.real(),-c.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyComplex.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mycomplex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MyComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">MyComplex <span class="title">c2</span><span class="params">(<span class="number">-1</span>, <span class="number">-2</span>)</span></span>;</span><br><span class="line"><span class="function">MyComplex <span class="title">cTemp1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 + c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; -c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1 += c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (c1 == c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; GetRatherImag(c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1 = c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="class2——string"><a href="#class2——string" class="headerlink" title="class2——string"></a>class2——string</h1><p>class带指针，我们就不能用默认的拷贝构造函数，应该自己写。</p><p>因为拷贝了指针，这两个指针指向的是同一块内容空间。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210907204221502.png" alt="image-20210907204221502"></p><h2 id="class-with-pointer-members"><a href="#class-with-pointer-members" class="headerlink" title="class with pointer  members"></a>class with pointer  members</h2><p>只要了类带着指针，就要写拷贝构造和拷贝赋值，析构函数。——Big Three三个特殊函数。</p><p><strong>class里面有指针，多半是要动态内存分配。</strong></p><p>因为传递的是指针，创建的这两个class中的data就是一个指针，如果就使用编译器的否拷贝构造函数。</p><p>那么就会使得这两个指针指向的是同一块内存空间。</p><p>并且会导致另一块没有指针指向的内存空间引起<strong>memory leak</strong>(内存泄漏)。</p><p>——这就是我们所说的<strong>浅拷贝</strong>。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210907210003827.png" alt="image-20210907210003827"></p><h2 id="深-amp-浅拷贝ctor-function"><a href="#深-amp-浅拷贝ctor-function" class="headerlink" title="深&amp;浅拷贝ctor function"></a>深&amp;浅拷贝ctor function</h2><p> 引出——<strong>深拷贝</strong>，我们coder所要写的这个(copy ctor)拷贝构造函数。</p><p>因为它的名字和类名相同，所以他是构造函数，并且它的参数传递的是它本身这种类型，所以叫做copy ctor。</p><p>拷贝构造应该做什么?<br>为传进来的这个蓝本创建足够的空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> </span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data)+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_data,str.m_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//以下两行代码意思完全相同</span></span><br><span class="line"><span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">String s2 = s1;</span><br></pre></td></tr></table></figure><h2 id="copy-assignment-operator——拷贝赋值函数"><a href="#copy-assignment-operator——拷贝赋值函数" class="headerlink" title="copy assignment operator——拷贝赋值函数"></a>copy assignment operator——拷贝赋值函数</h2><p>将原来的内容清空，开辟一块与另一块内存一样大的空间，然后将另一块的内容复制到这块来。</p><p>self assignment——检测自我赋值</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908182935320.png" alt="image-20210908182935320"></p><h1 id="string类的实现过程"><a href="#string类的实现过程" class="headerlink" title="string类的实现过程"></a>string类的实现过程</h1><p>(不管什么函数就都加inline就完事了，编译器会做决策)</p><p><strong>MyString.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> myString</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> myString<span class="comment">//注意防卫式声明的名字不能和类名相同！</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>);<span class="comment">//接收什么样的初值</span></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">MyString(<span class="keyword">const</span> MyString&amp; str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝赋值</span></span><br><span class="line">MyString&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; str); <span class="comment">//看函数返回出来的结果要放到什么地方去，来决定是否可以Return by reference</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(指针指向c字符的字符串是C语言风格的字符串)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回字符串丢到cout</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">get_str</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~MyString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* m_data;<span class="comment">//放一根指针，动态分配</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MyString::MyString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* cstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cstr != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cstr) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, cstr);<span class="comment">//将传进来的内容拷贝到新分配到的空间中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//没有初值也要来一个空间</span></span><br><span class="line"><span class="comment">//放/0,就是——所谓空字符串也要有一个最后的结束符</span></span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">*m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> MyString::~MyString()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_data;<span class="comment">//arry new 配 arry delete</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MyString::MyString</span><span class="params">(<span class="keyword">const</span> MyString&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> MyString&amp; MyString::<span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意参数中的&amp; 和if中str前的&amp; ，他们两个的意义是不同的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑到是否进行自我赋值</span></span><br><span class="line"><span class="comment">//来源端和目的端是否相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//取地址得到的是一根指针</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> m_data;</span><br><span class="line"><span class="comment">//清理掉之后重新分配一个够大的空间</span></span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑到连串情况(类似于之前MyComplex中cout&lt;&lt;连用的情况)</span></span><br><span class="line"><span class="comment">//所以返回MySring&amp; </span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !MyString</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyString.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//MyString s1(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; s1.get_str();</span></span><br><span class="line"><span class="built_in">string</span> stemp = &#123;&#125;;</span><br><span class="line"><span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.get_str() &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(s2.get_str()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(stemp) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">s3</span><span class="params">(<span class="string">&quot;在&quot;</span>)</span></span>;</span><br><span class="line">s2 = s3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.get_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆、栈、内存管理"><a href="#堆、栈、内存管理" class="headerlink" title="堆、栈、内存管理"></a>堆、栈、内存管理</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>是存在于某个作用域的一块内存空间memory space。</p><p>调用函数，就会形成一个stack,用来存放它的参数，以及返回地址。</p><p><strong>Stack object</strong>的生命周期在作用域结束之后就结束了。 会被自动清理。</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>即——System Heap，是指由操作系统提供的一个global内存空间，由coder负责分配。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;<span class="built_in">complex</span> *p =  <span class="keyword">new</span> <span class="built_in">complex</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>**Static  object **在作用域结束之后仍然存在，直到整个程序结束 ，析构函数才被调用。</p><h2 id="New"><a href="#New" class="headerlink" title="New"></a>New</h2><p><strong>new完记得Delete。</strong></p><p>调用New，先分配一块内存空间，然后再调用构造函数。</p><p><strong>例如</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用</span><br><span class="line">MyComplex *pc = <span class="keyword">new</span> MyComplex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">之后</span><br><span class="line">我们可以理解为</span><br><span class="line">实际上编译器转化为了<span class="number">3</span>条语句</span><br><span class="line">    </span><br><span class="line">    分配内存-相当于调用<span class="built_in">malloc</span>(n)</span><br><span class="line"><span class="keyword">void</span>* temp = <span class="keyword">operator</span> <span class="keyword">new</span>(sozeof(MyComplex));</span><br><span class="line">pc = <span class="keyword">static_cast</span>&lt;MyComplex*&gt;(temp);<span class="comment">//转型</span></span><br><span class="line">pc-&gt;MyComplex::MyComplex(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//调用构造函数</span></span><br></pre></td></tr></table></figure><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p><strong>先调用析构函数，再释放内存。</strong>与New相反</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> pc;</span><br><span class="line"></span><br><span class="line">Complex::~Complex(pc);</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;</span><br><span class="line">（即 调用<span class="built_in">free</span>）</span><br></pre></td></tr></table></figure><h2 id="arry-new"><a href="#arry-new" class="headerlink" title="arry new"></a>arry new</h2><p>arry new一定要搭配arry delete</p><p>即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String *str = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span>[] p;<span class="comment">//调用三次dtor</span></span><br></pre></td></tr></table></figure><p>否则会造成内存泄漏。</p><p><strong>注意泄漏的是哪个位置</strong>。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908193839238.png" alt="image-20210908193839238"></p><h1 id="static-静态"><a href="#static-静态" class="headerlink" title="static_静态"></a>static_静态</h1><p>C与C++的static有两种用法：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B">面向过程</a>程序设计中的static和<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">面向对象程序设计</a>中的static。前者应用于普通变量和函数，不涉及类；后者主要说明static在类中的作用。——<a href="https://baike.baidu.com/item/static/9598919">链接</a></p><p>在有的情况，例如银行的利率，我们就可以将它设置为静态static类型，因为每个人看到的利率都是一样的，只有一份。</p><p>静态函数没有dispointer，所以它只能处理静态的数据。</p><p><strong>静态的数据一定要在class外定义</strong>。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> m_rate;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_rate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_rate = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">double</span> Account::m_rate = <span class="number">8.0</span>;</span><br></pre></td></tr></table></figure><p>调用静态函数有两种方式</p><ol><li>通过object对象调用</li><li>通过class name调用</li></ol><p><strong>有时我们的class只希望创建一个对象</strong></p><p>只有有人调用到这个函数，这个对象才会诞生。</p><p>没人用，这个唯一的对象就不会产生。only one forever</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A&amp; <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup()&#123;&#125;;             </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A&amp; <span class="title">A::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="cout补充"><a href="#cout补充" class="headerlink" title="cout补充"></a>cout补充</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908213824015.png" alt="image-20210908213824015"></p><h1 id="class-template-类模板"><a href="#class-template-类模板" class="headerlink" title="class template_类模板"></a>class template_类模板</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908214533298.png" alt="image-20210908214533298"></p><h1 id="function-template-函数模板"><a href="#function-template-函数模板" class="headerlink" title="function template_函数模板"></a>function template_函数模板</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908214827122.png" alt="image-20210908214827122"></p><p> 函数模板不必明确的指出来传入的类型，编译器会进行推导。</p><p>与运算符重载相互搭配。</p><p>(C++标准库里的算法都是function template形式)</p><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><ol><li>using directive_打开全部封锁</li><li>using declaration_一条一条声明</li><li>啥也不写，每条都得std::xx</li></ol><h1 id="class-Composition-复合"><a href="#class-Composition-复合" class="headerlink" title="class Composition_复合"></a>class Composition_复合</h1><p>a has b </p><p>(标注库中的很多容器就是复合)</p><p>例如：将deque容器改装成 queue——adapter_改造</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909085401344.png" alt="image-20210909085401344"></p><p><strong>构造由内而外——</strong>包饺子</p><p><strong>析构由内而外</strong>——剥桔子</p><h1 id="class-Delegation-委托"><a href="#class-Delegation-委托" class="headerlink" title="class Delegation_委托"></a>class Delegation_委托</h1><p>Composition by reference</p><p><strong>编译防火墙</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909091044631.png" alt="image-20210909091044631"></p><h1 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance_继承"></a>Inheritance_继承</h1><p>is a</p><p><strong>构造由内而外——</strong>包饺子</p><p><strong>析构由内而外</strong>——剥桔子</p><p>继承——子类会有父类的part</p><p><strong>主要搭配virtual用</strong></p><h1 id="Inheritance-with-virtual-functions"><a href="#Inheritance-with-virtual-functions" class="headerlink" title="Inheritance with virtual functions"></a>Inheritance with virtual functions</h1><p>在成员函数前+virtual。</p><p>数据和函数都可以被继承下来，只不过函数继承的是调用权。</p><p><strong>成员函数分为三种</strong>：</p><ol><li>non-virtual 函数:你不希望子类(dericed class) 重新定义(override覆写——之能用在虚函数被重新定义)</li><li>virtual函数:你希望被dericed class override,并且它已有默认定义。</li><li>pure virtual函数:你希望dericed class<strong>一定</strong>要override,且它没有默认定义</li></ol><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909094754866.png" alt="image-20210909094754866"></p><p>子类对象可以调用父类函数</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909122137728.png" alt="image-20210909122137728"></p><p>(例如MFC框架)</p><p><strong>只有应用程序本身知道如何读取自己的文件(格式)</strong></p><h1 id="Inheritance-Composition下的构造和析构"><a href="#Inheritance-Composition下的构造和析构" class="headerlink" title="Inheritance + Composition下的构造和析构"></a>Inheritance + Composition下的构造和析构</h1><p><strong>当一个类继承了另一个类，并且又复合了一个类，那么他们的构造函数和析构函数的调用顺序是什么样的呢？</strong></p><p>test.h</p><p><strong>这里面的Person3继承了Person1,复合了Person2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person1(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person2(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span>:</span>Person1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person3(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person3()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">Person2 p2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !Test</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person3 testTemp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909124703540.png" alt="image-20210909124703540"></p><p><strong>如果一个类继承了一个父类，并且这个父类中复合了一个类呢，那么他的构造函数和析构函数的调用顺序是如何的呢？</strong></p><p>这里的Person1继承了Person3,Person3复合了Person2</p><p><strong>test.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">ifndef</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person2(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person3(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person3()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">Person2 p2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> :</span><span class="keyword">public</span> Person3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person1(<span class="keyword">int</span> r = <span class="number">0</span>) :m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !Test</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person1 tempTEST;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如图</strong>：</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909125648963.png" alt="image-20210909125648963"></p><h1 id="Delegation-Inheritance-委托-继承"><a href="#Delegation-Inheritance-委托-继承" class="headerlink" title="Delegation  +  Inheritance 委托+继承"></a>Delegation  +  Inheritance 委托+继承</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909130434009.png" alt="image-20210909130434009"></p><p>(面向对象问题——准备class来解决问题)</p><p><strong>Composite</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909132300696.png" alt="image-20210909132300696"></p><p><strong>Prototype</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909152011127.png" alt="image-20210909152011127"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【网络编程】异步选择模型</title>
      <link href="2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%BC%82%E6%AD%A5%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%BC%82%E6%AD%A5%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="异步选择模型"><a href="#异步选择模型" class="headerlink" title="异步选择模型"></a>异步选择模型</h1><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p><strong>核心</strong>:消息队列，操作系统为每个窗口创建一个消息队列，并且维护，我们想要使用消息队列，那就要创建一个窗口。</p><p><strong>第一步</strong>：将我们的socket，绑定在一个消息上，并且投递给操作系统。</p><p><strong>WSAAsyncSelect</strong></p><p><strong>第二步</strong>：取消息分类处理，</p><p>该模型只能用于windows,windows处理用户操作的核心就是消息队列。但是思想是通用的。</p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p><strong>第一步</strong>：创建窗口结构体——WNDCLASSEX</p><p><strong>第二步</strong>：注册窗口结构体——RegisterClassEx</p><p><strong>第三步</strong>：创建窗口——CreateWindowEx</p><p><strong>第四步</strong>：显示窗口——ShowWindow</p><p><strong>第五步</strong>：消息循环——GetMessage</p><p>​                            ——TranslateMessage</p><p>​                            ——DispatchMessage</p><p><strong>第六步</strong>：回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;//窗口</span></span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建窗口结构体</span></span><br><span class="line">WNDCLASSEX wc;</span><br><span class="line">wc.cbClsExtra = <span class="number">0</span>;<span class="comment">//窗口结构体额外的一块空间,一般用不到</span></span><br><span class="line">wc.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">wc.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wc.hbrBackground = <span class="literal">NULL</span>;</span><br><span class="line">wc.hCursor = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIcon = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIconSm = <span class="literal">NULL</span>;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line"></span><br><span class="line">wc.lpfnWndProc = WinBackProc;</span><br><span class="line"></span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;mYwinDows&quot;</span>;</span><br><span class="line">wc.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wc.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口结构体</span></span><br><span class="line">RegisterClassEx(&amp;wc);<span class="comment">//窗口类变量地址</span></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="comment">//窗口句柄</span></span><br><span class="line">HWND hwnd = CreateWindowEx(WS_EX_OVERLAPPEDWINDOW, <span class="string">L&quot;mYwinDows&quot;</span>, <span class="string">L&quot;WuHu&quot;</span>, WS_OVERLAPPEDWINDOW, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hwnd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新窗口</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环！-窗口上的任何操作都会产生消息，然后被装进消息队列中。</span></span><br><span class="line"><span class="comment">//只要窗口在，就得不停的在窗口上取消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息结构体——装消息</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))<span class="comment">//点击关闭窗口，GetMessage会返回0，循环退出,两个范围填0——接收所有消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//翻译消息</span></span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line"><span class="comment">//分发消息，到具体位置分类处理</span></span><br><span class="line">DispatchMessageW(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (msgID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, msgID, wparaw, lparam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网络库 头文件 </span><br><span class="line">打开网络库</span><br><span class="line">校验版本</span><br><span class="line">创建SOCKET</span><br><span class="line">绑定地址与端口</span><br><span class="line">开始监听</span><br><span class="line"></span><br><span class="line">异步选择</span><br></pre></td></tr></table></figure><h3 id="异步选择"><a href="#异步选择" class="headerlink" title="异步选择"></a>异步选择</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAAsyncSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">  HWND   hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">  u_int  wMsg,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">long</span>   lEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketServer, hwnd, UM_ASYNCSELECTMSG, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"> closesocket(socketServer);</span><br><span class="line"> WSACleanup();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>绑定事件与socket并且投递出去。</p><h3 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h3><p>服务器socket</p><h3 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h3><p>窗口句柄，绑定到哪个窗口上。</p><p>本质：就是窗口的ID,编号。</p><h3 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h3><p>消息编号，自定义消息。</p><p>本质：就是一个数。</p><h3 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h3><p>消息类型。跟WSASelectEvent一模一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FD_ACCEPT</span><br><span class="line">    有客户端连接，与服务器socket绑定</span><br><span class="line">FD_WRITE</span><br><span class="line">    可以给客户端发信，与客户端socket绑定，会在accept后立即主动产生该信号，可以说明，客户端连接成功，即可随时send</span><br><span class="line">FD_READ</span><br><span class="line">    有客户端发来消息，与客户端socket绑定，可多个属性并列 用 | </span><br><span class="line">FD_CLOSE</span><br><span class="line">    客户端下线了，与客户端socket绑定，包含强制下线，正常下线。</span><br><span class="line">FD_CONNECT</span><br><span class="line">    客户端一方，给服务器绑定这个</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    取消事件监视</span><br><span class="line">    WSAAsyncSelect（.....FD_ACCEPT | FD_READ）;投递多个消息用按位或</span><br><span class="line">    WSAAsyncSelect（...<span class="number">.0</span>,<span class="number">0</span>）;取消消息托管</span><br><span class="line">FD_OOB</span><br><span class="line">   带外数据,一般不使用</span><br><span class="line">FD_QOS  </span><br><span class="line">    套接字服务质量状态发生变化消息通知</span><br><span class="line">    WSAIoctl，得到服务质量信息</span><br><span class="line">     <span class="keyword">char</span> strOut[<span class="number">2048</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD nLen = <span class="number">2048</span>;</span><br><span class="line">WSAIoctl(socketServer, SIO_QOS, <span class="number">0</span>, <span class="number">0</span>, strOut, nLen, &amp;nLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>);   </span><br><span class="line">FD_GROUP_QOS</span><br><span class="line">    windows保留 </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重叠I/O模型中</span><br><span class="line">FD_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">    想要接收指定目标的路由接口更改通知。</span><br><span class="line">    数据到达对方的所经过的线路改变了，由于是动态优化选择</span><br><span class="line">    要通过此函数WSAIoctl注册之后，才可以</span><br><span class="line">    SIO_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">FD_ADDRESS_ LIST_CHANGE</span><br><span class="line">    想要接收套接字地址族的本地地址列表更改通知。</span><br><span class="line">    要通过此函数WSAIoctl注册之后，才可以有效</span><br><span class="line">    服务器链接了很多客户端，服务器就记录着所有的客户端的地址信 息，就相当于一个列表，发生变化，会得到相关的信号。</span><br><span class="line">    SIO_ADDRESS_ LIST_CHANGE</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UM_ASYNCSELECTMSG WM_USER+1<span class="comment">//这个数以上的数系统还没有使用，这样不会引起冲突</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include&lt;windows.h&gt;//窗口</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SOCKET数组——用于释放</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SOCK_COUNT 1024</span></span><br><span class="line">SOCKET g_sockall[MAX_SOCK_COUNT];</span><br><span class="line"><span class="comment">//记住socket个数</span></span><br><span class="line"><span class="keyword">int</span> g_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建窗口结构体</span></span><br><span class="line">WNDCLASSEX wc;</span><br><span class="line">wc.cbClsExtra = <span class="number">0</span>;<span class="comment">//窗口结构体额外的一块空间,一般用不到</span></span><br><span class="line">wc.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">wc.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wc.hbrBackground = <span class="literal">NULL</span>;</span><br><span class="line">wc.hCursor = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIcon = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIconSm = <span class="literal">NULL</span>;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line"></span><br><span class="line">wc.lpfnWndProc = WinBackProc;</span><br><span class="line"></span><br><span class="line">wc.lpszClassName = <span class="string">&quot;mYwinDows&quot;</span>;</span><br><span class="line">wc.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wc.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口结构体</span></span><br><span class="line">RegisterClassEx(&amp;wc);<span class="comment">//窗口类变量地址</span></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="comment">//窗口句柄</span></span><br><span class="line">HWND hwnd = CreateWindowEx(WS_EX_OVERLAPPEDWINDOW, <span class="string">&quot;mYwinDows&quot;</span>, <span class="string">&quot;WuHu&quot;</span>, WS_OVERLAPPEDWINDOW, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hwnd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新窗口</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************************************************************</span></span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WSASYSNOTREADY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;重启下电脑试试，或者检查网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAVERNOTSUPPORTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请更新网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEINPROGRESS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新启动&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEPROCLIM:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请尝试关掉不必要的软件，以为当前网络运行提供充足资源&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (socketServer == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">si</span>;</span></span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketServer, hwnd, UM_ASYNCSELECTMSG, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"> closesocket(socketServer);</span><br><span class="line"> WSACleanup();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_sockall[g_count] = socketServer;</span><br><span class="line">g_count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环！-窗口上的任何操作都会产生消息，然后被装进消息队列中。</span></span><br><span class="line"><span class="comment">//只要窗口在，就得不停的在窗口上取消息</span></span><br><span class="line"><span class="comment">//消息结构体——装消息</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))<span class="comment">//点击关闭窗口，GetMessage会返回0，循环退出,两个范围填0——接收所有消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//翻译消息</span></span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line"><span class="comment">//分发消息，到具体位置分类处理</span></span><br><span class="line">DispatchMessageW(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(g_sockall[i]);</span><br><span class="line">&#125;</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;<span class="comment">//x坐标是左侧竖着的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="comment">//一次取一个</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HDC hdc = GetDC(hwnd);</span><br><span class="line"><span class="comment">//分类处理</span></span><br><span class="line"><span class="keyword">switch</span> (msgID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> UM_ASYNCSELECTMSG:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//MessageBox(NULL,L&quot;有信号啦&quot;,L&quot;提示&quot;,MB_OK);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取socket</span></span><br><span class="line">SOCKET sock = (SOCKET)wparaw;</span><br><span class="line"><span class="comment">//获取消息</span></span><br><span class="line"><span class="keyword">if</span> (HIWORD(lparam) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (WSAECONNABORTED == HIWORD(lparam))</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;close&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;close&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="comment">//关闭socket上的消息</span></span><br><span class="line">WSAAsyncSelect(sock, hwnd, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//后两个参数置零就是把这个socket上的消息取消了。</span></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line">closesocket(sock);</span><br><span class="line"><span class="comment">//记录数组中删除该socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sock == g_sockall[i])</span><br><span class="line">&#123;</span><br><span class="line">g_sockall[i] = g_sockall[g_count - <span class="number">1</span>];</span><br><span class="line">g_count--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体消息</span></span><br><span class="line"><span class="keyword">switch</span> (LOWORD(lparam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FD_ACCEPT:</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc,<span class="number">0</span>, x, <span class="string">&quot;accept&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;accept&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line">SOCKET socketClient = accept(sock, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//如果是一个无效的SOCKET</span></span><br><span class="line"><span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将客户端投递给消息队列</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketClient, hwnd, UM_ASYNCSELECTMSG, FD_READ | FD_WRITE | FD_CLOSE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketClient);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录</span></span><br><span class="line">g_sockall[g_count] = socketClient;</span><br><span class="line">g_count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_READ:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//走read,肯定传过来的是客户端的socket</span></span><br><span class="line"></span><br><span class="line"> TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;read&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;read&quot;</span>));</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == recv(sock, str, <span class="number">1023</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">TextOut(hdc, <span class="number">60</span>, x, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_WRITE:</span><br><span class="line"><span class="comment">//当客户端成功连接上服务器后，他会先后产生两个消息，</span></span><br><span class="line">                <span class="comment">//accept和write,同事件选择模型</span></span><br><span class="line"><span class="comment">//与选择模型逻辑相同，事件选择模型基于事件，异步选择模型基于消息队列</span></span><br><span class="line"><span class="comment">//队列是有序的，理论起来操作更方便一些。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//send也可以写在accept中，以做提示</span></span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;write&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;write&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_CLOSE:</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;close&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;close&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="comment">//关闭socket上的消息</span></span><br><span class="line">WSAAsyncSelect(sock, hwnd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//后两个参数置零就是把这个socket上的消息取消了。</span></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line">closesocket(sock);</span><br><span class="line"><span class="comment">//记录数组中删除该socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sock == g_sockall[i])</span><br><span class="line">&#123;</span><br><span class="line">g_sockall[i] = g_sockall[g_count - <span class="number">1</span>];</span><br><span class="line">g_count--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:<span class="comment">//初始化-只执行一次</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReleaseDC(hwnd,hdc);</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, msgID, wparaw, lparam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">客户端socket</span><br><span class="line">    (SOCKET)wParam</span><br><span class="line">产生的错误码</span><br><span class="line">    HIWORD(lParam)</span><br><span class="line">具体的消息种类</span><br><span class="line">    LOWORD(lParam)</span><br><span class="line">窗口上打印数据</span><br><span class="line">    textout</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>每个窗口维护一定的消息，然后创建多线程，每个线程一个窗口，每个窗口投递一定数量的客户端。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在一次处理过程中，客户端产生多次send，服务器会产生多次接收消息，第一次接收消息会收完所有信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事件选择模型和异步选择模型是解决select模型中select()同步阻塞的问题的。</p><p>重叠I/O模型和完成端口模型将recv(send)操作变成异步的 ，从而这个网络模型没有阻塞。全都顺利执行下来，且执行效率非常高。</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络编程】事件选择模型</title>
      <link href="2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E4%BA%8B%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E4%BA%8B%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="事件选择模型"><a href="#事件选择模型" class="headerlink" title="事件选择模型"></a>事件选择模型</h1><h2 id="windows处理用户行为的两种方式"><a href="#windows处理用户行为的两种方式" class="headerlink" title="windows处理用户行为的两种方式"></a>windows处理用户行为的两种方式</h2><h3 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h3><p><strong>核心</strong>：消息队列</p><p><strong>处理过程</strong>：所有的用户操作，比如点鼠标，按键盘，对软件进行的各种操作……等等，所有操作均依次按顺序被记录，装进一个队列。不同的操作对应着不同的编号。</p><p><strong>特点</strong>：消息队列由操作系统维护，用户进行操作，然后把消息读取出来，分类处理。<strong>有先后顺序</strong>。动态的。</p><p><strong>异步选择模型就是基于这个消息的</strong>。</p><h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3><p><strong>核心</strong>：事件集合</p><p><strong>处理过程</strong>:根据需求我们为用户的特定操作绑定一个事件，事件由我们自己调用API创建，需要多少创建多少。</p><p>将时间投递给系统，系统就帮我们监视着，所以不能无限创建，太多了系统运行就卡了。</p><p>如果操作发生了，比如用户按鼠标了，那么对应的事件就会被置成有信号，也就是类似1变2，用个数来标记。</p><p>直接获取到有信号的时间进行处理。 </p><p><strong>特点</strong>：所有时间都是咱们自己定义的，系统只是帮咱们标记有无信号。<strong>无序</strong>。</p><p><strong>事件选择模型</strong>，就是应用这个。</p><h2 id="事件选择"><a href="#事件选择" class="headerlink" title="事件选择"></a>事件选择</h2><p>整体类似于select</p><ol><li><p>创建一个事件对象(变量)，<strong>WSACreateEvent</strong></p></li><li><p>为每一个事件对象绑定socket以及操作accept,read,close…..</p><p>投递给系统让其监管，<strong>WSAEventSelect</strong></p></li><li><p>查看事件是否有信号，<strong>WSAWaitForMultipleEvents</strong></p></li><li><p>有信号就分类处理，<strong>WSAEnumNetworkEvents</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网路头文件 网络库</span><br><span class="line">打开网络库</span><br><span class="line">    校验版本</span><br><span class="line">    创建SOCKET</span><br><span class="line">    绑定地址与端口</span><br><span class="line">    开始监听 </span><br><span class="line">    </span><br><span class="line">    事件选择</span><br></pre></td></tr></table></figure><h3 id="创建一个事件对象"><a href="#创建一个事件对象" class="headerlink" title="创建一个事件对象"></a>创建一个事件对象</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WSAEVENT WSAAPI <span class="title">WSACreateEvent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSAEVENT eventServer = WSACreateEvent();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">成功-返回一个事件</span><br><span class="line">失败-返回WSA_INVALID_EVENT(无效的事件对象) </span><br><span class="line">    <span class="keyword">if</span> (eventServer == WSA_INVALID_EVENT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是定义了一个事件类型。</p><p>HANDLE(void *通用类型指针),句柄，句柄的本质是ID,内核对象，唯一的标识符。</p><p><strong>内核对象</strong>：<strong>内核对象是系统提供的用户模式下代码与内核模式下代码进行交互的基本接口(百度百科)。</strong></p><p><strong>当调用一个用于创建内核对象的函数时，该函数就返回一个用于标识该对象的**</strong><a href="https://baike.baidu.com/item/%E5%8F%A5%E6%9F%84">句柄</a>**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">内核对象</span><br><span class="line">    由系统在内核申请</span><br><span class="line">    由操作系统访问</span><br><span class="line">    我们不能定位其内容，也不能修改 </span><br><span class="line">    <span class="keyword">void</span>* 通用类型指针</span><br><span class="line">    对内核的保护，对规则的保护，从而使操作系统有序的平稳的，</span><br><span class="line">    有效的运行，而不会随便出问题</span><br><span class="line">    调用函数创建，调用函数释放</span><br><span class="line">    如果我们没有调用释放，那么他可能就一直存在于内核，</span><br><span class="line">    造成内核内存泄漏， 这种只能重启电脑</span><br><span class="line">    内核对象有哪些 socket Kernel Objects</span><br></pre></td></tr></table></figure><h3 id="关闭-释放事件句柄"><a href="#关闭-释放事件句柄" class="headerlink" title="关闭/释放事件句柄"></a>关闭/释放事件句柄</h3><p>不用就要释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSACloseEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSACloseEvent(eventServer);</span><br></pre></td></tr></table></figure><h3 id="指定事件主动置成无信号的"><a href="#指定事件主动置成无信号的" class="headerlink" title="指定事件主动置成无信号的"></a>指定事件主动置成无信号的</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSAResetEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="指定事件主动置成有信号的"><a href="#指定事件主动置成有信号的" class="headerlink" title="指定事件主动置成有信号的"></a>指定事件主动置成有信号的</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSASetEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="绑定并投递"><a href="#绑定并投递" class="headerlink" title="绑定并投递"></a>绑定并投递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">WSAEventSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">WSAEVENT hEventObject,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> INetworkEvents</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>给事件绑上socket与操作码，并投递给操作系统。</p><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><p>被绑定的socket，最终每个socket都会被绑定一个事件</p><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><p>事件对象，逻辑，就是将参数1和参数2绑定在一起</p><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p>具体事件</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FD_ACCEPT</span><br><span class="line">    有客户端链接，与服务器socket绑定</span><br><span class="line">FD_READ</span><br><span class="line">    有客户端发来消息，与客户端socket绑定，可多个属性并列使用。</span><br><span class="line">FD_CLOSE</span><br><span class="line">    客户端下线，与客户端绑定，包含强制下线</span><br><span class="line">FD_WRITE</span><br><span class="line">    可以给客户端发信，与客户端socket绑定，会在accept之后立即主动产生该信号。可以说明，客户端连接成功。即可随时send</span><br><span class="line">FD_CONNECT</span><br><span class="line">    用在客户端上，给服务器绑定这个。</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    取消事件绑定。</span><br><span class="line">FD_OOB </span><br><span class="line">    带外数据，一般不使用。</span><br><span class="line">FD_QOS </span><br><span class="line">   套接字服务质量状态发生变化。动态变化。</span><br><span class="line">FD_GROUP_QOS</span><br><span class="line">    保留——还没有对其赋值具体意义。    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重叠I/O模型中</span><br><span class="line">    FD_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">    </span><br><span class="line">  FD_ADDRESS_ LIST_CHANGE</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br><span class="line"> <span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketServer, SetEvent, FD_ACCEPT);)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放事件句柄</span></span><br><span class="line">WSACloseEvent(eventServer);</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="询问事件"><a href="#询问事件" class="headerlink" title="询问事件"></a>询问事件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WSAAPI <span class="title">WSAWaitForMultipleEvents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD          cEvents,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> WSAEVENT *lphEvents,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL           fWaitAll,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD          dwTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL           fAlertable</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>获取发生信号的事件。</p><h4 id="参数1-1"><a href="#参数1-1" class="headerlink" title="参数1"></a>参数1</h4><p>事件个数，定义事件列表(数组)个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大<span class="number">64</span>  WSA_MAXIMUM_WAIT_EVENTS</span><br></pre></td></tr></table></figure><p>可以变大，不像select模型，直接就能变大，因为select模型本身就是个数组，直接遍历即可， 比较直接，而事件选择是按照异步来投放，由系统进行管理，咱们就不能随便修改了，要按照规则来。</p><h4 id="参数2-1"><a href="#参数2-1" class="headerlink" title="参数2"></a>参数2</h4><p>事件列表。</p><h4 id="参数3-1"><a href="#参数3-1" class="headerlink" title="参数3"></a>参数3</h4><p>事件等待方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br><span class="line">    所有事件都产生信号，才返回。</span><br><span class="line">FALSE</span><br><span class="line">    任何一个事件产生信号，立即返回。</span><br><span class="line">   返回值减去WSA_WAIT_EVENT_0表示事件对象的索引，其状态导致函数返回。</span><br><span class="line">     如果在调用期间发出多个事件对象的信号，则这是信号事件对象的数组索引，其中所有信号事件对象的索引值最小。</span><br></pre></td></tr></table></figure><h4 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h4><p>超时间隔，以毫秒为单位。与select参数5意义相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> 等待<span class="number">123</span>秒，超时返回WSA_WAIT_TIMEOUT</span><br><span class="line"><span class="number">0</span>检查事件对象的状态并立即返回。不管有没有信号 </span><br><span class="line">WSA_INFINITE 等待，直到事件发生。</span><br></pre></td></tr></table></figure><h4 id="参数5"><a href="#参数5" class="headerlink" title="参数5"></a>参数5</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TRUE 重叠I/O模型使用</span><br><span class="line">FALSE </span><br></pre></td></tr></table></figure><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">数组下标的运算值，参数<span class="number">3</span>为TRUE 所有时间均有信号</span><br><span class="line">参数<span class="number">3</span>位FALSE 返回值减去WSA_WAIT_EVENT_0==数组中事件的下标</span><br><span class="line">WSA_WAIT_IO_COMPLETION 参数<span class="number">5</span>为TRUE，才会返回这个值WSA_WAIT_TIMEOUT 超时了,<span class="keyword">continue</span>即可。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//询问</span></span><br><span class="line">DWORD nRes = WSAWaitForMultipleEvents(esSet.count, esSet.eventall, FALSE,WSA_INFINITE, FALSE);</span><br><span class="line"><span class="keyword">if</span> (nRes == WSA_WAIT_FAILED)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码%d\n&quot;</span>, WSAGetLastError());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//超时使用</span></span><br><span class="line"><span class="comment">/*if (WSA_WAIT_TIMEOUT == nRes)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD nIndex = nRes - WSA_WAIT_EVENT_0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列举事件"><a href="#列举事件" class="headerlink" title="列举事件"></a>列举事件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">WSAEnumNetworkEvents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET             s,</span></span></span><br><span class="line"><span class="function"><span class="params">  WSAEVENT           hEventObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPWSANETWORKEVENTS lpNetworkEvents</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>获取事件类型，并将事件上的信号重置，accept,recv,close等</p><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSANETWORKEVENTS NetworkEvents;</span><br><span class="line"><span class="keyword">if</span>(SOCKET_ERROR==WSAEnumNetworkEvents(esSet.sockall[nIndex], esSet.eventall[nIndex], &amp;NetworkEvents))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数1-2"><a href="#参数1-2" class="headerlink" title="参数1"></a>参数1</h4><p>对应的socket</p><h4 id="参数2-2"><a href="#参数2-2" class="headerlink" title="参数2"></a>参数2</h4><p>对应的事件</p><h4 id="参数3-2"><a href="#参数3-2" class="headerlink" title="参数3"></a>参数3</h4><p>触发的事件类型在这里装着。是一个结构体指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">WSANETWORKEVENTS</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">  <span class="keyword">long</span> lNetworkEvents;</span><br><span class="line">    <span class="comment">//具体操作，一个信号可能包含两个信息，以按位或的形式存在</span></span><br><span class="line">  <span class="keyword">int</span>  iErrorCode[FD_MAX_EVENTS];</span><br><span class="line">    <span class="comment">//错误码数组，FD_ACCEPT事件错误码在FD_ACCEPT_BIT下标里</span></span><br><span class="line">    <span class="comment">//没有错误，对应的就是0</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br></pre></td></tr></table></figure><h3 id="事件分类处理逻辑"><a href="#事件分类处理逻辑" class="headerlink" title="事件分类处理逻辑"></a>事件分类处理逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lpNetworkEvents-&gt;lNetworkEvents &amp; FD_ACCEPT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (lpNetworkEvents-&gt;iErrorCode[FD_ACCEPT_BIT] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接受链接</span></span><br><span class="line">       <span class="comment">//创建事件</span></span><br><span class="line">       <span class="comment">//投放事件</span></span><br><span class="line">       <span class="comment">//元素增加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>不行有大bug</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> 不太行，有小bug</span><br></pre></td></tr></table></figure><h2 id="有序处理"><a href="#有序处理" class="headerlink" title="有序处理"></a>有序处理</h2><p>优化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = Index; i &lt; EventTotal; i++)</span><br><span class="line"> &#123;</span><br><span class="line">        Index = WSAWaitForMultipleEvents(<span class="number">1</span>, &amp;EventArray[i], TRUE, <span class="number">1000</span>, FALSE);</span><br><span class="line">        <span class="keyword">if</span> ((Index != WSA_WAIT_FAILED) &amp;&amp; (Index != WSA_WAIT_TIMEOUT)) </span><br><span class="line">        &#123;</span><br><span class="line">            WSAEnumNetworkEvents(SocketArray[i], EventArray[i], &amp;NetworkEvents);</span><br><span class="line">            <span class="comment">//分类处理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加事件数量"><a href="#增加事件数量" class="headerlink" title="增加事件数量"></a>增加事件数量</h2><p>当前代码是一组一组投递，一组是64个，由WSAWaitForMultipleEvents这个函数决定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加事件数量————一个一个投，一个大数组就行了，</span><br><span class="line">       ————一组一组投，单线程，一组一组顺序处理就好了。</span><br><span class="line">    创建多线程，每个线程处理一个事件表，最大是<span class="number">64</span></span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">//#define FD_SETSIZE 128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd_es_set</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> count;</span><br><span class="line">SOCKET sockall[WSA_MAXIMUM_WAIT_EVENTS];</span><br><span class="line">WSAEVENT evnetall[WSA_MAXIMUM_WAIT_EVENTS];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd_es_set</span> <span class="title">esSet</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">fun</span><span class="params">(DWORD dwCtrlType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwCtrlType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CTRL_CLOSE_EVENT:</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; esSet.count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(esSet.sockall[i]);</span><br><span class="line">WSACloseEvent(esSet.evnetall[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SetConsoleCtrlHandler(fun, TRUE);</span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">//2.1  //22</span></span><br><span class="line"><span class="comment">//int a = *((char*)&amp;wdVersion);</span></span><br><span class="line"><span class="comment">//int b = *((char*)&amp;wdVersion+1);</span></span><br><span class="line">WSADATA wdScokMsg;</span><br><span class="line"><span class="comment">//LPWSADATA lpw = malloc(sizeof(WSADATA));// WSADATA*</span></span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdScokMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WSASYSNOTREADY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;重启下电脑试试，或者检查网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAVERNOTSUPPORTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请更新网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEINPROGRESS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新启动&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEPROCLIM:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请尝试关掉不必要的软件，以为当前网络运行提供充足资源&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> != HIBYTE(wdScokMsg.wVersion) || <span class="number">2</span> != LOBYTE(wdScokMsg.wVersion))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">//int a = WSAGetLastError();</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">si</span>;</span></span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//int a = ~0;</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件</span></span><br><span class="line">WSAEVENT eventServer = WSACreateEvent();</span><br><span class="line"><span class="keyword">if</span> (WSA_INVALID_EVENT == eventServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketServer, eventServer, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放事件句柄</span></span><br><span class="line">WSACloseEvent(eventServer);</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装进去</span></span><br><span class="line">esSet.evnetall[esSet.count] = eventServer;</span><br><span class="line">esSet.sockall[esSet.count] = socketServer;</span><br><span class="line">esSet.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//询问</span></span><br><span class="line">DWORD nRes = WSAWaitForMultipleEvents(esSet.count, esSet.evnetall, FALSE, WSA_INFINITE, FALSE);</span><br><span class="line"><span class="keyword">if</span> (WSA_WAIT_FAILED == nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码：%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超时使用</span></span><br><span class="line"><span class="comment">//if (WSA_WAIT_TIMEOUT == nRes)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">DWORD nIndex = nRes - WSA_WAIT_EVENT_0;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到下标对应的具体操作</span></span><br><span class="line">WSANETWORKEVENTS NetworkEvents;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEnumNetworkEvents(esSet.sockall[nIndex], esSet.evnetall[nIndex], &amp;NetworkEvents))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码：%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_ACCEPT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_ACCEPT_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正常处理</span></span><br><span class="line">SOCKET socketClient = accept(esSet.sockall[nIndex], <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketClient)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象</span></span><br><span class="line">WSAEVENT wsaClientEvent = WSACreateEvent();</span><br><span class="line"><span class="keyword">if</span> (WSA_INVALID_EVENT == wsaClientEvent)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketClient);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//投递给系统</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketClient, wsaClientEvent, FD_READ | FD_CLOSE | FD_WRITE))</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACloseEvent(wsaClientEvent);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装进结构体</span></span><br><span class="line">esSet.sockall[esSet.count] = socketClient;</span><br><span class="line">esSet.evnetall[esSet.count] = wsaClientEvent;</span><br><span class="line">esSet.count++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept event\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_WRITE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_WRITE_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == send(esSet.sockall[nIndex], <span class="string">&quot;connect success&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;connect success&quot;</span>), <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send faild, error code:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write event\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error code:%d\n&quot;</span>, NetworkEvents.iErrorCode[FD_WRITE_BIT]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_READ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_READ_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> strRecv[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == recv(esSet.sockall[nIndex], strRecv, <span class="number">1499</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv faild, error code:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv data: %s\n&quot;</span>, strRecv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error code:%d\n&quot;</span>, NetworkEvents.iErrorCode[FD_READ_BIT]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_CLOSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (0 == NetworkEvents.iErrorCode[FD_CLOSE_BIT])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">WSAECONNABORTED;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client close\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client force out: %d\n&quot;</span>, NetworkEvents.iErrorCode[FD_CLOSE_BIT]);</span><br><span class="line"><span class="comment">//清理下线的客户端 套接字  事件</span></span><br><span class="line"><span class="comment">//套接字</span></span><br><span class="line">closesocket(esSet.sockall[nIndex]);</span><br><span class="line">esSet.sockall[nIndex] = esSet.sockall[esSet.count - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line">WSACloseEvent(esSet.evnetall[nIndex]);</span><br><span class="line">esSet.evnetall[nIndex] = esSet.evnetall[esSet.count - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数量减一</span></span><br><span class="line">esSet.count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; esSet.count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(esSet.sockall[i]);</span><br><span class="line">WSACloseEvent(esSet.evnetall[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比select模型"><a href="#对比select模型" class="headerlink" title="对比select模型"></a>对比select模型</h2><p>事件选择模型——异步</p><p>select模型——同步</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络编程】select模型</title>
      <link href="2021/08/28/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91select%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/08/28/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91select%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="select模型"><a href="#select模型" class="headerlink" title="select模型"></a>select模型</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>解决基本c/s模型中，accept，rcev傻等的问题。</p><ul><li>傻等阻塞</li><li>执行阻塞 send recv accept 在执行的复制粘贴的过程中都是阻塞的。</li></ul><p>(网络模型就是解决阻塞问题的)</p></li><li><p>实现多个客户端链接，与多个客户端分别通信。</p></li><li><p>用于服务器，因为客户端就一个socket。</p></li></ol><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网络头文件 网络库</span><br><span class="line">打开网络库</span><br><span class="line">校验版本</span><br><span class="line">创建socket</span><br><span class="line">绑定地址与端口</span><br><span class="line">开始监听</span><br><span class="line"> </span><br><span class="line">select    </span><br></pre></td></tr></table></figure><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><ol><li>每个客户端都有socket,服务器也有自己的socket,将所有的socket装进一个数据结构里，即数组。</li><li>通过select函数，遍历1中的socket数组，当某个socket有相应，select就会通过其参数/返回值反馈出来。</li><li>处理。如果见得到的是服务器socket，那就有客户端链接，调用accept。如果检测到客户端socket,那就是客户端请求通信，调用send或者recv。</li></ol><h3 id="定义一个装客户端的socket结构体"><a href="#定义一个装客户端的socket结构体" class="headerlink" title="定义一个装客户端的socket结构体"></a>定义一个装客户端的socket结构体</h3><h4 id="fd-set"><a href="#fd-set" class="headerlink" title="fd_set"></a>fd_set</h4><p>是网络库中定义好的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">fd_set</span> &#123;</span></span><br><span class="line">    <span class="comment">//几个有效的</span></span><br><span class="line">        u_int fd_count;               <span class="comment">/* how many are SET? */</span></span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">    SOCKET  fd_array[FD_SETSIZE];   <span class="comment">/* an array of SOCKETs */</span></span><br><span class="line">&#125; fd_set;</span><br><span class="line"></span><br><span class="line">默认FD_SERSIZE 是<span class="number">64</span>，重新宏定义要写在网络库前。</span><br><span class="line">尽量不要太大，大用户量应该用更高级的网络模型。</span><br><span class="line">select模型应用就是小用户量访问，几十几百，简单方便。</span><br><span class="line">    </span><br><span class="line">    fd_set socketClient;</span><br></pre></td></tr></table></figure><h4 id="四个参数宏"><a href="#四个参数宏" class="headerlink" title="四个参数宏"></a>四个参数宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FD_ZERO</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_ZERO(set) (((fd_set FAR *)(set))-&gt;fd_count=0)</span></span><br><span class="line">    将定义好的集合清零</span><br><span class="line">    </span><br><span class="line">    FD_ZERO(&amp;socketClient);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FD_SET </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_SET(fd, set) do &#123; \</span></span><br><span class="line">    u_int __i; \</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count; __i++) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] == (fd)) &#123; \</span><br><span class="line">            <span class="keyword">break</span>; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">    <span class="keyword">if</span> (__i == ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count &lt; FD_SETSIZE) &#123; \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] = (fd); \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count++; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">   向集合中添加socket  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FD_CLR</span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> FD_CLR(fd, set) do &#123; \</span></span><br><span class="line">    u_int __i; \</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count ; __i++) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] == fd) &#123; \</span><br><span class="line">            <span class="keyword">while</span> (__i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count<span class="number">-1</span>) &#123; \</span><br><span class="line">                ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] = \</span><br><span class="line">                    ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i+<span class="number">1</span>]; \</span><br><span class="line">                __i++; \</span><br><span class="line">            &#125; \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count--; \</span><br><span class="line">            <span class="keyword">break</span>; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    从集合中删除某个元素，要手动释放，closesocket(socketServer)</span><br><span class="line">    同链表删除。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FD_ISSET</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_ISSET(fd, set) __WSAFDIsSet((SOCKET)(fd), (fd_set FAR *)(set))</span></span><br><span class="line">    判断集合中是否有某个元素</span><br><span class="line">    有-返回非<span class="number">0</span></span><br><span class="line">    没有-返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">select</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> nfds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *readfds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *exceptfds,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>监视socket集合，如果某个socket发生事件，(链接或者收发数据)，通过返回值以及参数告诉我们。</p><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><p>Ignored忽略，填0，仅为了兼容(向下兼容性)Berkeley sockets。</p><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><p>检查是否有<strong>可读</strong>的scoket。(是否有消息recv/accept/)</p><p>即客户端发来消息了，该socket就会被设置。</p><p>初始化所有的socket,通过select投放给系统，系统将有事件发生的socket再复制回来，调用后，这个参数就只剩下有请求的socket。</p><p>返回有响应的socket。用个中间变量接收。</p><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p>检查是否有<strong>可写</strong>的socket。</p><p>从头到尾遍历出来。</p><p>即，使可以给哪些客户端套接字发消息，即send,只要链接成功建立起来了，该客户端套接字就是可写的。</p><p>初始化所有的socket,通过select投放给系统，系统将可以写的socket在复制回来，调用后，这个参数就是装着可以被send数据的客户端socket。</p><h4 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h4><p>检查套接字上的异常错误，用法同参数23。将所有的socket投放进去。</p><p>得到异常套接字上的具体错误码。</p><p>getsockopt(socket,SOL_SOCKET,SO_ERROR,buf,buflen);</p><h4 id="参数5"><a href="#参数5" class="headerlink" title="参数5"></a>参数5</h4><p>最大等待时间，比如当客户端没有请求时，那么select函数可以等一会儿，一段时间过后，还没有，就继续执行select下面的语句，如果有了，就立刻执行下面的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TIMEVAL</span><br><span class="line">    tv_sec 秒</span><br><span class="line">    tv_usec 微秒</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span>非阻塞状态，立刻返回</span><br><span class="line">    <span class="number">3</span> <span class="number">4</span>那就再无客户端相应的情况下等待<span class="number">3</span>秒<span class="number">4</span>微秒</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">    select完全阻塞，知道客户端有反应，我才继续</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> 客户端在等待时间内没有反应  处理——<span class="keyword">continue</span>&gt;<span class="number">0</span> 有客户端请求交流了SOCKET_ERROR 发生了错误    得到错误码WSAGetLaseError()</span><br></pre></td></tr></table></figure><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket集合</span><br><span class="line">    socket判断有没有相应的</span><br><span class="line">    返回<span class="number">0</span>，没有，继续挑</span><br><span class="line">    返回&gt;<span class="number">0</span>，有相应</span><br><span class="line">    可读的accept</span><br><span class="line">      recv</span><br><span class="line">    可写的send</span><br><span class="line">    异常的getsockopt</span><br><span class="line">    SOCK_ERROR</span><br></pre></td></tr></table></figure><p>select是阻塞的。</p><p>不等待——执行阻塞</p><p>半等待——执行阻塞+软阻塞</p><p>全等待——执行阻塞+硬阻塞 死等</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>(仅熟悉流程)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//装所有的socket</span></span><br><span class="line">fd_set allSocket;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">fun</span><span class="params">(DWORD dwCtrlType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwCtrlType)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CTRL_CLOSE_EVENT:</span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; allSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(allSocket.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line">WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//投递一个监视</span></span><br><span class="line"><span class="comment">//关闭事件</span></span><br><span class="line"><span class="comment">//控制台点叉退出</span></span><br><span class="line">SetConsoleCtrlHandler(fun, TRUE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (socketServer == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建服务器socket失败&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绑定错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清零</span></span><br><span class="line">FD_ZERO(&amp;allSocket);</span><br><span class="line"><span class="comment">//把服务器装进去</span></span><br><span class="line">FD_SET(socketServer, &amp;allSocket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//可读</span></span><br><span class="line">fd_set readSocket = allSocket;</span><br><span class="line"><span class="comment">//可写</span></span><br><span class="line">fd_set writeSocket = allSocket;</span><br><span class="line">FD_CLR(socketServer, &amp;writeSocket);</span><br><span class="line">fd_set errorSocket = allSocket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间段</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">st</span>;</span></span><br><span class="line">st.tv_sec = <span class="number">3</span>;</span><br><span class="line">st.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//不用哪个哪个位置就写NULL</span></span><br><span class="line"><span class="keyword">int</span> nRes = select(<span class="number">0</span>, &amp;readSocket, &amp;writeSocket, &amp;errorSocket, &amp;st);</span><br><span class="line"><span class="keyword">if</span> (nRes == <span class="number">0</span>)<span class="comment">//没有响应的socket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nRes &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; errorSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == getsockopt(errorSocket.fd_array[i], SOL_SOCKET, SO_ERROR,str,&amp;len))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法得到错误信息\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(u_int i = <span class="number">0</span>;i&lt;writeSocket.fd_count;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;服务器%d %d:可写\n&quot;, socketServer, writeSocket.fd_array[i]);</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == send(writeSocket.fd_array[i], <span class="string">&quot;ok&quot;</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正常 大于0 socket_error 下线0</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有响应</span></span><br><span class="line"><span class="comment">//遍历socket</span></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; readSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (readSocket.fd_array[i] == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有链接(响应)-accept</span></span><br><span class="line">SOCKET socketClient = accept(socketServer, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (socketClient == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//链接出错</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">FD_SET(socketClient, &amp;allSocket);</span><br><span class="line"><span class="comment">//SEND</span></span><br><span class="line">send(readSocket.fd_array[i], <span class="string">&quot;服务器链接成功!&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;服务器链接成功&quot;</span>),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> strBuf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//客户端socket</span></span><br><span class="line"><span class="keyword">int</span> nRecv = recv(readSocket.fd_array[i], strBuf, <span class="number">1500</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (nRecv == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//客户端下线了</span></span><br><span class="line"><span class="comment">//从集合中去掉</span></span><br><span class="line">SOCKET socketTemp = readSocket.fd_array[i];</span><br><span class="line">FD_CLR(readSocket.fd_array[i],&amp;allSocket);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketTemp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nRecv &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收到了消息</span></span><br><span class="line"><span class="built_in">printf</span>(strBuf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//强制下线10054</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//出错了SOCK_ERROR</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10054</span>:</span><br><span class="line">&#123;</span><br><span class="line">SOCKET socketTemp = readSocket.fd_array[i];</span><br><span class="line">FD_CLR(readSocket.fd_array[i], &amp;allSocket);</span><br><span class="line">closesocket(socketTemp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//发生错误了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放socket集合</span></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; allSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(allSocket.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WSACleanup();<span class="comment">//正常关闭</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络编程】基于TCP/IP协议的C/S模型</title>
      <link href="2021/08/26/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%9F%BA%E4%BA%8ETCPIP%E5%8D%8F%E8%AE%AE%E7%9A%84CS%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/08/26/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%9F%BA%E4%BA%8ETCPIP%E5%8D%8F%E8%AE%AE%E7%9A%84CS%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>相关视频——<a href="https://www.bilibili.com/video/BV1cb411w7sZ">C3程序猿-windows网络编程：第一部分tcp/ip</a></p><h1 id="基于TCP-IP协议的C-S模型"><a href="#基于TCP-IP协议的C-S模型" class="headerlink" title="基于TCP/IP协议的C/S模型"></a>基于TCP/IP协议的C/S模型</h1><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p><strong>全称</strong>——Transmission Control Protocol / Internet Protocol</p><p><strong>重要性</strong>——TCP/IP协议是今天互联网的基石，没有这个就上不了网</p><p><strong>概念</strong>——TCP/IP协议族(簇，组，体系），并不是TCP协议和IP协议的总称，指的是整个网络传输体系。而TCP协议和IP协议就是单单的两个协议。</p><p><strong>特点</strong>——<strong>面向可连接的，可靠的，基于数据报的传输协议层</strong>。</p><hr><p>UDP/IP协议——面向非连接的，不可靠的，基于数据报的传输层协议。</p><hr><h2 id="Client-Server客户端-服务器模型"><a href="#Client-Server客户端-服务器模型" class="headerlink" title="Client/Server客户端/服务器模型"></a>Client/Server客户端/服务器模型</h2><p>C/S模型其实是概念层面的，实现层面可以是基于任何的网络协议。</p><p>常见的还有B/S模型——浏览器/服务器模型，基于http/https协议的</p><h2 id="套接字编程与socket编程"><a href="#套接字编程与socket编程" class="headerlink" title="套接字编程与socket编程"></a>套接字编程与socket编程</h2><p>socket中文——套接字</p><p>统称网络编程</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>局域网</li><li>广域网——内网穿透，内网转发</li></ul><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="网络头文件-amp-网络库"><a href="#网络头文件-amp-网络库" class="headerlink" title="网络头文件&amp;网络库"></a>网络头文件&amp;网络库</h3><p>是最底层的网络函数，QT、MFC、WPF等封装好的网络库都是对这些最本质的网络函数的二次封装。</p><p><strong>不区分大小写(windows)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="comment">//第二版的网络库，是一版的升级优化版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">//.lib静态库后缀，是库文件，将.cpp文件编译为二进制文件</span></span><br><span class="line"><span class="comment">//好处:使用时无需编译，直接使用，解决时间</span></span><br><span class="line"><span class="comment">//32位编译环境和64位编译环境都用这个，没有ws2_64</span></span><br></pre></td></tr></table></figure><h3 id="打开网络库"><a href="#打开网络库" class="headerlink" title="打开网络库"></a>打开网络库</h3><p><strong>功能</strong>：</p><p>打开网络库/启动网络库，启动了这个库，库里的函数才能使用，功能才能实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAStarp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">WORD wVersionRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">LPWSADATA lpWSAData</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;  </span><br></pre></td></tr></table></figure><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>-使用哪个版本的网络库-WORD-无符号<span class="keyword">short</span></span><br><span class="line">    WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//主版本号2存在低数据位，副版本号1存在高数据位</span></span><br></pre></td></tr></table></figure><hr><p>（<strong>参数前面有lp传地址</strong>）</p><hr><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">2</span>-创建一个结构体，传递给系统，系统将信息放到结构体中，函数调用之后在外面通过结构体查看系统传递给我们的信息。</span><br><span class="line">********************************************************************************</span><br><span class="line">    WSADATA wdSockMsg;</span><br><span class="line">********************************************************************************</span><br><span class="line">其中包括</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> &#123;</span></span><br><span class="line">        WORD                    wVersion;<span class="comment">//我们要使用的版本</span></span><br><span class="line">        WORD                    wHighVersion;<span class="comment">//系统能提供给我们的最高的版本</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span>          iMaxSockets;<span class="comment">//返回可用的socket数量，2版本之后就没用了</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span>          iMaxUdpDg;<span class="comment">//UDP数据报信息的大小，2版本之后就没用了</span></span><br><span class="line">        <span class="keyword">char</span> FAR *              lpVendorInfo;<span class="comment">//供应上特定的信息，2版本呢之后就没用 了</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];<span class="comment">//当前库的描述信息，2.0是第二版的意思</span></span><br><span class="line">        <span class="keyword">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">********************************************************************************</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">********************************************************************************</span><br><span class="line">WSAStartup(wdVersion,&amp;wdSockMsg);</span><br><span class="line">********************************************************************************</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当输入的版本不存在</span><br><span class="line">    例如:</span><br><span class="line">    <span class="number">1.3</span> <span class="number">2.3</span>——有主版本，没有副版本 得到主版本的的最大副版本 <span class="number">1.1</span> <span class="number">2.2</span>并使用</span><br><span class="line">    <span class="number">3.1</span> <span class="number">3.3</span>——超过最大版 本号，使用系统能提供的最大版本<span class="number">2.2</span></span><br><span class="line">    <span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.3</span>——主版本是<span class="number">0</span>，不支持请求的套接字版本</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><strong>每一种错误有它唯一的对应码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回值-成功返回<span class="number">0</span></span><br><span class="line"> -失败返回对应错误的宏</span><br><span class="line">    WSASYSNOTREADY   <span class="number">10091</span> </span><br><span class="line">    底层网络子系统尚未准备好进行网络通信。                      </span><br><span class="line">    系统配置问题，重启下电脑，检查ws2_32库是否存在，或者是否在环境配置目录下</span><br><span class="line">WSAVERNOTSUPPORTED <span class="number">10092</span> </span><br><span class="line"> 此特定Windows套接字实现不提供所请求的Windows套接字支持版本。      </span><br><span class="line">   要使用的版本不支持</span><br><span class="line">WSAEPROCLIM     <span class="number">10067</span>  </span><br><span class="line">    已达到对Windows套接字实现支持的任务数量的限制。                                 Windows Sockets实现可能限制同时使用它的应用程序的数量</span><br><span class="line">WSAEINPROGRESS <span class="number">10036</span>          </span><br><span class="line">   正在阻止Windows Sockets <span class="number">1.1</span>操作。                                                 当前函数运行期间，由于某些原因造成阻塞，会返回在这个错误码，其他操作均禁止</span><br><span class="line">WSAEFAULT       <span class="number">10014</span>          </span><br><span class="line">    lpWSAData参数不是有效指针。                                                                 参数写错了  </span><br></pre></td></tr></table></figure><h3 id="校验版本"><a href="#校验版本" class="headerlink" title="校验版本"></a>校验版本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span></span><br><span class="line">    HIBYTE是高位-副版本</span><br><span class="line">    LOBYTE是低位-主版本</span><br><span class="line">   例如:只要有一个不是<span class="number">2</span>，说明系统不支持我们要的<span class="number">2.2</span>版本</span><br><span class="line"></span><br><span class="line">       前面为主版本，后面为副版本</span><br><span class="line">       要打开<span class="number">2.1</span></span><br><span class="line">HIBYTE(wdSockMsg.wVersion) != <span class="number">1</span> &amp;&amp; LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span></span><br><span class="line">       </span><br><span class="line">       如果版本不对</span><br><span class="line">       WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> af,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> protocol</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOCKET socketServer = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);</span><br></pre></td></tr></table></figure><h4 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a><strong>什么是socket</strong></h4><p>将底层复杂的协议体系，执行流程，进行封装，封装完的结果，就是一个socket了。</p><p>也就是说，socket是我们调用协议进行通信的操作接口。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>将复杂的协议过程与编程人员分开，我们只需要操作一个简单那的SOCKET就行了，对于底层的协议过程细节，我们完全不用知道，这就大大的方便了我们。</p><p>网络编程难在协议本身的复杂性，简单在我们编程层面完全不用考虑哪些。</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>就是一种数据类型。就是一个整数。</p><p><img src="/images/%E5%9F%BA%E4%BA%8ETCP-IP%E5%8D%8F%E8%AE%AE%E7%9A%84C-S%E6%A8%A1%E5%9E%8B.assets/image-20210823230157616.png" alt="image-20210823230157616"></p><p>socket的值是唯一的，通过这个值找到对应的协议。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>网络通信的函数，全都要使用SOCKET,每个客户端有一个SOCKET，服务器有一个SOCKET，通信的时候，就需要这个SOCKET做参数，跟谁通信，就要传递谁的SOCKET。</p><p>SOCKET是网络封装的精华，写代码就是不停的使用SOCKET这个变量，所以又叫SOCKET编程。</p><h4 id="参数1-1"><a href="#参数1-1" class="headerlink" title="参数1"></a>参数1</h4><p><strong>地址的类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加入你要与好友取得联系，可以通过</span><br><span class="line">    电话、QQ、微信等方式</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AF_INET <span class="number">2</span></span><br><span class="line">    ipv4地址</span><br><span class="line">    Internet协议版本地址系列</span><br><span class="line">    例如:<span class="number">192.168</span><span class="number">.1</span><span class="number">.103</span></span><br><span class="line">        <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>~<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">        <span class="number">4</span>字节，<span class="number">32</span>位的地址</span><br><span class="line">        点分十进制表示法</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AF_INET6 <span class="number">23</span></span><br><span class="line">    ipv6地址</span><br><span class="line">    Internet协议版本地址系列</span><br><span class="line">    例如:<span class="number">2001</span>:<span class="number">0</span>:<span class="number">3238</span>:DFE1:<span class="number">63</span>::FEFB</span><br><span class="line">        <span class="number">16</span>字节，<span class="number">128</span>位地址</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AF_BTH <span class="number">32</span></span><br><span class="line">    蓝牙地址</span><br><span class="line">    例如:<span class="number">6B</span>:<span class="number">2</span>D:BC:A9:<span class="number">8</span>C:<span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AF_IRDA <span class="number">26</span></span><br><span class="line">    红外数据协会(lrDA)地址</span><br></pre></td></tr></table></figure><h4 id="参数2-1"><a href="#参数2-1" class="headerlink" title="参数2"></a>参数2</h4><p><strong>套接字类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCK_STREAM <span class="number">1</span></span><br><span class="line">    提供给带有OOB数据传输机制的顺序，可靠，双向，基于连接的字节流。</span><br><span class="line">    使用TCP作为internet地址系列AF_INET <span class="keyword">or</span> AF_INET6</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCK_DGRAM <span class="number">2</span></span><br><span class="line">    固定(通常很小)最大长度的无连接，不可靠的缓冲区。</span><br><span class="line">    使用UDP作为internet地址系列AF_INET <span class="keyword">or</span> AF_INET6</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_RAW <span class="number">3</span></span><br><span class="line">    提供允许应用程序操作下一个上层协议头的原始套接字。 要操作IPv4标头，必须在套接字上设置IP_HDRINCL套接字选项。 要操作IPv6标头，必须在套接字上设置IPV6_HDRINCL套接字选项。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_RDM <span class="number">4</span></span><br><span class="line">    提供可靠的消息数据报。 这种类型的一个示例是Windows中的实用通用多播（PGM）多播协议实现，通常称为可靠多播节目。仅在安装了可靠多播协议时才支持此类型值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_SEQPACKET <span class="number">5</span></span><br><span class="line">    提供基于数据报的伪流数据包。</span><br></pre></td></tr></table></figure><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p><strong>协议类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个位置写<span class="number">0</span>是什么意思？</span><br><span class="line">    即系统给我们自动选择合适的协议。但不明确。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_TCP</span><br><span class="line">    传输控制协议（TCP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_STREAM时，这是一个可能的值。</span><br><span class="line">    可能的值是什么意思？</span><br><span class="line">    如果有个协议TOP前两个参数也传这样的参数，此时(socket)第三个参数即写成IPPROTO_TOP</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_UDP </span><br><span class="line">    用户数据报协议（UDP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_DGRAM时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_ICMP</span><br><span class="line">    Internet控制消息协议（ICMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_IGMP</span><br><span class="line">    Internet组管理协议（IGMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_RM</span><br><span class="line">    用于可靠多播的PGM协议。 当af参数为AF_INET且类型参数为SOCK_RDM时，这是一个可能的值。 在针对Windows Vista及更高版本发布的Windows SDK上，此协议也称为IPPROTO_PGM。</span><br><span class="line">仅在安装了可靠多播协议时才支持此协议值。</span><br></pre></td></tr></table></figure><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">成功-返回可用的socket</span><br><span class="line">失败-不用了一定要释放掉——closesocket(xxx);</span><br><span class="line">然后再WSACleanup();清理网络库</span><br><span class="line">   注意二者的先后顺序，一定要先释放,然后再清理网路库，</span><br><span class="line">    因为closesocket()是网络库中的函数。</span><br><span class="line">********************************************************************************</span><br><span class="line">失败——返回INVALID_SOCKET</span><br><span class="line">   <span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();<span class="comment">//获取错误码</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//获取错误码——int a = WSAGetLastError();</span></span><br><span class="line">   <span class="comment">//检测在它上面离它最近的错误码    </span></span><br></pre></td></tr></table></figure><h3 id="绑定地址与端口"><a href="#绑定地址与端口" class="headerlink" title="绑定地址与端口"></a>绑定地址与端口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> sockaddr* addr,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> namelen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>给我们的socket绑定端口号和具体地址</p><p><strong>地址</strong>：找到电脑，理论上只有一个。</p><p><strong>端口号</strong>：找到电脑上对应软件的具体功能，每个通信的端口号是唯一的，同一个软件可能占用多个端口号。</p><h4 id="参数1-2"><a href="#参数1-2" class="headerlink" title="参数1"></a>参数1</h4><p>传递上面创建好的socket</p><p>(scoket绑定好地址类型、socket类型，协议类型)</p><p>(bind绑定实质的地址、端口号)</p><h4 id="参数2-2"><a href="#参数2-2" class="headerlink" title="参数2"></a>参数2</h4><p><img src="/images/%E5%9F%BA%E4%BA%8ETCP-IP%E5%8D%8F%E8%AE%AE%E7%9A%84C-S%E6%A8%A1%E5%9E%8B.assets/image-20210824222808154.png" alt="image-20210824222808154"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">        ushort  sa_family;<span class="comment">//地址类型</span></span><br><span class="line">        <span class="keyword">char</span>    sa_data[<span class="number">14</span>];<span class="comment">//端口号 ip地址</span></span><br><span class="line">    <span class="comment">//往一个字符串中赋值端口号和ip地址不好赋所以给出sockaddr_in,与之对应</span></span><br><span class="line">&#125;;<span class="comment">//16个字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">        <span class="keyword">short</span>   sin_family;<span class="comment">//地址类型</span></span><br><span class="line">        u_short sin_port;<span class="comment">//端口号</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>  <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">//ip地址,4字节</span></span><br><span class="line">        <span class="keyword">char</span>    sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;;<span class="comment">//16字节</span></span><br><span class="line"><span class="comment">//两个结构体大小和内存排布一样</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">结构体</span><br><span class="line">    -地址类型</span><br><span class="line">     -ip地址<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>-回送地址 本地回环地址 本地网络测试</span><br><span class="line">      <span class="number">192.168</span>.xxx.xxx- 用户ip地址</span><br><span class="line">     -端口号  就是一个整数，<span class="number">0</span>~<span class="number">65535</span>。<span class="keyword">unsigned</span> <span class="keyword">short</span></span><br><span class="line">    理论上<span class="number">0</span>~<span class="number">65535</span>都可以，但是<span class="number">0</span>~<span class="number">1023</span>为系统保留占用端口号</span><br><span class="line">        <span class="number">21</span>端口分配给FTP(文件传输协议)服务</span><br><span class="line">            <span class="number">25</span>端口分配给SMTP（简单邮件传输协议）服务</span><br><span class="line">            <span class="number">80</span>端口分配给HTTP服务</span><br><span class="line">    所以真正的范围是<span class="number">1024</span>~<span class="number">65535</span></span><br><span class="line">      端口是唯一的。</span><br><span class="line">    打开cmd，输入netstat -ano 查看被使用的所有端口</span><br><span class="line">    netstat -aon|findstr <span class="string">&quot;12345&quot;</span>检查我们要使用的端口是否被占用</span><br><span class="line">    </span><br><span class="line">SOCKETADDR_IN为sockaddr提供方便</span><br><span class="line">创建一个结构体SOCKETADDR_IN</span><br><span class="line">为其中的结构体成员赋值</span><br><span class="line">然后将它强转成sockaddr添加成功</span><br><span class="line"></span><br><span class="line">    SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;<span class="comment">//地址类型</span></span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);<span class="comment">//端口-将输入的unsigned short转换</span></span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127,0,0,1&quot;</span>);<span class="comment">//ip地址</span></span><br><span class="line"></span><br><span class="line">bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-失败 返回宏SOCKET_ERROR</span><br><span class="line">    具体错误码通过WSAGetLastError()获得</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="开始监听"><a href="#开始监听" class="headerlink" title="开始监听"></a>开始监听</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">listen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> backing</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen(socketServer, SOMAXCONN);</span><br></pre></td></tr></table></figure><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>将套接字置于正在侦听传入连接的状态。</p><h4 id="参数1-3"><a href="#参数1-3" class="headerlink" title="参数1"></a>参数1</h4><p>服务器端的socket,也就是socket函数创建的。</p><h4 id="参数2-3"><a href="#参数2-3" class="headerlink" title="参数2"></a>参数2</h4><p>挂起连接的最大长度。(排队等待区)休息区的长度。</p><p>可以手动设置，可能是2~10，一般是<strong>SOMAXCONN</strong>让系统自己选择最合适的个数。不同系统的环境不一样，所以这个合适的数也都不一样。</p><h4 id="WSAAPI"><a href="#WSAAPI" class="headerlink" title="WSAAPI"></a>WSAAPI</h4><p>调用约定，是给操作系统看的，我们可以忽略它。</p><p>决定-函数名字的编译方式-参数的入栈顺序-函数的调用时间。</p><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-返回宏SOCKET_ERROR</span><br><span class="line">     <span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端socket-接收连接"><a href="#创建客户端socket-接收连接" class="headerlink" title="创建客户端socket/接收连接"></a>创建客户端socket/接收连接</h3><p>将每个客户端的信息都创建成一个socket。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET WSAAPI <span class="title">accept</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">sockaddr * addr,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> *addrlen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>accept函数允许在套接字上进行传入连接尝试。</p><p>listen监听客户端来的链接，accept将客户端的信息绑定到一个socket上，也就是给客户端创建一个socket,通过返回值得到客户端socket。</p><p>一次只能创建一个(返回值1个),有几个客户端链接，就要调用几次。</p><h4 id="参数1-4"><a href="#参数1-4" class="headerlink" title="参数1"></a>参数1</h4><p>(服务器socket)</p><h4 id="参数2-4"><a href="#参数2-4" class="headerlink" title="参数2"></a>参数2</h4><p>客户端的地址端口信息结构体，同bind的第二个参数</p><p><strong>意义</strong>:系统帮我们监视着客户端的动态，肯定会记录客户端的信息，也就是IP地址，和端口号，并通过这个结构体记录。</p><p>只是这个我们不用自己填写结构体中的内容，<strong>系统帮我们填写</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建客户端</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientMsg</span>;</span><span class="comment">//客户端信息</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">SOCKET socketClient = accept(socketServer, (struct sockaddr*)&amp;clientMsg, &amp;len);</span><br></pre></td></tr></table></figure><h4 id="参数3-1"><a href="#参数3-1" class="headerlink" title="参数3"></a>参数3</h4><p>参数2的大小</p><hr><p><strong>参数2、3也可以都写成NULL</strong>，那就是不直接得到客户端的地址、端口号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以通过</span><br><span class="line">    getpeername(newSocket, (struct sockaddr*)&amp;sockClient, &amp;nLen);</span><br><span class="line">得到客户端信息</span><br><span class="line">通过</span><br><span class="line">    getsockname(sSocket, (sockaddr*)&amp;addr, &amp;nLen);</span><br><span class="line">得到本地服务器信息</span><br></pre></td></tr></table></figure><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">成功-返回客户端socket</span><br><span class="line">失败-INVALID_SOCKET</span><br><span class="line">    <span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="accept调试"><a href="#accept调试" class="headerlink" title="accept调试"></a>accept调试</h4><p>1.阻塞，同步，当服务器没有客户端链接时，它会一直等待。</p><p>2.多个链接，一次只能连接一个，5个就要循环5次。同时客户端socket也要创建成数组,否则上一个的socket就丢了。</p><h3 id="与客户端收发消息"><a href="#与客户端收发消息" class="headerlink" title="与客户端收发消息"></a>与客户端收发消息</h3><p>消息从谁那来，要发送给谁，就写谁的socket</p><h4 id="收"><a href="#收" class="headerlink" title="收"></a>收</h4><p>得到指定客户端(参数1)发来的消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span> *buf,<span class="comment">//消息，按字节</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> len,<span class="comment">//长度</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketClient, buf, <span class="number">1499</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>本质就是复制。</p><p>数据的接收都是由协议本身做的，也就是socket的底层做的，系统会有一段缓冲区，存储着收到的数据。</p><p>recv的作用就是通过socket找到这个缓冲区，并把数据赋值进参数2。</p><h5 id="参数1-5"><a href="#参数1-5" class="headerlink" title="参数1"></a>参数1</h5><p>客户端的socket,每个客户端对应唯一的socket</p><h5 id="参数2-5"><a href="#参数2-5" class="headerlink" title="参数2"></a>参数2</h5><p>客户端消息的存储空间，是个字符数组，一般是1500字节。</p><p>网络传输的最大单元是1500字节，也就是客户端发过来的数据，一次最大就是1500字节，这是协议规定，很多情况总结出来的最优值。</p><h5 id="参数3-2"><a href="#参数3-2" class="headerlink" title="参数3"></a>参数3</h5><p>想要读取的字节个数。</p><p>一般是参数2的字节数-1，把/0字符串结尾留出来。</p><h5 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h5><p>数据的读取方式</p><p>一般就写个0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">正常逻辑(自然性质)</span><br><span class="line">    从系统缓冲区里读，读走几个删几个，要不每次都从头开始读。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MSG_PEEK</span><br><span class="line">   读完不删</span><br><span class="line">    不建议使用</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MSG_OOB</span><br><span class="line">    带外数据</span><br><span class="line">    就是传输一段数据，在外带一个额外的特殊数据。(小声bb)</span><br><span class="line">    不建议使用，读数据不行，无法计数。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSG_WAITALL</span><br><span class="line">    直到系统缓冲区字节数满足参数<span class="number">3</span>所请求的字节数，才开始读取。</span><br></pre></td></tr></table></figure><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">返回读出来字节大小，读没了就在recv函数卡着，等着客户端发来数据，即阻塞，同步。死等</span><br><span class="line">客户端下线，返回<span class="number">0</span>。</span><br><span class="line">执行失败，返回SOCKET_ERROR    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="发"><a href="#发" class="headerlink" title="发"></a>发</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">send</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span>* buf,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h5><p>向目标发送数据</p><p><strong>本质</strong>：send函数将我们的数据复制粘贴进系统的协议发送缓冲区，计算机伺机发出去。</p><p>传输单元是1500字节。</p><h5 id="参数1-6"><a href="#参数1-6" class="headerlink" title="参数1"></a>参数1</h5><p>目标的socket，每个客户端对应唯一的socket</p><h5 id="参数2-6"><a href="#参数2-6" class="headerlink" title="参数2"></a>参数2</h5><p>给对方发送的字节串。1500</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个大小不同的协议不一样，链路层<span class="number">14</span>字节，ip头<span class="number">20</span>字节，tcp头<span class="number">20</span>字节，数据结尾还要有状态确认，加起来也几十个字节，数据结尾还要要状态确认，加起来也几十个字节，所以实际的数据位，不能写<span class="number">1500</span>个，要留出来，例如<span class="number">1024</span>，或者最多写<span class="number">1400</span>，别多于<span class="number">1400</span>是最好的。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">超过<span class="number">1500</span></span><br><span class="line">    系统会分片处理，比如<span class="number">2000</span>个字节</span><br><span class="line">    系统分成两个包，<span class="number">1400</span>+包头 == <span class="number">1500</span> 假设包头<span class="number">100</span>字节</span><br><span class="line">    <span class="number">600</span>+包头 == <span class="number">700</span></span><br><span class="line">    分两次发送出去</span><br><span class="line">    结果</span><br><span class="line">    系统要分包再打包，再发送，客户端收到之后还得拆包，组合数据，从而增加了系统的工作，降低了效率。</span><br><span class="line">    有的协议，就把分片后的二包直接丢了。</span><br></pre></td></tr></table></figure><h5 id="参数3-3"><a href="#参数3-3" class="headerlink" title="参数3"></a>参数3</h5><p>字节个数。1400</p><h5 id="参数4-1"><a href="#参数4-1" class="headerlink" title="参数4"></a>参数4</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">MSG_OOB 同recv</span><br><span class="line">MSG_DIBTROUTE指定数据不应受路由限制，Windows套接字服务提供程序可以选择忽略此标志。</span><br></pre></td></tr></table></figure><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">成功-返回写入的字节数</span><br><span class="line">失败-返回SOCKET_ERROR</span><br><span class="line">    WSAGetLastError()得到错误码</span><br><span class="line">    根据错误码信息做相应处理</span><br><span class="line">    -重启</span><br><span class="line">    -等待</span><br><span class="line">    -不用理会</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开网络库 </span></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion,&amp;wdSockMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line">SOCKET socketServer = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建服务器socket失败&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();<span class="comment">//获取错误码</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;<span class="comment">//地址类型</span></span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);<span class="comment">//端口-将输入的unsigned short转换</span></span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//ip地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr *)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绑定错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建客户端</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientMsg</span>;</span><span class="comment">//客户端信息</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(clientMsg);</span><br><span class="line">SOCKET socketClient = accept(socketServer, (struct sockaddr*)&amp;clientMsg, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端链接失败&quot;</span>);</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端链接成功\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//收发消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sValue = send(socketClient, <span class="string">&quot;服务器链接成功&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;服务器链接成功&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketClient, buf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端说:%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">send(socketClient, buf,<span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网络库头文件 网络库</span><br><span class="line">    打开网络库</span><br><span class="line">    校验版本</span><br><span class="line">    创建SOCKET</span><br></pre></td></tr></table></figure><h3 id="链接到服务器"><a href="#链接到服务器" class="headerlink" title="链接到服务器"></a>链接到服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">connect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> sockaddr* name,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span>namelen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverMsg</span>;</span></span><br><span class="line">serverMsg.sin_family = AF_INET;</span><br><span class="line">serverMsg.sin_port = htons(<span class="number">12345</span>);<span class="comment">//转换成网络字节序</span></span><br><span class="line">serverMsg.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//服务器ip地址</span></span><br><span class="line"></span><br><span class="line">connect(socketServer, (struct sockaddr*)&amp;serverMsg, <span class="keyword">sizeof</span>(serverMsg));</span><br></pre></td></tr></table></figure><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>链接服务器并把服务器socket绑定到一起。</p><h4 id="参数1-7"><a href="#参数1-7" class="headerlink" title="参数1"></a>参数1</h4><p>服务器socket</p><h4 id="参数2-7"><a href="#参数2-7" class="headerlink" title="参数2"></a>参数2</h4><p>服务器ip地址端口号结构体</p><h4 id="参数3-4"><a href="#参数3-4" class="headerlink" title="参数3"></a>参数3</h4><p>参数2结构体大小</p><h4 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-返回SOCKET_ERROR</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr><p><strong>客户端与服务器收发消息，一发一接，一发一接，对应。</strong></p><hr><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建的是服务器的，客户端不用创建自己的socket，因为链接服务器，服务器会创建出来客户端的socket</span></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverMsg</span>;</span></span><br><span class="line">serverMsg.sin_family = AF_INET;</span><br><span class="line">serverMsg.sin_port = htons(<span class="number">12345</span>);<span class="comment">//转换成网络字节序</span></span><br><span class="line">serverMsg.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//服务器ip地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cValue = connect(socketServer, (struct sockaddr*)&amp;serverMsg, <span class="keyword">sizeof</span>(serverMsg));</span><br><span class="line"><span class="keyword">if</span> (cValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketServer, buf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;服务器说:%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="keyword">int</span> sValue = send(socketServer, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>由于accept，recv是阻塞的，做其中一件事，另一件事就做不了，等着接收客户端的消息-recv，这时来了个链接请求-accept无法处理。(没有目标的等待)</p><p>正确的处理方式是——哪个socket有请求就处理谁，得到连接请求，我们就直接accept,得到发来的消息，就recv。(有目的的等待，处理有请求的)</p><p>引出<strong>select模型</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(14)【简单】加一(C++)</title>
      <link href="2021/08/21/LeetCode%E5%88%B7%E9%A2%98(14)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8A%A0%E4%B8%80(C++)/"/>
      <url>2021/08/21/LeetCode%E5%88%B7%E9%A2%98(14)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8A%A0%E4%B8%80(C++)/</url>
      
        <content type="html"><![CDATA[<h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/plus-one/solution/">加一</a><br><img src="https://img-blog.csdnimg.cn/36730e8edad74cb8b8f2fee4212a6ef1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//从最后一位开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.size()<span class="number">-1</span>;i&gt;= <span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//最后一位不是9,+1直接return</span></span><br><span class="line">    <span class="comment">//如果此时后一位由9已经变成了0</span></span><br><span class="line">    <span class="comment">//紧着这判断这位不是9，+1直接return,就相当于满10进1</span></span><br><span class="line">        <span class="keyword">if</span>(digits[i]+<span class="number">1</span> != <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            digits[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后一位加上1等于10</span></span><br><span class="line">        <span class="comment">//变成0</span></span><br><span class="line">        digits[i] =<span class="number">0</span>;</span><br><span class="line">                                        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原来容器中全都是9</span></span><br><span class="line">    digits[<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">    digits.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> digits;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>错误示例——越界</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">将容器中数取出来编程对应的一个数，加<span class="number">1</span>然后在求得每位上的数再存到容器中，返回该容器，</span><br><span class="line">但是当原来容器中数过多时，先求出来的数会发生溢出，大于INT_MAX。</span><br><span class="line">所以错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> temp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;digits.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =digits.size()<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            n = n*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp1 =  digits[i] * n;</span><br><span class="line">        ret += temp1;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret +=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     digits.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        temp2 = ret%<span class="number">10</span>;</span><br><span class="line">        digits.push_back(temp2);</span><br><span class="line">        ret /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Tempdigits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!digits.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Tempdigits.push_back(digits.back());</span><br><span class="line">        digits.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  Tempdigits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -算法 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(13)【简单】最大子序和(C++)</title>
      <link href="2021/08/20/LeetCode%E5%88%B7%E9%A2%98(13)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C(C++)/"/>
      <url>2021/08/20/LeetCode%E5%88%B7%E9%A2%98(13)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C(C++)/</url>
      
        <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/maximum-subarray/">最大子序和</a></p><p><img src="https://img-blog.csdnimg.cn/c8d97260a62f40cdb6542f7dff1c121a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">最笨的方法:</span><br><span class="line">依次从每个元素开始往后一个一个的相加，加到temp1中，如果比之前的大就存到temp2中，最后得到最大的和。</span><br><span class="line">每轮完重置temp1</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> temp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp2 = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =i;j &lt;nums.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp1  += nums[j];</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(temp1 &gt;= temp2)</span><br><span class="line">            &#123;</span><br><span class="line">                temp2 = temp1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -算法 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(12)【简单】最长公共前缀(C++)</title>
      <link href="2021/08/18/LeetCode%E5%88%B7%E9%A2%98(12)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80(C++)/"/>
      <url>2021/08/18/LeetCode%E5%88%B7%E9%A2%98(12)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80(C++)/</url>
      
        <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a><br><img src="https://img-blog.csdnimg.cn/db1c4c1e85e14b32ab39234dad7b2765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码示例</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//容器为空</span></span><br><span class="line">       <span class="keyword">if</span>(strs.size() == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].size(); i++) </span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.size();j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (strs[j][i] != ch || i &gt; strs[j].size()) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substr(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全都一样</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">垂直比较。</span><br><span class="line">如果容器为空，返回“”</span><br><span class="line"></span><br><span class="line">不为空</span><br><span class="line">以容器中第一个字符串为标准，将它的每个字母和容器中其它字符串的每一个字母做比较，</span><br><span class="line">如果不同或者此时遍历的长度i，已经大于了其他某个字符串的长度，</span><br><span class="line">那么直接返回第一个字符串截取到上一个i,这么长。</span><br><span class="line">substr截取区间为左闭右开。</span><br><span class="line"></span><br><span class="line">容器中字符串全都相等，或者只有一个元素</span><br><span class="line">返回本身（第一个字符串）。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -算法 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(11)【简单】回文数&amp;罗马数字转整数(C++)</title>
      <link href="2021/08/17/LeetCode%E5%88%B7%E9%A2%98(11)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%9B%9E%E6%96%87%E6%95%B0&amp;%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/"/>
      <url>2021/08/17/LeetCode%E5%88%B7%E9%A2%98(11)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%9B%9E%E6%96%87%E6%95%B0&amp;%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/</url>
      
        <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a><br><img src="https://img-blog.csdnimg.cn/5eb45e69583646b5ae25cf45da829c73.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x;</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret &gt; INT_MAX / <span class="number">10</span> || ret &lt; INT_MIN / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            ret = ret*<span class="number">10</span> + temp% <span class="number">10</span>;</span><br><span class="line">            temp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><p><strong>反转整数</strong>——<a href="http://doraemon2.xyz/2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/">反转整数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同反转整数，在此基础上定义临时变量，不要更改原来的x。</span><br></pre></td></tr></table></figure><h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a><br><img src="https://img-blog.csdnimg.cn/4288a5cc564443ee81cbc04f7a950e37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;          </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:    </span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nextnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num = GetNum(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(i == s.size()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nextnum = GetNum(s[i+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(num&lt;nextnum)</span><br><span class="line">                &#123;</span><br><span class="line">            </span><br><span class="line">                    ret -= num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ret += num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">定义ret为最后的结果</span><br><span class="line"></span><br><span class="line">通过观察罗马数字，得到规律，多个字母拼接的罗马数字，</span><br><span class="line">从左到右依次取每个字母，得到对应的数值，和挨着的下一个字母对应的数值，</span><br><span class="line">如果当前字母对应数值小于下一个字母对应的数字，</span><br><span class="line">那么当前字母对应的数值就变成负的，反之不做改变，</span><br><span class="line">不断加到ret中。</span><br><span class="line">......</span><br><span class="line">其中，到了最后一个字母就不找下一个字母了，直接将它对应的数值加到ret中，</span><br><span class="line">返回结果ret。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -算法 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(10)【简单】反转整数(C++)</title>
      <link href="2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/"/>
      <url>2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/</url>
      
        <content type="html"><![CDATA[<p><strong>题目链接</strong>:——<a href="https://leetcode-cn.com/problems/reverse-integer/submissions/">反转整数</a><br><img src="https://img-blog.csdnimg.cn/16eb619dbed94644b5fbfa5fa6a32f82.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret =<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(x)</span><br><span class="line">       &#123;</span><br><span class="line">       <span class="comment">//有符号整数溢出</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//如果这个数比最小的数去掉一位要小，或者比最大的数去掉一位要大</span></span><br><span class="line">       <span class="comment">//那么将他*10后得到的最后结果肯定是要大(小)，肯定溢出了。</span></span><br><span class="line">       <span class="comment">//并且要先在*10之前判断，否则就溢出了</span></span><br><span class="line">          <span class="keyword">if</span> (ret &gt; INT_MAX / <span class="number">10</span> || ret &lt; INT_MIN / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">           ret = ret*<span class="number">10</span>+x%<span class="number">10</span>;        </span><br><span class="line">           x /=<span class="number">10</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX和INT_MIN为C++内宏定义,分别表示<span class="keyword">int</span>的最大值和最小值。</span><br><span class="line"></span><br><span class="line"> 定义ret为反转后的数，初始化为<span class="number">0</span></span><br><span class="line">         x%<span class="number">10</span>取到最后一位上的数</span><br><span class="line">         x/<span class="number">10</span>去掉最后一位上的数</span><br><span class="line"></span><br><span class="line">相关解释：</span><br><span class="line"></span><br><span class="line">开始的ret为<span class="number">0</span></span><br><span class="line">x %<span class="number">10</span>将原来x的最后一位取出来，放到ret中，这个数就是ret最终结果的第一位。</span><br><span class="line">现在的ret是这个一位数，</span><br><span class="line"></span><br><span class="line">将它*<span class="number">10</span>，变成几十，ret变成两位数，刚才取出来的这个数到了十位上，个位上是<span class="number">0</span>，</span><br><span class="line">个位就被空了出来，</span><br><span class="line">之前的x已经被去掉了最后一位，现在的x最后一位为原来x的倒数第二位，x %<span class="number">10</span>,取到新的最后一位，</span><br><span class="line">加到ret中，得到新的ret</span><br><span class="line">重复上述步骤:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例: x = <span class="number">123</span></span><br><span class="line">ret =  <span class="number">0</span> * <span class="number">10</span> + <span class="number">123</span> % <span class="number">10</span> = <span class="number">3</span> </span><br><span class="line">x = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">3</span> * <span class="number">10</span> + <span class="number">12</span> % <span class="number">10</span> = <span class="number">30</span> + <span class="number">2</span> = <span class="number">32</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">得到结果</span><br><span class="line">ret = <span class="number">32</span> * <span class="number">10</span> + <span class="number">1</span> % <span class="number">10</span>  = <span class="number">321</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -算法 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马程序员C++课程笔记总结</title>
      <link href="2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C++%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
      <url>2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C++%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>黑马程序员C++视频——</strong><a href="https://www.bilibili.com/video/BV1et411b73Z?p=1">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a></p><hr><p><img src="/img/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><hr><p><strong>笔记列表&amp;对应视频</strong></p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><p><strong>进阶部分(167-263)——</strong><a href="http://doraemon2.xyz/2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/">C++提高编程部分</a></p><p><strong>案例2(264-281)——演讲比赛流程管理系统——</strong><a href="http://doraemon2.xyz/2021/08/11/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现演讲比赛流程管理系统</a></p><p><strong>案例3(282-314)——C++实现机房预约系统——</strong><a href="http://doraemon2.xyz/2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/">C++实现机房预约系统</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现机房预约系统</title>
      <link href="2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">黑马程序员C++</a>(282-314)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><p><strong>进阶部分(167-263)——</strong><a href="http://doraemon2.xyz/2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/">C++提高编程部分</a></p><p><strong>案例2(264-281)——演讲比赛流程管理系统——</strong><a href="https://blog.csdn.net/qq_51604330/article/details/119601992?spm=1001.2014.3001.5501">C++实现演讲比赛流程管理系统</a></p><hr><h1 id="C-实现机房预约系统"><a href="#C-实现机房预约系统" class="headerlink" title="C++实现机房预约系统"></a>C++实现机房预约系统</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183300379.png" alt="image-20210811183300379"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183310002.png" alt="image-20210811183310002"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183402942.png" alt="image-20210811183402942"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183501413.png" alt="image-20210811183501413"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183608553.png" alt="image-20210811183608553"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183620527.png" alt="image-20210811183620527"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183723618.png" alt="image-20210811183723618"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>globalFile.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADMIN_FILE <span class="meta-string">&quot;admin.txt&quot;</span></span></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STUDENT_FILE <span class="meta-string">&quot;student.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEACHER_FILE <span class="meta-string">&quot;teacher.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPUTER_FILE <span class="meta-string">&quot;computerRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ORDER_FILE <span class="meta-string">&quot;order.txt&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>computerRoom.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computerRoom</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_ComId;<span class="comment">//机房id号</span></span><br><span class="line"><span class="keyword">int</span> m_ManNum;<span class="comment">//最大容量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Identity.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Indentity</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单——纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_UserName;</span><br><span class="line"><span class="built_in">string</span> m_UserPassword;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Student.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;computerRoom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student();</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMyOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> m_Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>manager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;computerRoom.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> :</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleamFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVector</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt;vStu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Teacher&gt;vTea;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测重复 学号、职工号  检测类型</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRepeat</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房信息</span></span><br><span class="line"><span class="built_in">vector</span>&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>teacher.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Teacher(<span class="keyword">int</span> empId, <span class="built_in">string</span> name,<span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//职工号</span></span><br><span class="line"><span class="keyword">int</span> m_EmpId;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>orderFile.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">OrderFile::OrderFile()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(ORDER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> date;</span><br><span class="line"><span class="built_in">string</span> interval;<span class="comment">//时间段</span></span><br><span class="line"><span class="built_in">string</span> stuId;</span><br><span class="line"><span class="built_in">string</span> stuName;</span><br><span class="line"><span class="built_in">string</span> roomId;</span><br><span class="line"><span class="built_in">string</span> status;<span class="comment">//状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;<span class="comment">//记录条数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; </span><br><span class="line">ifs &gt;&gt; interval &amp;&amp; </span><br><span class="line">ifs &gt;&gt; stuId &amp;&amp; </span><br><span class="line">ifs &gt;&gt; stuName &amp;&amp; </span><br><span class="line">ifs &gt;&gt; roomId &amp;&amp; </span><br><span class="line">ifs &gt;&gt; status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; date &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; interval &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuName &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; roomId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;status &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> key;</span><br><span class="line"><span class="built_in">string</span> value;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos = date.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = date.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = date.substr(pos + <span class="number">1</span>, date.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = interval.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = interval.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = interval.substr(pos + <span class="number">1</span>, interval.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuId.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = stuId.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = stuId.substr(pos + <span class="number">1</span>, stuId.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = stuName.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = stuName.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = stuName.substr(pos + <span class="number">1</span>, stuName.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = roomId.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = roomId.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = roomId.substr(pos + <span class="number">1</span>, roomId.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = status.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = status.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = status.substr(pos + <span class="number">1</span>, status.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小的map容器放到大的map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_orderData.insert(<span class="built_in">make_pair</span>(<span class="keyword">this</span>-&gt;m_Size, m));</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试大map</span></span><br><span class="line"><span class="comment">/*for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it-&gt;first &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for (map&lt;string, string&gt;::iterator mit = (*it).second.begin(); mit != (*it).second.end(); mit++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; mit-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; mit-&gt;second &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OrderFile::updateOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::out | ios::trunc)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>manager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::Manager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初识化容器 获取到所有文件中 学生、老师、信息</span></span><br><span class="line"><span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">computerRoom com;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_ManNum)</span><br><span class="line">&#123;</span><br><span class="line">vCom.push_back(com);</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎管理员:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.添加账号——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.查看账号——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——3.查看机房——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——4.清空预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前学生数量:&quot;</span> &lt;&lt; vStu.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前老师数量:&quot;</span> &lt;&lt; vTea.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房数量为:&quot;</span> &lt;&lt; vCom.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您的操作:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.添加老师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> fileName;<span class="comment">//操作文件名</span></span><br><span class="line"><span class="built_in">string</span> tip;<span class="comment">//提示id号</span></span><br><span class="line">ofstream ofs;<span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> errorTip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fileName = STUDENT_FILE;</span><br><span class="line">tip = <span class="string">&quot;请输入学号&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;学号重复,重新输入!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fileName = TEACHER_FILE;</span><br><span class="line">tip = <span class="string">&quot;请输入职工编号&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;职工号重复,重新输入!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ofs.open(fileName, ios::out | ios::app);</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">bool</span> ret = checkRepeat(id, select);</span><br><span class="line"><span class="keyword">if</span> (ret)<span class="comment">//有重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; errorTip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入密码&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件添加数据</span></span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加成功就立即将内容同步到当前容器中</span></span><br><span class="line"><span class="comment">//解决添加一个人，人数翻倍bug,我认为是重复读取</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加学生——同步到当前容器中</span></span><br><span class="line">Student s;</span><br><span class="line">s.m_Id = id;</span><br><span class="line">s.m_UserName = name;</span><br><span class="line">s.m_UserPassword = pwd;</span><br><span class="line">vStu.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加老师——同步到当前容器中</span></span><br><span class="line">Teacher t;</span><br><span class="line">t.m_EmpId = id;</span><br><span class="line">t.m_UserName = name;</span><br><span class="line">t.m_UserPassword = pwd;</span><br><span class="line">vTea.push_back(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用初始化容器接口</span></span><br><span class="line"><span class="comment">//this-&gt;initVector();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*不知道是我漏掉了代码，还是代码本身的小漏洞，连续添加账号会出现显示bug和人员统计数量bug</span></span><br><span class="line"><span class="comment">我认为是重复的vector存储，读取，本人有两种解决方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.如上，去掉结尾的初始化容器，在上面的添加成功后，直接将当前的成员读进vector容器中</span></span><br><span class="line"><span class="comment">2.理论可行，但是我没去实现，在原来的代码基础上，结尾调用初始化容器接口前，清理一下当前容器,vStu.clear();vTea.clear();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这样解决了bug，并且保留了即时同步。:)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学号:&quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot; 姓名:&quot;</span> &lt;&lt; s.m_UserName &lt;&lt; <span class="string">&quot; 密码:&quot;</span> &lt;&lt; s.m_UserPassword &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeacher</span><span class="params">(Teacher&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工号:&quot;</span> &lt;&lt; s.m_EmpId &lt;&lt; <span class="string">&quot; 姓名:&quot;</span> &lt;&lt; s.m_UserName &lt;&lt; <span class="string">&quot; 密码:&quot;</span> &lt;&lt; s.m_UserPassword &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择查看内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.查看所有学生&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.查看所有老师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;所有学生信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(vStu.begin(), vStu.end(), printStudent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;所老师生信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(vTea.begin(), vTea.end(), printTeacher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房信息如下&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;computerRoom&gt;::iterator it = vCom.begin(); it != vCom.end(); it++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房编号:&quot;</span> &lt;&lt; it-&gt;m_ComId &lt;&lt; <span class="string">&quot; 机房最大容量:&quot;</span> &lt;&lt; it-&gt;m_ManNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::cleamFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::trunc)</span></span>;</span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::initVector</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取信息 学生 老师 </span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(STUDENT_FILE, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student s;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_UserName &amp;&amp; ifs &gt;&gt; s.m_UserPassword)</span><br><span class="line">&#123;</span><br><span class="line">vStu.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取信息 老师</span></span><br><span class="line">ifs.open(TEACHER_FILE,ios::in);</span><br><span class="line">Teacher t;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_UserName &amp;&amp; ifs&gt;&gt;t.m_UserPassword)</span><br><span class="line">&#123;</span><br><span class="line">vTea.push_back(t);</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测重复 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Manager::checkRepeat</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_EmpId)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>teacher.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Teacher::Teacher(<span class="keyword">int</span> empId, <span class="built_in">string</span> name,<span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpId = empId;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎教师: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.查看所有预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.审核预约————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录———&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择你的操作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期: 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 学号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 姓名:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态: &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败，审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;待审核的预约记录如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期: 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段: &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生编号: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生姓名: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房编号: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;状态: 审核中 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要审核的预约记录,0代表返回&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;<span class="comment">//接收用户选择的预约记录</span></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;<span class="comment">//接收预约结果记录</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入审核结果&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.通过&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.不通过&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;<span class="comment">//-1是因为vector容器下标是从0开始的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不通过</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line">of.updateOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;审核完毕&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Student.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student::Student(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(COMPUTER_FILE,ios::in);</span><br><span class="line"></span><br><span class="line">computerRoom com;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_ManNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将读取的信息放入到容器中</span></span><br><span class="line">vCom.push_back(com);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎学生代表:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.申请预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.查看我的预约—&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——3.查看所有预约—&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——4.取消预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您的操作:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房开放时间为周一至周五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入申请预约的时间&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.周一&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.周二&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.周三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.周四&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5.周五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日期</span></span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//时间段</span></span><br><span class="line"><span class="keyword">int</span> interval = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//机房编号</span></span><br><span class="line"><span class="keyword">int</span> room = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= <span class="number">1</span> &amp;&amp; data &lt;= <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入申请预约的时间段&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.上午&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.下午&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; interval;</span><br><span class="line"><span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择机房&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vCom.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vCom[i].m_ComId &lt;&lt; <span class="string">&quot;号机房容量为:&quot;</span> &lt;&lt; vCom[i].m_ManNum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room;</span><br><span class="line"><span class="keyword">if</span> (room &gt;= <span class="number">1</span> &amp;&amp; room &lt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约成功，审核中！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(ORDER_FILE, ios::app);</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; room &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//string 转 int</span></span><br><span class="line"><span class="comment">//string 利用.c_str()转const char *</span></span><br><span class="line"><span class="comment">//利用atoi (const char * )转 int</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))<span class="comment">//找到自身预约</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> :<span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot;状态:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败,审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 学号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 姓名:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态: &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败,审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放下标</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到自身预约的记录</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//筛选状态</span></span><br><span class="line"><span class="comment">//审核中或预约成功</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span> || of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; index++ &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约时期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态:  &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入取消的记录，0代表返回&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新文件</span></span><br><span class="line">of.updateOrder();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;已取消预约&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>机房预约系统.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入教师子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span><span class="params">(Indentity*&amp; teacher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用子菜单界面</span></span><br><span class="line">teacher-&gt;operMenu();</span><br><span class="line"></span><br><span class="line">Teacher* tea = (Teacher*)teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//查看所有预约</span></span><br><span class="line">&#123;</span><br><span class="line">tea-&gt;showAllOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//审核预约</span></span><br><span class="line">&#123;</span><br><span class="line">tea-&gt;validOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> teacher;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入学生子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span><span class="params">(Indentity*&amp; student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用学生子菜单</span></span><br><span class="line">student-&gt;operMenu();</span><br><span class="line"></span><br><span class="line">Student* stu = (Student*)student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;<span class="comment">//接收用户选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//申请预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;applyOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//查看自身预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;showMyOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>)<span class="comment">//查看所有人预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;showAllOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(select == <span class="number">4</span>)<span class="comment">//取消预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;cancelOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//注销登录</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入管理员子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span><span class="params">(Indentity* &amp;manager)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用管理员子菜单</span></span><br><span class="line">manager-&gt;operMenu();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父类指针转为子类指针，调用子类里其他的接口</span></span><br><span class="line">Manager* man = (Manager*)manager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//添加账号</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;添加账号&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;addPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//查看账号</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;查看账号&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>)<span class="comment">//查看机房</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;查看机房&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;showComputer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>)<span class="comment">//清空预约</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;清空预约&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;cleamFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注销</span></span><br><span class="line"><span class="keyword">delete</span> manager;<span class="comment">//销毁堆区对象</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="comment">//文件名 身份类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoginIn</span><span class="params">(<span class="built_in">string</span> fileName, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Indentity * person = <span class="literal">NULL</span>;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(fileName, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备接受用户的信息</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断身份</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的学号:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的职工号:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入用户名:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入密码:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//学生身份验证</span></span><br><span class="line"><span class="keyword">int</span> fId;</span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Student(id, name, pwd);</span><br><span class="line"><span class="comment">//进入学生身份的子菜单</span></span><br><span class="line">studentMenu(person);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//老师身份验证</span></span><br><span class="line"><span class="keyword">int</span> fId;</span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;老师验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Teacher(id, name, pwd);</span><br><span class="line"><span class="comment">//进入老师身份的子菜单</span></span><br><span class="line">teacherMenu(person);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//管理员身份验证</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;管理员验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Manager(name, pwd);</span><br><span class="line"><span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line">managerMenu(person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;验证登录失败！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  欢迎使用机房预约系统系统&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t1.学生代表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t2.老  师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t3.管理员&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t0.退  出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您的选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//学生</span></span><br><span class="line">LoginIn(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//老师</span></span><br><span class="line">LoginIn(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//管理员</span></span><br><span class="line">LoginIn(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现演讲比赛流程管理系统</title>
      <link href="2021/08/11/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/08/11/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=147">黑马程序员C++</a>(264-281)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><p><strong>进阶部分(167-263)——</strong><a href="https://blog.csdn.net/qq_51604330/article/details/119535438?spm=1001.2014.3001.5501">C++提高编程部分</a></p><hr><h1 id="演讲比赛流程管理系统"><a href="#演讲比赛流程管理系统" class="headerlink" title="演讲比赛流程管理系统"></a>演讲比赛流程管理系统</h1><h2 id="演讲比赛程序需求"><a href="#演讲比赛程序需求" class="headerlink" title="演讲比赛程序需求"></a>演讲比赛程序需求</h2><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/image-20210810111738845.png" alt="image-20210810111738845"></p><h3 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h3><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/image-20210810112344475.png" alt="image-20210810112344475"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>Speaker.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speaker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">double</span> m_Score[<span class="number">2</span>];<span class="comment">//两轮得分</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>SpeechManager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Speaker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计演讲管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpeechManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SpeechManager();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Menu</span><span class="params">()</span></span>;<span class="comment">//菜单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExitSystem</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSpeech</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatSpeaker</span><span class="params">()</span></span>;<span class="comment">//创建选手</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartSpeech</span><span class="params">()</span></span>;<span class="comment">//开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechDraw</span><span class="params">()</span></span>;<span class="comment">//抽签</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechContest</span><span class="params">()</span></span>;<span class="comment">//比赛</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowScore</span><span class="params">()</span></span>;<span class="comment">//显示得分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveRecord</span><span class="params">()</span></span>;<span class="comment">//保存文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadRecord</span><span class="params">()</span></span>;<span class="comment">//读取文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowRecord</span><span class="params">()</span></span>;<span class="comment">//显示往届数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> FileIsEmpyt;<span class="comment">//文件是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;m_Record;<span class="comment">//存放往届记录的容器</span></span><br><span class="line">~SpeechManager();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearRecord</span><span class="params">()</span></span>;<span class="comment">//清空记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮比赛选手</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="comment">//第一轮晋级选手</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="comment">//胜出前三名选手编号容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vVictory;</span><br><span class="line"><span class="comment">//存放编号以及对应具体选手容器</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放比赛轮数</span></span><br><span class="line"><span class="keyword">int</span> m_Index;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SpeechManager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;SpeechManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SpeechManager::SpeechManager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;InitSpeech();</span><br><span class="line"><span class="comment">//创建选手12</span></span><br><span class="line"><span class="keyword">this</span>-&gt;CreatSpeaker();</span><br><span class="line"><span class="comment">//加载往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;LoadRecord();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*********************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;****欢迎参加演讲比赛&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****1.开始比赛*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****2.查看记录*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****3.清空记录*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****0.退出程序*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*********************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::ExitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::InitSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//容器置空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;v2.clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;vVictory.clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.clear();</span><br><span class="line"><span class="comment">//初始化比赛轮数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将记录的容器清空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.clear();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::CreatSpeaker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> NameSeed = <span class="string">&quot;ABCDEFGHIJKL&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NameSeed.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name += NameSeed[i];</span><br><span class="line"><span class="comment">//创建具体选手</span></span><br><span class="line">Speaker sp;</span><br><span class="line">sp.m_Name = name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建选手编号，并且放入到v1容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;v1.push_back(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选手编号以及对应选手放入map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker.insert(<span class="built_in">make_pair</span>(i + <span class="number">10001</span>, sp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::SpeechDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛选手正在抽签&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一轮</span></span><br><span class="line">random_shuffle(v1.begin(), v1.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第二轮</span></span><br><span class="line">random_shuffle(v2.begin(), v2.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::StartSpeech</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SpeechDraw();</span><br><span class="line"><span class="comment">//2.比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SpeechContest();</span><br><span class="line"><span class="comment">//3.显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;ShowScore();</span><br><span class="line"><span class="comment">//第二轮比赛开始</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SpeechDraw();</span><br><span class="line"><span class="comment">//比赛</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SpeechContest();</span><br><span class="line"><span class="comment">//显示晋级结果</span></span><br><span class="line"><span class="keyword">this</span>-&gt;ShowScore();</span><br><span class="line"><span class="comment">//保存分数到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SaveRecord();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置比赛</span></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;InitSpeech();</span><br><span class="line"><span class="comment">//创建选手</span></span><br><span class="line"><span class="keyword">this</span>-&gt;CreatSpeaker();</span><br><span class="line"><span class="comment">//获取往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;LoadRecord();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;本届比赛已经结束！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::SpeechContest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛正式开始&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//准备临时容器存放小组成绩</span></span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>, greater&lt;<span class="keyword">double</span>&gt;&gt;groupScore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//统计6个人为一组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v_Src;<span class="comment">//比赛选手容器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">v_Src = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v_Src = v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有选手进行比赛</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v_Src.begin(); it != v_Src.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">double</span>&gt;d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> score = (rand() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.f</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; score &lt;&lt; &quot; &quot;;</span></span><br><span class="line">d.push_back(score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">sort(d.begin(), d.end(), greater&lt;<span class="keyword">double</span>&gt;());<span class="comment">//排序</span></span><br><span class="line"><span class="comment">//去除最高分和最低分</span></span><br><span class="line">d.pop_front();</span><br><span class="line">d.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sum = accumulate(d.begin(), d.end(), <span class="number">0.0f</span>);<span class="comment">//总分</span></span><br><span class="line"><span class="keyword">double</span> avg = sum / (<span class="keyword">double</span>)d.size();<span class="comment">//平均分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将平均分放到map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = avg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印平均分</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;编号&quot; &lt;&lt; &quot; &quot; &lt;&lt; *it &lt;&lt; &quot;姓名&quot; &lt;&lt; &quot; &quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot; &quot; &lt;&lt; &quot;平均分&quot; &lt;&lt; &quot; &quot; &lt;&lt; avg &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将打分数据 放入到临时小组中</span></span><br><span class="line">groupScore.insert(<span class="built_in">make_pair</span>(avg, *it));<span class="comment">//key是得分 value是具体选手编号</span></span><br><span class="line"><span class="comment">//每6人取出前三名</span></span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; num /<span class="number">6</span>&lt;&lt; <span class="string">&quot;小组比赛名次&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">multimap</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>, greater&lt;<span class="keyword">double</span>&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;编号: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name &lt;&lt; <span class="string">&quot;成绩: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取走前三名</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">multimap</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>, greater&lt;<span class="keyword">double</span>&gt;&gt;::iterator it = groupScore.begin(); it != groupScore.end() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back((*it).second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vVictory.push_back((*it).second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">groupScore.clear();<span class="comment">//小组容器清空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示得分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::ShowScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手如下&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">v = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v = vVictory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end();it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;选手编号: &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name &lt;&lt; <span class="string">&quot;得分: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;Show_Menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::SaveRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(<span class="string">&quot;speech.csv&quot;</span>, ios::out | ios::app);</span><br><span class="line"><span class="comment">//将每个选手的数据写入到文件中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vVictory.begin(); it != vVictory.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ofs &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;记录已经完成&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改文件不为空状态</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpyt = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::LoadRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>, ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpyt = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件清空情况</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpyt = <span class="literal">true</span>;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件不为空情况</span></span><br><span class="line"><span class="keyword">this</span>-&gt;FileIsEmpyt = <span class="literal">false</span>;</span><br><span class="line">ifs.putback(ch);</span><br><span class="line"><span class="built_in">string</span> data;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;v;<span class="comment">//存放冠军数据</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; data &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> start  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos = data.find(<span class="string">&quot;,&quot;</span>, start);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//没找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> temp = data.substr(start, pos - start);</span><br><span class="line"><span class="comment">//cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">v.push_back(temp);</span><br><span class="line">start = pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Record.insert(<span class="built_in">make_pair</span>(index, v));</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (map&lt;int, vector&lt;string&gt;&gt;::iterator it = m_Record.begin(); it != m_Record.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt;&quot;第&quot;&lt;&lt;it-&gt;first &lt;&lt; &quot;届冠军编号：&quot; &lt;&lt; it-&gt;second[0] &lt;&lt; &quot;分数：&quot; &lt;&lt; it-&gt;second[1] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示往届记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::ShowRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;FileIsEmpyt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件为或者文件不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届 &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;冠军编号: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;得分: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;亚军编号: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;得分: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;季军编号: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;得分: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpeechManager::ClearRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;是否确定清空文件?&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.是、2.否&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;speech.csv&quot;</span>,ios::trunc)</span></span>;</span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器和属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;InitSpeech();</span><br><span class="line"><span class="comment">//创建选手12</span></span><br><span class="line"><span class="keyword">this</span>-&gt;CreatSpeaker();</span><br><span class="line"><span class="comment">//加载往届记录</span></span><br><span class="line"><span class="keyword">this</span>-&gt;LoadRecord();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清空成功!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SpeechManager::~SpeechManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>演讲比赛流程管理系统.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;SpeechManager.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理类</span></span><br><span class="line">SpeechManager sm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (map&lt;int, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second.m_Name&lt;&lt;&quot; &quot;&lt;&lt;it-&gt;second.m_Score[0]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> choice = <span class="number">0</span>;<span class="comment">//用于存储用户输入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sm.Show_Menu();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//开始比赛</span></span><br><span class="line">sm.StartSpeech();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//查看往届比赛</span></span><br><span class="line">sm.ShowRecord();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//清空</span></span><br><span class="line">sm.ClearRecord();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出</span></span><br><span class="line">sm.ExitSystem();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程部分</title>
      <link href="2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/"/>
      <url>2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=147">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a>-(167-263)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><hr><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><hr><h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><p>本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层次的使用</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="模板的概念"><a href="#模板的概念" class="headerlink" title="模板的概念"></a>模板的概念</h3><p>模板就会通用的模具，大大提高复用性。</p><p>例如生活中的一寸照片、PPT模板。</p><p><strong>模板的特点</strong>：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><ul><li>C++另一种编程思想称为<strong>泛型编程</strong>，主要利用的技术就是模板</li><li>C++提供两种模板机制，<strong>函数模板</strong>和<strong>类模板</strong>。</li></ul><h4 id="函数模板语法"><a href="#函数模板语法" class="headerlink" title="函数模板语法"></a>函数模板语法</h4><p>函数模板作用:<br>建立一个通用的函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br></pre></td></tr></table></figure><p><strong>解释</strong>:<br>template——声明创建模板</p><p>typena me——表明其后面的 符号为一种数据类型，可以用class代替。</p><p>T——通用的数据类型，名称可以替换，通常为大写字母。        </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="comment">//两个整型交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SwapInt</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = b;</span><br><span class="line">b = a;</span><br><span class="line">a = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个浮点型交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwapDouble</span><span class="params">(<span class="keyword">double</span> &amp;a,<span class="keyword">double</span> &amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="comment">//声明一个模板,告诉编译器后面的代码中紧跟着的T不要报错，T是一个通用数据类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T Temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = Temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//利用函数模板进行交换</span></span><br><span class="line"><span class="comment">//1.自动类型推导</span></span><br><span class="line">MySwap(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> c = <span class="number">11.1</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">12.2</span>;</span><br><span class="line"><span class="comment">//显示指定类型</span></span><br><span class="line">MySwap&lt;<span class="keyword">double</span>&gt;(c, d);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>函数模板利用关键字template</li><li>使用函数类型模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="函数模板注意事项"><a href="#函数模板注意事项" class="headerlink" title="函数模板注意事项"></a>函数模板注意事项</h4><p><strong>注意事项</strong>:</p><ul><li>自动类型推导，必须推导出一致的数据类型T才能使用</li><li>模板必须要确定出T的数据类型，才可以使用</li></ul><h4 id="函数模板案例"><a href="#函数模板案例" class="headerlink" title="函数模板案例"></a>函数模板案例</h4><p><strong>案例描述</strong>:</p><ul><li>利用函数模板封装一个排序的函数，可以对不用数据类型数组进行排序</li><li>排序规则从大到小，排序算法为选择排序</li><li>分别利用char数组和int数组进行测试</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//实现通用 对数组进行排序的函数</span></span><br><span class="line"><span class="comment">//规则 从大到小</span></span><br><span class="line"><span class="comment">//算法 选择 </span></span><br><span class="line"><span class="comment">//测试 char 数组 int 数组</span></span><br><span class="line"><span class="comment">//交换的函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(T arr[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max = i;<span class="comment">//认定最大值的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//认定的最大值比遍历出的数值要小，说明j下标的元素才是真正的最大值</span></span><br><span class="line"><span class="keyword">if</span> (arr[max] &lt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line">max = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (max != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//交换max和i元素</span></span><br><span class="line">mySwap(arr[max], arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> charArr[] = <span class="string">&quot;badcfe&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">sizeof</span>(charArr) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>);</span><br><span class="line">mySort(charArr, num);</span><br><span class="line">myPrint(charArr, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> intArr[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">78</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">sizeof</span>(intArr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">mySort(intArr, num);</span><br><span class="line">myPrint(intArr, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01(); </span><br><span class="line">test02();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="普通函数与函数模板的区别"><a href="#普通函数与函数模板的区别" class="headerlink" title="普通函数与函数模板的区别"></a>普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板的区别</strong>:</p><ul><li>普通函数调用时可以发生自动类型转换(隐式类型推导)</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显式指定类型的方式，可以发生隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//普通函数与函数模板的区别</span></span><br><span class="line"><span class="comment">//普通函数调用可以发生隐式类型转换</span></span><br><span class="line"><span class="comment">//函数模板用自动类型推导不可以发生隐式类型转换</span></span><br><span class="line"><span class="comment">// 函数模板用显式指定类型 可以发生隐式类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数隐式类型转换</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myAdd01(a, c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动类型推导不行</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; myAdd02(a, c) &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式指定类型行</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myAdd02&lt;<span class="keyword">int</span>&gt;(a, c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:建议使用显式指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="普通函数与函数模板的调用规则"><a href="#普通函数与函数模板的调用规则" class="headerlink" title="普通函数与函数模板的调用规则"></a>普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配，优先调用函数模板</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用普通函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b,T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用重载模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//如果函数模板和普通函数都可以调用。优先调用普通函数。普通函数只有声明会报错</span></span><br><span class="line">myPrint(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过空模板的参数列表强制调用函数模板</span></span><br><span class="line">myPrint&lt;&gt;(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用重载模板</span></span><br><span class="line">myPrint(a, b, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数模板产生更好的匹配，优先调用函数模板</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">myPrint(c1, c2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性。</p><h4 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h4><p><strong>局限性</strong>：</p><p>模板的通用性并不是万能的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了。</p><p> <strong>再例如</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    &#123;......&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义类型，也无法正常运行。</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化</strong>的模板。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板并不是万能的，有些特定的数据类型，需要用具体化方式做特殊实现</span></span><br><span class="line"><span class="comment">//对比两个数据是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用具体化Person的版本来实现代码，具体优化优先调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;<span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person&amp; p1, Person&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">bool</span> ret = myCompare(a, b);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ret = myCompare(p1, p2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统系统的模板</li></ul><p>（知道模板怎么写，并且会有别人写好的模板就可以了。）</p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="类模板语法"><a href="#类模板语法" class="headerlink" title="类模板语法"></a>类模板语法</h4><p>类模板作用:</p><ul><li>建立一个通用类， 类中成员数据可以不具体指定，用一个虚拟的类型来代表</li></ul><p><strong>语法:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">类</span><br></pre></td></tr></table></figure><p><strong>解释</strong>:</p><p>template&lt; typename  T&gt;——声明创建模板</p><p>typename——表明其后面的符号是一种数据类型，可以用class代替</p><p>T——通用的数据类型，名称可以替换，通常为大写字母</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">NameType m_Name;</span><br><span class="line">AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// &lt;&gt;中是模板的参数列表</span></span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p1(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>);</span><br><span class="line">p1.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>类模板和函数模板语法相似，在声明模板template后面加类，次类称为类模板。</p><h4 id="类模板与函数模板的区别"><a href="#类模板与函数模板的区别" class="headerlink" title="类模板与函数模板的区别"></a>类模板与函数模板的区别</h4><p>类模板与函数模板的区别主要有两点:</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>, <span class="keyword">class</span> <span class="title">AgeType</span> =</span> <span class="keyword">int</span>&gt;<span class="comment">//默认参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(NameType name,AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">NameType m_Name;</span><br><span class="line">AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板没有自动类型推导的使用方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Person p(&quot;李四&quot;, 13);</span></span><br><span class="line">Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p(<span class="string">&quot;李四&quot;</span>, <span class="number">13</span>);<span class="comment">//只能用显示指定类型</span></span><br><span class="line">p.ShowPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板在模板参数列表中可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>&gt;p2(<span class="string">&quot;张三&quot;</span>, <span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>类模板使用只能用显式指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="类模板中的成员函数创建实际"><a href="#类模板中的成员函数创建实际" class="headerlink" title="类模板中的成员函数创建实际"></a>类模板中的成员函数创建实际</h4><p>类模板中成员函数和普通类中成员函数创建实际是有区别的:</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中的成员函数在调用时才去创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person show1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person show2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T obj;</span><br><span class="line"><span class="comment">//类模板中的成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">obj.showPerson1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">obj.showPerson2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass&lt;Person2&gt;m;</span><br><span class="line">m.func1();</span><br><span class="line"><span class="comment">//m.func2();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>类模板中的成员函数并不是一开始就创建的，在调用时才去创建。</p><h4 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h4><p>学习目标:<br><strong>类模板实例化出的对象，向函数传参的方式</strong></p><p>一共有三种传入方式</p><ol><li>指定传入的类型——直接显式对象的数据类型</li><li>参数模板化——将对象中的参数变为模板参数进行传递</li><li>整个类模板化——将这个对象类型，模板化进行传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板对象做函数参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1.指定传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPerson1</span><span class="params">(Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p1(<span class="string">&quot;张三&quot;</span>,<span class="number">11</span>);</span><br><span class="line">PrintPerson1(p1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.参数模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPerson2</span><span class="params">(Person&lt;T1, T2&gt;&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T1的数据类型为&quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T1).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T2的数据类型为&quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T2).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p2(<span class="string">&quot;李四&quot;</span>, <span class="number">12</span>);</span><br><span class="line">PrintPerson2(p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.整个类模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPerson3</span><span class="params">(T &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T的数据类型为&quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p3(<span class="string">&quot;赵四&quot;</span>, <span class="number">14</span>);</span><br><span class="line">PrintPerson3(p3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">test03();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛得是第一种，指定传入的类型</li></ul><h4 id="类模板与继承"><a href="#类模板与继承" class="headerlink" title="类模板与继承"></a>类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不想指定，编译器无法给子类分配内存‘</li><li>如果想灵活指定出父类中T的类型，子类也需要变为类模板</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板与继承</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base&lt;<span class="keyword">int</span>&gt;<span class="comment">//必须要知道父类中T的数据类型才能继承给子类</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想灵活指定父类中T类型，子类也需要变类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> :</span><span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(T1).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(T2).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>如果父类是类模板，子类需要指定出父类中T的数据类型。</p><h4 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h4><p><strong>学习目标</strong>：</p><p><strong>能够掌握类模板中的成员函数类外实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span> &gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::Person(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1,T2&gt;::showPerson()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p1(<span class="string">&quot;新二&quot;</span>, <span class="number">13</span>);</span><br><span class="line">p1.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>类模板中成员函数类外实现时，需要加上模板参数列表。</p><h4 id="类模板分文件编写"><a href="#类模板分文件编写" class="headerlink" title="类模板分文件编写"></a>类模板分文件编写</h4><p><strong>学习目标</strong>:</p><p>掌握类模板成员函数分文件编写产生的问题以及解决方式</p><p><strong>问题</strong>：<br><strong>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</strong></p><p><strong>解决</strong>：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2:将声明.h和实现.cpp在到同一个文件中，并更改后缀名为.hpp,hpp是约定俗成的名称，并不是强制</li></ul><p>.hpp文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name, T2 age);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1, T2&gt;::Person(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1, T2&gt;::showPerson()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.cpp文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Person.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p1(<span class="string">&quot;伞兵&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p1.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h4><p><strong>学习目标</strong>：<br>掌握类模板配合友元函数的类内和类外实现</p><p>全局函数类内实现，直接在类内声明友元即可、</p><p>全局函数类外实现，需要提前让编译器知道全局函数的存在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//通过全局函数打印Person的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提前让编译器知道Person类的存在</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span> &gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span></span><br><span class="line"><span class="comment">//类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPerosn2</span><span class="params">(Person&lt;T1, T2&gt;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;类外实现&quot;</span> &lt;&lt; p.m_Name &lt;&lt; p.m_Age &lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span> &gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//全局函数类内实现</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">PrintPerosn</span><span class="params">(Person&lt;T1,T2&gt;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_Name &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数类外实现</span></span><br><span class="line"><span class="comment">//加空模板参数列表</span></span><br><span class="line"><span class="comment">//如果全局函数 是类外实现 需要让编译器提前知道这个函数的存在</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> PrintPerosn2&lt;&gt;(Person&lt;T1, T2&gt;p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p(<span class="string">&quot;zbc&quot;</span>, <span class="number">12</span>);</span><br><span class="line">PrintPerosn(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p2(<span class="string">&quot;年轻人&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>建议全局函数做类内实现，用法简单，而且编译器可以直接识别。</p><h4 id="类模板案例"><a href="#类模板案例" class="headerlink" title="类模板案例"></a>类模板案例</h4><p><strong>案例描述</strong>:</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组汇中当前元素个数和数组的容量</li></ul><p>MyArry.hpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己的通用的数组类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//有参构造 参数 容量</span></span><br><span class="line">MyArry(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MyArry的有参构造调用&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">MyArry(<span class="keyword">const</span> MyArry&amp; arr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MyArry的拷贝构造调用&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line"><span class="comment">//this-&gt;pAddress = arr.pAddress;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//operator= 防止浅拷贝问题</span></span><br><span class="line">MyArry&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> MyArry&amp; arr)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MyArry的operator=调用&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先判断原来堆区是否有数据，如果有先释放</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBack</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断容量是否等于大小</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Capacity == <span class="keyword">this</span>-&gt;m_Size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = val;<span class="comment">//在数组末尾插入数据</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;<span class="comment">//更新数组大小</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopBack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让用户访问不到最后一个元素，即为尾删，逻辑删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标的方式访问数组中的元素</span></span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~MyArry()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MyArry的析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* pAddress;<span class="comment">//指针指向堆区开辟的真实数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_Capacity;<span class="comment">//数组容量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_Size;<span class="comment">//数组大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  test.cpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArry</span><span class="params">(MyArry &lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyArry &lt;<span class="keyword">int</span>&gt;arr1(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用尾插法向数组中插入数据</span></span><br><span class="line">arr1.PushBack(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的打印输出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintArry(arr1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的容量为&quot;</span> &lt;&lt; arr1.getCapacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的大小为&quot;</span> &lt;&lt; arr1.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的打印输出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">MyArry &lt;<span class="keyword">int</span>&gt;arr2(arr1);</span><br><span class="line">PrintArry(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">arr2.PopBack();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2尾删后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的容量为&quot;</span> &lt;&lt; arr2.getCapacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的大小为&quot;</span> &lt;&lt; arr2.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*MyArry&lt;int&gt;arr3(100);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr3 = arr1;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试自定义数据类型 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()&#123;&#125;;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPersonArry</span><span class="params">(MyArry&lt;Person&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot;年龄&quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyArry&lt;Person&gt;arr(<span class="number">10</span>);</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;伞兵1&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;伞兵2&quot;</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;伞兵3&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;伞兵4&quot;</span>, <span class="number">24</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;伞兵5&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据插入到数组中</span></span><br><span class="line">arr.PushBack(p1);</span><br><span class="line">arr.PushBack(p2);</span><br><span class="line">arr.PushBack(p3);</span><br><span class="line">arr.PushBack(p4);</span><br><span class="line">arr.PushBack(p5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line">PrintPersonArry(arr);</span><br><span class="line"><span class="comment">//输出容量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr容量为&quot;</span> &lt;&lt; arr.getCapacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出大小</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr大小为&quot;</span> &lt;&lt; arr.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>能够利用所学知识点实现通用的数组。</p><h2 id="STL初识"><a href="#STL初识" class="headerlink" title="STL初识"></a>STL初识</h2><h3 id="STL的诞生"><a href="#STL的诞生" class="headerlink" title="STL的诞生"></a>STL的诞生</h3><ul><li>长久以来，软件届就一直希望建立一种可重复利用的东西</li><li>C++的面向对象和泛型编程思想，目的就是复用性的提升</li><li>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li><li>为了建立数据结构和算法的一套标准，诞生了STL</li></ul><h3 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h3><ul><li>STL(Standard Template Library,标准模板库)</li><li>STL从广义上分为:容器(container)算法(algorithm)迭代器(iterator)</li><li>容器和算法之间通过迭代器进行无缝连接</li><li>STL几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="STL六大组建"><a href="#STL六大组建" class="headerlink" title="STL六大组建"></a>STL六大组建</h3><p> STL大体分为六大组件，分别是：容器、算法、迭代器、仿函数、适配器(配接器)、空间配置器。</p><ol><li>容器:各种数据结构，如vector、list、deque、set、map等，用来存放数据。</li><li>算法:常用的各种算法，如sort、find、copy、for_each等</li><li>迭代器:扮演了容器与算法之间的胶合剂</li><li>仿函数:行为类似函数，可作为算法的某种策略</li><li>适配器:一种用来修饰容器或者仿函数或迭代器结构的东西。</li><li>空间配置器:负责空间的配置与管理。</li></ol><h3 id="STL中容器、算法、迭代器"><a href="#STL中容器、算法、迭代器" class="headerlink" title="STL中容器、算法、迭代器"></a>STL中容器、算法、迭代器</h3><p><strong>容器</strong>:置物之所也</p><p>STL容器就是将运用最广泛的一些数据结构实现出来</p><p>常用的数据结构:数组、链表、树、栈、队列、集合、映射表等</p><p>这些容器分为序列式容器和关联式容器</p><p>​    <strong>序列式容器</strong>：强调值的排序，序列式容器中的每个元素均有固定的位置</p><p>​    <strong>关联式容器</strong>：二叉树结构体，各元素之间没有严格上的物理上的顺序关系</p><p><strong>算法</strong>：问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:质变算法和非质变算法</p><p>质变算法:是指运算过程中会更改区间内元素的内容。例如拷贝、查找、删除等等</p><p>非质变算法:是指在运算过程中不会更改区间内的元素内容，例如查找、</p><p>计数、遍历、寻找极值等等</p><p><strong>迭代器</strong>：容器和算法之间的的粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器。</p><p>迭代器的使用非常类似于指针，初学阶段我们可以先理解迭代器为指针。</p><p>迭代器种类:<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210728174303588.png" alt="image-20210728174303588"></p><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器。</p><h3 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a>容器算法迭代器初识</h3><p>了解STL容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="Vector存放内置数据类型"><a href="#Vector存放内置数据类型" class="headerlink" title="Vector存放内置数据类型"></a>Vector存放内置数据类型</h4><p>容器:vector</p><p>算法:for_each</p><p>迭代器:vector<int>::iterator</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//标准算法的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建了一个vector容器，数组</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="comment">//向容器中插入数据</span></span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过迭代器来访问容器中的数据</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator itBegin = v.begin();//起始迭代器，指向容器中第一个元素</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator itEnd = v.end();//结束迭代器，指向容器中最后一个元素的下一个位置</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//第一种遍历方式 </span></span><br><span class="line"><span class="comment">//while (itBegin != itEnd)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; *itBegin &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//itBegin++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种遍历方式</span></span><br><span class="line"><span class="comment">/*for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; *it &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种遍历方式 利用STL提供遍历算法</span></span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vector存放自定义数据类型"><a href="#Vector存放自定义数据类型" class="headerlink" title="Vector存放自定义数据类型"></a>Vector存放自定义数据类型</h4><p><strong>学习目标</strong>:vector中存放自定义数据类型，并打印输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//标准算法的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector中存放自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;a1&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;a2&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;a3&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;a4&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;a5&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//向容器中添加数据</span></span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line">v.push_back(p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历容器中的数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;年龄:&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person*&gt;v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;a1&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;a2&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;a3&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;a4&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;a5&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//向容器中添加数据</span></span><br><span class="line">v.push_back(&amp;p1);</span><br><span class="line">v.push_back(&amp;p2);</span><br><span class="line">v.push_back(&amp;p3);</span><br><span class="line">v.push_back(&amp;p4);</span><br><span class="line">v.push_back(&amp;p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; (*it)-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; (*it)-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vector容器嵌套容器"><a href="#Vector容器嵌套容器" class="headerlink" title="Vector容器嵌套容器"></a>Vector容器嵌套容器</h4><p><strong>学习目标</strong>:容器中嵌套容器，我们将所有数据进行遍历输出</p><p>(类似二维数组)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;v;</span><br><span class="line"><span class="comment">//创建小容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向小容器中添加数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i + <span class="number">1</span>);</span><br><span class="line">v2.push_back(i + <span class="number">2</span>);</span><br><span class="line">v3.push_back(i + <span class="number">3</span>);</span><br><span class="line">v4.push_back(i + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line">v.push_back(v3);</span><br><span class="line">v.push_back(v4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过大容器遍历所有数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator vit = (*it).begin(); vit != (*it).end(); vit++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *vit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STL常用容器"><a href="#STL常用容器" class="headerlink" title="STL常用容器"></a>STL常用容器</h2><h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><h4 id="string基本概念"><a href="#string基本概念" class="headerlink" title="string基本概念"></a>string基本概念</h4><p><strong>本质</strong>：</p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char*区别</strong>：</p><ul><li>char*是一个指针</li><li>string是一个类，类内部封装了char*,管理者个字符串，是一个char&amp;型的容器</li></ul><p><strong>特点</strong>：<br>strint类内部封装了很多成员方法</p><p>例如;查找find,拷贝copy,删除delete,替换replace,插入insert</p><p>string管理char*所分配的内存，不用但是赋值越界和取值越界等，由类内部进行负责</p><h4 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h4><p>构造函数原型</p><ul><li>string()创建一个空的字符串</li><li>string(const char* s)使用字符串s初始化</li><li>string(const string&amp; str)使用一个string对象初始化另一个string对象</li><li>string(int n,char c)使用n个字符c初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1;<span class="comment">//默认构造</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">&quot;hellow world&quot;</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;s2：&quot;</span>&lt;&lt;s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;s3&quot;</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h4><p><strong>功能描述</strong>;</p><ul><li>给string字符串进行赋值</li></ul><p><strong>赋值的函数原型</strong>：</p><ul><li>string&amp; operator = (const char* s)char*类型字符串 赋值给当前的字符串</li><li>string&amp; operator = (const string &amp;s)把字符串s赋给当前的字符串</li><li>string&amp; operator = (char c)把字符赋值给当前的字符串</li><li>string&amp; assign(const char* s)把字符串s赋值给当前的字符串</li><li>string&amp; assign(const char*s,int n)把字符串s的当前n个字符赋给当前的字符串</li><li>string&amp; assign(const string &amp;s)把字符串s赋给当前字符串</li><li>string&amp; assign(int n,char c)用n个字符c赋给当前字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1;</span><br><span class="line">str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str2;</span><br><span class="line">str2 = str1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str3;</span><br><span class="line">str3 = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str4;</span><br><span class="line">str4.assign(<span class="string">&quot;hello c艹&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str4=&quot;</span> &lt;&lt; str4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str5;</span><br><span class="line">str5.assign(<span class="string">&quot;hello c++&quot;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str5=&quot;</span> &lt;&lt; str5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str6;</span><br><span class="line">str6.assign(str5);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str6=&quot;</span> &lt;&lt; str6 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str7;</span><br><span class="line">str7.assign(<span class="number">10</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str7=&quot;</span> &lt;&lt; str7 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>string赋值方式很多，operator=这种方式是比较实用的。</p><h4 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h4><p><strong>功能描述</strong>:</p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型</strong>：</p><ul><li>string&amp; operator+=(const char* str)重载+=操作符</li><li>string&amp; operator+=(const char c)重载+=操作符</li><li>string&amp; operator+=(const string&amp; str)重载+=操作符</li><li>string&amp; append(const char* s)把字符串s连接到当前字符串结尾</li><li>string&amp; append(const char* s，int n)把字符串s的前n个字符连接到当前字符串的结尾</li><li>string&amp; append(const string &amp;s)同operator+=(const string&amp; str)</li><li>string&amp; append(const string &amp;s,int pos,int n)把字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;你&quot;</span>;</span><br><span class="line">str1 += <span class="string">&quot;是伞兵&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">str1 += <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;zbc&quot;</span>;</span><br><span class="line">str1 += str2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str3 = <span class="string">&quot;You&quot;</span>;</span><br><span class="line">str3.append(<span class="string">&quot; SB&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">str3.append(<span class="string">&quot;hahaha hahaha&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">str3.append(str2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">str3.append(str2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>字符串拼接的重载版本很多，初学阶段记住几种即可。</p><h4 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h4><p><strong>功能描述</strong>：</p><ul><li>查找:查找指定位置字符串是否存在</li><li>替换:在指定的位置替换字符串</li></ul><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210729171841276.png" alt="image-20210729171841276"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串的查找和替换</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="comment">//找到返回下标，找不到返回-1</span></span><br><span class="line"><span class="keyword">int</span> pos1 = str1.find(<span class="string">&quot;de&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos1=&quot;</span> &lt;&lt; pos1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> pos2 = str1.find(<span class="string">&quot;z&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos2=&quot;</span> &lt;&lt; pos2&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pos1 = str1.rfind(<span class="string">&quot;ab&quot;</span>);<span class="comment">//从右往左</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos1=&quot;</span> &lt;&lt; pos1 &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str2.replace(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);<span class="comment">//从1号位置起，3个字符替换为1111</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>find查找是从左往右，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h4><p><strong>功能描述</strong>:<br>字符串之间的比较</p><p><strong>比较方式</strong>:</p><p>字符串比较是按字符的ASCII码进行对比</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=返回<span class="number">0</span></span><br><span class="line">&gt;返回<span class="number">1</span></span><br><span class="line">&lt;返回<span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210729173302400.png" alt="image-20210729173302400"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;zello&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.compare(str2) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.compare(str2) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str1大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str2大&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。</p><h4 id="string字符读取"><a href="#string字符读取" class="headerlink" title="string字符读取"></a>string字符读取</h4><p>string中单个字符存取方式有两种</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210729174333189.png" alt="image-20210729174333189"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//通过[]访问单个字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//通过at方式访问的单个字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1.at(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改单个字符</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">str1.at(<span class="number">0</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><p>string字符串中单个字符存取有两种方式，利用[]或at</p><h4 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h4><p><strong>功能描述</strong>：</p><p>对string字符串进行插入和删除字符操作。</p><p><strong>函数原型</strong>:<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210729201545792.png" alt="image-20210729201545792"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//字符串 插入和删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">str.insert(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">str.erase(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>插入和删除的起始下标都是从0开始。</p><h4 id="string字串"><a href="#string字串" class="headerlink" title="string字串"></a>string字串</h4><p><strong>功能描述</strong>:<br>从字符串中获得想要的字串。</p><p><strong>函数原型</strong>:</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210729232821929.png" alt="image-20210729232821929"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string求字串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> subStr = str.substr(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;subStr=&quot;</span> &lt;&lt; subStr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> email = <span class="string">&quot;zhangsan@qq.com&quot;</span>;</span><br><span class="line"><span class="comment">//从邮箱地址中获取用户名信息</span></span><br><span class="line"><span class="keyword">int</span> pos = email.find(<span class="string">&quot;@&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> usrName = email.substr(<span class="number">0</span>, pos);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; usrName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>灵活的运用求字串功能，可以在实际开发中获取有效的信息。</p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><h4 id="vector基本概念"><a href="#vector基本概念" class="headerlink" title="vector基本概念"></a>vector基本概念</h4><p><strong>功能</strong>:<br>vector数据结构和数组非常相似，也称为单端数组</p><p>vector与普通数组<strong>区别</strong>:</p><p>不同之处在于数组是静态空间，而vector可以动态扩展</p><p><strong>动态扩展</strong>:</p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝到新空间，释放原空间。</li></ul><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210730104217790.png" alt="image-20210730104217790"></p><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h4><p><strong>功能描述</strong>:<br>创建vector容器</p><p><strong>函数原型</strong>:</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210730111800301.png" alt="image-20210730111800301"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器构造</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;<span class="comment">//默认构造 无参构造</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过区间的方式进行构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2(v1.begin(), v1.end());</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//n个elem方式构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3(<span class="number">10</span>, <span class="number">100</span>);<span class="comment">//10个100</span></span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(v3);</span><br><span class="line">printVector(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>vector的多种构造方式没有可比性，灵活使用即可。</p><h4 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h4><p><strong>功能描述</strong>：<br>给vector容器进行赋值</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210730113659471.png" alt="image-20210730113659471"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//vector赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值 operator= </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">v2 = v1;</span><br><span class="line">PrintVector(v2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//assign</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">v3.assign(v1.begin(), v1.end());<span class="comment">//闭 开</span></span><br><span class="line">PrintVector(v3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//n个elem方式赋值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">v4.assign(<span class="number">10</span>, <span class="number">100</span>);<span class="comment">//10个100</span></span><br><span class="line">PrintVector(v4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>vector赋值方式比较简单，使用operator=,或者assign都可以。</p><h4 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h4><p><strong>功能描述</strong>：<br>对vector容器的容量和大小操作</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210730114744210.png" alt="image-20210730114744210"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;v1的容量=&quot;</span> &lt;&lt; v1.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;v1的大小=&quot;</span> &lt;&lt; v1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新指定大小</span></span><br><span class="line">v1.resize(<span class="number">15</span>,<span class="number">100</span>);<span class="comment">//利用重载版本，可以指定默认填充值，第二个参数</span></span><br><span class="line">PrintVector(v1);<span class="comment">//如果重新指定的比原来的长，默认用0填充</span></span><br><span class="line"></span><br><span class="line">v1.resize(<span class="number">5</span>);</span><br><span class="line">PrintVector(v1);<span class="comment">//如果重新指定的比原来短，超出的部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>判断是否为空——empty</li><li>返回元素个数——size</li><li>返回容器容量——capacity</li><li>重新指定大小——resize</li></ul><h4 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h4><p><strong>功能描述</strong>：<br>对vector容器进行插入、删除操作</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210731111526154.png" alt="image-20210731111526154"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的插入和删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">v1.push_back(<span class="number">10</span>);</span><br><span class="line">v1.push_back(<span class="number">20</span>);</span><br><span class="line">v1.push_back(<span class="number">30</span>);</span><br><span class="line">v1.push_back(<span class="number">40</span>);</span><br><span class="line">v1.push_back(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">v1.pop_back();</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">v1.insert(v1.begin(), <span class="number">100</span>);</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line">v1.insert(v1.begin(), <span class="number">2</span>, <span class="number">1000</span>);</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 参数也是迭代器</span></span><br><span class="line">v1.erase(v1.begin());</span><br><span class="line">PrintVector(v1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="comment">//v1.erase(v1.begin(), v1.end());</span></span><br><span class="line">v1.clear();</span><br><span class="line">PrintVector(v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>尾插——push_back</li><li>尾删——pop_back</li><li>插入——insert(位置迭代器)</li><li>删除——erase(位置迭代器)</li><li>清空——clear</li></ul><h4 id="vector数据存取"><a href="#vector数据存取" class="headerlink" title="vector数据存取"></a>vector数据存取</h4><p><strong>功能描述</strong>：<br>对vector中的数据进行存取操作</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210731122906662.png" alt="image-20210731122906662"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器 数据存取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用[]访问数组中的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用at方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.at(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第一个元素</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素=&quot;</span> &lt;&lt; v1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最后一个元素</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最后一个元素=&quot;</span> &lt;&lt; v1.back()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>除了用迭代器获取vector中元素，[]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h4><p><strong>功能描述</strong>；<br>实现两个容器内元素进行互换</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210803114214740.png" alt="image-20210803114214740"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器互换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintVector(v1);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintVector(v2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">v1.swap(v2);</span><br><span class="line"></span><br><span class="line">PrintVector(v1);</span><br><span class="line">PrintVector(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实际 用途</span></span><br><span class="line"><span class="comment">//巧用swap可以收缩内存空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">v.resize(<span class="number">3</span>);<span class="comment">//重新指定大小</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//巧用swap收缩内存</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(v).swap(v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>swap可以使两个容器互换，可以达到实用的收缩内存效果。</p><h4 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h4><p><strong>功能描述</strong>：<br>减少vector在动态内存扩容时的扩展次数</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210803120835805.png" alt="image-20210803120835805"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器 预留空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//统计开辟次数</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>如果数据量较大，可以一开始利用reserve预留空间。</p><h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><h4 id="deque容器基本概念"><a href="#deque容器基本概念" class="headerlink" title="deque容器基本概念"></a>deque容器基本概念</h4><p><strong>功能</strong>：<br>双端数组，可以对头端进行插入删除操作</p><p><strong>deque与vector区别</strong>:</p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度会比vector快</li><li>vector访问元素时的速度会比deque快，这和两者内部实现有关</li></ul><p> <img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804100635832.png" alt="image-20210804100635832"></p><p>deque的内部工作原理</p><p>deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据。</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间。</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804101120562.png" alt="image-20210804101120562"></p><p>deque容器的迭代器也是支持随机访问的。</p><h4 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h4><p><strong>功能描述</strong>：</p><p>deque容器构造</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804101221795.png" alt="image-20210804101221795"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d2(d1.begin(), d1.end());</span><br><span class="line">PrintDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d3(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">PrintDeque(d3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d4(d3);</span><br><span class="line">PrintDeque(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>deque容器和vector容器的构造方式几乎一致，灵活使用即可。</p><h4 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h4><p><strong>功能描述</strong>：<br>给deque容器进行赋值</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804111712060.png" alt="image-20210804111712060"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//operator=赋值</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line">PrintDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//assign赋值</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d3;</span><br><span class="line">d3.assign(d1.begin(),d1.end());</span><br><span class="line">PrintDeque(d3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d4;</span><br><span class="line">d4.assign(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">PrintDeque(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>deque赋值操作也与vector相同，需熟练掌握。</p><h4 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h4><p><strong>功能描述</strong>：<br>对deque容器的大小进行操作</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804112658313.png" alt="image-20210804112658313"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"><span class="keyword">if</span> (d1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;空&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;不空&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque容器没有容量概念</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; d1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新指定大小,并填充</span></span><br><span class="line">d1.resize(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.resize(<span class="number">5</span>);</span><br><span class="line">PrintDeque(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>deque没有容量概念</li><li>判断是否为空——empty</li><li>返回元素个数——size</li><li>重新指定个数——resize</li></ul><h4 id="deque插入和删除"><a href="#deque插入和删除" class="headerlink" title="deque插入和删除"></a>deque插入和删除</h4><p><strong>功能描述</strong>：<br>向deque容器中插入和删除数据</p><p><strong>函数原型</strong>：<br>两端插入操作：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804115946422.png" alt="image-20210804115946422"></p><p>指定位置操作：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804120000708.png" alt="image-20210804120000708"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两端操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">d1.push_back(<span class="number">10</span>);</span><br><span class="line">d1.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">d1.push_front(<span class="number">100</span>);</span><br><span class="line">d1.push_front(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">PrintDeque(d1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">d1.pop_back();</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line">d1.pop_front();</span><br><span class="line">PrintDeque(d1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d2;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">d2.push_back(<span class="number">10</span>);</span><br><span class="line">d2.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">d2.push_front(<span class="number">100</span>);</span><br><span class="line">d2.push_front(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">PrintDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert插入</span></span><br><span class="line">d2.insert(d2.begin(), <span class="number">1000</span>);</span><br><span class="line">PrintDeque(d2);</span><br><span class="line"></span><br><span class="line">d2.insert(d2.begin(), <span class="number">2</span>,<span class="number">10000</span>);</span><br><span class="line">PrintDeque(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照区间进行插入</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d3;</span><br><span class="line">d3.push_back(<span class="number">1</span>);</span><br><span class="line">d3.push_back(<span class="number">2</span>);</span><br><span class="line">d3.push_back(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">d2.insert(d2.begin(), d3.begin(), d3.end());</span><br><span class="line">PrintDeque(d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d4;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">d4.push_back(<span class="number">10</span>);</span><br><span class="line">d4.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">d4.push_front(<span class="number">100</span>);</span><br><span class="line">d4.push_front(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">PrintDeque(d4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = d4.begin();</span><br><span class="line">it++;</span><br><span class="line">d4.erase(it);</span><br><span class="line">PrintDeque(d4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照区间方式删除</span></span><br><span class="line">d4.erase(d4.begin(), d4.end());</span><br><span class="line">PrintDeque(d4);</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">d4.clear();</span><br><span class="line">PrintDeque(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">test03();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插——push_back</li><li>尾删——pop_back</li><li>头插——push_front</li><li>头删——pop_front</li></ul><h4 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h4><p><strong>功能描述</strong>：<br>对deque中的数据的存取操作</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804122554441.png" alt="image-20210804122554441"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">d1.push_front(<span class="number">100</span>);</span><br><span class="line">d1.push_front(<span class="number">200</span>);</span><br><span class="line">d1.push_front(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过[]方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//通过at方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d1.at(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素=&quot;</span> &lt;&lt; d1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最后一个元素=&quot;</span> &lt;&lt; d1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>除了用迭代器获取deque容器中元素</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="deque排序"><a href="#deque排序" class="headerlink" title="deque排序"></a>deque排序</h4><p><strong>功能描述</strong>：<br>利用算法实现对deque容器进行排序</p><p><strong>算法</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210804170324824.png" alt="image-20210804170324824"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d1;</span><br><span class="line">d1.push_back(<span class="number">10</span>);</span><br><span class="line">d1.push_back(<span class="number">20</span>);</span><br><span class="line">d1.push_back(<span class="number">30</span>);</span><br><span class="line">d1.push_front(<span class="number">100</span>);</span><br><span class="line">d1.push_front(<span class="number">200</span>);</span><br><span class="line">d1.push_front(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序-默认升序</span></span><br><span class="line"><span class="comment">//对于支持随机访问的迭代器容器，都可以用sort算法对其进行排序</span></span><br><span class="line"><span class="comment">//vector容器也可以利用sort进行排序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(d1.begin(), d1.end());</span><br><span class="line">PrintDeque(d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例——评委打分"><a href="#案例——评委打分" class="headerlink" title="案例——评委打分"></a>案例——评委打分</h3><h4 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h4><p>有五名选手，选手ABCDE,10个评委分别对每一个选手打分，去除最高分和最低分，取平均分。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高分和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatPerson</span><span class="params">(<span class="built_in">vector</span>&lt;Person&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">name += nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(name, score)</span></span>;</span><br><span class="line"></span><br><span class="line">v.push_back(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScroe</span><span class="params">(<span class="built_in">vector</span>&lt;Person&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将评委的分数放入到deque容器中</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> score = rand() % <span class="number">41</span> + <span class="number">60</span>;</span><br><span class="line">d.push_back(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*cout &lt;&lt; &quot;选手:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;的分数是&quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">sort(d.begin(), d.end());</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除最低分和最高分</span></span><br><span class="line">d.pop_front();</span><br><span class="line">d.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取平均分</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br><span class="line">&#123;</span><br><span class="line">sum += *dit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> avg = sum / d.size();</span><br><span class="line"></span><br><span class="line">it-&gt;m_Score = avg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showScore</span><span class="params">(<span class="built_in">vector</span>&lt;Person&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;得分:&quot;</span> &lt;&lt; it-&gt;m_Score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建5名选手</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;v;</span><br><span class="line">CreatPerson(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">/*for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; (*it).m_Name &lt;&lt; &quot; &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给5名选手打分</span></span><br><span class="line">setScroe(v);</span><br><span class="line"><span class="comment">//显示最后的得分</span></span><br><span class="line">showScore(v);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h3><h4 id="stack基本概念"><a href="#stack基本概念" class="headerlink" title="stack基本概念"></a>stack基本概念</h4><p><strong>概念</strong>：<br>stack是一种先进后出的数据结构，它只有一个出口。</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805112418931.png" alt="image-20210805112418931"></p><p>栈中只有栈顶的元素才可以被外界使用，因此栈不允许有遍历行为。</p><p>栈可以判断容器是否为空。</p><p>栈可以返回元素个数。</p><p>栈中进入数据——进栈。</p><p>栈中弹出数据——出栈。</p><h4 id="stack常用接口"><a href="#stack常用接口" class="headerlink" title="stack常用接口"></a>stack常用接口</h4><p><strong>功能描述</strong>：</p><p>栈容器常用的对外接口。</p><p><strong>构造函数</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805113149343.png" alt="image-20210805113149343"></p><p><strong>赋值操作</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805113158783.png" alt="image-20210805113158783"></p><p><strong>数据存取</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805113211347.png" alt="image-20210805113211347"></p><p><strong>大小操作</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805113223145.png" alt="image-20210805113223145"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">s.push(<span class="number">1</span>);</span><br><span class="line">s.push(<span class="number">2</span>);</span><br><span class="line">s.push(<span class="number">3</span>);</span><br><span class="line">s.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;栈的大小:&quot;</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//只要栈不为空，就查看栈顶，并且执行出栈操作</span></span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;栈的大小:&quot;</span> &lt;&lt; s.size()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>入栈——push</li><li>出栈——pop</li><li>返回栈顶——top</li><li>判断栈是否为空——empty</li><li>返回栈大小——size</li></ul><h3 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h3><h4 id="queue容器基本概念"><a href="#queue容器基本概念" class="headerlink" title="queue容器基本概念"></a>queue容器基本概念</h4><p><strong>概念</strong>：<br>Queue是一种先进先出的数据结构，它有两个出口。</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805114017941.png" alt="image-20210805114017941"></p><p>只有队头和队尾能被外界访问，因此不允许有遍历行为。</p><p>队列容器允许从一端新增元素，从另一端移除元素。</p><p>队列中进入数据——入队。</p><p>队列中出数据——出队。</p><h4 id="queue常用接口"><a href="#queue常用接口" class="headerlink" title="queue常用接口"></a>queue常用接口</h4><p><strong>功能描述</strong>:<br>栈容器常用的对外接口。</p><p><strong>构造函数</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805114753060.png" alt="image-20210805114753060"></p><p><strong>赋值操作</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805114809771.png" alt="image-20210805114809771"></p><p><strong>数据存取</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805114820944.png" alt="image-20210805114820944"></p><p><strong>大小操作</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805114832232.png" alt="image-20210805114832232"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Person&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;s1&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;s2&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;s3&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;s4&quot;</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">q.push(p1);</span><br><span class="line">q.push(p2);</span><br><span class="line">q.push(p3);</span><br><span class="line">q.push(p4);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小=&quot;</span> &lt;&lt; q.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q.front().m_Name &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; q.front().m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小=&quot;</span> &lt;&lt; q.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>入队——push</li><li>出队——pop</li><li>返回队头元素——front</li><li>返回队尾元素——back</li><li>判断队是否为空——empty</li><li>返回队列大小——size</li></ul><h3 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h3><h4 id="list基本概念"><a href="#list基本概念" class="headerlink" title="list基本概念"></a>list基本概念</h4><p><strong>功能</strong>：将数据进行链式存储</p><p>**链表(list)**：是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接来实现的。</p><p>链表的组成：链表由一系列结点组成。</p><p>结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p><p>SLT中的链表是一个双向循环链表。</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805120915479.png" alt="image-20210805120915479"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器。</p><p>list的优点:</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点:</p><p>链表灵活，但是空间(指针域)和时间(遍历)额外耗费较大。</p><p>list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p><strong>总结</strong>：<br>STL中List和vector是两个最常用的容器，各有优缺点。</p><h4 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h4><p><strong>功能描述</strong>：<br>创建list容器</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805162828155.png" alt="image-20210805162828155"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l2(l1.begin(), l1.end());</span><br><span class="line">PrintList(l2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l3(l2);</span><br><span class="line">PrintList(l3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l4(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">PrintList(l4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>list构造方式同其他几个STL常用容器，熟练掌握即可。</p><h4 id="list赋值和交换"><a href="#list赋值和交换" class="headerlink" title="list赋值和交换"></a>list赋值和交换</h4><p><strong>功能描述</strong>：<br>给list容器进行赋值，以及交换list容器。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805163941142.png" alt="image-20210805163941142"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line"></span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l2;</span><br><span class="line">l2 = l1;<span class="comment">//operator=</span></span><br><span class="line">PrintList(l2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l3;</span><br><span class="line">l3.assign(l2.begin(), l2.end());</span><br><span class="line">PrintList(l3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l4;</span><br><span class="line">l4.assign(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">PrintList(l4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l5;</span><br><span class="line"></span><br><span class="line">l5.push_back(<span class="number">1</span>);</span><br><span class="line">l5.push_back(<span class="number">2</span>);</span><br><span class="line">l5.push_back(<span class="number">3</span>);</span><br><span class="line">l5.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l6;</span><br><span class="line">l6.push_back(<span class="number">4</span>);</span><br><span class="line">l6.push_back(<span class="number">3</span>);</span><br><span class="line">l6.push_back(<span class="number">2</span>);</span><br><span class="line">l6.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintList(l5);</span><br><span class="line">PrintList(l6);</span><br><span class="line"></span><br><span class="line">l5.swap(l6);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintList(l5);</span><br><span class="line">PrintList(l6);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>list赋值和交换能够灵活运用即可。</p><h4 id="list大小操作"><a href="#list大小操作" class="headerlink" title="list大小操作"></a>list大小操作</h4><p><strong>功能描述</strong>：<br>对list容器的大小进行操作。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805165335377.png" alt="image-20210805165335377"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;元素个数=&quot;</span> &lt;&lt; l1.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新指定大小</span></span><br><span class="line">l1.resize(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">PrintList(l1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>判断是否为空——empty</li><li>返回元素个数——size</li><li>重新指定个数——resize</li></ul><h4 id="list插入和删除"><a href="#list插入和删除" class="headerlink" title="list插入和删除"></a>list插入和删除</h4><p><strong>功能描述</strong>：<br>对list容器进行数据的插入和删除</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805170349557.png" alt="image-20210805170349557"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line"><span class="comment">//尾</span></span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//头</span></span><br><span class="line">l1.push_front(<span class="number">10</span>);</span><br><span class="line">l1.push_front(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">l1.pop_back();</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line">l1.pop_front();</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it = l1.begin();</span><br><span class="line">it++;</span><br><span class="line">l1.insert(it, <span class="number">1000</span>);</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//用的时候指定it</span></span><br><span class="line">it = l1.begin();</span><br><span class="line">l1.erase(++it);</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除</span></span><br><span class="line">l1.push_back(<span class="number">1000</span>);</span><br><span class="line">l1.push_back(<span class="number">1000</span>);</span><br><span class="line">l1.push_back(<span class="number">1000</span>);</span><br><span class="line">PrintList(l1);</span><br><span class="line">l1.remove(<span class="number">1000</span>);<span class="comment">//删除所有匹配的元素</span></span><br><span class="line"></span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">l1.clear();</span><br><span class="line">PrintList(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>尾插——push_back</li><li>尾删——pop_back</li><li>头插——push_front</li><li>头删——pop_front</li><li>插入——insert</li><li>删除——erase</li><li>移除——remove</li><li>清空——clear</li></ul><h4 id="list数据存取"><a href="#list数据存取" class="headerlink" title="list数据存取"></a>list数据存取</h4><p><strong>功能描述</strong>：<br>对list容器中数据进行存储。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805172011129.png" alt="image-20210805172011129"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list中不可以用[]访问容器中的元素</span></span><br><span class="line"><span class="comment">//at()也不行</span></span><br><span class="line"><span class="comment">//因为List本质是链表，不是用连续的线性空间存储数据，迭代器也是不支持随机访问的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个元素=&quot;</span> &lt;&lt; l1.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最后一个元素=&quot;</span> &lt;&lt; l1.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证迭代器是不支持随机访问的</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it = l1.begin();</span><br><span class="line">it++;<span class="comment">//支持++ --  双向</span></span><br><span class="line">it--;</span><br><span class="line"><span class="comment">//it = it+1;不行——不支持随机访问</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素——front</li><li>返回最后一个元素——back</li></ul><h4 id="list反转和排序"><a href="#list反转和排序" class="headerlink" title="list反转和排序"></a>list反转和排序</h4><p><strong>功能描述</strong>：<br>将容器中的元素反转，以及将容器中的数据进行排序。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210805172922727.png" alt="image-20210805172922727"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l1;</span><br><span class="line">l1.push_back(<span class="number">1</span>);</span><br><span class="line">l1.push_back(<span class="number">2</span>);</span><br><span class="line">l1.push_back(<span class="number">3</span>);</span><br><span class="line">l1.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;反转前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintList(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;反转后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l1.reverse();</span><br><span class="line">PrintList(l1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//降序 第一个数&gt;第二个数</span></span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;l2;</span><br><span class="line">l2.push_back(<span class="number">20</span>);</span><br><span class="line">l2.push_back(<span class="number">10</span>);</span><br><span class="line">l2.push_back(<span class="number">50</span>);</span><br><span class="line">l2.push_back(<span class="number">30</span>);</span><br><span class="line">l2.push_back(<span class="number">40</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintList(l2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有不支持随机访问迭代器的容器不可以用标准算法</span></span><br><span class="line"><span class="comment">//不支持随机访问迭代器的容器，内部会提供对应的一些算法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">l2.sort();</span><br><span class="line">PrintList(l2);</span><br><span class="line"></span><br><span class="line">l2.sort(myCompare);<span class="comment">//降序</span></span><br><span class="line">PrintList(l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>反转——reverse</li><li>排序——sort(成员函数)</li></ul><h4 id="排序案例"><a href="#排序案例" class="headerlink" title="排序案例"></a>排序案例</h4><p><strong>案例描述</strong>：将Person自定义类型进行排序，Person中属性有姓名、年龄、身高。</p><p><strong>排序规则</strong>：按照年龄进行升序，如果年龄相同则按照身高进行降序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age, <span class="keyword">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//指定排序规则</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comparePerson</span><span class="params">(Person &amp;p1,Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//按照年龄升序</span></span><br><span class="line"><span class="keyword">if</span> (p1.m_Age == p2.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//年龄相同 按照身高降序</span></span><br><span class="line"><span class="keyword">return</span> p1.m_Height &gt; p2.m_Height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p1.m_Age &lt; p2.m_Age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;Person&gt;L;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;s11&quot;</span>,<span class="number">23</span>,<span class="number">166</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;s12&quot;</span>,<span class="number">23</span>,<span class="number">156</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;s13&quot;</span>,<span class="number">23</span>,<span class="number">178</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;s14&quot;</span>,<span class="number">33</span>,<span class="number">172</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;s15&quot;</span>,<span class="number">43</span>,<span class="number">190</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p6</span><span class="params">(<span class="string">&quot;s16&quot;</span>,<span class="number">45</span>,<span class="number">175</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">L.push_back(p1);</span><br><span class="line">L.push_back(p2);</span><br><span class="line">L.push_back(p3);</span><br><span class="line">L.push_back(p4);</span><br><span class="line">L.push_back(p5);</span><br><span class="line">L.push_back(p6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;m_Name &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; it-&gt;m_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">L.sort(comparePerson);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;Person&gt;::iterator it = L.begin(); it != L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</li><li>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂。</li></ul><h3 id="set-multiset容器"><a href="#set-multiset容器" class="headerlink" title="set/multiset容器"></a>set/multiset容器</h3><h4 id="set基本概念"><a href="#set基本概念" class="headerlink" title="set基本概念"></a>set基本概念</h4><p><strong>简介</strong>：<br>所有元素都会在插入时被自动排序。</p><p><strong>本质</strong>：<br>set/multiset属于关联式容器，底层结构是用二叉树实现。</p><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素。</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="set构建和赋值"><a href="#set构建和赋值" class="headerlink" title="set构建和赋值"></a>set构建和赋值</h4><p><strong>功能描述</strong>：</p><p>创建set容器以及赋值。</p><p><strong>构造</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806172851153.png" alt="image-20210806172851153"></p><p><strong>赋值</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806172858687.png" alt="image-20210806172858687"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSet</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//只有insert,自动排序，不能插入重复数据</span></span><br><span class="line">s1.insert(<span class="number">30</span>);</span><br><span class="line">s1.insert(<span class="number">20</span>);</span><br><span class="line">s1.insert(<span class="number">10</span>);</span><br><span class="line">s1.insert(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s2(s1);</span><br><span class="line"></span><br><span class="line">PrintSet(s2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s3;</span><br><span class="line">s3 = s2;</span><br><span class="line">PrintSet(s3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入的数据会自动排序</li></ul><h4 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h4><p><strong>功能描述</strong>：<br>统计set容器大小以及交换set容器。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806173127646.png" alt="image-20210806173127646"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSet</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s1;</span><br><span class="line">s1.insert(<span class="number">10</span>);</span><br><span class="line">s1.insert(<span class="number">20</span>);</span><br><span class="line">s1.insert(<span class="number">30</span>);</span><br><span class="line">s1.insert(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小:&quot;</span> &lt;&lt; s1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s2;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s3;</span><br><span class="line"></span><br><span class="line">s2.insert(<span class="number">100</span>);</span><br><span class="line">s2.insert(<span class="number">200</span>);</span><br><span class="line">s2.insert(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">s3.insert(<span class="number">1</span>);</span><br><span class="line">s3.insert(<span class="number">2</span>);</span><br><span class="line">s3.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintSet(s2);</span><br><span class="line">PrintSet(s3);</span><br><span class="line">s2.swap(s3);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">PrintSet(s2);</span><br><span class="line">PrintSet(s3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>统计大小——size</li><li>判断是否为空——empty</li><li>交换容器——swap</li></ul><h4 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h4><p><strong>功能描述</strong>：<br>set容器进行插入数据和删除数据</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806173813649.png" alt="image-20210806173813649"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSet</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s1;</span><br><span class="line"></span><br><span class="line">s1.insert(<span class="number">2</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line">s1.insert(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line">s1.erase(s1.begin());</span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line">s1.erase(<span class="number">3</span>);</span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line">s1.erase(s1.begin(), s1.end());</span><br><span class="line">PrintSet(s1);</span><br><span class="line"></span><br><span class="line">s1.clear();</span><br><span class="line">PrintSet(s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>插入——insert</li><li>删除——erase</li><li>清空——clear</li></ul><h4 id="ser查找和统计"><a href="#ser查找和统计" class="headerlink" title="ser查找和统计"></a>ser查找和统计</h4><p><strong>功能描述</strong>：<br>对set容器进行查找数据以及统计数据</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806174340081.png" alt="image-20210806174340081"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSet</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s1;</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">2</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line">s1.insert(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos = s1.find(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos != s1.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到&quot;</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = s1.count(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//对于set而言 统计结果 0 或 1，因为无重复</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;个&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>查找——find(返回的是迭代器)</li><li>统计——count(对于set,结果为0或者1)</li></ul><h4 id="set和multiset区别"><a href="#set和multiset区别" class="headerlink" title="set和multiset区别"></a>set和multiset区别</h4><p><strong>学习目标</strong>：<br>掌握set和multiset的区别</p><p><strong>区别</strong>：</p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMultiSet</span><span class="params">(<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;&amp; ms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator it = ms.begin(); it != ms.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s1;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span>&gt;ret = s1.insert(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次</span></span><br><span class="line">ret = s1.insert(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;ms;</span><br><span class="line"></span><br><span class="line">ms.insert(<span class="number">10</span>);</span><br><span class="line">ms.insert(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">PrintMultiSet(ms);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h4><p><strong>功能描述</strong>：<br>成对出现的数据，利用对组可以返回两个数据。</p><p><strong>两种创建方式</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806180053425.png" alt="image-20210806180053425"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p(<span class="string">&quot;Tom&quot;</span>, <span class="number">11</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.first &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; p.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;p2 = <span class="built_in">make_pair</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p2.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p2.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>两种方式都可以创建对组，记住一种即可。</p><h4 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h4><p><strong>学习目标</strong>：<br>set容器默认排序规则为从小到大，掌握如何改变排序规则。</p><p><strong>主要技术点</strong>：<br>利用仿函数，可以改变排序顺序。</p><p><strong>内置类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//vs2019结尾加const</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt;s1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set容器要在还没插数据之前对排序进行改变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1.insert(<span class="number">10</span>);</span><br><span class="line">s1.insert(<span class="number">20</span>);</span><br><span class="line">s1.insert(<span class="number">30</span>);</span><br><span class="line">s1.insert(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt;::iterator it = s1.begin(); it != s1.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mycompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Person&amp; p1, <span class="keyword">const</span> Person&amp; p2)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Person, Mycompare&gt;s1;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;s1&quot;</span>,<span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;s2&quot;</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;s3&quot;</span>,<span class="number">33</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;s4&quot;</span>,<span class="number">44</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s1.insert(p1);</span><br><span class="line">s1.insert(p2);</span><br><span class="line">s1.insert(p3);</span><br><span class="line">s1.insert(p4);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Person, Mycompare&gt;::iterator it = s1.begin(); it != s1.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li><p>利用仿函数可以指定set容器的排序规则。</p></li><li><p>对于自定义数据类型，set<strong>必须指定排序规则</strong>才可以插入数据。</p></li></ul><h3 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="map/multimap容器"></a>map/multimap容器</h3><h4 id="map基本概念"><a href="#map基本概念" class="headerlink" title="map基本概念"></a>map基本概念</h4><p><strong>简介</strong>：</p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key(键值)，起到索引作用，第二个元素为value(实值)</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质</strong>：<br>map/multimap属于关联式容器，底层结构是用二叉树实现。</p><p><strong>优点</strong>：</p><p>可以根据key值快速找到value值</p><p><strong>区别</strong>：<br>map和multimap区别</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h4><p><strong>功能描述</strong>：<br>对map容器进行构造和赋值操作。</p><p><strong>函数原型</strong>：<br><strong>构造</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806184724565.png" alt="image-20210806184724565"></p><p><strong>赋值</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806184745670.png" alt="image-20210806184745670"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key=&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;value=&quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="string">&quot;   &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m2(m1);</span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m3;</span><br><span class="line">m3 = m2;</span><br><span class="line">PrintMap(m3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>map中所有元素都是成对出现，插入数据时要使用对组。</p><h4 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h4><p><strong>功能描述</strong>：<br>统计map容器大小以及交换map容器</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210806185502487.png" alt="image-20210806185502487"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key=&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;value=&quot;</span> &lt;&lt; (*it).second &lt;&lt; <span class="string">&quot;   &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m1.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大小=&quot;</span> &lt;&lt; m1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m2;</span><br><span class="line">m2.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">10</span>, <span class="number">1</span>));</span><br><span class="line">m2.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">20</span>, <span class="number">2</span>));</span><br><span class="line">m2.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">30</span>, <span class="number">3</span>));</span><br><span class="line">m2.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">40</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PrintMap(m1);</span><br><span class="line">PrintMap(m2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m1.swap(m2);</span><br><span class="line">PrintMap(m1);</span><br><span class="line">PrintMap(m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>统计大小——size</li><li>判断是否为空——empty</li><li>交换容器——swap</li></ul><h4 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h4><p><strong>功能描述</strong>:<br>map容器进行插入数据和删除数据</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807110709847.png" alt="image-20210807110709847"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key=&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;value=&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m1;</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">m1.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::value_type(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line">m1[<span class="number">4</span>] = <span class="number">40</span>;<span class="comment">//不建议这种，用途是利用key访问到value,不存在会自动创建，所以应该确定存在再访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m1[<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line">m1.erase(m1.begin());</span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line">m1.erase(<span class="number">3</span>);<span class="comment">//按照key删除</span></span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line">m1.erase(m1.begin(), m1.end());</span><br><span class="line">PrintMap(m1);</span><br><span class="line"></span><br><span class="line">m1.clear();</span><br><span class="line">PrintMap(m1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>map插入方式很多，记住其一即可</li><li>插入——insert</li><li>删除——erase</li><li>清空——clear</li></ul><h4 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h4><p><strong>功能描述</strong>：<br>对map容器进行查找和数据以及统计数据</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807113756573.png" alt="image-20210807113756573"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key=&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;value=&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;m1;</span><br><span class="line"></span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator pos = m1.find(<span class="number">3</span>);<span class="comment">//返回迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos != m1.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt;pos-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;pos-&gt;second&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map不允许插入重复key,0 or 1</span></span><br><span class="line"><span class="comment">//multimap可以大于1，可以重复</span></span><br><span class="line"><span class="keyword">int</span> num = m1.count(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>查找——find(返回的是迭代器)</li><li>统计——cout(对于map,结果为0或1)</li></ul><h4 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h4><p><strong>学习目标</strong>：<br>map容器默认排序规则为按照key值进行从小到大排序，掌握如何改变排序规则。</p><p><strong>主要技术点</strong>：<br>利用仿函数，可以改变排序规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span><span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, MyCompare&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;key=&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;value=&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>,MyCompare&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m1.insert(<span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">PrintMap(m1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则，同set容器</li></ul><h3 id="案例——员工分组"><a href="#案例——员工分组" class="headerlink" title="案例——员工分组"></a>案例——员工分组</h3><h4 id="案例描述-1"><a href="#案例描述-1" class="headerlink" title="案例描述"></a>案例描述</h4><ul><li>公司今天招聘了10个员工(ABCDEFGHIJ)，10名员工进入公司之后，需要指派员工在哪个部门工作。</li><li>员工信息有：姓名、工资组成、部门分为：策划、美术、研发</li><li>通过multimap进行信息的插入 key(部门编号)value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key,具体员工作为value,放入到multimap容器中</li><li>分部门显示员工信息</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CEHUA 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEISHU 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YANFA 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Salary;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatWorker</span><span class="params">(<span class="built_in">vector</span>&lt;Worker&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> NameSeed = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Worker worker;</span><br><span class="line">worker.m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">worker.m_Name += NameSeed[i];</span><br><span class="line"></span><br><span class="line">worker.m_Salary = rand() % <span class="number">10000</span> + <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将员工放到容器中</span></span><br><span class="line">v.push_back(worker);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetGroup</span><span class="params">(<span class="built_in">vector</span>&lt;Worker&gt;&amp; v, <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, Worker&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//产生随机编号</span></span><br><span class="line"><span class="keyword">int</span> deptId = rand() % <span class="number">3</span>;<span class="comment">//0 1 2</span></span><br><span class="line"><span class="comment">//key部门编号，valuse具体员工</span></span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(deptId, *it));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowWorkerByGroup</span><span class="params">(<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>,Worker&gt; &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;策划部门:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>,Worker&gt;::iterator pos = m.find(CEHUA);</span><br><span class="line"><span class="keyword">int</span> count = m.count(CEHUA);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; count ; pos++,index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;  工资:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;美术部门:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pos = m.find(MEISHU);</span><br><span class="line">count = m.count(MEISHU);</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;  工资:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;研发部门:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pos = m.find(YANFA);</span><br><span class="line">count = m.count(YANFA);</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;  工资:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建员工</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Worker&gt;vWorker;</span><br><span class="line">CreatWorker(vWorker);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; &quot; &lt;&lt; &quot;工资&quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, Worker&gt;mWorker;</span><br><span class="line">SetGroup(vWorker, mWorker);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组显示员工</span></span><br><span class="line">ShowWorkerByGroup(mWorker);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STL函数对象"><a href="#STL函数对象" class="headerlink" title="STL函数对象"></a>STL函数对象</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><h4 id="函数对象概念"><a href="#函数对象概念" class="headerlink" title="函数对象概念"></a>函数对象概念</h4><p><strong>概念</strong>：</p><ul><li>重载函数调用操作符的类，其对象也称为函数对象</li><li>函数对象使用重载()时，行为类似函数调用，也叫仿函数</li></ul><p><strong>本质</strong>：</p><p>函数对象(仿函数)是一个类，不是一个函数。</p><h4 id="函数对象使用"><a href="#函数对象使用" class="headerlink" title="函数对象使用"></a>函数对象使用</h4><p><strong>特点</strong>：</p><ul><li>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyAdd myadd;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myadd(<span class="number">10</span>, <span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyPrint()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> test)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">this</span>-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count;<span class="comment">//内部自己状态</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myprint;</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;MyPrint调用次数为:&quot;</span> &lt;&lt; myprint.count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doPrint</span><span class="params">(MyPrint&amp; mp, <span class="built_in">string</span> test)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mp(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myPrint;</span><br><span class="line">doPrint(myPrint, <span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">test03();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><p>仿函数写法非常灵活，可以作为参数进行传递。</p><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><h4 id="谓词概念"><a href="#谓词概念" class="headerlink" title="谓词概念"></a>谓词概念</h4><p><strong>概念</strong>:</p><ul><li>返回bool类型的仿函数称为谓词</li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接收两个参数，那么叫做二元谓词</li></ul><h4 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreaterFive</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找容器中，有没有大于5的数字</span></span><br><span class="line"><span class="comment">//CreaterFive()匿名函数对象</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator pos = find_if(v.begin(), v.end(), CreaterFive());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos == v.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了，大于5的数字为:&quot;</span> &lt;&lt; *pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>参数中只有一个的谓词，叫做一元谓词</p><h4 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val1,<span class="keyword">int</span> val2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">40</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变为降序</span></span><br><span class="line">sort(v.begin(), v.end(),MyCompare());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>参数只有两个的谓词，称为二元谓词。</p><h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><h4 id="内建函数对象意义"><a href="#内建函数对象意义" class="headerlink" title="内建函数对象意义"></a>内建函数对象意义</h4><p><strong>概念</strong>：<br>STL内建了一些函数对象</p><p><strong>分类</strong>：</p><ul><li>算数仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p><strong>用法</strong>：</p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件#include&lt; functional&gt;</li></ul><h4 id="算数仿函数"><a href="#算数仿函数" class="headerlink" title="算数仿函数"></a>算数仿函数</h4><p><strong>功能描述</strong>：</p><ul><li>实现四则运算</li><li>其中negate是一元运算，其它都是二元运算</li></ul><p><strong>仿函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807180847763.png" alt="image-20210807180847763"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;//内建函数对象头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//megate一元仿函数 取反仿函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">negate&lt;<span class="keyword">int</span>&gt;n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n(<span class="number">50</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//加法仿函数——其他算数仿函数同理</span></span><br><span class="line">plus&lt;<span class="keyword">int</span>&gt;p;<span class="comment">//默认认定传的是同种数据类型</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>使用内建函数对象时，需要引入头文件#include&lt; functional&gt;</p><h4 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h4><p><strong>功能描述</strong>：<br>实现关系对比</p><p><strong>仿函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807181430540.png" alt="image-20210807181430540"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">4</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort(v.begin(),v.end(), MyCompare());</span></span><br><span class="line"><span class="comment">//greater&lt;int&gt;() 内建函数对象</span></span><br><span class="line">sort(v.begin(),v.end(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>关系仿函数最常用的就是greater&lt;&gt;大于</p><h4 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h4><p><strong>功能描述</strong>：<br>实现逻辑运算</p><p><strong>函数原型</strong>:<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807182045371.png" alt="image-20210807182045371"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;v;</span><br><span class="line">v.push_back(<span class="literal">true</span>);</span><br><span class="line">v.push_back(<span class="literal">false</span>);</span><br><span class="line">v.push_back(<span class="literal">true</span>);</span><br><span class="line">v.push_back(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用逻辑非 将容器v 搬运到容器v2中，并执行取反操作</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;v2;</span><br><span class="line">v2.resize(v.size());</span><br><span class="line"></span><br><span class="line">transform(v.begin(), v.end(), v2.begin(),logical_not&lt;<span class="keyword">bool</span>&gt;());<span class="comment">//()代表对象的创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br> 逻辑仿函数实际应用较少，了解即可。</p><h2 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a><strong>概述</strong>:</h3><ul><li>算法主要是由头文件&lt; algorithm &gt;&lt; functional &gt; &lt; numeric &gt;组成</li><li>&lt; algorithm &gt;是所有STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等等。</li><li>&lt; functional &gt;定义了一些模板类，用以声明函数对象</li><li>&lt; numeric &gt;体积很小，只包括几个在序列上面进行简单数据运算的模板函数</li></ul><h3 id="常用遍历算法"><a href="#常用遍历算法" class="headerlink" title="常用遍历算法"></a>常用遍历算法</h3><p><strong>学习目标</strong>：<br>掌握常用的遍历算法</p><p><strong>算法简写</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807183624235.png" alt="image-20210807183624235"></p><h4 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h4><p><strong>功能描述</strong>：<br>实现遍历容器</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210807185600354.png" alt="image-20210807185600354"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print01</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print02</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">for_each(v.begin(), v.end(),Print01);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(v.begin(), v.end(), Print02());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>for_each在实际开发中是最常用的遍历算法，需要熟练掌握。</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p><strong>功能描述</strong>：</p><p>搬运容器到另一个容器中。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808121042420.png" alt="image-20210808121042420"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransForm</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vTarget;<span class="comment">//目标容器</span></span><br><span class="line">vTarget.resize(v.size());<span class="comment">//目标容器需要提前开辟空间</span></span><br><span class="line">transform(v.begin(), v.end(), vTarget.begin(), TransForm());</span><br><span class="line">for_each(vTarget.begin(), vTarget.end(), MyPrint());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>搬运的目标容器必须提前开辟空间，否则无法正常搬运。</p><h3 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h3><p><strong>学习目标</strong>：<br>掌握常用的查找算法</p><p><strong>算法简介</strong>:</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808122054017.png" alt="image-20210808122054017"></p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><strong>功能描述</strong>：<br>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808122207783.png" alt="image-20210808122207783"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载==</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Age == p.m_Age &amp;&amp; <span class="keyword">this</span>-&gt;m_Name == p.m_Name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="built_in">string</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find(v.begin(), v.end(), <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (it == v.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到&quot;</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;V;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;1&quot;</span>,<span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;2&quot;</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;3&quot;</span>,<span class="number">33</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;4&quot;</span>,<span class="number">44</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">V.push_back(p1);</span><br><span class="line">V.push_back(p2);</span><br><span class="line">V.push_back(p3);</span><br><span class="line">V.push_back(p4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;::iterator it = find(V.begin(), V.end(), p2);</span><br><span class="line"><span class="keyword">if</span> (it == V.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>利用find可以在容器中找指定的元素，返回值是迭代器。</p><h4 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h4><p><strong>功能描述</strong>：</p><p>按条件查找元素。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808152702486.png" alt="image-20210808152702486"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreaterFive</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find_if(v.begin(), v.end(), GreaterFive());</span><br><span class="line"><span class="keyword">if</span> (it == v.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greater20</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p.m_Age &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;V;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;1&quot;</span>,<span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;2&quot;</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;3&quot;</span>,<span class="number">33</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;4&quot;</span>,<span class="number">44</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">V.push_back(p1);</span><br><span class="line">V.push_back(p2);</span><br><span class="line">V.push_back(p3);</span><br><span class="line">V.push_back(p4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;::iterator it = find_if(V.begin(), V.end(), Greater20());</span><br><span class="line"><span class="keyword">if</span> (it == V.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; it-&gt;m_Name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h4><p><strong>功能描述</strong>：<br>查找相邻重复元素。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808154226890.png" alt="image-20210808154226890"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">7</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = adjacent_find(v.begin(), v.end());</span><br><span class="line"><span class="keyword">if</span> (it == v.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到相邻重复元素&quot;</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h4><p><strong>功能描述</strong>：<br>查找指定元素是否存在。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808154830292.png" alt="image-20210808154830292"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个容器必须是有序的序列，如果是无序的序列，结果未知</span></span><br><span class="line"><span class="keyword">bool</span> ret = binary_search(v.begin(), v.end(),<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>“<br>二分查找法效率很高，值得注意的是查找的容器中元素必须得是有序序列，否则结果未知。</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p><strong>功能描述</strong>：<br>统计元素个数。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808193158801.png" alt="image-20210808193158801"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">40</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = count(v.begin(), v.end(), <span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;s1&quot;</span>,<span class="number">11</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;s2&quot;</span>,<span class="number">12</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;s3&quot;</span>,<span class="number">13</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;s4&quot;</span>,<span class="number">14</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;s5&quot;</span>,<span class="number">14</span> )</span></span>;</span><br><span class="line"></span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line">v.push_back(p5);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = count(v.begin(), v.end(), p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>统计自定义数据类型时候，需要配合重载operator==</p><h4 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h4><p><strong>功能描述</strong>：<br>按条件统计元素个数。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808194050713.png" alt="image-20210808194050713"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greater20</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">40</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = count_if(v.begin(), v.end(), Greater20());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeGreater20</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Person&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p.m_Age &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Person&gt;v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;s1&quot;</span>,<span class="number">11</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;s2&quot;</span>,<span class="number">22</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;s3&quot;</span>,<span class="number">33</span> )</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;s4&quot;</span>,<span class="number">44</span> )</span></span>;</span><br><span class="line"></span><br><span class="line">v.push_back(p1); </span><br><span class="line">v.push_back(p2); </span><br><span class="line">v.push_back(p3); </span><br><span class="line">v.push_back(p4); </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = count_if(v.begin(), v.end(),AgeGreater20());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的排序算法"><a href="#常用的排序算法" class="headerlink" title="常用的排序算法"></a>常用的排序算法</h3><p><strong>学习目标</strong>：<br>掌握常用的排序算法。</p><p><strong>算法简介</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808195722775.png" alt="image-20210808195722775"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><strong>功能描述</strong>：</p><p>对容器内元素进行排序。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808201005005.png" alt="image-20210808201005005"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">60</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//升</span></span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降</span></span><br><span class="line">sort(v.begin(), v.end(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>sort属于开发中最常用的算法之一，需熟练掌握。</p><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h4><p><strong>功能描述</strong>：<br>洗牌 指定范围内的元素随机调整次序。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808201145530.png" alt="image-20210808201145530"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">for_each(v.begin(), v.end(),myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">random_shuffle(v.begin(), v.end());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:<br>random_shuffle洗牌算法比较使用，使用时记得加随机数种子。</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p><strong>功能描述</strong>：<br>两个容器元素合并，并存储到另一个容器中。</p><p><strong>函数原型</strong>:</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808201656219.png" alt="image-20210808201656219"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目标容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vTarget;</span><br><span class="line">vTarget.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">merge(v1.begin(),v1.end(),v2.begin(),v2.end(),vTarget.begin());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.begin(), vTarget.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><p>merge合并的两个容器必须得是有序序列。</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p><strong>功能描述</strong>:<br>将容器内元素进行反转。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808202328702.png" alt="image-20210808202328702"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">60</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">reverse(v.begin(), v.end());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:<br>reverse反转区间内元素，面试题可能涉及到。</p><h3 id="常用的拷贝和替换算法"><a href="#常用的拷贝和替换算法" class="headerlink" title="常用的拷贝和替换算法"></a>常用的拷贝和替换算法</h3><p><strong>学习目标</strong>:</p><p>掌握常用的拷贝和替换算法。</p><p><strong>算法简介</strong>:<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808203216709.png" alt="image-20210808203216709"></p><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p><strong>功能描述</strong>:</p><p>容器内指定范围的元素拷贝到另一容器中。</p><p><strong>函数原型</strong>“<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808203311990.png" alt="image-20210808203311990"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">v2.resize(v1.size());</span><br><span class="line">copy(v1.begin(), v1.end(), v2.begin());</span><br><span class="line"></span><br><span class="line">for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:<br>利用copy算法在拷贝时，目标容器记得提前开辟空间。</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p><strong>功能描述</strong>：<br>将容器内指定范围的旧元素修改为新元素。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808204349016.png" alt="image-20210808204349016"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">60</span>);</span><br><span class="line">v.push_back(<span class="number">50</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;替换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;替换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">replace(v.begin(), v.end(), <span class="number">20</span>, <span class="number">2000</span>);</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:<br>replace会替换区间内满足条件的所有元素。</p><h4 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h4><p><strong>功能描述</strong>：<br>将区间内满足条件的元素，替换成指定元素。</p><p><strong>函数原型</strong>：</p><p><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210808210008531.png" alt="image-20210808210008531"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Great30</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">60</span>);</span><br><span class="line">v.push_back(<span class="number">50</span>);</span><br><span class="line">v.push_back(<span class="number">30</span>);</span><br><span class="line">v.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;替换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;替换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">replace_if(v.begin(), v.end(),Great30(),<span class="number">3000</span>);</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件。</p><h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><p><strong>功能描述</strong>:互换两个容器的元素。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809092823770.png" alt="image-20210809092823770"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(v1.begin(), v1.end(), MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">for_each(v2.begin(), v2.end(), MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">swap(v1, v2);</span><br><span class="line"></span><br><span class="line">for_each(v1.begin(), v1.end(), MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">for_each(v2.begin(), v2.end(), MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>swap交换容器时，注意交换的容器是同种类型。</p><h3 id="常用算数生成算法"><a href="#常用算数生成算法" class="headerlink" title="常用算数生成算法"></a>常用算数生成算法</h3><p><strong>学习目标</strong>：<br>掌握常用的算数生成算法。</p><p><strong>注意</strong>：<br>算数生成算法属于小型算法，使用时包含的头文件为#include&lt; numeric &gt;</p><p><strong>算法简介</strong>:<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809093650001.png" alt="image-20210809093650001"></p><h4 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h4><p><strong>功能描述</strong>：<br>计算区间内容器元素累计总和。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809093837745.png" alt="image-20210809093837745"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数3是起始累加值</span></span><br><span class="line"><span class="keyword">int</span> total = accumulate(v.begin(), v.end(), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>accumulate使用时头文件注意是numeric，这个算法很实用。</p><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p><strong>功能描述</strong>：</p><p>向容器中填充指定的元素。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809094346943.png" alt="image-20210809094346943"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line">v.resize(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//后期重新填充</span></span><br><span class="line">fill(v.begin(),v.end(),<span class="number">100</span>);</span><br><span class="line">for_each(v.begin(), v.end(), MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：利用fill可以将容器区间内元素填充为指定的值。</p><h3 id="常用集合算法"><a href="#常用集合算法" class="headerlink" title="常用集合算法"></a>常用集合算法</h3><p><strong>学习目标</strong>：</p><p>掌握常用的集合算法。</p><p><strong>算法简介</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809094826986.png" alt="image-20210809094826986"></p><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h4><p><strong>功能描述</strong>：<br>求两个容器的交集。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809094922210.png" alt="image-20210809094922210"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vTarget;</span><br><span class="line"><span class="comment">//最特殊情况，大容器包含小容器，开辟空间 取消的容器的size即可</span></span><br><span class="line">vTarget.resize(min(v1.size(),v2.size()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回迭代器的位置是交集的末尾位置，帮助下面for_each划定区间</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itEnd = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.begin(), itEnd, MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>求交集的两个容器必须得是有序序列。</li><li>目标容器开辟空间需要从两个容器中取小值。</li><li>set_intersection返回值(迭代器)是交集中最后一个元素的位置。</li></ul><h4 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h4><p><strong>功能描述</strong>：<br>求两个集合的并集。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809100726718.png" alt="image-20210809100726718"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vTarget;</span><br><span class="line">vTarget.resize(v1.size() + v2.size());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itEnd = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line">for_each(vTarget.begin(), itEnd, MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ul><li>求并集的两个集合必须得是有序序列。</li><li>目标容器开辟空间需要两个容器相加。</li><li>set_union返回值(迭代器)是并集中最后一个元素的位置。</li></ul><h4 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h4><p><strong>功能描述</strong>：<br>求两个集合的差集。</p><p><strong>函数原型</strong>：<br><img src="/images/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B.assets/image-20210809103402355.png" alt="image-20210809103402355"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//考虑特殊情况</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vTarget;</span><br><span class="line"><span class="comment">//最特殊情况 两个容器没有交集 取两个容器大的size作为目标容器开辟的空间</span></span><br><span class="line">vTarget.resize(max(v1.size(), v2.size()));</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;v1和v2的差集&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itEnd = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.begin(),itEnd, MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;v2和v1的差集&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">itEnd = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.begin(), itEnd, MyPrint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>求差集的两个集合必须得是有序序列。</li><li>目标容器开辟空间需要从两个容器取较大值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种常见的排序算法</title>
      <link href="2021/07/25/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/07/25/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="排序的概念"><a href="#排序的概念" class="headerlink" title="排序的概念"></a>排序的概念</h2><p><strong>排序</strong>：所谓排序就是使一串记录，按照其中的某个或者某些关键字的大小，递增或递减排列起来的操作。</p><p><strong>稳定性</strong>：假定在待排序的记录序列中，存在多个具有相同关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i] = r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的，否则称为不稳定的。</p><p><strong>内部排序</strong>：数据元素全部放在内存汇中的排序。</p><p><strong>外部排序</strong>：数据元素太多不能同时放在内存中，根据排序过程的要求不能再内外存之间移动数据的排序。</p><h2 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h2><ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序<ul><li>选择排序</li><li>堆排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>归并排序<ul><li>归并排序</li></ul></li></ul><hr><p><strong>没有一个排序能解决所有问题，它们各有特点。</strong></p><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>直接插入排序是一种简单的插入排序法，其思想是：把待排序的记录按照其关键码值的大小逐个插入到一个已经排好的有序序列中，直到所有的记录插入完为止，得到一个新的序列。</p><p>例如：<strong>玩扑克牌，理牌的过程。</strong>先把你的牌放到一堆，你先不要动，发完之后直接将你所有的牌拿起来，进行理牌。</p><p>**时间复杂度是O(n²)**。</p><p><strong>最坏情况</strong>——逆序(6,5,4,3,2,1)就是一直都要放到第一个位置，完成升序。</p><p><strong>最好情况</strong>——顺序(1,2,3,4,5,6)没有一个数据需要挪动。</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>把第一个数当做一个有序区间，把第二个数当做要插入的数进行比较大小，重新排序，然后把前两个数当做一个有序区间……依次类推。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><span class="comment">//升序实现(降序同理)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];<span class="comment">//将要插入的数赋值给temp，因为跟前面的数进行比较的，end位置的数要移动到end+1上</span></span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//完成两种情况，1在中间找到了位置插入，2比所有的元素都小，插入到第一位。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解释-amp-图示"><a href="#解释-amp-图示" class="headerlink" title="解释&amp;图示"></a>解释&amp;图示</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*解释:</span></span><br><span class="line"><span class="comment">数组中[0,end]区间是有序的,要插入的数在end+1这个位置上，</span></span><br><span class="line"><span class="comment">将end+1这个位置上的值插入到[0,end]中，最后完成排序的数组[0,end+1]这个新的区间也是有序的*/</span></span><br><span class="line"><span class="comment">/*1.定义一个end找到数组的结尾元素(就是从第一个元素开始定义结尾)</span></span><br><span class="line"><span class="comment">2.定义一个end+1找到end的下一个位置</span></span><br><span class="line"><span class="comment">3.从end+1这个位置依次往前(end--)进行比较，如果比前一个数小就将end位置上的这个数放到end+1上</span></span><br><span class="line"><span class="comment">4.如果大于等于前面的这个数就放到前面的这个数的后面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622181717080.png" alt="image-20210622181717080"></p><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*理解:</span></span><br><span class="line"><span class="comment">就是将一个数组分成几组，依次进行排序，先取数组中第一个元素该元素下标为0，这时候end就是0,end+1就是他后面的元素，将end+1这个位置上的元素与end上的这个元素进行比较大小，完成第一次排序。</span></span><br><span class="line"><span class="comment">接着end是1，end+1就是2，将数组下标为2的这个元素与前面两个是元素进行比较，完成第二次排序。</span></span><br><span class="line"><span class="comment">如果end+1比end大就跳出当前while循环，a[end+1] = temp就相当于没动。</span></span><br><span class="line"><span class="comment">......依此类推。</span></span><br><span class="line"><span class="comment">知道end=元素个数-1，end+1就是最后一个元素的下标</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h5><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92.gif"></p><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArry</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestInsertSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span> &#125;;</span><br><span class="line">InsertSort(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">PrintArry(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestInsertSort();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622191017197.png" alt="image-20210622191017197"></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>可以认为是在直接插入排序的优化。</p><p>步骤：</p><ol><li>先进行预排序，让数组接近有序(不用挪很多)。</li><li>直接插入排序。</li></ol><h5 id="预排序"><a href="#预排序" class="headerlink" title="预排序"></a>预排序</h5><p><strong>分组排</strong></p><p>在直接插入排序中，最坏的情况就是逆序(6,5,4,3,2,1)了， 我们要挪动很多次。</p><p>假设间隔gap为一组，假定gap为2.</p><p><strong>使得大的数更快的移到后面，小的数更快的移动到前面。</strong></p><p><strong>进行多组间隔为gap的预排序，gap从大到小，越接近有序。</strong></p><p><strong>gap越大，大的数越快到达后面，小的数越快到达前面。</strong></p><p><strong>gap越大，预排完，越不接近有序。</strong></p><p><strong>gap越小，预排完，越接近有序。</strong></p><p><strong>间隔gap为1，就是直接插入排序。</strong></p><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622200937700.png" alt="image-20210622200937700"></p><h5 id="预排序代码实现"><a href="#预排序代码实现" class="headerlink" title="预排序代码实现"></a>预排序代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">voidShellSort(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">2</span>;<span class="comment">//gap=1时就是直接插入排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623100526254.png" alt="image-20210623100526254"></p><h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个代码巧妙就巧妙在于，可以把间隔为gap的多组数据进行同时插入排序</span></span><br><span class="line"><span class="comment">假定gap=2分为多组</span></span><br><span class="line"><span class="comment">1.当i=0时，end = 0;end+1=2;</span></span><br><span class="line"><span class="comment">2.i = 1时，end = 1;end +1 = 3;</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="动画演示-1"><a href="#动画演示-1" class="headerlink" title="动画演示"></a>动画演示</h5><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif"></p><h5 id="gap到底给多少"><a href="#gap到底给多少" class="headerlink" title="gap到底给多少"></a>gap到底给多少</h5><p>gap给的大，大的数去后面快，小的数去前面也快。整体的增益明显。</p><p>gap给固定的值是不对的，同一个gap，数据越多效果越差。</p><p>所以gap给的值一般与n有关，<strong>前提</strong>：<strong>保证最后gap是1</strong>，&gt;1的时候都是预排序，要保证最后一次gap为1进行直接插入排序</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArry</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestInsertSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line">ShellSort(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">PrintArry(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestInsertSort();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623114920050.png" alt="image-20210623114920050"></p><h5 id="速度对比"><a href="#速度对比" class="headerlink" title="速度对比"></a>速度对比</h5><p>那么希尔排序在执行速度方面到底比直接插入排序要快多少呢，我们编写一个代码来测试他的执行速度。</p><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>在测试速度的时候可以将解决方案改为Release,Release的优化更多，执行速度会快一些。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623202316892.png" alt="image-20210623202316892"></p><h6 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><span class="comment">//升序实现(降序同理)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试排序性能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSortSpeed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//创建2个数据个数为100000万个的数组来测试两个排序所用的时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span>* a1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line"><span class="keyword">int</span>* a2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line"><span class="comment">//给这几个数组附上随机值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i] = rand();</span><br><span class="line">a2[i] = a1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记录时间</span></span><br><span class="line"><span class="keyword">int</span> begin1 = clock();</span><br><span class="line">InsertSort(a1, N);<span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">int</span> end1 = clock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin2 = clock();</span><br><span class="line">ShellSort(a2, N);<span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">int</span> end2 = clock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所用时间(单位:毫秒)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;InsertSort:\t%d\n&quot;</span>, end1 - begin1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ShellSort:\t%d\n&quot;</span>, end2 - begin2);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="built_in">free</span>(a1);</span><br><span class="line"><span class="built_in">free</span>(a2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestSortSpeed();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623200420146.png" alt="image-20210623200420146"></p><p>很明显，希尔排序的效率快了不是一星半点。</p><h6 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h6><p><strong>希尔排序</strong>——gap =2；log以2为底N的对数，gap =3;log以3为底N的对数</p><p>​    <strong>解释</strong>:</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623201432081.png" alt="image-20210623201432081"></p><p>当gap很大的时候，数据跳的就很快，差不多每个数据都会挪一次，挪了N次。下面的预排序时间复杂度是O(N)。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623201926854.png" alt="image-20210623201926854"></p><p>当gap很小的时候，进行的预排序就越接近有序,这时的时间复杂度也是O(N)。</p><p>综上所述，希尔排序的时间复杂度是O(logN*N)或者O(log3 N *N)以3为底N的对数乘N。（3是gap，gap是可以改变的）</p><p>（时间复杂度logN的底数在没有的定说明的情况下都是1）</p><p>也有的说它的平均时间复杂度是O(N^1.3)</p><hr><p>假设有10万个数，直接插入排序时间复杂度N^2 = 10w*10w = 100亿</p><p>希尔排序时间复杂度N*logN =  10w *log20w  = 10w *17</p><p><strong>可以看出二者的效率差的很多</strong>。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>每次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始位置，直到全部的待排序数据元素排完。</p><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>几乎是最简单的一个排序，最好理解的排序，选出最小的数放到前面。</p><p>这里实现的是一个比较优化的版本——一次选出两个数。</p><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mini = begin;</span><br><span class="line"><span class="keyword">int</span> maxi = end;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[mini])</span><br><span class="line">&#123;</span><br><span class="line">mini = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[maxi])</span><br><span class="line">&#123;</span><br><span class="line">maxi = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[begin], &amp;a[mini]);</span><br><span class="line">        <span class="comment">//begin和maxi的重叠情况</span></span><br><span class="line">        <span class="comment">/*解决数组下标为begin这个位置的元素恰好就是maxi,</span></span><br><span class="line"><span class="comment">        经过上面这个Swap(&amp;a[begin], &amp;a[mini]);</span></span><br><span class="line"><span class="comment">        把对应数组下标[maxi]这个位置的值换到了数组下标[mini]这个位置上，</span></span><br><span class="line"><span class="comment">        此时的最大值在数组[mini]这个下标处。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">if</span> (begin == maxi)</span><br><span class="line">&#123;</span><br><span class="line">maxi = mini;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[end], &amp;a[maxi]);</span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p><strong>begin和maxi的重叠情况</strong>，如下图所示情况，相关解释已在上面的代码中给出。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628172121776.png" alt="image-20210628172121776"></p><h5 id="动画图解"><a href="#动画图解" class="headerlink" title="动画图解"></a>动画图解</h5><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif"></p><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>O(N²)</p><p>N,N-2.N-4……</p><p><strong>直接选择排序几乎是效率最差的一个排序</strong></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h5 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h5><p>堆排序涉及到二叉树了，(相关链接——<a href="https://blog.csdn.net/qq_51604330/article/details/117955503?spm=1001.2014.3001.5501">【树】之二叉树(C语言)(含图解)_半生瓜のblog-CSDN博客</a>),这篇文章中二叉树是用链表来实现的，除了用链表，二叉树其实还可以用数组来实现，按层序来处理。</p><p>**堆的逻辑结构是一棵完全二叉树(每一层都是满的，不满的是从左往右顺序放的)**。——想象出来的</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624172913562.png" alt="image-20210624172913562"></p><p><strong>堆的物理结构是一个数组</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624172928416.png" alt="image-20210624172928416"></p><p>也就是说，我们实际用的是数组，但是可以把他想象成一个二叉树。并且可以<strong>通过下标来计算他们的父子关系</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624173420805.png" alt="image-20210624173420805"></p><p>​    <strong>计算关系</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leftchild = parent* <span class="number">2</span>+<span class="number">1</span></span><br><span class="line">rightchild = parent* <span class="number">2</span>+<span class="number">2</span></span><br><span class="line">parent = (child<span class="number">-1</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>例如</strong>：这个数组中下标为3的d,它的左孩子的下标就是3*2+1 =7, 是h，看图,确实是h。</p><p>下标为4的e,它的父结点就是(4-1)/2 = 1(舍去小数)</p><h5 id="堆的两个特性"><a href="#堆的两个特性" class="headerlink" title="堆的两个特性"></a>堆的两个特性</h5><p><strong>结构性</strong>：用数组表示的完全二叉树。</p><p><strong>有序性</strong>：任一结点的关键字是其子树所有结点的最大值(或最小值)。</p><p><strong>最大堆(MaxHeap)<strong>也称</strong>大顶堆</strong>(大根堆)；最大值</p><p><strong>最小堆(MinHeap)<strong>也称</strong>小顶堆</strong>(小跟堆)；最小值</p><hr><p><strong>大堆要求</strong>:树中所有的父亲都大于等于孩子。</p><p><strong>小堆要求</strong>：树中所有的父亲都小于等于孩子。</p><p>大堆：对顶数据是最大的</p><p>小堆：对顶数据是最小的</p><p><strong>示例</strong>：下图就是一个小堆</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624182711156.png" alt="image-20210624182711156"></p><h5 id="如何建堆"><a href="#如何建堆" class="headerlink" title="如何建堆"></a>如何建堆</h5><p>堆排序本质就是选择排序，它也可以选数。</p><p><strong>示例</strong>：</p><h6 id="建小堆"><a href="#建小堆" class="headerlink" title="建小堆"></a>建小堆</h6><p>（大堆同理，换个符号）</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624194607431.png" alt="image-20210624194607431"></p><p><strong>向下调整算法</strong></p><p><strong>前提</strong>：<strong>左右子树都是小堆</strong>。</p><p>选出左右孩子中小的那个跟父亲比较，如果比父亲小就交换，然后再接着往下进行，依次类推。调到叶子结点就终止。</p><p><strong>动画演示</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%BB%BA%E5%B0%8F%E5%A0%86.gif"></p><h6 id="向下调整算法"><a href="#向下调整算法" class="headerlink" title="向下调整算法"></a>向下调整算法</h6><p>最多调整高度次logN</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> parent = root;</span><br><span class="line"><span class="keyword">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//默认是左孩子</span></span><br><span class="line"><span class="keyword">while</span> (child &lt;n)<span class="comment">//别超出数组下标的范围</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//选出左右孩子中大的那一个并且有两个孩子</span></span><br><span class="line"><span class="comment">//如果右孩子小于左孩子</span></span><br><span class="line"><span class="keyword">if</span> (child+<span class="number">1</span> &lt; n &amp;&amp; a[child + <span class="number">1</span>] &lt; a[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//因为默认是左孩子，所以将左孩子的下标+得到右孩子的下标</span></span><br><span class="line">child += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果左孩子小于等于右孩子则直接来到这里，此时child的值就是左孩子的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个孩子情况直接来到这里</span></span><br><span class="line"><span class="comment">//选出左右孩子小的那一个再和父对比</span></span><br><span class="line"><span class="comment">//如果孩子的值小于父亲的值，就交换这两个值(在数组中)的位置</span></span><br><span class="line"><span class="keyword">if</span> (a[child] &lt; a[parent])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[child], &amp;a[parent]);<span class="comment">// 交换这两个值</span></span><br><span class="line"><span class="comment">//孩子的孩子重复上述操作</span></span><br><span class="line">parent = child;</span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h6><p>（建大堆同理，换个符号即可。）</p><p>如果左右子树不是小堆怎么办呢？</p><p>那就不能直接使用向下调整算法，就得先把不是小堆的子树变成小堆。</p><p><strong>倒着从最后一棵非叶子结点的子树开始调。</strong></p><p><strong>注意</strong>：这个数组是按照想象出来的那棵完全二叉树从上王往下一层一层的往里面存的，所以，数组的最后一个数据(下标为n-1)，就是完全二叉树最下面一层的最右边的结点，从这个结点开始从上往下寻找各自的父亲（意思就=是上面的:<strong>倒着从最后一棵非叶子结点的子树开始调</strong>。）。</p><hr><p>建堆的时间复杂度是:O(N)</p><p><strong>推导过程:</strong></p><p>假设该堆为满二叉树，堆高度为h,假设每层高度hi,没层结点个数为ni,</p><p>则建堆的时间复杂度为：<br><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628112912208.png" alt="image-20210628112912208"></p><p><strong>建堆的次数公式</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628113153431.png" alt="image-20210628113153431"></p><p>利用高中所学知识，错位相减法，化简得。</p><p>t(n) = -h+2^h-1 ,（其中满二叉树的2^h-1 = N）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注意这里的i是从最后一个结点开始找上面的父亲(最后一个非叶子结点)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(a, n, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给出测试数组</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627202722050.png" alt="image-20210627202722050"></p><p><strong>验证</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627202850375.png" alt="image-20210627202850375"></p><p>建小堆完成。</p><p><strong>建大堆同理</strong>，换一个比较符号即可。</p><h5 id="堆排序为什么要建大堆？"><a href="#堆排序为什么要建大堆？" class="headerlink" title="堆排序为什么要建大堆？"></a>堆排序为什么要建大堆？</h5><p><strong>堆排序的本质是选择排序</strong>。</p><p>如果是建小堆，最小数在数组顶部，已经被选出来了，那么在剩下的数中要建一个堆，但是剩下的数都乱了，需要重新建堆，才能选出下一个数，建堆的时间复杂度是O(N),这样建队就没有效率优势了。并且建堆选数，还不如直接遍历选数。</p><p>第一次建堆O(N)</p><p>剩下的部分选数，时间复杂度是logN</p><p><strong>示例</strong>:</p><p><strong>小堆</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627204550544.png" alt="image-20210627204550544"></p><p><strong>大堆</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627204951603.png" alt="image-20210627204951603"></p><p><strong>正确的方式</strong>——建大堆，然后交换第一个数和最后一个数，继续进行向下调整算法，第二个和导数第2个数……。</p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注意这里的i是从最后一个结点开始找上面的父亲(最后一个非叶子结点)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(a, n, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[<span class="number">0</span>], &amp;a[end]);</span><br><span class="line"><span class="comment">//剩下的数继续进行向下调整 </span></span><br><span class="line">AdjustDown(a, end, <span class="number">0</span>);<span class="comment">//(还有n-1个数，end正好就是n-1)</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动画图解-1"><a href="#动画图解-1" class="headerlink" title="动画图解"></a>动画图解</h5><p>大约3min</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%A0%86%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B.gif"></p><p><strong>打印输出结果</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628101941008.png" alt="image-20210628101941008"></p><p><strong>性能测试</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628115338108.png" alt="image-20210628115338108"></p><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h4><p>比较值，交换顺序。</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>前一个数比后一个数大(小)就交换位置。</p><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//end控制边界</span></span><br><span class="line"><span class="keyword">int</span> end = n;</span><br><span class="line"><span class="keyword">while</span> (end &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; end; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>已经有序了就不要交换了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">exchange = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exchange == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><p>和直接插入排序对比谁更好呢？</p><p><strong>直接插入排序</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210701172736752.png" alt="image-20210701172736752"></p><p>如果是有序的情况下，他们的次数都是n。</p><p>如果是接近有序，12354</p><p>冒泡排序:N-1 + N -2 </p><p>直接插入排序: N</p><p>(<strong>直接插入排序对有序，接近有序，局部有序，适应性更强。</strong>)</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h5><p>任取待排序元素序列中的某个元素作为基准值，按照排序码将待排序集合分割成两子序列，左子序列中所有的元素均小于基准值，右子序列中所有元素均大于基准值，然后最左右子序列重复该过程，知道所有元素都排在相应位置上为止。</p><h5 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h5><p>选一个位置的值做关键字(key)，一般选择第一个或最后一个。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719094644325.png" alt="image-20210719094644325"></p><p>选谁做key，谁原本的位置就是个坑(Pivot)，将key的值保存起来，然后它原来的位置就可以被覆盖了，</p><h6 id="动画图解1"><a href="#动画图解1" class="headerlink" title="动画图解1"></a>动画图解1</h6><p>排一个数</p><p><strong>原数组</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719102402838.png" alt="image-20210719102402838"></p><p> <img src="/images/%E6%8E%92%E5%BA%8F.assets/%E6%8C%96%E5%9D%91%E6%B3%95.gif"></p><p><strong>第一次排序完成后结构如下</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719102328426.png" alt="image-20210719102328426"></p><h6 id="结构解释-amp-动画图解2"><a href="#结构解释-amp-动画图解2" class="headerlink" title="结构解释&amp;动画图解2"></a>结构解释&amp;动画图解2</h6><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719152209627.png" alt="image-20210719152209627"></p><p>此时关键字6的位置已经被确定，它左边的数都比它小，右边的数都比它大，如果它左右两边都是有序的，那么整个数组就有序里。</p><p>那么怎么让他的左右两边都是有序的呢？</p><p><strong>分治递归</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719154256998.png" alt="image-20210719154256998"></p><p>每次只选一个数，这个数只要保证自己的位置确定了就行。</p><p>这个区间被缩减到只有一个值的时候，就可以认为是有序的了。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719160216275.png" alt="image-20210719160216275"></p><p><img src="%E6%8E%92%E5%BA%8F.assets/%E6%8C%96%E5%9D%91%E6%B3%951%E9%80%92%E5%BD%92.gif"></p><p><strong>得到结构</strong>：有序数组</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719161213193.png" alt="image-20210719161213193"></p><p>本质上和二叉树的遍历是类似的。</p><h6 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h6><ol><li><p>快速排序整体的综合性能和使用场景都是比较好的，所以才敢叫快速排序</p></li><li><p>时间复杂度:</p><p>先看单趟排序的时间复杂度 ，<strong>O(N)</strong></p><p>最理想的情况就是每次选择的key都能二分 ，位置接近中间。最均匀的情况下，它能被分成一个满二叉树的形状。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719172933068.png" alt="image-20210719172933068"></p><p>快速排序的时间复杂度是:<strong>N*log以2为底N的对数</strong></p><p>与上述排序的速度对比中我们也能看出来快速排序的快速。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719181127087.png" alt="image-20210719181127087"></p></li></ol><h6 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h6><ol><li><p>快速排序什么情况下最坏?</p><p>有序逆序，因为，这两种每次只能排好一个数，时间复杂度是O(N²)</p></li><li><p>官方对于上面这两种情况下有一种解决方法——<strong>三数区中</strong>。</p></li></ol><p>因为有序的情况下中间这个数恰好是二分的，两边不选最大和最小的数。</p><p><strong>代码如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序——挖坑法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a,left,right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三数取中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;<span class="comment">//右移&gt;&gt;一位效果相同，效率略高</span></span><br><span class="line"><span class="keyword">if</span> (a[left] &lt; a[mid])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[left] &gt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// a[left] &gt;a[mid]</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[left] &lt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="小区间优化"><a href="#小区间优化" class="headerlink" title="小区间优化"></a>小区间优化</h6><p>消除掉最后几层递归调用。效果很不明显。</p><p><strong>代码如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a,left,right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (pivot - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, pivot - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - pivot &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + pivot + <span class="number">1</span>, right - (pivot + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="左右指针法"><a href="#左右指针法" class="headerlink" title="左右指针法"></a>左右指针法</h5><p>类似于挖坑法。</p><p>也是先选一个key,从左右开始向中间移动，左边比key小的，右边找比key大的，然后两个交换位置，最后重叠的位置就是key的位置。</p><h6 id="动画图解-2"><a href="#动画图解-2" class="headerlink" title="动画图解"></a>动画图解</h6><p>一次排序</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif"></p><h6 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PartSort2</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a, left, right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[right]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找小</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= a[key])</span><br><span class="line">&#123;</span><br><span class="line">--end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找大</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= a[key])</span><br><span class="line">&#123;</span><br><span class="line">++begin;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[begin], &amp;a[end]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(&amp;a[key], &amp;a[begin]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort2(a, left, right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (keyIndex - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, keyIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, keyIndex - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - keyIndex &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, keyIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + keyIndex + <span class="number">1</span>, right - (keyIndex + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前后指针法"><a href="#前后指针法" class="headerlink" title="前后指针法"></a>前后指针法</h5><p>cur找小，每次遇到比key小的值就停下来，++prev,交换prev和cur位置的值。</p><h6 id="动画图解-3"><a href="#动画图解-3" class="headerlink" title="动画图解"></a>动画图解</h6><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%89%8D%E5%90%8E%E6%8C%87%E9%92%88.gif"></p><h6 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickSort3</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a, left, right);</span><br><span class="line">swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"><span class="keyword">int</span> key = left;</span><br><span class="line"><span class="keyword">int</span> prev = left;</span><br><span class="line"><span class="keyword">int</span> cur = left + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cur &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur &lt; a[key] &amp;&amp; ++prev != cur)<span class="comment">//自己和自己交换没有意义——&amp;&amp;后面的条件</span></span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[cur], &amp;a[prev]);</span><br><span class="line">&#125;</span><br><span class="line">++cur;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[key], &amp;a[cur]);</span><br><span class="line"><span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort3(a, left, right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (keyIndex - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, keyIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, keyIndex - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - keyIndex &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, keyIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + keyIndex + <span class="number">1</span>, right - (keyIndex + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这三趟排序没有本质上的区别，只是单趟排序的规则不同。</strong></p><h5 id="非递归法"><a href="#非递归法" class="headerlink" title="非递归法"></a>非递归法</h5><h6 id="递归的缺陷"><a href="#递归的缺陷" class="headerlink" title="递归的缺陷"></a>递归的缺陷</h6><p>在极端情况下会发生栈溢出。</p><p>栈帧深度太深，栈空间不够用，可能会溢出。</p><p>例如:</p><p>递归实现1+2+3+…+n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;= <span class="number">1</span>?<span class="number">1</span>:f(n<span class="number">-1</span>)+n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归改非递归有两种方式</strong></p><p>1.直接改循环</p><p>2.借助数据结构的栈模拟递归过程</p><h6 id="借助栈实现"><a href="#借助栈实现" class="headerlink" title="借助栈实现"></a>借助栈实现</h6><p>（栈的相关文章——<a href="https://blog.csdn.net/qq_51604330/article/details/117674707?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162713276516780262552939%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162713276516780262552939&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-117674707.pc_v2_rank_blog_default&utm_term=%E6%A0%88&spm=1018.2226.3001.4450">栈</a>）</p><p>栈里面的区间就是需要被单趟分割排序的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSortNonR</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//栈是后进先出的,想先出走就得先入右</span></span><br><span class="line">Stack st;</span><br><span class="line">StackInit(&amp;st);</span><br><span class="line">StackPush(&amp;st, n - <span class="number">1</span>);</span><br><span class="line">StackPush(&amp;st, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;st))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> left = StackTop(&amp;st);</span><br><span class="line">StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right = StackTop(&amp;st);</span><br><span class="line">StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort1(a, left, right);</span><br><span class="line"><span class="comment">//left - keyIndex-1   keyIndex    keyIndex+1 - right </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( keyIndex + <span class="number">1</span> &lt; right)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;st, right);</span><br><span class="line">StackPush(&amp;st, keyIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; keyIndex - <span class="number">1</span>)<span class="comment">//还有多个值</span></span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;st, keyIndex <span class="number">-1</span> );</span><br><span class="line">StackPush(&amp;st, left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补充:</p><p>函数调用建立栈帧，栈帧中存储局部变量参数等等。</p><p>操作系统中内存的栈和堆与数据结构中的栈和堆要区分开来。</p><p> 队列也可以实现。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h4><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法，的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使</p><h4 id="概念-amp-动画图解"><a href="#概念-amp-动画图解" class="headerlink" title="概念&amp;动画图解"></a>概念&amp;动画图解</h4><p>如果一段区间分为左右两个半区间，<strong>假设都有序</strong>，用到归并算法。</p><p>依次对比，取小的放到新的临时数组。</p><p>当其中一个区间结束了直接把另外一个区间剩下的数拷过来。</p><p>(<strong>类似于两个有序链表的归并</strong>)</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif"></p><p>那么归并之前左右子区间无序怎么办？</p><p>往下分，递归接着归并。</p><p>为了节省内存空间，分成单个归并完就拷贝回去。</p><p>归并排序有空间复杂度的消耗，因为它的核心算法需要开辟一个临时数组。它的空间复杂度是O(N),这是它跟其他算法的主要差异。</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _MergeSort(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//left- mid.mid +1 - right——两段区间——如果这两段有序就可以进行归并了</span></span><br><span class="line">_MergeSort(a, left, mid, tmp);</span><br><span class="line">_MergeSort(a, mid + <span class="number">1</span>, right, tmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并</span></span><br><span class="line"><span class="keyword">int</span> begin1 = left, end1 = mid;</span><br><span class="line"><span class="keyword">int</span> begin2 = mid + <span class="number">1</span>, end2 = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = left;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[begin1] &lt; a[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝回去</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">_MergeSort(a, <span class="number">0</span>, n - <span class="number">1</span>, tmp);</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p>思想上类似于二叉树的后序遍历。</p><p>图中指举出左侧一条路径。</p><p>拆分——归并。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210724203050925.png" alt="image-20210724203050925"></p><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortNonR</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line"><span class="comment">//每组数据个数</span></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span> (gap &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// [i, i+gap-1] [i+gap,i+2*gap-1]</span></span><br><span class="line"><span class="keyword">int</span> begin1 = i, end1 = i + gap - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> begin2 = i + gap, end2 = i + <span class="number">2</span> * gap - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并过程中右半区间可能就不存在</span></span><br><span class="line"><span class="keyword">if</span> (begin2 &gt;= n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并过程中右半区间算多了, 修正一下</span></span><br><span class="line"><span class="keyword">if</span> (end2 &gt;= n)</span><br><span class="line">&#123;</span><br><span class="line">end2 = n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = i;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[begin1] &lt; a[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝回去</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= end2; ++j)</span><br><span class="line">&#123;</span><br><span class="line">a[j] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">gap *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论递归非递归归并排序的时间复杂度都是0(N*logN)。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>归并排序也叫做外排序。还可以对文件中的数据进行排序。</p><p>假设10的数据放到硬盘的文件中，要排序，如何排呢？<br>可能内存不够，假设有一个G的内存可用，10g的文件拆分成10个1G的文件，并且让10个1G的文件有序。</p><p>一次读文件，每一读1G到内存中，放到一个数组，用快速排序对其排序，再写到一个文件，再继续读下一个1G的数据。</p><h4 id="特性总结-1"><a href="#特性总结-1" class="headerlink" title="特性总结"></a>特性总结</h4><ol><li>归并排序的缺点在于需要O(N)的空间复杂度，归并排序的思考更多是解决在磁盘中的外排序问题。</li><li>时间复杂度：O(N*lohN)</li><li>空间复杂度：O(N)</li><li>稳定性:稳定</li></ol><h3 id="排序算法复杂度及稳定性分析"><a href="#排序算法复杂度及稳定性分析" class="headerlink" title="排序算法复杂度及稳定性分析"></a>排序算法复杂度及稳定性分析</h3><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210725103805011.png" alt="image-20210725103805011"></p><p>快速排序加了三数区中基本不会出现最坏情况。</p><p>稳定性是看相同的值相对顺序是否发生变化。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -算法 </tag>
            
            <tag> -排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现学生成绩管理系统(EasyX图形窗口)</title>
      <link href="2021/07/18/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3)/"/>
      <url>2021/07/18/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3)/</url>
      
        <content type="html"><![CDATA[<hr><p>代码文件下载链接——<a href="https://github.com/doraemon-hub-art/C-C--CODE-2021/tree/master/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">链接</a></p><hr><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3).assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="学生成绩管理系统"><a href="#学生成绩管理系统" class="headerlink" title="学生成绩管理系统"></a>学生成绩管理系统</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3).assets/stuman.png"></p><h2 id="流程-amp-注意要点"><a href="#流程-amp-注意要点" class="headerlink" title="流程&amp;注意要点"></a>流程&amp;注意要点</h2><ul><li>核心部分——<strong>EasyX</strong>显示图形界面，<strong>结构体数组和文件操作</strong>负责对数据进行各种操作。</li><li>只要一进去程序就对存储数据的文件进行读取，如果有数据直接读到学生结构体数组里面，得到当前结构体数组中的**数据数量(几个人)**，并将所有数据打印到屏幕上。</li><li>管理员用户<ul><li>输入密码验证——<strong>读取</strong>文件——验证用户输入是否正确。</li><li>显示所有数据——如果通过文件读到了数据会被打印到屏幕上，反之。如果没有读到数据，在添加数据之前都会在屏幕上显示”当前记录为空!”。<ul><li>各种方式的<strong>排序</strong>——对当前结构体数组中成员的数据，依照”按xx排序”，重新排序，均采用冒泡排序。其中值得注意的是，貌似EasyX的InputBox只能将你输入的内容保存到字符数组中，所以你需要将录入的成绩数据通过atof函数转化为浮点型，这里我采用的方法是: 先按照结构体数组中数据的存储顺序将每个人的某科成绩转化浮点型存储到一个成绩结构体数组中(在写这句话的时候想到，感觉也可以直接将各科的成绩存储到一个结构体数组中，然后在进行比较，可以缩减一下代码量)，然后利用冒泡循环对这个存成绩的结构体数组进行重新排序，<strong>要注意的是</strong>，<strong>这个存成绩的结构体数组中元素交换位置的同时</strong>，<strong>存学生各种数据结构体数组中的元素也要交换位置</strong>，这两个的数据的存储顺序是一样的，<strong>就是说一个结构体数组辅助另一个结构体数组进行排序</strong>，两个结构体需要同时发生变化。</li></ul></li><li>增删查改界面<ul><li>增——<strong>添加数据</strong>，以学号区分不同的人，姓名可以相同，但是学号每个是单独的一个，如果输入的学号已经存在，则弹窗提示，进行重新输入，直到输入通过限制条件，通过对输入的学号进行遍历，看看它是不是由<strong>纯数字</strong>组成，如果不是则弹窗提示输入<strong>格式错误</strong>，进行重新输入，直到格式正确为止。其中学生姓名不做输入格式限制，成绩同学号。完成全部输入之后进行数据保存，当前结构体人数++。如果添加的时候学号和姓名都是空的则判断为<strong>无效</strong>输入，操作无效。</li><li>查——<strong>查找数据</strong>，(删除数据和修改数据都要依靠查找数据来进行操作，只有先找到结构体里面确实<strong>有</strong>这个人，<strong>才</strong>能对他的数据进行操作)，通过输入学号或者姓名来查找一个人，在结构体数组中进行遍历来查找，<strong>找到</strong>则返回该同学在结构体数组对应的<strong>下标</strong>，然后将该同学的数据输入到屏幕上。反之，弹窗提示”查无此人”。</li><li>删——<strong>删除数据</strong>，<strong>先</strong>进行查找，找到了就弹窗提示是否确认删除，确认删除就利用循环，从要删除的这个人在结构体数组中的下标开始，<strong>依次</strong>将<strong>后面</strong>的一个数据覆盖到前面，完成后，结构体数组成员数量–。弹窗提示删除成功。</li><li>改——<strong>修改数据</strong>，同样<strong>先</strong>进行查找，找到了，InputBox提示输入新的数据，<strong>注意</strong>:与上面录入数据不同的是，这里新输入的学号需要<strong>先保存</strong>到临时创建的一个字符数组中，不能直接就存到要修改学生在结构体数组中对应的数据位置，因为如果是这样的话，下面在进行判断学号是否已经存在的时候就肯定是存在的了，需要在判断是否重复后，如果数据不重复，再把新输入的学号赋给要修改的变量，<strong>还需要注意</strong>的是：如果用户输入的新学号和原来的一样是可以的，所以这里需要多加一个判断，否则也会因为检查到<strong>数据重复</strong>而不能进行下一步。</li></ul></li></ul></li><li>普通用户<ul><li>显示全部数据及各种排序还有查找同上。</li><li><strong>需要注意的是</strong>:管理员用户和普通用户公用界面，例如:显示全部数据和查找的输入界面，点击返回键后的跳转需要加以判。宏定义一个全局整型变量，从哪点进来的就在这句之前给它赋一个新值，条件判断语句加以判断。</li></ul></li><li>缺陷<ul><li>数据显示无法分页，只能在有限的一个界面中最多显示17条数据。</li><li>代码量还可以再优化。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;//检测字符</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RecordNums 15<span class="comment">//结构体数组数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NowStudentNums = <span class="number">0</span>;<span class="comment">//当前记录人数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用数据结构</span></span><br><span class="line"><span class="comment">//用结构体数组和文件操作来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> s_Num[<span class="number">64</span>];<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">char</span> s_Name[<span class="number">64</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">char</span> s_Chinese[<span class="number">64</span>];<span class="comment">//语</span></span><br><span class="line"><span class="keyword">char</span> s_Math[<span class="number">64</span>];<span class="comment">//数</span></span><br><span class="line"><span class="keyword">char</span> s_English[<span class="number">64</span>];<span class="comment">//英</span></span><br><span class="line"><span class="keyword">double</span> s_SumScore;<span class="comment">//总分</span></span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生结构体数组</span></span><br><span class="line">Student StuArry[RecordNums];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建成绩结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Score</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> SuScore;<span class="comment">//subject score</span></span><br><span class="line">&#125;Score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建成绩结构体——大小同学生结构体数组</span></span><br><span class="line">Score SoArry[RecordNums];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理员结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Admin</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> UserName[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> PassWord[<span class="number">64</span>];</span><br><span class="line">&#125;Admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个管理员用户</span></span><br><span class="line">Admin AdminUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示全部数据的页面跳转标识</span></span><br><span class="line"><span class="keyword">int</span> FlagAI = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//查询找到页面跳转标识</span></span><br><span class="line"><span class="keyword">int</span> FlagFPT = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MainSteps</span></span><br><span class="line"><span class="comment">1.先搭处图形窗口的大致形态</span></span><br><span class="line"><span class="comment">2.逐步实现里面的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">图形界面实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置声明——查看请跳转到下面查看具体说明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminSignIn</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonUserPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAllInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">S1mplePrint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdDeSeMoPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStuInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReturnPosi</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyStudInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeSomeStu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcChinese</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcMath</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcEnglish</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcSumScore</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ScoreFormat</span><span class="params">(<span class="keyword">char</span> PerSuSc[])</span></span>;</span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FirstPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//只要进入程序就读取数据——获取当前NowStudentNums</span></span><br><span class="line">ReadInfor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//窗口大小</span></span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//鼠标操作1</span></span><br><span class="line">MOUSEMSG m1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//大标题</span></span><br><span class="line"><span class="keyword">char</span> FirstTitle[<span class="number">20</span>] = &#123; <span class="string">&quot;学生成绩管理系统&quot;</span> &#125;;</span><br><span class="line">settextstyle(<span class="number">60</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">150</span>, <span class="number">100</span>, FirstTitle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> FirstSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;管理员操作界面&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> FirstSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;普通用户操作界面&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> FirstSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;退出程序&quot;</span> &#125;;</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">450</span>, FirstSelect1);</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">510</span>, FirstSelect2);</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">570</span>, FirstSelect3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m1 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">445</span> &amp;&amp; m1.y &lt;= <span class="number">490</span>)<span class="comment">//管理员界面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加入管理员登录</span></span><br><span class="line">AdminSignIn();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">505</span> &amp;&amp; m1.y &lt;= <span class="number">550</span>)<span class="comment">//普通用户界面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">565</span> &amp;&amp; m1.y &lt;= <span class="number">610</span>)<span class="comment">//退出</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//先清除一下</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//定义第二个鼠标操作</span></span><br><span class="line">MOUSEMSG m2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> SecondTitle1[<span class="number">5</span>] = &#123; <span class="string">&quot;管&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle2[<span class="number">5</span>] = &#123; <span class="string">&quot;理&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle3[<span class="number">5</span>] = &#123; <span class="string">&quot;员&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle4[<span class="number">5</span>] = &#123; <span class="string">&quot;操&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle5[<span class="number">5</span>] = &#123; <span class="string">&quot;作&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle6[<span class="number">5</span>] = &#123; <span class="string">&quot;界&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle7[<span class="number">5</span>] = &#123; <span class="string">&quot;面&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">150</span>, SecondTitle1);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">210</span>, SecondTitle2);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">270</span>, SecondTitle3);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">330</span>, SecondTitle4);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">390</span>, SecondTitle5);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">450</span>, SecondTitle6);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">510</span>, SecondTitle7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> SecondSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;显示所有数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;增删查改数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">240</span>, SecondSelect1);</span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">370</span>, SecondSelect2);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">500</span>, SecondSelect3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m2 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">240</span> &amp;&amp; m2.y &lt;= <span class="number">285</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示所有数据</span></span><br><span class="line">FlagAI = <span class="number">1</span>;</span><br><span class="line">cleardevice();</span><br><span class="line">ShowAllInfor();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">370</span> &amp;&amp; m2.y &lt;= <span class="number">415</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//增删查改界面</span></span><br><span class="line">cleardevice();</span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">500</span> &amp;&amp; m2.y &lt;= <span class="number">545</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">cleardevice();</span><br><span class="line">FirstPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通用户界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonUserPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);<span class="comment">////////////////////////////////////////////////////////////////记得删</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先清除一下</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//定义第二个鼠标操作</span></span><br><span class="line">MOUSEMSG m3;</span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> SecondTitle1[<span class="number">5</span>] = &#123; <span class="string">&quot;普&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle2[<span class="number">5</span>] = &#123; <span class="string">&quot;通&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle3[<span class="number">5</span>] = &#123; <span class="string">&quot;用&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle4[<span class="number">5</span>] = &#123; <span class="string">&quot;户&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle5[<span class="number">5</span>] = &#123; <span class="string">&quot;操&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle6[<span class="number">5</span>] = &#123; <span class="string">&quot;作&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle7[<span class="number">5</span>] = &#123; <span class="string">&quot;界&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle8[<span class="number">5</span>] = &#123; <span class="string">&quot;面&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">150</span>, SecondTitle1);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">210</span>, SecondTitle2);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">270</span>, SecondTitle3);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">330</span>, SecondTitle4);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">390</span>, SecondTitle5);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">450</span>, SecondTitle6);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">510</span>, SecondTitle7);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">570</span>, SecondTitle8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> ThirdSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;显示所有数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ThirdSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;查询数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ThirdSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">240</span>, ThirdSelect1);</span><br><span class="line">outtextxy(<span class="number">310</span>, <span class="number">370</span>, ThirdSelect2);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">500</span>, ThirdSelect3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m3 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">240</span> &amp;&amp; m3.y &lt;= <span class="number">285</span>)<span class="comment">//选项1</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示所有数据</span></span><br><span class="line">FlagAI = <span class="number">-1</span>;</span><br><span class="line">cleardevice();</span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">370</span> &amp;&amp; m3.y &lt;= <span class="number">415</span>)<span class="comment">//选项2</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line">FlagFPT = <span class="number">-1</span>;</span><br><span class="line">PrintFoudInfor();</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">500</span> &amp;&amp; m3.y &lt;= <span class="number">545</span>)<span class="comment">//选项3——返回</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">FirstPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//////////////////////////////////功能实现//////////////////////////////////////</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//录入信息——通过弹窗输入&amp;系统自动计算总分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//InputBox中的数字参数——限制输入内容的位数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//名字可以重复但是学号不能重复</span></span><br><span class="line"><span class="comment">//通过循环来检查是否有重复的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入学号</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow0[] = _T(<span class="string">&quot;请输入该学生的学号&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Num, <span class="number">9</span>, InputWindow0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FlagInput2 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算输入的字符串长度</span></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Num);</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[NowStudentNums].s_Num[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; StuArry[NowStudentNums].s_Num[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput2 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput2 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput2, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt; nums; e++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[NowStudentNums].s_Num[e] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; StuArry[NowStudentNums].s_Num[e] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput2 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput2 = GetHWnd();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput2, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FlagInput2 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断是否输入重复</span></span><br><span class="line"><span class="keyword">int</span> FlagInput1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(StuArry[NowStudentNums].s_Num, StuArry[i].s_Num) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FlagInput1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput1 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput1 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput1, <span class="string">&quot;该学生已经存在，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入姓名</span></span><br><span class="line">TCHAR InputWindow1[] = _T(<span class="string">&quot;请输入该学生的姓名&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Name, <span class="number">10</span>, InputWindow1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入语文成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow2[] = _T(<span class="string">&quot;请输入该学生的语文成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Chinese, <span class="number">4</span>, InputWindow2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_Chinese))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数学成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow3[] = _T(<span class="string">&quot;请输入该学生的数学成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Math, <span class="number">4</span>, InputWindow3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_Math))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入英语成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow4[] = _T(<span class="string">&quot;请输入该学生的英语成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_English, <span class="number">4</span>, InputWindow4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_English))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算总分</span></span><br><span class="line">StuArry[NowStudentNums].s_SumScore =</span><br><span class="line">atof(StuArry[NowStudentNums].s_Chinese) +</span><br><span class="line">atof(StuArry[NowStudentNums].s_Math) +</span><br><span class="line">atof(StuArry[NowStudentNums].s_English);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存数据</span></span><br><span class="line">SaveInfor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断输入的分数格式是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ScoreFormat</span><span class="params">(<span class="keyword">char</span> PerSuSc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(PerSuSc);</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (PerSuSc[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; PerSuSc[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput5 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput5, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增删查改界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdDeSeMoPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG SL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认将会按照总分排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);<span class="comment">//增</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);<span class="comment">//删</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);<span class="comment">//查</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);<span class="comment">//改</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);<span class="comment">//清空</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);<span class="comment">//返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">0</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">0</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">0</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">0</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">0</span>, <span class="string">&quot;选项&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">100</span>, <span class="string">&quot;添加&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">200</span>, <span class="string">&quot;删除&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">300</span>, <span class="string">&quot;查找&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">400</span>, <span class="string">&quot;修改&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">500</span>, <span class="string">&quot;清空&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印当前已经有的信息——记录为空的提示也在这里面</span></span><br><span class="line">S1mplePrint();</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入鼠标操作环节</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SL = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">90</span> &amp;&amp; SL.y &lt;= <span class="number">140</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">InputInfor();</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">190</span> &amp;&amp; SL.y &lt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">DeSomeStu();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">290</span> &amp;&amp; SL.y &lt;= <span class="number">340</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">FlagFPT = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">PrintFoudInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">390</span> &amp;&amp; SL.y &lt;= <span class="number">440</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">ModifyStudInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">490</span> &amp;&amp; SL.y &lt;= <span class="number">540</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确保误删——弹窗加以提示</span></span><br><span class="line">HWND hwndDel = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndDel, <span class="string">&quot;确认清空?&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用清空函数</span></span><br><span class="line">DeleteStuInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line"><span class="comment">//弹窗提示</span></span><br><span class="line"><span class="keyword">int</span> tips1 = MessageBox(hwndDel, <span class="string">&quot;清空成功！&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点击取消不做反应</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">590</span> &amp;&amp; SL.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdminPage();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助测试——显示当前人数</span></span><br><span class="line"><span class="comment">/*char temptps[5];</span></span><br><span class="line"><span class="comment">sprintf(temptps, &quot;%d&quot;, NowStudentNums);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HWND hwndTemp = GetHWnd();</span></span><br><span class="line"><span class="comment">int tips2 = MessageBox(hwndTemp, temptps, &quot;提示&quot;, MB_OK);*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);<span class="comment">//增</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);<span class="comment">//删</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);<span class="comment">//查</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);<span class="comment">//改</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);<span class="comment">//清空</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);<span class="comment">//返回</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存数据到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果学号和姓名都不是空的才写入文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Num) != <span class="number">0</span> &amp;&amp; <span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\n&quot;</span>,</span><br><span class="line">StuArry[NowStudentNums].s_Num,</span><br><span class="line">StuArry[NowStudentNums].s_Name,</span><br><span class="line">StuArry[NowStudentNums].s_Chinese,</span><br><span class="line">StuArry[NowStudentNums].s_Math,</span><br><span class="line">StuArry[NowStudentNums].s_English,</span><br><span class="line">StuArry[NowStudentNums].s_SumScore);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="comment">//保存完毕人数++</span></span><br><span class="line">NowStudentNums++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抹除全部数据再保存——主要用于修改功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInforModi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先删掉，但是不将人数置空所以不能调用之前的删除函数</span></span><br><span class="line">remove(<span class="string">&quot;StudentInforFile.txt&quot;</span>);</span><br><span class="line"><span class="comment">//如果学号和姓名都不是空的才写入文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[i].s_Num) != <span class="number">0</span> &amp;&amp; <span class="built_in">strlen</span>(StuArry[i].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\n&quot;</span>,</span><br><span class="line">StuArry[i].s_Num,</span><br><span class="line">StuArry[i].s_Name,</span><br><span class="line">StuArry[i].s_Chinese,</span><br><span class="line">StuArry[i].s_Math,</span><br><span class="line">StuArry[i].s_English,</span><br><span class="line">StuArry[i].s_SumScore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件中的信息-同步到当前结构体数组中,并同步得到NowStudentNums</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件中的数据读取到当前的结构体数组中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\t\n&quot;</span>,</span><br><span class="line">StuArry[i].s_Num,</span><br><span class="line">StuArry[i].s_Name,</span><br><span class="line">StuArry[i].s_Chinese,</span><br><span class="line">StuArry[i].s_Math,</span><br><span class="line">StuArry[i].s_English,</span><br><span class="line">&amp;StuArry[i].s_SumScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FileStudentNums = <span class="number">0</span>;<span class="comment">//辅助先得到文件中的人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取出文件中数据的人数个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; RecordNums; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[k].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当前人数——FileStudentNums不能设全局变量，否则多次读取的时候会出现问题</span></span><br><span class="line">NowStudentNums = ++FileStudentNums;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//彻底清空——删除文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStuInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">remove(<span class="string">&quot;StudentInforFile.txt&quot;</span>);</span><br><span class="line"><span class="comment">//置空当前人数</span></span><br><span class="line">NowStudentNums = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的单纯在屏幕上的对应位置打印出结构体中的每一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">S1mplePrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果为空就不往下执行</span></span><br><span class="line"><span class="keyword">if</span> (NowStudentNums == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">200</span>, <span class="string">&quot;当前记录为空!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= NowStudentNums; q++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> Nums[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(Nums, <span class="string">&quot;%d&quot;</span>, q);</span><br><span class="line"></span><br><span class="line"><span class="comment">//缩放字体</span></span><br><span class="line">settextstyle(<span class="number">25</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[q - <span class="number">1</span>].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">40</span> + <span class="number">40</span> * q, Nums);</span><br><span class="line"><span class="keyword">char</span> SuSo[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo, <span class="string">&quot;%.2f&quot;</span>, StuArry[q - <span class="number">1</span>].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">40</span> + <span class="number">40</span> * q, SuSo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有数据-通用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAllInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG SA;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//默认只是打印数据到屏幕上</span></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">0</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">0</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">0</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">0</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">0</span>, <span class="string">&quot;排序方式&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">100</span>, <span class="string">&quot;按语文排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">200</span>, <span class="string">&quot;按数学排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">300</span>, <span class="string">&quot;按英语排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">400</span>, <span class="string">&quot;按总分排序&quot;</span>);</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">S1mplePrint();<span class="comment">//默认只是单纯的打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SA = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">90</span> &amp;&amp; SA.y &lt;= <span class="number">140</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按语文排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcChinese();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">190</span> &amp;&amp; SA.y &lt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按数学排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcMath();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">290</span> &amp;&amp; SA.y &lt;= <span class="number">340</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按英语排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcEnglish();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">390</span> &amp;&amp; SA.y &lt;= <span class="number">440</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照总分排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcSumScore();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">590</span> &amp;&amp; SA.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//判断从哪个窗口点进来的</span></span><br><span class="line"><span class="keyword">if</span> (FlagAI == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AdminPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagAI == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回要查找/修改/删除人所在结构体的下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReturnPosi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//接收用户输入</span></span><br><span class="line"><span class="keyword">char</span> ReceInput[<span class="number">64</span>];</span><br><span class="line">TCHAR InputWindowFI[] = _T(<span class="string">&quot;请输入学号或者姓名进行(查找)(修改)(删除)&quot;</span>);</span><br><span class="line">InputBox(ReceInput, <span class="number">10</span>, InputWindowFI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行循环查找，一旦相同就跳出循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; NowStudentNums; w++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(StuArry[w].s_Name, ReceInput) == <span class="number">0</span> || <span class="built_in">strcmp</span>(StuArry[w].s_Num, ReceInput) == <span class="number">0</span>)<span class="comment">//返回0表示两个字符串相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没找到这人就返回-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印找到人 的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">(<span class="keyword">int</span> Position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG PFI;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">100</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">100</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">100</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">100</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">140</span>, StuArry[Position].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">140</span>, StuArry[Position].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">140</span>, StuArry[Position].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">140</span>, StuArry[Position].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">140</span>, StuArry[Position].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">char</span> SuSo[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo, <span class="string">&quot;%.2f&quot;</span>, StuArry[Position].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">140</span>, SuSo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PFI = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (PFI.x &gt;= <span class="number">690</span> &amp;&amp; PFI.x &lt;= <span class="number">850</span> &amp;&amp; PFI.y &gt;= <span class="number">590</span> &amp;&amp; PFI.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (PFI.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="keyword">if</span> (FlagFPT == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagFPT = <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在选项上</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询——这个负责最终的调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempPosi = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempPosi == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsF = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsF, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了——打印输出</span></span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">PrintFoudInfor(TempPosi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学生信息，找到返回下标，重新给他赋值，保存，否则直接弹窗警告</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyStudInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//直接套用上面查找的操作，在此基础上加一行修改前</span></span><br><span class="line"><span class="comment">//因为需要得到要修改人在结构体数组中的位置-下标，所以不能将函数直接拿过来用，得粘贴过来</span></span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempModi = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempModi == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsM = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsM, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了这个学生进行下面的操作</span></span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG Modi;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">40</span>, <span class="string">&quot;修改前&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">240</span>, <span class="string">&quot;修改后&quot;</span>);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">100</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">100</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">100</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">100</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">300</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">300</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">300</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">300</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">140</span>, StuArry[TempModi].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">140</span>, StuArry[TempModi].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">140</span>, StuArry[TempModi].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">140</span>, StuArry[TempModi].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">140</span>, StuArry[TempModi].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[TempModi].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> SuSo1[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo1, <span class="string">&quot;%.2f&quot;</span>, StuArry[TempModi].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">140</span>, SuSo1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入输入弹窗——重新书写内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学号</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于接收输入的学号，先覆盖进去</span></span><br><span class="line"><span class="keyword">char</span> TempModiNums[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">TCHAR InputWindow0[] = _T(<span class="string">&quot;请输入该学生的学号&quot;</span>);</span><br><span class="line">InputBox(TempModiNums, <span class="number">9</span>, InputWindow0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(TempModiNums,StuArry[TempModi].s_Num)==<span class="number">0</span>)<span class="comment">//如果输入的学号和本身位置的学号相同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不作出变化,直接break</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果输入的学号和本身位置的学号不同，则需要判断与整个结构体中是否有重复的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> FlagInput3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(TempModiNums);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (TempModiNums[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; TempModiNums[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput3 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput3 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput3, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FlagInput3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为什么这里新输入的学号，会显示在结构体数组中存在，</span></span><br><span class="line"><span class="comment">//因为这是修改函数，上面输入的学号已经覆盖到了他应该取得位置，</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路1.先别把要该的值覆盖进去，先进行判断</span></span><br><span class="line"><span class="comment">判断完成符合条件最后再把值赋给它，</span></span><br><span class="line"><span class="comment">思路2.将原本的学生结构体数组复制一份</span></span><br><span class="line"><span class="comment"> 在新的结构体数组中遍历判断</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> //这里选择第一种</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//判断是否输入重复</span></span><br><span class="line"><span class="keyword">int</span> FlagInput4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(TempModiNums, StuArry[i].s_Num) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FlagInput4 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput4 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput4 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput4, <span class="string">&quot;该学生已经存在，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagInput4 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//覆盖</span></span><br><span class="line"><span class="built_in">memcpy</span>(TempModiNums, StuArry[TempModi].s_Num, nums);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改姓名</span></span><br><span class="line">TCHAR InputWindow1[] = _T(<span class="string">&quot;请输入该学生的姓名&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Name, <span class="number">10</span>, InputWindow1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入语文成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow2[] = _T(<span class="string">&quot;请输入该学生的语文成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Chinese, <span class="number">4</span>, InputWindow2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_Chinese))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数学成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow3[] = _T(<span class="string">&quot;请输入该学生的数学成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Math, <span class="number">4</span>, InputWindow3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_Math))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入英语成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow4[] = _T(<span class="string">&quot;请输入该学生的英语成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_English, <span class="number">4</span>, InputWindow4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_English))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算总分</span></span><br><span class="line">StuArry[TempModi].s_SumScore =</span><br><span class="line">atof(StuArry[TempModi].s_Chinese) +</span><br><span class="line">atof(StuArry[TempModi].s_Math) +</span><br><span class="line">atof(StuArry[TempModi].s_English);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">340</span>, StuArry[TempModi].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">340</span>, StuArry[TempModi].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">340</span>, StuArry[TempModi].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">340</span>, StuArry[TempModi].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">340</span>, StuArry[TempModi].s_English);</span><br><span class="line"><span class="comment">//输出总分-加一个限制条件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[TempModi].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> SuSo2[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo2, <span class="string">&quot;%.2lf&quot;</span>, StuArry[TempModi].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">340</span>, SuSo2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line">SaveInforModi();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Modi = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (Modi.x &gt;= <span class="number">690</span> &amp;&amp; Modi.x &lt;= <span class="number">850</span> &amp;&amp; Modi.y &gt;= <span class="number">590</span> &amp;&amp; Modi.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (Modi.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//回到增删查改界面</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助测试——显示当前人数</span></span><br><span class="line"><span class="comment">/*char temptps[5];</span></span><br><span class="line"><span class="comment">sprintf(temptps, &quot;%d&quot;, NowStudentNums);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HWND hwndTemp = GetHWnd();</span></span><br><span class="line"><span class="comment">int tips2 = MessageBox(hwndTemp, temptps, &quot;提示&quot;, MB_OK);*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line"></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某个学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeSomeStu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先进行查找，找到返回下标，然后依次将该下标后面的数据往前推，最后人数--</span></span><br><span class="line"><span class="comment">//没找到就查无此人</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//因为要实现的功能不同，所以不能直接调用查找函数</span></span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempDelt = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempDelt == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsD = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsD, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了，确认是否删除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到了就提示是否确定删除</span></span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line"><span class="comment">//delete sure?</span></span><br><span class="line">HWND hndtipsDS = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsDS, <span class="string">&quot;确定删除？&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确定删除操作</span></span><br><span class="line"><span class="comment">//将这个元素的后一个依次迁移</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = TempDelt; d &lt; NowStudentNums - <span class="number">1</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line">StuArry[d] = StuArry[d + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在的人数-1</span></span><br><span class="line">NowStudentNums--;</span><br><span class="line"><span class="comment">//删除完成只是将当前结构体里面的数据清除了，但是文件中并没有作出更改</span></span><br><span class="line"><span class="comment">//更新到文件中</span></span><br><span class="line">SaveInforModi();<span class="comment">//用这个全部清空的函数，再对文件进行重写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取消删除不执行任何操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照语文成绩进行排序</span></span><br><span class="line"><span class="keyword">void</span> SortAcChinese()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用冒泡排序针对语文成绩对学生进行排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_Chinese);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; NowStudentNums; r++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - r; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照数学成绩进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcMath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每次给成绩结构体数组赋值都会被重新覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_Math);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; NowStudentNums; t++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - t; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照英语成绩进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcEnglish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每次给成绩结构体数组赋值都会被重新覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_English);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"><span class="comment">//因为顺序是一样的，可以把两个想象成一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; NowStudentNums; y++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - y; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照总分进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcSumScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[j - <span class="number">1</span>].s_SumScore &lt; StuArry[j].s_SumScore)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员登录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminSignIn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开文件将账号和密码读过来</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;AdminSignIn.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取到对应的管理员结构体数组</span></span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%s\t\n&quot;</span>, AdminUser.UserName, AdminUser.PassWord);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ReceAcctNumber[<span class="number">64</span>];</span><br><span class="line">TCHAR InputAcct[] = _T(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">InputBox(ReceAcctNumber, <span class="number">10</span>, InputAcct);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ReceAcctPassWord[<span class="number">64</span>];</span><br><span class="line">TCHAR InputPass[] = _T(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">InputBox(ReceAcctPassWord, <span class="number">10</span>, InputPass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户名和密码都正确才进度到管理员界面</span></span><br><span class="line"><span class="comment">//否则弹窗提示错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(AdminUser.UserName, ReceAcctNumber) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(AdminUser.PassWord, ReceAcctPassWord) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">AdminPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HWND SignError = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(SignError, <span class="string">&quot;用户名或密码错误!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FirstPage();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -EasyX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现推箱子小游戏2</title>
      <link href="2021/07/15/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2/"/>
      <url>2021/07/15/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2/</url>
      
        <content type="html"><![CDATA[<hr><p>我的小站——<a href="http://doraemon2.xyz/">半生瓜のblog</a></p><p>相关文章——<a href="https://blog.csdn.net/qq_51604330/article/details/115257644?spm=1001.2014.3001.5501">C语言实现推箱子小游戏</a></p><hr><h1 id="推箱子"><a href="#推箱子" class="headerlink" title="推箱子"></a>推箱子</h1><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715114136389.png" alt="image-20210715114136389"></p><p><strong>编译软件</strong>:VS2019</p><p><strong>下载</strong>：代码文件我已经上传到GitHub</p><p><a href="https://github.com/doraemon-hub-art/C-C--CODE-2021">链接</a></p><p><strong>下载最新的那个！(文件夹形式的)</strong></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>fopen scanf编译器认为的不安全报错</p><p><strong>解决</strong>:项目属性-C/C++-预处理器-预处理定义-编辑-加入_CRT_SECURE_NO_WARNINGS</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715102026788.png" alt="image-20210715102026788"></p></li><li><p>图形库函数xxx等问题</p><p><strong>解决</strong>:项目属性-高级-字符集-使用多字节字符集</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715101904943.png" alt="image-20210715101904943"></p></li><li><p>图形窗口注意贴图顺序以及参数</p></li><li><p>文件读取问题——<a href="https://zhidao.baidu.com/question/350312890.html">链接</a></p></li><li><p>相关有帮助的文章——<a href="https://www.shangmayuan.com/a/cb1f5059201c4ce3984abd99.html">鼠标操作</a></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>注意</strong>:</p><ol><li>被注释的代码大多数是命令行窗口的，少量是根本就没用的代码(没删)。</li><li>注释很多</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;//EasyX图形库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;//设置黑窗口的大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//获取键盘输入——无需回车</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;//计算时间</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.绘制地图</span></span><br><span class="line"><span class="comment">2.设置地图上不同的物品，包括:空气，墙，箱子，任务，箱子要放的位置(目的地)</span></span><br><span class="line"><span class="comment">对应数字</span></span><br><span class="line"><span class="comment">空气0</span></span><br><span class="line"><span class="comment">墙 1</span></span><br><span class="line"><span class="comment">目的地   2</span></span><br><span class="line"><span class="comment">箱子3</span></span><br><span class="line"><span class="comment">玩家4</span></span><br><span class="line"><span class="comment">//下面两个是动态发生变化的</span></span><br><span class="line"><span class="comment">箱子被推到了目的地5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.重置关卡</span></span><br><span class="line"><span class="comment">2.跳过关卡</span></span><br><span class="line"><span class="comment">4.计步器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Space  0<span class="comment">//空气</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Wall   1<span class="comment">//墙</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Final  2<span class="comment">//目的地</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Box    3<span class="comment">//箱子</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Player  4      <span class="comment">//玩家</span></span></span><br><span class="line"><span class="comment">//2+3 = 5——箱子到达目的地 </span></span><br><span class="line"><span class="comment">//玩家到了目的地和箱子到了目的地不同定义，因为是动态变化的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储-排序</span></span><br><span class="line"><span class="comment">1.创建一个结构体数组</span></span><br><span class="line"><span class="comment">2.遍历保存到文件中</span></span><br><span class="line"><span class="comment">3.读取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RecordPlayerNums 10 <span class="comment">//能够记录的玩家数量(次数)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体用来存储每次玩家的数据——为排序做准备</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RpArry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> steps;<span class="comment">//步数</span></span><br><span class="line">&#125;RpArry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个图片数组，用来贴图</span></span><br><span class="line">IMAGE img[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Loadimage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temFileName[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(temFileName, <span class="string">&quot;./images/%d.bmp&quot;</span>, i);</span><br><span class="line">loadimage(img + i, temFileName, <span class="number">63</span>, <span class="number">63</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RpArry rparry[RecordPlayerNums];<span class="comment">//直接创建一个全局的结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> RankPerson = <span class="number">0</span>;<span class="comment">//当期记录的人数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> LEVEL = <span class="number">0</span>;<span class="comment">//当前关卡，地图数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Step = <span class="number">0</span>;<span class="comment">//计步器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先读取文件中的数据，告诉新加入的数据RankPerson从哪开始</span></span><br><span class="line"><span class="keyword">int</span> FilePersonNums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------》推箱子《-------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------0.退出-----------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------1.开始游戏-------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------2.查看排行榜------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用二维数组来存储地图</span></span><br><span class="line"><span class="comment">//用三维数组来存储不同的地图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span> Map[<span class="number">6</span>][ROW][COL] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第二关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第三关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第四关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第六关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备用地图用来重置</span></span><br><span class="line"><span class="keyword">int</span> FakeMap[<span class="number">6</span>][ROW][COL] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第二关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第三关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第四关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第六关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出地图-符号-图形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//利用循环与条件判断语句的嵌套来打印地图</span></span><br><span class="line"><span class="comment">//注意i j的顺序，顺序不同，贴图不同！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Space)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Wall)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;▊&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;☆&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Player)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♀&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Box + Final)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Final + Player)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置关卡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReSetLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">10</span>; s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][s][b] = FakeMap[LEVEL][s][b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取键盘输入，进行箱子和玩家的移动——推箱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//应该先找到玩家在哪，然后再进行控制</span></span><br><span class="line"><span class="comment">//使用一个循环嵌套来找到玩家Player</span></span><br><span class="line"><span class="comment">//i是行，j是列</span></span><br><span class="line"><span class="comment">//利用i和j来保存找到玩家的下标</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//行-上下</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//列-左右</span></span><br><span class="line"><span class="comment">//添加标记跳出嵌套循环</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//什么是玩家？</span></span><br><span class="line"><span class="comment">//玩家个体或者玩家进入到目的地里</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Player || Map[LEVEL][i][j] == Player + Final)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="keyword">if</span> (LEVEL &lt; <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按空格重置关卡\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按回车跳过关卡\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前步数%d&quot;</span>, Step);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//_getch接收键盘输入</span></span><br><span class="line"><span class="keyword">char</span> KeyBorad = _getch();</span><br><span class="line"><span class="comment">//移动操作</span></span><br><span class="line"><span class="keyword">switch</span> (KeyBorad)<span class="comment">//利用方向键和wasd来进行操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">什么时候可以进行移动？</span></span><br><span class="line"><span class="comment">前面是空气，或者是箱子，并且箱子后面不能是墙</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向上移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span>  <span class="number">72</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果玩家前面是-空气或者-目的地就可以移动</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i - <span class="number">1</span>][j] == Space || Map[LEVEL][i - <span class="number">1</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//玩家进行移动——加减操作——宏定义中已经给出都代表的是什么</span></span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//之前那个位置同样发生了变化</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果玩家的前面是箱子</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i - <span class="number">1</span>][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//并且箱子的前面是目的地或者空气</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i - <span class="number">2</span>][j] == Space || Map[LEVEL][i - <span class="number">2</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//箱子向上移动</span></span><br><span class="line">Map[LEVEL][i - <span class="number">2</span>][j] += Box;</span><br><span class="line"><span class="comment">//玩家跟着移动——覆盖之前箱子所在的位置</span></span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] -= Box;</span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//玩家之前的位置发生变化</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果下面是空气或者是目的地就可以进行移动</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i + <span class="number">1</span>][j] == Space || Map[LEVEL][i + <span class="number">1</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果下面是箱子</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i + <span class="number">1</span>][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//并且箱子下面是空气或者是目的地</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i + <span class="number">2</span>][j] == Space || Map[LEVEL][i + <span class="number">2</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//箱子往下面移动一个位置——其实并不是发生移动，而是要移动方向的位置上面显示的内容发生了变化,道理同上</span></span><br><span class="line">Map[LEVEL][i + <span class="number">2</span>][j] += Box;</span><br><span class="line"><span class="comment">//人往下面移动一个位置</span></span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] -= Box;</span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//人之前位置上变成空气</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断同上不做解释</span></span><br><span class="line"><span class="comment">//向左移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>A<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">1</span>] == Space || Map[LEVEL][i][j - <span class="number">1</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">1</span>] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">2</span>] == Space || Map[LEVEL][i][j - <span class="number">2</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">2</span>] += Box;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] -= Box;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向右移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">1</span>] == Space || Map[LEVEL][i][j + <span class="number">1</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">1</span>] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">2</span>] == Space || Map[LEVEL][i][j + <span class="number">2</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">2</span>] += Box;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] -= Box;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空格重置关卡</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">&#123;</span><br><span class="line">ReSetLevel();</span><br><span class="line">ShowMap();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳关</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line"><span class="keyword">if</span> (LEVEL &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">LEVEL++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否过关</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PassLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果里面所有的箱子全到了目的地，就通关</span></span><br><span class="line"><span class="comment">//嵌套循环，地图里面没有箱子了就是通关了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//system()</span></span><br><span class="line"><span class="comment">//过了就重置关卡(有点重复)</span></span><br><span class="line">ReSetLevel();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopWindow</span><span class="params">()</span></span>;<span class="comment">//前置声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line">ShowMap();</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">settextcolor(RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;当前步数:&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>,<span class="number">0</span>,<span class="string">&quot;第&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> q[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(q, <span class="string">&quot;%d&quot;</span>, LEVEL+<span class="number">1</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>,<span class="number">0</span>, q);</span><br><span class="line">outtextxy(<span class="number">380</span>,<span class="number">0</span>,<span class="string">&quot;关&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, Step);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">30</span>, s);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">570</span>, <span class="string">&quot;空格键重置当前关卡&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">600</span>, <span class="string">&quot;回车键跳过当前关卡&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PassLevel())<span class="comment">//判断是否过关，过关就切换下一张地图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//过关——切换关卡</span></span><br><span class="line">LEVEL++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通关</span></span><br><span class="line"><span class="keyword">if</span> (LEVEL &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进入到这里说明所有关卡都已经通过</span></span><br><span class="line"><span class="comment">//int End = clock();//结束——计时</span></span><br><span class="line"><span class="comment">//int TimeResult = End - Begin;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你%s，完成了游戏\n&quot;</span>, rparry[RankPerson].name);</span><br><span class="line"><span class="comment">//printf(&quot;用时%d秒\n&quot;, TimeResult / 600);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将步数存储进结构体数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;走了%d步\n&quot;</span>, Step);</span><br><span class="line">PopWindow();<span class="comment">//恭喜过关的弹窗提示</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">PushBox();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存记录-文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SavePlayerRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件操作</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;PlayerRecord.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;\t%s\t%d\n&quot;</span>, rparry[RankPerson].name, rparry[RankPerson].steps);</span><br><span class="line">fclose(fp);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要实现一个按照步数大小的排行榜</span></span><br><span class="line"><span class="comment">也可以不往文件里面写，而是再读取文件的时候读出来，先输出步数小的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">////读取记录-文件</span></span><br><span class="line"><span class="comment">//void ReadPlayerRecord()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//FILE* fp = fopen(&quot;PlayerRecord.txt&quot;, &quot;r&quot;);</span></span><br><span class="line"><span class="comment">//if (fp == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录为空!\n&quot;);</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////左侧侧边栏</span></span><br><span class="line"><span class="comment">//int i = 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////先将原来的文件读取到结构体数组中——主函数第一行已经实现</span></span><br><span class="line"><span class="comment">////读取完毕，现在数据已经被保存到结构体数组中</span></span><br><span class="line"><span class="comment">////按照从小到大的顺序输出即可</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////读取器</span></span><br><span class="line"><span class="comment">//char Gets[164];</span></span><br><span class="line"><span class="comment">//while (!feof(fp))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//fgets(Gets, 164, fp);</span></span><br><span class="line"><span class="comment">////feop的问题——需要第二次检查结尾</span></span><br><span class="line"><span class="comment">//if (feof(fp))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//将文件读取到当前结构体数组——得出文件中有几个人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadRecordFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;PlayerRecord.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">//另一个文件</span></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;打开文件失败\n&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordPlayerNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s%d&quot;</span>, rparry[i].name, &amp;rparry[i].steps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取出文件中数据的人数个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordPlayerNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rparry[i].steps != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当前人数</span></span><br><span class="line">RankPerson = ++FilePersonNums;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序&amp;更新到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RecordBubbSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//交换的时候注意是结构体</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RankPerson; i++)</span><br><span class="line">&#123;</span><br><span class="line">RpArry Temprparry;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; RankPerson - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rparry[j - <span class="number">1</span>].steps &gt;= rparry[j].steps)</span><br><span class="line">&#123;</span><br><span class="line">Temprparry = rparry[j];</span><br><span class="line">rparry[j] = rparry[j - <span class="number">1</span>];</span><br><span class="line">rparry[j - <span class="number">1</span>] = Temprparry;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;排名\t玩家\t\t步数\t\n&quot;);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; RankPerson; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, i + 1);</span></span><br><span class="line"><span class="comment">//printf(&quot;\t%s\t\t%d\n&quot;, rparry[i].name, rparry[i].steps);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//FILE* fp = fopen(&quot;PlayerRecord.txt&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; RankPerson; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (rparry[i].steps != 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//fprintf(fp,&quot;\t%s\t%d\n&quot;,rparry[i].name,rparry[i].steps);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排行榜思路</span></span><br><span class="line"><span class="comment">1.自动读取文件中的内容，保存当前的结构体数组中</span></span><br><span class="line"><span class="comment">2.对结构体数组按照步数的大小进行重新排序</span></span><br><span class="line"><span class="comment">3.打印输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//删除文件&amp;清空用户记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeletePlayerRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="comment">//printf(&quot;确定清空？\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;1.确定 2.取消\n&quot;);</span></span><br><span class="line"><span class="comment">//int select = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;select);</span></span><br><span class="line"><span class="comment">//if (select == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////直接删除记录文件</span></span><br><span class="line"><span class="comment">//remove(&quot;PlayerRecord.txt&quot;);</span></span><br><span class="line"><span class="comment">////将当前人数置空</span></span><br><span class="line"><span class="comment">//RankPerson = 0;</span></span><br><span class="line"><span class="comment">//printf(&quot;清空完毕!\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;记录并未清除。\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接删除记录文件</span></span><br><span class="line">remove(<span class="string">&quot;PlayerRecord.txt&quot;</span>);</span><br><span class="line"><span class="comment">//将当前人数置空</span></span><br><span class="line">RankPerson = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;清空完毕!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphInputName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphRankPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面的首页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphFirImagesPg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOUSEMSG m;</span><br><span class="line"><span class="comment">//设置图形窗口大小</span></span><br><span class="line">initgraph(ROW * <span class="number">63</span>, COL * <span class="number">63</span>);<span class="comment">//SHOWCONSOLE显示命令行窗口</span></span><br><span class="line">Loadimage();</span><br><span class="line"></span><br><span class="line">setbkcolor(BLACK);</span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//刷新一次 略等于那个system(cls)</span></span><br><span class="line"></span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./topbc.jpg&quot;</span>, <span class="number">630</span>, <span class="number">630</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">405</span>, <span class="number">400</span>, <span class="number">430</span>);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">400</span>, <span class="number">470</span>);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">485</span>, <span class="number">400</span>, <span class="number">510</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">85</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> Title[] = <span class="string">&quot;推箱子&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select1[] = <span class="string">&quot;开始游戏&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select2[] = <span class="string">&quot;排行榜&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select3[] = <span class="string">&quot;退出游戏&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//大标题</span></span><br><span class="line">outtextxy(<span class="number">210</span>, <span class="number">150</span>, Title);</span><br><span class="line"><span class="comment">//下面的选项</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbkmode(TRANSPARENT);<span class="comment">// 去掉文字背景</span></span><br><span class="line">outtextxy(<span class="number">252</span>, <span class="number">405</span>, Select1);</span><br><span class="line">outtextxy(<span class="number">268</span>, <span class="number">445</span>, Select2);</span><br><span class="line">outtextxy(<span class="number">255</span>, <span class="number">485</span>, Select3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = GetMouseMsg();<span class="comment">//鼠标</span></span><br><span class="line"><span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">405</span> &amp;&amp; m.y &lt;= <span class="number">430</span>)<span class="comment">//开始游戏</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">400</span>, <span class="number">410</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">GraphInputName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br><span class="line"><span class="keyword">while</span> (LEVEL &lt; <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">StartGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先给对应的人赋值存进结构体</span></span><br><span class="line">rparry[RankPerson].steps = Step;</span><br><span class="line"><span class="comment">//保存数据进文件</span></span><br><span class="line">SavePlayerRecord();</span><br><span class="line"><span class="comment">//重置关数</span></span><br><span class="line">LEVEL = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//重置步数</span></span><br><span class="line">Step = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//数组存储下一个</span></span><br><span class="line">RankPerson++;</span><br><span class="line"><span class="comment">//重置关卡</span></span><br><span class="line">ReSetLevel();</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line">cleardevice();</span><br><span class="line">GraphFirImagesPg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">445</span> &amp;&amp; m.y &lt;= <span class="number">470</span>)<span class="comment">//查看排行榜&amp;清空加在这里面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">440</span>, <span class="number">410</span>, <span class="number">480</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">GraphRankPage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">485</span> &amp;&amp; m.y &lt;= <span class="number">510</span>)<span class="comment">//退出游戏</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">480</span>, <span class="number">410</span>, <span class="number">520</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在相应的范围内边框就消失</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(BLACK);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">400</span>, <span class="number">410</span>, <span class="number">440</span>);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">440</span>, <span class="number">410</span>, <span class="number">480</span>);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">480</span>, <span class="number">410</span>, <span class="number">520</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面开始游戏-输入昵称</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphInputName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">TCHAR InputWindow[] = _T(<span class="string">&quot;请输入你的昵称&quot;</span>);</span><br><span class="line">InputBox(rparry[RankPerson].name, <span class="number">10</span>, InputWindow);<span class="comment">//输入昵称</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一把玩完后的弹窗</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line"><span class="comment">//弹出窗口提示用户操作</span></span><br><span class="line"><span class="comment">//加上窗口句柄 强制用户先点击再进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hnd, <span class="string">&quot;恭喜通关&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphDeleteRankPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//图形界面排行榜</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphRankPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOUSEMSG m1;<span class="comment">//鼠标</span></span><br><span class="line">cleardevice();</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空按钮</span></span><br><span class="line">setbkcolor(BLACK);</span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//刷新一次 略等于那个system(cls)</span></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">440</span>, <span class="number">90</span>, <span class="number">580</span>, <span class="number">140</span>);</span><br><span class="line">fillrectangle(<span class="number">440</span>, <span class="number">150</span>, <span class="number">580</span>, <span class="number">200</span>);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"><span class="keyword">char</span> Delete[<span class="number">10</span>] = &#123; <span class="string">&quot;清空数据&quot;</span> &#125;;<span class="comment">//清空按钮</span></span><br><span class="line"><span class="keyword">char</span> Back[<span class="number">10</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">480</span>, <span class="number">158</span>, Back);</span><br><span class="line">outtextxy(<span class="number">450</span>, <span class="number">100</span>, Delete);</span><br><span class="line">outtextxy(<span class="number">60</span>, <span class="number">100</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span>, <span class="string">&quot;昵称&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">100</span>, <span class="string">&quot;步数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (RankPerson == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> TIPS[<span class="number">20</span>] = &#123; <span class="string">&quot;当前记录为空!&quot;</span> &#125;;</span><br><span class="line">outtextxy(<span class="number">130</span>, <span class="number">238</span>, TIPS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RecordBubbSort();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= RankPerson; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(a, <span class="string">&quot;%d&quot;</span>, rparry[i - <span class="number">1</span>].steps);</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(b, <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">outtextxy(<span class="number">60</span>, <span class="number">100</span> + (<span class="number">50</span> * i), b);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span> + (<span class="number">50</span> * i), rparry[i - <span class="number">1</span>].name);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">100</span> + (<span class="number">50</span> * i), a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空按钮</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m1 = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (m1.x &gt;= <span class="number">440</span> &amp;&amp; m1.x &lt;= <span class="number">580</span> &amp;&amp; m1.y &gt;= <span class="number">85</span> &amp;&amp; m1.y &lt;= <span class="number">150</span>)</span><br><span class="line">&#123;</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">85</span>, <span class="number">590</span>, <span class="number">150</span>);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">GraphDeleteRankPage();<span class="comment">//清空排行榜</span></span><br><span class="line">cleardevice();<span class="comment">//清屏</span></span><br><span class="line">GraphRankPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x&gt;=<span class="number">440</span> &amp;&amp; m1.x&lt;=<span class="number">580</span>&amp;&amp;m1.y &gt;=<span class="number">150</span> &amp;&amp; m1.y&lt;<span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">145</span>, <span class="number">590</span>, <span class="number">210</span>);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">GraphFirImagesPg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(BLACK);</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">85</span>, <span class="number">590</span>, <span class="number">150</span>);</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">145</span>, <span class="number">590</span>, <span class="number">210</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空记录的图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphDeleteRankPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line"><span class="comment">//弹出窗口提示用户操作</span></span><br><span class="line"><span class="comment">//加上窗口句柄 强制用户先点击再进行操作</span></span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hnd, <span class="string">&quot;确认清空?&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tips1 = MessageBox(hnd, <span class="string">&quot;清空成功！&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">DeletePlayerRecord();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点击取消不做反应</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先把文件中本来有的个数计算出来</span></span><br><span class="line">ReadRecordFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面以及鼠标点击</span></span><br><span class="line">GraphFirImagesPg();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置命令行黑窗口的大小</span></span><br><span class="line"><span class="comment">//system(&quot;mode con cols=30 lines=20&quot;);//设置cols和lines数值的时候不能有空格，否则会报错。</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MainMenu();</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入你的选择:\n&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int Select = 0;</span></span><br><span class="line"><span class="comment">//scanf_s(&quot;%d&quot;, &amp;Select);</span></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//switch (Select)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////退出</span></span><br><span class="line"><span class="comment">//case 0:</span></span><br><span class="line"><span class="comment">//printf(&quot;游戏结束，再见:)。\n&quot;);</span></span><br><span class="line"><span class="comment">//exit(0);</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////开始游戏</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">////图形界面输入用户名</span></span><br><span class="line"><span class="comment">//GraphInputName();</span></span><br><span class="line"><span class="comment">////进入游戏之前会提示你输入用户名</span></span><br><span class="line"><span class="comment">////printf(&quot;请输入你的昵称:\n&quot;);</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////scanf(&quot;%s&quot;, rparry[RankPerson].name);</span></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////cleardevice();//清空绘图设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while (LEVEL &lt; 4)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//StartGame();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">////先给对应的人赋值存进结构体</span></span><br><span class="line"><span class="comment">//rparry[RankPerson].steps = Step;</span></span><br><span class="line"><span class="comment">////保存数据进文件</span></span><br><span class="line"><span class="comment">//SavePlayerRecord();</span></span><br><span class="line"><span class="comment">////重置关数</span></span><br><span class="line"><span class="comment">//LEVEL = 0;</span></span><br><span class="line"><span class="comment">////重置步数</span></span><br><span class="line"><span class="comment">//Step = 0;</span></span><br><span class="line"><span class="comment">////数组存储下一个</span></span><br><span class="line"><span class="comment">//RankPerson++;</span></span><br><span class="line"><span class="comment">////重置关卡</span></span><br><span class="line"><span class="comment">//ReSetLevel();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////清除</span></span><br><span class="line"><span class="comment">//cleardevice();</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////排行榜</span></span><br><span class="line"><span class="comment">//case 2:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面的排行榜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//成功代替之前的ReadPlayerRecord</span></span><br><span class="line"><span class="comment">//if (RankPerson == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录为空！\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////当前记录数</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录数:%d\n&quot;, RankPerson);</span></span><br><span class="line"><span class="comment">////排序&amp;输出</span></span><br><span class="line"><span class="comment">//RecordBubbSort();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////清空排行榜&amp;清空文件</span></span><br><span class="line"><span class="comment">//case 3:</span></span><br><span class="line"><span class="comment">////DeletePlayerRecord();</span></span><br><span class="line"><span class="comment">//GraphDeleteRankPage();</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////输入有误</span></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">//printf(&quot;选择有误，请重新输入。\n&quot;);</span></span><br><span class="line"><span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -EasyX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现职工管理系统</title>
      <link href="2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=147">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a>-(147-166)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><hr><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="职工管理系统"><a href="#职工管理系统" class="headerlink" title="职工管理系统"></a>职工管理系统</h1><h2 id="管理系统需求"><a href="#管理系统需求" class="headerlink" title="管理系统需求"></a>管理系统需求</h2><p>职工管理系统可以用来管理公司内所有员工的信息<br>本教程主要利用C++来实现一个基于多态的职工管理系统<br>公司中职工分为三类:普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通员工职责:完成经理交给的任务</p><p>经理职责:完成老板交给的任务，并下发任务给员工</p><p>老板职责:管理公司所有事务</p><p>管理系统中需要实现的功能如下:</p><ul><li>退出管理程序:退出当前管理系统</li><li>增加职工信息:实现批量添加职工功能,将功能信息录入到文件中,职工信息为:职工编号、姓名、部门编号</li><li>显示职工信息:显示公司内部所有职工的信息</li><li>删除离职职工:按照编号删除指定的职工</li><li>修改职工信息:按照编号修改职工个人信息</li><li>查找职工信息:按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序:按照职工的编号，进行排序，排序规则由用户指定</li><li>清空所有文档:清空文件中记录的所有职工信息(清空前需要确认，防止误删)</li></ul><hr><p><strong>存储多个员工</strong></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/image-20210710113024707.png" alt="image-20210710113024707"></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>worker.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//职工的抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span>  <span class="title">GetDeptName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//职工编号</span></span><br><span class="line"><span class="keyword">int</span> m_Id;</span><br><span class="line"><span class="comment">//职工姓名</span></span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="comment">//部门编号</span></span><br><span class="line"><span class="keyword">int</span> m_DeptId;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>employee.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//普通职工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span><span class="keyword">public</span> Worker </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//子类重写父类的虚函数or纯虚函数时,注意你写的是函数的声明还是函数的定义</span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Employee(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);<span class="comment">//属性初始化</span></span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;<span class="comment">//子类重写父类的虚函数or纯虚函数,virtual可删可不删</span></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>boss.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//老板类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span> :</span><span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>manager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//经理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> :</span><span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>wokerManager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once<span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME <span class="meta-string">&quot;test.txt&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">WorkerManager();</span><br><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//退出程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExitSystem</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//记录职工人数</span></span><br><span class="line"><span class="keyword">int</span> m_EmpNum;</span><br><span class="line"><span class="comment">//职工数组指针</span></span><br><span class="line">Worker** m_EmpArray;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEmp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断文件是否为空标志</span></span><br><span class="line"><span class="keyword">bool</span> m_FileIsEmpty;</span><br><span class="line"><span class="comment">//统计文件中的人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_EmpNum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断职工是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mod_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//员工排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clean_File</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~WorkerManager();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>boss.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss::Boss(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_DeptId = deptid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Boss::ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位职责:管理公司所有的事物&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Boss::GetDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;老板&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Manager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager::Manager(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_DeptId = deptid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位职责:完成老板交个任务，并且下发任务给普通员工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Manager::GetDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>workerManager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;workerManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">WorkerManager::WorkerManager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1.文件不存在</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="comment">//初始化记录人数为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化数组指针为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化文件是否为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.文件存在 数据为空</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="comment">//初始化记录人数为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化数组指针为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化文件是否为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.文件存在不为空</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;Get_EmpNum();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = num;</span><br><span class="line"><span class="comment">//开辟空间，当文件中的数据存到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="keyword">new</span> Worker * [<span class="keyword">this</span>-&gt;m_EmpNum];</span><br><span class="line"><span class="keyword">this</span>-&gt;Init_Emp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****欢迎使用职工管理系统*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******0-退出管理程序*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******1-增加职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******2-显示职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******3-删除离职职工*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******4-修改职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******5-查找职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******6-按照编号排序*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******7-清空所有文档*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::ExitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::AddEmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入添加职工的数量&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> addnum = <span class="number">0</span>;<span class="comment">//保存用户输入的数量</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addnum;</span><br><span class="line"><span class="keyword">if</span> (addnum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算添加所需新空间的大小</span></span><br><span class="line"><span class="keyword">int</span> NewSize = <span class="keyword">this</span>-&gt;m_EmpNum + addnum;<span class="comment">//先在里面的人数等于原来的+新添加的</span></span><br><span class="line"><span class="comment">//开辟新空间——动态数组</span></span><br><span class="line">Worker** NewSpace = <span class="keyword">new</span> Worker * [NewSize];</span><br><span class="line"><span class="comment">//将原来空间下的数据拷贝到新空间下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">NewSpace[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加新的数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; addnum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;<span class="comment">//职工编号</span></span><br><span class="line"><span class="built_in">string</span> name;<span class="comment">//职工姓名</span></span><br><span class="line"><span class="keyword">int</span> dselect;<span class="comment">//部门选择</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个新职工的编号&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的判断输入重复是有缺陷的，例如我们要添加2个新员工，如果输入的第二个人和第一个人的编号一样，</span></span><br><span class="line"><span class="comment">这样就判断不出来重复了,:(</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> adjust = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="keyword">this</span>-&gt;m_EmpNum; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此编号已存在!请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">adjust = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (adjust == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span>&lt;&lt; <span class="string">&quot;个新职工的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择该职工的岗位&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.普通职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dselect;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (dselect)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Employee(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Manager(id, name, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Boss(id, name, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将创建的职工指针，保存到数组中</span></span><br><span class="line">NewSpace[<span class="keyword">this</span>-&gt;m_EmpNum + i] = worker;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放原有的空间</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="comment">//更改新空间的指向</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = NewSpace;</span><br><span class="line"><span class="comment">//更新职工人数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = NewSize;</span><br><span class="line"><span class="comment">//更新职工不为空的标志</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功添加&quot;</span> &lt;&lt; addnum &lt;&lt; <span class="string">&quot;个新职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//保存数据到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键后清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::SaveFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);<span class="comment">//用输出方式打开文件——写文件</span></span><br><span class="line"><span class="comment">//将每个人的数据写入到文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WorkerManager::Get_EmpNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);<span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> did;</span><br><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;id &amp;&amp; ifs&gt;&gt;name &amp;&amp; ifs&gt;&gt;did)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Init_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//就是把文件里面的内容读进来</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> did;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;id &amp;&amp; ifs &gt;&gt;name &amp;&amp; ifs&gt;&gt;did)</span><br><span class="line">&#123;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (did == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Employee(id,name,did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (did == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Manager(id, name, did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Boss(id, name, did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Show_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断文件是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件为空或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用多条调用程序接口</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;ShowInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键后清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断职工是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WorkerManager::IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">-1</span>;<span class="comment">//一看是认定不存在</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到职工</span></span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">WorkerManager::Del_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照职工的编号来删除职工</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要删除职工的编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (index != <span class="number">-1</span>)<span class="comment">//存在-删除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在数组中删除数据本质上就是数据前移</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum <span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数组中记录人员个数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum--;</span><br><span class="line"><span class="comment">//数据同步更新到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除失败，未找到该员工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Mod_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要修改的职工编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查找到了</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[ret];<span class="comment">//删除旧的，创建新的</span></span><br><span class="line"><span class="keyword">int</span> newid = <span class="number">0</span>;;</span><br><span class="line"><span class="built_in">string</span> newname = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> newselect = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找到了编号为&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;的这个职工,&quot;</span> &lt;&lt;<span class="string">&quot;请输入新的职工号&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newid;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新的岗位&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.普通职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newselect;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (newselect)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Employee(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Manager(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Boss(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数据到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[ret] = worker;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();<span class="comment">//保存到文件中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改失败，查无此人。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Find_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入查找的方式&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.按职工编号查找&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.按职工姓名查找&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照编号查</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入查找的职工编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找成功！该职工的信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[ret]-&gt;ShowInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找失败，查无此人!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照姓名查找</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="comment">//加入判断是否查到的标志</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name== name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找成功,职工编号为&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot;的职工，他的信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;ShowInfo();</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入选项有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//员工排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Sort_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;clsf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择排序方式&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.按照职工号进行升序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.按照职工号进行降序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> MinOrMax = i;<span class="comment">//声明最大值或最小值下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;m_EmpNum; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax]-&gt;m_Id &gt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line">MinOrMax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax]-&gt;m_Id &lt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line">MinOrMax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断一开始认定的最大值或最小值是不是计算的最大值或最小值，如果不是就交换</span></span><br><span class="line"><span class="keyword">if</span> (i != MinOrMax)</span><br><span class="line">&#123;</span><br><span class="line">Worker* temp = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax];</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序成功！排序后的结果为:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();<span class="comment">//将排序后的结果保存到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Show_Emp();<span class="comment">//展示所有职工</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Clean_File</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;确认清空吗?&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.确认&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.取消&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME,ios::trunc)</span></span>;</span><br><span class="line">ofs.close();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除堆区的每个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除堆区数组指针</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">WorkerManager::~WorkerManager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>职工管理系统</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;woklerManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;employee.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">/*Worker* worker = NULL;</span></span><br><span class="line"><span class="comment">worker = new Employee(1, &quot;sb&quot;, 1);</span></span><br><span class="line"><span class="comment">worker-&gt;ShowInfo();</span></span><br><span class="line"><span class="comment">delete worker;</span></span><br><span class="line"><span class="comment">worker = new Manager(1, &quot;sbb&quot;, 2);</span></span><br><span class="line"><span class="comment">worker-&gt;ShowInfo();</span></span><br><span class="line"><span class="comment">delete worker;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个管理者的对象</span></span><br><span class="line">WorkerManager wm;</span><br><span class="line"><span class="keyword">int</span> choice = <span class="number">0</span>;<span class="comment">//用来存储用户的选择</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line">wm.Show_Menu();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">wm.ExitSystem();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//添加职工</span></span><br><span class="line">wm.AddEmp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//显示职工</span></span><br><span class="line">wm.Show_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//删除职工</span></span><br><span class="line">wm.Del_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//修改职工</span></span><br><span class="line">wm.Mod_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//查找职工</span></span><br><span class="line">wm.Find_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//排序职工</span></span><br><span class="line">wm.Sort_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//清空文件</span></span><br><span class="line">wm.Clean_File();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程部分</title>
      <link href="2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/"/>
      <url>2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=146&spm_id_from=pageDriver">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili</a>(84-146)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a><a href="https://blog.csdn.net/qq_51604330/article/details/117753463?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_51604330/article/details/117753463?spm=1001.2014.3001.5501</a>)</p><hr><p><img src="/images/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="C-核心编程部分"><a href="#C-核心编程部分" class="headerlink" title="C++核心编程部分"></a>C++核心编程部分</h1><h2 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h2><ul><li>代码区：存放函数的二级制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区： 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul><p><strong>内存四区意义</strong>：不同区域存放的数据，赋予不同的声明周期，给我们更大的灵活编程</p><h3 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h3><p>在程序编译后，生成了exe可执行文件，未执行该程序前分为两个区域。</p><p>代码区：</p><ul><li>存放cpu执行的机器指令</li><li>代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份打码即可</li><li>代码区是只读的，使其只读的原因是防止程序意外的修改了它的指令</li></ul><p>全局区：</p><ul><li>全局变量和静态变量存放于此</li><li>全局区还包含了常量区，字符串常量和其他常量也存放于此</li><li>该区域的数据在程序结束之后由操作系统释放</li></ul><h3 id="程序运行后"><a href="#程序运行后" class="headerlink" title="程序运行后"></a>程序运行后</h3><p>栈区：</p><ul><li>由编译器自动分配释放，存放函数的参数值，局部变量等。</li><li>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</li></ul><p>堆区：</p><ul><li>有程序员分配释放，若程序员不释放，程序结束之后有操作系统回收</li><li>在C++中主要利用new在堆区中开辟内存</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h3><p>在堆区开辟数据</p><p>堆区开辟的数据，由程序员手动开辟，手动释放，释放用delete</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 数据类型</span><br></pre></td></tr></table></figure><p>利用new创建的数据，会返回该数据对应类型的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* arry[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//new int(10)就是创建一个存放整型的空间存10</span></span><br><span class="line"><span class="keyword">delete</span>[] arry;释放数组的时候要加[]</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>作用</strong>:给变量起别名</p><p><strong>语法</strong>：数据类型 &amp;别名 = 原名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//a和b操作的是同一块内存</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>引用必须初始化——告诉它它是谁的别名</li><li>引用在初始化之后，不可以改变</li></ul><h3 id="做函数参数"><a href="#做函数参数" class="headerlink" title="做函数参数"></a>做函数参数</h3><p><strong>作用</strong>：函数传参时，可以利用引用让形参修饰实参</p><p><strong>优点</strong>：可以简化指针修改实参（传址）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNums</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span>&amp; b)</span></span>;<span class="comment">//引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    changeNums(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span>&amp; b)</span><br><span class="line">    <span class="comment">//引用——其实上面的a就是下面a的一个别名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="做函数的返回值"><a href="#做函数的返回值" class="headerlink" title="做函数的返回值"></a>做函数的返回值</h3><p><strong>注意</strong>：不要返回局部变量引用</p><p>用法：函数调用作为左值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//栈区</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">20</span>;<span class="comment">//静态变量存放在全局区，全局区的数据在程序结束后系统释放</span></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; ret = test1();</span><br><span class="line"><span class="keyword">int</span>&amp; ret2 = test2();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//作为左值</span></span><br><span class="line">test2() = <span class="number">1000</span>;<span class="comment">//如果函数的返回值是引用，这个函数调用可以作为左值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//第一次结果正确是因为编译器做了保留</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret;<span class="comment">//第二次结果错误是因为a的内存已经释放</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用本质"><a href="#引用本质" class="headerlink" title="引用本质"></a>引用本质</h3><p><strong>本质</strong>：引用的本质在c++内部实现是一个指针常量,引用一旦被初始化之后就不能更改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ref = <span class="number">100</span>;<span class="comment">//ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a  = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;ref = a;<span class="comment">//自动转化int* const ref = &amp;a;//指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">ref =<span class="number">20</span>;<span class="comment">//自动发现ref是引用，自动转换为*ref = 20;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：C++推荐使用引用技术，因为语法方便，引用本质是指针常量，但所有的指针操作编译器都棒我们做了。</p><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p><strong>作用</strong>:常量引用主要用来修饰形参，防止误操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量引用</span></span><br><span class="line"><span class="comment">//使用场景，用来修饰形参，防止误操作</span></span><br><span class="line"><span class="comment">//引用必须引用一块合法的内存空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//加上const之后，编译器将代码修改为int temp =10;</span></span><br><span class="line"><span class="comment">//int&amp; ref = temp;</span></span><br><span class="line"><span class="comment">//加入const之后变为只读不可以修改</span></span><br></pre></td></tr></table></figure><p>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showvaL</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><p>在c++中函数形参列表中的形参是可以有默认值的。</p><p>语法：返回值类型 函数名(参数=默认值)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的哪个参数被声明默认了，下面函数调用的时候就可以少传哪个参数，如果有默认值还传了参数，用的就是函数调用传递的参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b =<span class="number">10</span>,<span class="keyword">int</span> c =<span class="number">23</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ref = func(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：如果某个位置已经有了默认参数，那么从这个位置往后都要有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从b开始往后一的参数都有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b= <span class="number">10</span>;<span class="keyword">int</span> c =<span class="number">20</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数的声明有默认参数，函数的实现就不能有默认参数了。</p><p> 声明和实现只能有一个有默认参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来占位，调用函数的时候必须填补该位置。</p><p>语法：返回值类型 函数名 （数据类型）{}，</p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>,<span class="number">1</span>);<span class="comment">//这个1传进去是拿不到的，目前阶段的占位参数我们还用不到，但在后面是会用到的。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位参数还可以有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> =<span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p><strong>作用</strong>:函数名可以相同，提高复用性</p><p><strong>函数重载满足条件</strong></p><ul><li>同一个作用域下</li><li>函数名相同</li><li>函数参数类型不同或者个数不同或者顺序不同</li></ul><p><strong>注意</strong>：函数的返回值不可以作为函数重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    根据函数传递参数的不同调用不同的代码</span><br><span class="line">func();</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载的注意事项"><a href="#函数重载的注意事项" class="headerlink" title="函数重载的注意事项"></a>函数重载的注意事项</h3><ul><li>引用作为函数重载条件</li><li>函数重载碰到函数默认参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int&amp; a =10;不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//const int&amp; a =10;合法——编译器自动优化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="comment">/*当函数重载碰到默认参数</span></span><br><span class="line"><span class="comment">编译器傻了，不知道该调用哪个了</span></span><br><span class="line"><span class="comment">——出现二义性</span></span><br><span class="line"><span class="comment">——写函数重载就不要加默认参数，避免这种情况的出现*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>C++面向对象的三大特性为：封装、继承、多态。</p><p>C++认为万事万物皆为对象，对象上有其属性和行为</p><p><strong>例如</strong>:</p><p>人可以作为对象，属性有姓名、年龄、身高、体重……行为有唱、跳、跑……</p><p>车也可以作为对象，属性有轮胎、方向盘、大灯……行为有载人、放音乐、开空调……</p><p>具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类……</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h4><p>封装是C++面向对象的三大特征之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><h4 id="封装的意义一"><a href="#封装的意义一" class="headerlink" title="封装的意义一"></a><strong>封装的意义一</strong></h4><p>在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span>访问权限: 属性 / 行为&#125;;</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>示例1</strong></p><p>创建一个圆类，求圆的周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//class 代表设计一个类，类后面紧跟着的就是类名称</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//属性 </span></span><br><span class="line"><span class="comment">//半径</span></span><br><span class="line"><span class="keyword">int</span> c_r;</span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="comment">//获取圆的周长</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * pi * c_r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过圆类创建具体的圆(对象)</span></span><br><span class="line"><span class="comment">//实例化——通过一个类创建一个对象的过程</span></span><br><span class="line">Circle c1;</span><br><span class="line"><span class="comment">//给圆对象的属性进行赋值</span></span><br><span class="line">c1.c_r = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为&quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p>创建一个学生类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> s_Name;</span><br><span class="line"><span class="keyword">int</span> s_Id;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; s_Name &lt;&lt; <span class="string">&quot;ID：&quot;</span> &lt;&lt; s_Id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s_Name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1;</span><br><span class="line"><span class="comment">//s1.s_Name = &quot;张三&quot;;</span></span><br><span class="line">s1.inputName(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">s1.s_Id = <span class="number">123456</span>;</span><br><span class="line">s1.showStudent();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中的属性和行为，我们统称为成员</p><p>属性-成员属性-成员变量</p><p>行为-成员函数-成员方法</p><h4 id="封装的意义二"><a href="#封装的意义二" class="headerlink" title="封装的意义二"></a><strong>封装的意义二</strong></h4><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种</p><ol><li>public——公共权限——成员类内可以访问，类外可以访问</li><li>protected–保护权限——成员类内可以访问，类外不可以访问</li><li>private——私有权限——成员类内可以访问，类外不可以访问</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> p_name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">string</span> p_car;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> p_password;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p_car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">p_password = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.p_name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line"><span class="comment">//p1.p_car = &quot;GTR&quot;;protected类外无法访问</span></span><br><span class="line"><span class="comment">//p1.p_password = 123;private类外无法访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a>struct和class</h4><p>在C++中struct和class的唯一区别就是默认的访问权限不同。</p><p><strong>区别</strong>：</p><ul><li>struct默认权限为公共public</li><li>class默认权限为私有private</li></ul><p>成员属性设置为私有</p><p><strong>优点1</strong>：将所有成员属性设置为私有，可以自己控制读写权限。</p><p><strong>优点2</strong>：对于写权限，我们可以检测数据的有效性。</p><p><strong>示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//设置姓名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取年龄</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置年龄</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">p_age = age;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt;<span class="number">150</span>)</span><br><span class="line">&#123;</span><br><span class="line">p_age = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;什么鬼&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置伙伴</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(<span class="built_in">string</span> lname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lover = lname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//姓名 可读可写</span></span><br><span class="line"><span class="built_in">string</span> p_name;</span><br><span class="line"><span class="comment">//年龄 可读可写加个范围</span></span><br><span class="line"><span class="keyword">int</span> p_age;</span><br><span class="line"><span class="comment">//伙伴  只写</span></span><br><span class="line"><span class="built_in">string</span> lover;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p1.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p1.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p1.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p1.setLover(<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习案例"><a href="#练习案例" class="headerlink" title="练习案例"></a>练习案例</h4><h5 id="1-设计立方体类"><a href="#1-设计立方体类" class="headerlink" title="(1)设计立方体类"></a>(1)设计立方体类</h5><p>求立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">setl</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">C_L = l;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_L;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">setw</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> C_W = w;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_W;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">seth</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> C_H= h;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">geth</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_H;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//表面积</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">calculateS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span> * C_L * C_W + <span class="number">2</span> * C_L * C_H + <span class="number">2</span> * C_W * C_H;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//体积</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">calculateV</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_L * C_W * C_H;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//成员函数判断是否相等</span></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">issamebyClass</span><span class="params">(Cube &amp;c)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (C_H== c.geth() &amp;&amp; C_L == c.getl() &amp;&amp; C_W == c.getw())</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> C_L;</span><br><span class="line"><span class="keyword">int</span> C_W;</span><br><span class="line"><span class="keyword">int</span> C_H;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用全局函数判断相等</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">issame</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c1.geth() == c2.geth() &amp;&amp; c1.getl() == c2.getl() &amp;&amp; c1.getw() == c2.getw())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cube c1;</span><br><span class="line">c1.seth(<span class="number">10</span>);</span><br><span class="line">c1.setl(<span class="number">10</span>);</span><br><span class="line">c1.setw(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.calculateS() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.calculateV() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Cube c2;</span><br><span class="line">c2.seth(<span class="number">10</span>);</span><br><span class="line">c2.setl(<span class="number">10</span>);</span><br><span class="line">c2.setw(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//判断是否相等</span></span><br><span class="line"><span class="keyword">bool</span> ret = issame(c1, c2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1和c2相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1和c2不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数判断</span></span><br><span class="line"><span class="keyword">bool</span> ret2 = c1.issamebyClass(c2); </span><br><span class="line"><span class="keyword">if</span> (ret2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;利用成员函数,c1和c2相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;利用成员函数,c1和c2不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-点和圆的关系"><a href="#2-点和圆的关系" class="headerlink" title="(2)点和圆的关系"></a>(2)点和圆的关系</h5><p>设计一个圆类和一个点类判断圆和点的关系。</p><p><strong>在一个类中可以让另一个类作为这个类的成员</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建议将属性设置为私有，对外提供接口</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_x;</span><br><span class="line"><span class="keyword">int</span> c_y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setr</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_R = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setcenter</span><span class="params">(Point center)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_center = center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">getcenter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_R;</span><br><span class="line">Point c_center;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isInCircle</span><span class="params">(Circle &amp;c,Point &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> distance =</span><br><span class="line">(c.getcenter().getx() - p.getx()) * (c.getcenter().getx() - p.getx()) +</span><br><span class="line">(c.getcenter().gety() - p.gety()) * (c.getcenter().gety() - p.gety());</span><br><span class="line"><span class="keyword">int</span> rdistance = c.getr() * c.getr();</span><br><span class="line"><span class="keyword">if</span> (distance == rdistance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (distance &gt; rdistance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c1;</span><br><span class="line">c1.setr(<span class="number">10</span>);</span><br><span class="line">Point center;</span><br><span class="line">center.setx(<span class="number">10</span>);</span><br><span class="line">center.sety(<span class="number">10</span>);</span><br><span class="line">c1.setcenter(center);</span><br><span class="line">Point p1;</span><br><span class="line">p1.setx(<span class="number">3</span>);</span><br><span class="line">p1.sety(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//调用判断</span></span><br><span class="line">isInCircle(c1, p1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个类拆分成两个文件</p><p><strong>point.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_x;</span><br><span class="line"><span class="keyword">int</span> c_y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>point.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="comment">//Point::告诉编译器这是Point作用域下面的一个成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::setx</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Point::getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::sety</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Point::c_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Point::gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的初始化清理"><a href="#对象的初始化清理" class="headerlink" title="对象的初始化清理"></a>对象的初始化清理</h3><ul><li>在生活中我们所购买的点子产品大多都有恢复出厂设置，在某一天我们不使用的时候清楚自己的数据来保证自己信息的安全。</li><li>C++中的面向对象来源生活，每个对象也会有初识设置以及对象销毁前的清理数据的设置。、</li></ul><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题。</p><p>一个对象或者变量没有初识状态，对其使用后的后果是未知的。</p><p>同样的使用完一个对象或者变量，没有及时进行清理，也会造成一定的安全问题。</p><p>C++利用了<strong>构造函数和析构函数</strong>解决上述问题，这两个函数将会被编译器自动斓用，完成对象初始化和清理工作。对象的初始化和清理工作是编译器强制要我们做的事情，<strong>因此如果我们不提供构造和析构，编译器会提供，但是编译器提供的构造函数和析构函数是空实现</strong>。</p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</li></ul><h5 id="构造函数语法"><a href="#构造函数语法" class="headerlink" title="构造函数语法"></a>构造函数语法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象的时候会自动调用构造，无须手动调用，而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//不写的也会自动创建一个，只不过里面是空的</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;构造函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//创建了一个对象但是没有调用这个函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210617103403844.png" alt="image-20210617103403844"></p><h5 id="析构函数语法"><a href="#析构函数语法" class="headerlink" title="析构函数语法"></a>析构函数语法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>析构函数没有返回值也不写void</li><li>函数名称与类名相同，在名称前加上~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;构造函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//在栈上的数据，test01执行完之后会释放这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"><span class="comment">//Person p;在main函数中析构函数也会被调用在按完任意键之后</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210617112248509.png" alt="image-20210617112248509"></p><h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><p>两种分类方式：</p><ul><li>按参数分为:有参构造和无参构造</li><li>按类型分为:普通构造和拷贝构造</li></ul><p>三种调用方式：</p><ul><li>括号法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person p;<span class="comment">//默认构造函数调用</span></span><br><span class="line"><span class="comment">/*注意：使用默认构造函数的时候，不要加(),编译器会认为这是一个函数的声明</span></span><br><span class="line"><span class="comment">例如：Person p1();不会认为在创建对象*/</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//有参构造函数调用</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为&quot;</span> &lt;&lt; p3.age &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li>显示法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person p1;<span class="comment">//无参</span></span><br><span class="line">Person p2 = Person(<span class="number">10</span>);<span class="comment">//有参</span></span><br><span class="line">Person p3 = Person(p2);<span class="comment">//拷贝</span></span><br><span class="line"><span class="comment">//如果把等号右边的式子单独拿出来</span></span><br><span class="line"><span class="comment">//Person(10)这是一个匿名对象-特点——当前行执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line"><span class="comment">//注意：不要利用拷贝函数初始化匿名对象-编译器会认为Person(p3) == Person p3 编译器会认为是对象的声明</span></span><br><span class="line"><span class="comment">//Person(p3)</span></span><br></pre></td></tr></table></figure><ul><li><p>隐式转换法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p4 = <span class="number">10</span>;<span class="comment">//相当与Person p4 = Person(10);</span></span><br><span class="line">Person p5 = p4;<span class="comment">//拷贝构造</span></span><br></pre></td></tr></table></figure><p><strong>全部代码</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span>  <span class="title">Person</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="comment">//构造函数-无参构造-编译器提供的就是无参的</span></span><br><span class="line">  Person()</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的无参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//构造函数-有参构造</span></span><br><span class="line">  Person(<span class="keyword">int</span> a)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//将传入的人身上的所有属性，拷贝到我身上。</span></span><br><span class="line">  age = a;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Person()</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//////////////</span></span><br><span class="line">  <span class="comment">//拷贝构造函数</span></span><br><span class="line">  Person(<span class="keyword">const</span> Person&amp;p)</span><br><span class="line">  &#123;</span><br><span class="line">  age = p.age;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="comment">//Person p;//默认构造函数调用</span></span><br><span class="line">  <span class="comment">///*注意：使用默认构造函数的时候，不要加(),编译器会认为这是一个函数的声明</span></span><br><span class="line">  <span class="comment">//例如：Person p1();不会认为在创建对象*/</span></span><br><span class="line">  <span class="comment">//Person p2(10);//有参构造函数调用</span></span><br><span class="line">  <span class="comment">//Person p3(p2);//拷贝构造函数调用</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; &quot;p2的年龄为&quot; &lt;&lt; p2.age &lt;&lt; endl;</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; &quot;p3的年龄为&quot; &lt;&lt; p3.age &lt;&lt; endl;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//显示法</span></span><br><span class="line">  <span class="comment">//Person p1;//无参</span></span><br><span class="line">  <span class="comment">//Person p2 = Person(10);//有参</span></span><br><span class="line">  <span class="comment">//Person p3 = Person(p2);//拷贝</span></span><br><span class="line">  <span class="comment">////如果把等号右边的式子单独拿出来</span></span><br><span class="line">  <span class="comment">////Person(10)这是一个匿名对象-特点——当前行执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line">  <span class="comment">////注意：不要利用拷贝函数初始化匿名对象-编译器会认为Person(p3) == Person p3 编译器会认为是对象的声明</span></span><br><span class="line">  <span class="comment">////Person(p3)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//隐式转换法</span></span><br><span class="line">  Person p4 = <span class="number">10</span>;<span class="comment">//相当与Person p4 = Person(10);</span></span><br><span class="line">  Person p5 = p4;<span class="comment">//拷贝构造</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 拷贝构造函数调用时机</span><br><span class="line"></span><br><span class="line">C++中拷贝构造函数调用时机通常有三种情况</span><br><span class="line"></span><br><span class="line">- 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="line">- 值传递的方式给函数参数传值</span><br><span class="line">- 以值方式返回局部对象</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用一个已经创建完毕的对象来初始化一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">dowork(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = dowork2();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line">test03();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="构造函数的调用规则"><a href="#构造函数的调用规则" class="headerlink" title="构造函数的调用规则"></a>构造函数的调用规则</h4><p>默认情况下，C++编译器至少给一个类添加三个函数</p><ol><li>默认构造函数(无参、函数体为空)</li><li>默认析构函数(无参、函数体为空)</li><li>默认拷贝函数构造函数，对属性值拷贝</li></ol><p>构造函数调用规则如下:</p><ul><li>如果用户定义有参构造函数，C++不再提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，C++不会再提供其他构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//构造函数的调用规则</span></span><br><span class="line"><span class="comment">//只要创建一个类，c++编译器会默认给每个类都添加至少3个函数</span></span><br><span class="line"><span class="comment">/*默认构造(空实现)</span></span><br><span class="line"><span class="comment">析构函数(空实现)</span></span><br><span class="line"><span class="comment">拷贝函数*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">p.m_Age = <span class="number">18</span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当用户创建了有参构造函数，编译器就不再提供默认无参构造函数，但是会提供默认拷贝构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>用户提供了有参，编译器不会提供无参，但会提供拷贝；</p><p>用户提供了拷贝，编译器什么构造函数都不会提供。</p><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>深浅拷贝是面试的一个经典的问题，也是常见的一个坑。</p><p><strong>浅拷贝</strong>：简单的赋值拷贝操作。</p><p><strong>深拷贝</strong>：在堆区中重新申请空间，进行拷贝操作。</p><hr><p><strong>浅拷贝带来的问题——内存重复释放</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//深拷贝与浅拷贝问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="keyword">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line">m_Height = <span class="keyword">new</span> <span class="keyword">int</span>(height);</span><br><span class="line">m_Age = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line">m_Height = p.m_Height;编译器默认实现的就是这行代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将堆区开辟的数据进行释放</span></span><br><span class="line"><span class="keyword">if</span> (m_Height !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Height;</span><br><span class="line">m_Height = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">int</span>* m_Height;<span class="comment">//为什么要用指针——要把身高开辟到堆区</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">166</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1.m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span> &lt;&lt; *p1.m_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p2.m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span> &lt;&lt;*p2.m_Height&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210703120328939.png" alt="image-20210703120328939"></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210703120223398.png" alt="image-20210703120223398"></p><p><strong>浅拷贝的这个问题需要用深拷贝来解决</strong></p><p>重新在堆区找一块内存来存放他。</p><p><strong>自己实现拷贝构造函数来解决浅拷贝带来的问题</strong></p><p><strong>解决</strong>：</p><p><strong>深拷贝</strong>——手动创建拷贝构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line"><span class="comment">//m_Height = p.m_Height;编译器默认实现的就是这行代码</span></span><br><span class="line"><span class="comment">//深拷贝操作</span></span><br><span class="line">m_Height = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>如果有属性在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。</p><h4 id="初识化列表"><a href="#初识化列表" class="headerlink" title="初识化列表"></a>初识化列表</h4><p><strong>作用</strong>：</p><p>C++提供了初始化列表语法，用来初始化对象。</p><p><strong>语法</strong>：</p><p>构造函数()：属性1（值1），属性2（值2）…{}</p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//传统赋值操作</span></span><br><span class="line"><span class="comment">/*Person(int a, int b, int c)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">m_A = a;</span></span><br><span class="line"><span class="comment">m_B = b;</span></span><br><span class="line"><span class="comment">m_C = c;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//初始化列表初始化属性</span></span><br><span class="line">Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) :m_A(a), m_B(b), m_C(c)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Person p(10,20,30);</span></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h4><p>C++中类的成员可以是另一个类的对象，我们称该成员为对象成员。</p><p><strong>例如</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员。</p><p>那么当创建B对时，A与B的构造和析构的顺序是怎么样的？</p><p><strong>A先被构造</strong></p><p><strong>当其他类的对象作为本类的成员时，构造时先构造其他类的对象，再构造自身。</strong></p><p>析构呢？<strong>与构造函数相反。</strong></p><p><strong>自身的析构函数先进行，之后其它类再进行。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Phone(<span class="built_in">string</span>  p)</span><br><span class="line">&#123;</span><br><span class="line">Phonename = p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Phone()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Phonename;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Phone Personphone = pname 隐式转换法</span></span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pname):Personname(name), Personphone(pname)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Personname;</span><br><span class="line">Phone Personphone;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;华为&quot;</span>)</span></span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.Personname&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.Personphone.Phonename&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员就是在成员变量和成员函数前面加上关键字啊static，称为静态成员。</p><p><strong>静态成员分为</strong>：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有成员共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//静态成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age = <span class="number">100</span>;<span class="comment">//静态的成员函数可以访问静态的成员变量，不可以访问非静态的成员变量</span></span><br><span class="line"><span class="comment">//无法区分到底是哪个对象的成员变量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;static void func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//两种访问方式</span></span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Person p;</span><br><span class="line">p.func();</span><br><span class="line"><span class="comment">//通过类名也可以访问</span></span><br><span class="line">Person::func();</span><br><span class="line"><span class="comment">//Person::func2();类外访问不到私有的静态成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-对象模型和this指针"><a href="#C-对象模型和this指针" class="headerlink" title="C++对象模型和this指针"></a>C++对象模型和this指针</h3><h4 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储，</p><p><strong>只有非静态成员变量才属于类的对象上。</strong></p><p>（只有非静态成员变量的大小算进类的大小中，其他的都不算。）</p><p><strong>空对象的大小是1，为的是区分不同类在内存中的占用位置。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//成员变量和成员函数是分开存储的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> m_A;<span class="comment">//非静态成员属于类对象上的。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_B;<span class="comment">//静态的成员变量不属于类的对象上。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">//非静态成员函数不属于类的对象上</span></span><br><span class="line">static void func2()&#125;//静态成员函数不属于类的对象上</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="comment">//空对象占用内存空间为1</span></span><br><span class="line"><span class="comment">/*C++编译器给每个空对象也分配一个字节的空间，为的是区分空对象在占内存的位置，</span></span><br><span class="line"><span class="comment">没一个空对象也应该有一个独一无二的内存地址*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this指针的概念"><a href="#this指针的概念" class="headerlink" title="this指针的概念"></a>this指针的概念</h4><p>通过上一个知识点《成员变量和成员函数是分开存储的》我们知道C++中成员变量和成员函数是分开存储的。</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会公用一块代码。</p><p>那么问题是：这一块代码是如何区分是哪个对象调用自己的呢？</p><p>C++通过提供特殊的对象指针，this指针，解决上述问题。</p><p><strong>this指针指向被调用的成员函数所属的对象</strong>。</p><p><strong>(谁调的，this就指向谁)</strong></p><p>this指针是隐含每个非静态成员函数内的一种指针。</p><p>this指针不需要定义，直接使用即可。</p><p>this指针的用途</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><p><strong>解决名称冲突</strong></p><p><strong>返回对象本身用*this</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//this指针指向的是被调函数的成员函数所属的对象</span></span><br><span class="line"><span class="comment">//这里指向的就是p</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回本体要用应用的方式进行返回</span></span><br><span class="line"><span class="comment">//这里返回值如果是Person，就创建了一个新的对象</span></span><br><span class="line"><span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//注意起名规范也可以解决名字冲突的问题</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//解决对象冲突</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回对象本身用*this</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">p2.PersonAddPerson(p1);<span class="comment">//将p1和p2的加在一起</span></span><br><span class="line"><span class="comment">//多次追加,return *this;</span></span><br><span class="line"><span class="comment">//链式编程思想</span></span><br><span class="line">p2.PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空指针返回成员函数"><a href="#空指针返回成员函数" class="headerlink" title="空指针返回成员函数"></a>空指针返回成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针，如果用到this指针，需要加以判断来保证代码的健壮性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is Person class&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowPersonAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高健壮性，空的就直接返回，防止代码崩溃</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错原因是因为传入的指针是NULL——无中生有，用一个空指针访问里面的属性 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;ShowClassName();</span><br><span class="line">p-&gt;ShowPersonAge();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><p><strong>常函数</strong>：</p><ul><li>成员函数后加const后我们称这个函数为<strong>常函数</strong></li><li>常函数不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象</strong>：</p><ul><li>声明对象前const称该对象为常对象。</li><li>常对象只能调用常函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//常函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//this指针的本质是指针常量，指针的指向是不可以修改的</span></span><br><span class="line"><span class="comment">//就相当于Person *const this;</span></span><br><span class="line"><span class="comment">//在成员函数后面加const修饰的是this指向，让指针指向的值也不可以修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span> <span class="keyword">const</span><span class="comment">//加个const就不允许修改了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//this = NULL;tbhis指针是不可以修改指针的指向的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> m_b;<span class="comment">//加了mutable修饰的特殊变量，即使在常函数,常对象中，也可以修改这个值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_a = <span class="number">100</span>;<span class="comment">//在普通成员函数中是可以修改的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person P;</span><br><span class="line">P.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> Person p;<span class="comment">//在对象前加const，变为常对象</span></span><br><span class="line"><span class="comment">//p.m_a = 100;</span></span><br><span class="line">p.m_b = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//常对象只能调用常函数 </span></span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="comment">//p.func();常对象不能调用普通成员函数，因为普通成员函数可以修改属性。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>可客厅就是Public，你的卧室就是Private</p><p>客厅所有人都可以进去，但是你的卧室只有和你亲密的人可以进。</p><p> 在程序中，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元技术。</p><p>友元的目的就是让一个函数或者类 访问另一个类中的私有元素。</p><p><strong>友元的关键字——friend</strong></p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><p><strong>就是将此函数在类的最上面写一个声明，前面加一个friend。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//goodgay全局函数是Building类的一个好朋友，可以访问你家的卧室(私有成员)</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodgay</span><span class="params">(Building* building)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodgay</span><span class="params">(Building* building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数正在访问你的&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数正在访问你的&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Building building;</span><br><span class="line">goodgay(&amp;building);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><p><strong>一个类在另一个中friend class xx。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F;在前面先声明一下</span><br><span class="line">class Building;</span><br><span class="line"></span><br><span class="line">class GoodGay</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">GoodGay();</span><br><span class="line">public:</span><br><span class="line">void visit();&#x2F;&#x2F;参观函数 访问Building中的属性</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Building</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;GoodGay是Building类的好朋友，可以访问其私有属性</span><br><span class="line">friend class GoodGay;</span><br><span class="line">public:</span><br><span class="line">Building();</span><br><span class="line">public:</span><br><span class="line">string m_SittingRoom;</span><br><span class="line">private:</span><br><span class="line">string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;在类外写成员函数</span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom &#x3D; &quot;客厅&quot;;</span><br><span class="line">m_BedRoom &#x3D; &quot;卧室&quot;;</span><br><span class="line">&#125;</span><br><span class="line">GoodGay::GoodGay()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建一个Building对象</span><br><span class="line">building &#x3D; new Building;</span><br><span class="line">&#125;</span><br><span class="line">void GoodGay::visit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;好基友正在访问你的&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;好基友正在访问你的&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">GoodGay gy;</span><br><span class="line">gy.visit();</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><p><strong>告诉编译器 另一个类中的xx成员函数作为本类的好朋友，可以访问私有函数。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">GoodGay();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//可以访问Building中私有成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit1</span><span class="params">()</span></span>;<span class="comment">//不可以访问Building中私有成员</span></span><br><span class="line">Building* builidng;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//告诉编译器 GoodGay类中的visit成员函数作为本类的好朋友，可以访问私有函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Building(); </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GoodGay::GoodGay()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">builidng = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit正在访问&quot;</span> &lt;&lt; builidng-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit正在访问&quot;</span> &lt;&lt; builidng-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit1正在访问&quot;</span> &lt;&lt; builidng-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GoodGay gg;</span><br><span class="line">gg.visit();</span><br><span class="line">gg.visit1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>运算符重载的概念:对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p><h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><p><strong>作用</strong>：实现两个自定义数据类型相加的运算。</p><p>例如：两个整型相加编译器知道该怎么进行运算，如果是两个自定义出来的类型，两个Person想加，编译器就不知道该怎么运算了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//加号运算符重载</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//1.成员函数重载+</span></span><br><span class="line"><span class="comment">/*Person operator+(Person&amp; p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Person temp;</span></span><br><span class="line"><span class="comment">temp.m_A = this-&gt;m_A + p.m_A;</span></span><br><span class="line"><span class="comment">temp.m_B = this-&gt;m_B + p.m_B;</span></span><br><span class="line"><span class="comment">return temp;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数重载+</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1, Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数函数重载版本</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1, <span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = p1.m_A + num;</span><br><span class="line">temp.m_B = p1.m_B + num;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_A = <span class="number">10</span>;</span><br><span class="line">p1.m_B = <span class="number">10</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_A = <span class="number">10</span>;</span><br><span class="line">p2.m_B = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//成员函数重载本质调用</span></span><br><span class="line"><span class="comment">//Person p3 = p1.operator+(p2);</span></span><br><span class="line"><span class="comment">//Person p3 = p1 + p2;//可以简化成这种形式</span></span><br><span class="line"><span class="comment">//全局函数重载的本质调用</span></span><br><span class="line"><span class="comment">//Person p3 = operator+(p1,p2);</span></span><br><span class="line"><span class="comment">/*cout &lt;&lt; p3.m_A &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p3.m_B &lt;&lt; endl;*/</span></span><br><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line">Person p3 = p1 + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p3.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>对于内置的数据类型的表达式的运算符是不可能改变的</li><li>不要滥用运算符重载</li></ol><h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><p><strong>作用</strong>：可以输出自定义的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, Person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">m_A = a;</span><br><span class="line">m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用成员函数重载左移运算符p.operator&lt;&lt;(cout)简化版本p&lt;&lt;cout</span></span><br><span class="line"><span class="comment">//一般我们不会利用成员函数来重载&lt;&lt;运算符，以为无法实现cout在左边</span></span><br><span class="line"><span class="comment">/*void operator&lt;&lt;(ostream &amp;cout,Person &amp;p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p.m_A &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p.m_B &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只能利用全局函数来重载左移运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;<span class="built_in">cout</span>, Person &amp;p) <span class="comment">//这样写的本质就是operator&lt;&lt;(cout,p)简化版本就是cout&lt;&lt;p; </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：重载左移运算符配合友元可以实现输出自定义数据类型。</p><hr><p>这里给出不推荐的类内实现重载左移运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(ostream &amp;<span class="built_in">cout</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_A;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">p&lt;&lt;<span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure><h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><p><strong>作用</strong>：通过重载递增运算符，实现自己的整型数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//重载递增运算符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, MyInteger myint);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyInteger()</span><br><span class="line">&#123;</span><br><span class="line">m_Num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载++运算符——前置</span></span><br><span class="line"><span class="comment">//返回引用是为了一直对一个数据进行递增操作</span></span><br><span class="line">MyInteger&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">++m_Num;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载++运算符——后置</span></span><br><span class="line">MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>)<span class="comment">//这个int在这里作为占位参数，用来区分前置递增和后置递增</span></span><br><span class="line">&#123;</span><br><span class="line">MyInteger temp = *<span class="keyword">this</span>;</span><br><span class="line">m_Num++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"><span class="comment">//后置递增要返回值，因为如果返回引用，这里相当于返回的是一个局部对象的引用。</span></span><br><span class="line"><span class="comment">//局部对象在当前函数执行完毕之后就被释放掉了，还要返回引用就是非法操作。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数重载左移运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, MyInteger myint)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint.m_Num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyInteger myint;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++(++myint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;myint;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyInteger myint;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:前置递增返回引用，后置递增返回值。</p><h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><p>C++编译器至少给一个类添加4个函数(前三个之前已经讲过了)</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符operator=，对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//编译器默认提供的是浅拷贝操作</span></span><br><span class="line"><span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"><span class="comment">//应该先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝。</span></span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深拷贝操作</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Age);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">p3 = p2 = p1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p1.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p2.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p3.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><p><strong>作用</strong>：重载关系运算符，可以让两个自定义类型对象进行对比操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载==</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><ul><li>函数调用运算符()也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//函数调用运算符重载</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载函数调用运算符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myprint;</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">MyAdd myadd;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myadd(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//匿名函数对象——特点:当前行被执行完立即释放</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; MyAdd()(<span class="number">100</span>,<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中:</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705121808431.png" alt="image-20210705121808431"></p><p>我们发现，定义这些类的时候，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p><strong>这时候我们就可以考虑利用继承的技术，减少重复代码量。</strong></p><h4 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同。</p><p>接下里我们分别利用普通写法和继承写法来实现网页中的内容，看一下继承存在的意义以及好处。</p><p><strong>普通实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通实现页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java java;</span><br><span class="line">java.header();</span><br><span class="line">java.footer();</span><br><span class="line">java.left();</span><br><span class="line">java.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python python;</span><br><span class="line">python.header();</span><br><span class="line">python.footer();</span><br><span class="line">python.left();</span><br><span class="line">python.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;cpp&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Cpp cpp;</span><br><span class="line">cpp.header();</span><br><span class="line">cpp.footer();</span><br><span class="line">cpp.left();</span><br><span class="line">cpp.contenet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承方法实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//普通实现页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpp</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java java;</span><br><span class="line">java.header();</span><br><span class="line">java.footer();</span><br><span class="line">java.left();</span><br><span class="line">java.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python python;</span><br><span class="line">python.header();</span><br><span class="line">python.footer();</span><br><span class="line">python.left();</span><br><span class="line">python.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;cpp&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Cpp cpp;</span><br><span class="line">cpp.header();</span><br><span class="line">cpp.footer();</span><br><span class="line">cpp.left();</span><br><span class="line">cpp.contenet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br><strong>继承的好处</strong>：减少重复代码</p><p><strong>语法</strong>：class 子类:继承方式 父类</p><p>子类也称派生类</p><p>父类也称基类</p><p><strong>派生类中的成员，包含量大部分</strong></p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过来的表现其共性，而新增加的成员体现其个性。</p><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">继承的语法——<span class="class"><span class="keyword">class</span> 子类 :</span>继承方式 父类</span><br></pre></td></tr></table></figure><p><strong>继承方式一共有三种</strong>：</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705160731648.png" alt="image-20210705160731648"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">10</span>;<span class="comment">//父类中的公共权限成员，到了子类中依然是公共权限</span></span><br><span class="line">m_B = <span class="number">20</span>;<span class="comment">//父类中的保护权限成员，到了子类中依然是保护权限</span></span><br><span class="line"><span class="comment">//m_C = 10;父类中的隐私权限成员，子类访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 son1;</span><br><span class="line">son1.m_A = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//son1.m_B = 100;保护权限的内容到了类外就无法访问了</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> :</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">100</span>;<span class="comment">//父类中公共权限的成员，因为是保护继承，到子类中变为保护权限</span></span><br><span class="line">m_B = <span class="number">100</span>;<span class="comment">//父类中保护权限的成员，保护继承后到了子类还是保护权限。</span></span><br><span class="line"><span class="comment">//m_C = 100;父类中的私有成员子类访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2 son2;</span><br><span class="line"><span class="comment">//保护权限类外访问不到，所以在son2中m_A也访问不到了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">100</span>;<span class="comment">//父类中公共成员，私有继承后，到了子类变为私有成员</span></span><br><span class="line">m_B = <span class="number">100</span>;<span class="comment">//父类中保护成员，私有继承后，到了子类变为私有成员</span></span><br><span class="line"><span class="comment">//m_C = 100;父类的私有权限成员仍然访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son3 son3;</span><br><span class="line"><span class="comment">//私有成员类外访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证Son3私有继承后成员是否变成了私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//访问不到父类的私有成员</span></span><br><span class="line"><span class="comment">//到了Son3中m_A,m_B,m_C全是私有成员，子类无法访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h4><p><strong>问题</strong>：从父类继承过来的对象，哪些属于子类对象？</p><p><strong>父类中所有的非静态成员属性都会被子类继承下去</strong>。</p><p><strong>父类中私有的成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去了</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//继承中的对象模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//父类中所有的非静态成员属性都会被子类继承下去</span></span><br><span class="line"><span class="comment">//父类中私有的成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去了</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof of son:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//结果是16 = 12 + 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用VS的开发人员命令提示工具查看对象模型</strong></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705170221524.png" alt="image-20210705170221524"></p><ol><li>打开工具</li><li>跳转到你cpp文件所在的盘</li><li>cd文件目录下</li><li>输入命令：cd /d1 reportSingleClassLayout类名 文件名</li></ol><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705170115915.png" alt="image-20210705170115915"></p><h4 id="继承中构造和析构的顺序"><a href="#继承中构造和析构的顺序" class="headerlink" title="继承中构造和析构的顺序"></a>继承中构造和析构的顺序</h4><p><strong>子类继承父类后，当创建子类时，也会调用父类的构造函数。</strong></p><p>问题：父类和子类的构造函数和析构顺序怎么样的呢？</p><p><strong>先构造父类，再构造子类</strong></p><p><strong>先析构子类，再析构父类</strong></p><p><strong>创建子类对象的同时也会创建一个父类对象</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类的构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类的构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705171401072.png" alt="image-20210705171401072"></p><p><strong>总结</strong>：继承中先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。</p><h4 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员。如何通过子类对象，访问到子类或父类中同名的数据呢?</p><ul><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，需要加<strong>作用域</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类同名成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类同名重载成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类同名成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//同名成员属性处理方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;son.m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//如果要通过子类对象访问到父类中的同名成员，需要加作用域。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;son.Base::m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员函数处理方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son1; </span><br><span class="line">son1.func();<span class="comment">//子</span></span><br><span class="line">son1.Base::func();<span class="comment">//父</span></span><br><span class="line"><span class="comment">//如果子类中出现和父类同名的成员函数</span></span><br><span class="line"><span class="comment">//子类的同名成员会隐藏掉父类中所有同名成员函数</span></span><br><span class="line"><span class="comment">//如果想要访问到父类中被隐藏的同名成员函数，需要加作用域</span></span><br><span class="line">son1.Base::func(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类同名函数。</li></ol><h4 id="继承同名静态成员处理方式"><a href="#继承同名静态成员处理方式" class="headerlink" title="继承同名静态成员处理方式"></a>继承同名静态成员处理方式</h4><p>问题:继承中同名的静态成员在子类对象上是如何进行访问的呢？</p><p>静态成员和非静态成员出现同名，处理方式 一致。</p><ul><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，需要加作用域</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类静态成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类静态成员重载函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类静态成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//同名静态成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Son son1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; son1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; son1.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第一个::代表通过类名方式访问，第二个::代表访问父类作用域下</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名静态函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Son son2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">son2.func();</span><br><span class="line">son2.Base::func();  </span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Son::func();</span><br><span class="line">Son::Base::func();</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类同名重载成员函数调用</span></span><br><span class="line"><span class="comment">//子类出现和父类同名的静态成员函数，也会隐藏掉父类中所有同名成员函数(重载)</span></span><br><span class="line"><span class="comment">//如果想访问父类中被隐藏的同名成员，需要加作用域</span></span><br><span class="line">Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式(通过对象和类名)。</p><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>C++允许一个类继承多个类    </p><p>语法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类:</span>继承方式 父类<span class="number">1</span>，继承方式 父类<span class="number">2</span></span><br></pre></td></tr></table></figure><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议使用多继承</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//多继承语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base1()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base2()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类需要继承base1和base2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_C = <span class="number">300</span>;</span><br><span class="line">m_D = <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line"><span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(son1) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个父类的m_A:&quot;</span> &lt;&lt; son1.Base1::m_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二个父类的m_A:&quot;</span> &lt;&lt; son1.Base2::m_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：多继承中如果父类中出现了同名情况，子类使用时要加作用域。</p><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p><strong>菱形继承概念</strong>：</p><p>两个派生类继承同一个基类，又有某个类同时继承这两个派生类，这种继承称为菱形继承，或者钻石继承。</p><p><strong>典型的菱形继承案例</strong></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706120657382.png" alt="image-20210706120657382"></p><p><strong>菱形继承问题</strong>：</p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</li><li> 草泥马继承动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li></ol><p>vbptr——虚基类</p><p>继承了两个指针，两个指针通过偏移量找到了唯一的数据。</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706124701407.png" alt="image-20210706124701407"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用虚继承可以解决菱形继承问题</span></span><br><span class="line"><span class="comment">//在继承之前加上关键字virtual变为虚继承</span></span><br><span class="line"><span class="comment">// Animal类称为虚基类</span></span><br><span class="line"><span class="comment">//羊</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//羊驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span><span class="keyword">public</span> Sheep,<span class="keyword">public</span> Tuo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">18</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">28</span>;</span><br><span class="line"><span class="comment">//当菱形继承，当两个父类拥有相同的数据，需要加作用域来区分</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//这份数据我们知道，只有一份就可以了，菱形继承导致数据有两份，资源浪费</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义。</li><li>利用虚继承可以解决菱形继承问题——<strong>virtual</strong></li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>多态是C++面向对象三大特性之一</strong></p><h4 id="多条的基本概念"><a href="#多条的基本概念" class="headerlink" title="多条的基本概念"></a>多条的基本概念</h4><p>多态分为两种</p><ul><li>静态多态:函数重载和运算符重载属于静态多态，复用函数名</li><li>动态多态:派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态的区别</p><ul><li>静态多态的函数地址早绑定 -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//加上virtual变成虚函数,实现地址晚绑定</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">//地址早绑定，在编译阶段就确定函数地址</span></span><br><span class="line"><span class="comment">//如果想让猫说话，那么这个函数的地址就不能提前绑定，需要在运行阶段进行绑定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态多条满足条件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.有继承关系</span></span><br><span class="line"><span class="comment">2.子类重写父类的虚函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//重写要求:函数返回值类型 函数名 参数列表 完全相同 </span></span><br><span class="line"><span class="comment">//动态多态的使用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类的指针或者引用 指向子类的对象//Animal &amp;animal = cat;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Animal &amp;animal)</span><span class="comment">//Animal &amp;animal = cat;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cat cat;</span><br><span class="line">doSpeak(cat);</span><br><span class="line">Dog dog;</span><br><span class="line">doSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>多态满足条件</p><ul><li>有继承关关系</li><li>子类重写父类中的虚函数</li></ul><p>多态的使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写:函数返回值类型 函数名 参数列表 完全一致称为重写</p><h4 id="多态的原理剖析"><a href="#多态的原理剖析" class="headerlink" title="多态的原理剖析"></a>多态的原理剖析</h4><p><strong>虚函数(表)指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfptr</span><br><span class="line">    v - <span class="keyword">virtual</span></span><br><span class="line">    f - functio n</span><br><span class="line">    prt - pointer</span><br></pre></td></tr></table></figure><p><strong>虚函数表</strong></p><p>表内记录一个虚函数的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vftable</span><br><span class="line">    v - <span class="keyword">virtual</span></span><br><span class="line">    f - functio n</span><br></pre></td></tr></table></figure><p>当子类重写父类的虚函数后，子类中的虚函数表内部会替换成子类的虚函数地址。</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150050385.png" alt="image-20210706150050385"></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150436954.png" alt="image-20210706150436954"></p><p>Cat子类重写前</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150747256.png" alt="image-20210706150747256"></p><p>重写后</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150753020.png" alt="image-20210706150753020"></p><h4 id="多态案例1——计算器类"><a href="#多态案例1——计算器类" class="headerlink" title="多态案例1——计算器类"></a>多态案例1——计算器类</h4><p>案例描述:<br>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类。</p><p><strong>多态的优点</strong>：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>代码实现</strong>:</p><p>普通方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想扩展新的功能，需要修改原码</span></span><br><span class="line"><span class="comment">//在真实的开发中，实行开闭原则，对扩展进行开放，对修改进行关闭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Num1;</span><br><span class="line"><span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Calculator c;</span><br><span class="line">c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">c.m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用多态实现计算器</span></span><br><span class="line"><span class="comment">//实现计算器抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Num1;</span><br><span class="line"><span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//减法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//乘法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//多态使用条件</span></span><br><span class="line"><span class="comment">//父类指针或者引用指向子类对象</span></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> AddCalculator;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//堆区数据，手动开辟手动释放</span></span><br><span class="line"><span class="keyword">delete</span> abc;<span class="comment">//堆区的数据被销毁了，但是指针的类型没有变</span></span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line">abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态带来的好处</p><ol><li>组织结构清晰，哪出错了马上定位到。</li><li>可读性强</li><li>对于前期和后期扩展以及维护性高</li></ol><p><strong>总结</strong>：C++开发提倡利用多态设计程序框架，因为多态优点很多。</p><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>在多态中，通常父类汇中虚函数的实现是毫无意义的，主要都是调用子类重写的内容。</p><p>因此可以将虚函数改为纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纯虚函数语法<span class="keyword">virtual</span> 返回值类型 函数名 (参数列表) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>当类中有了纯虚函数，这个类也称为抽象类。</p><p><strong>抽象类特点</strong>:</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//纯虚函数和抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//只要有一个纯虚函数,这个类称为抽象类</span></span><br><span class="line"><span class="comment">//特点;无法实例化对象</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//注意:不要忘掉virtual!</span></span><br><span class="line"><span class="comment">//抽象类的子类必须要重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Base b1; 抽象类无法实例化对象</span></span><br><span class="line">Son s1;<span class="comment">//子类重写父类的虚函数，否则无法实例化对象</span></span><br><span class="line">Base* abc = <span class="keyword">new</span> Son;</span><br><span class="line">abc-&gt;func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态案例2——制作饮品"><a href="#多态案例2——制作饮品" class="headerlink" title="多态案例2——制作饮品"></a>多态案例2——制作饮品</h4><p>案例描述:制作饮品的大致流程为:煮水-冲泡-倒入杯中-加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶水。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//多态案例-制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//制作饮品</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDrink</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Boil();</span><br><span class="line">Brew();</span><br><span class="line">Pour();</span><br><span class="line">PutSomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span><span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;把水煮开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒入杯中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入糖和牛奶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span><span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;把矿泉水煮开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒入杯中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入柠檬&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* <span class="built_in">abs</span>)</span><span class="comment">//父类指针指向子类对象AbstractDrinking* abs = new Coffee;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;makeDrink();</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">abs</span>;<span class="comment">//手动释放</span></span><br><span class="line"><span class="comment">//堆区的数据被销毁了但是指针的类型没变</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//制作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DoWork(<span class="keyword">new</span> Coffee);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DoWork(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>多态使用的时候，如果子类中有属性开辟到堆区，那么父类指针在释放的时无法调用到子类的析构代码</p><p><strong>解决方法</strong>:将父类中的析构函数改为虚析构或者纯虚析构</p><p>虚析构和纯析构共性:</p><ul><li>可以解决父类指针释放子类对象，</li><li>都需要有具体的含函数实现</li></ul><p>虚析构和纯虚构的区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p><strong>虚析构语法</strong>;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>纯虚析构语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名() = <span class="number">0</span>;<span class="comment">//声明</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//虚析构和纯虚析构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用虚析构可以解决父类指针释放对象时不干净的问题</span></span><br><span class="line"><span class="comment">/*virtual ~Animal()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;Animal的析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//纯虚析构,需要声明也需要实现</span></span><br><span class="line"><span class="comment">//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象</span></span><br><span class="line"><span class="keyword">virtual</span> ~Animal() = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//纯虚函数，不需要实现</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//纯虚析构函数</span></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal纯析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Cat(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line">m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Cat()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span>* m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;speak();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类的指针在析构的时候，不会调用子类中的析构函数，</span></span><br><span class="line"><span class="comment">导致子类如果有堆区属性，会出现内存的泄漏情况。</span></span><br><span class="line"><span class="comment">解决:将父类的析构函数改为虚析构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ol><li>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象问题</li><li>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ol><h4 id="多态案例3——电脑组装"><a href="#多态案例3——电脑组装" class="headerlink" title="多态案例3——电脑组装"></a>多态案例3——电脑组装</h4><p>案例描述:<br>电脑主要组成部件为CPU(用于计算)，显卡(用于显示)，内存条（用于存储),将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口,测试时组装三台不同的电脑进行工作.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//抽象不同零件类</span></span><br><span class="line"><span class="comment">//抽象cpu</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的存储函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Computer(CPU* cpu, VideoCard* vc, Memory* mem)</span><br><span class="line">&#123;</span><br><span class="line">m_cpu = cpu;</span><br><span class="line">m_vc = vc;</span><br><span class="line">m_mem = mem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供一个工作的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让零件工作起来，调用他的接口</span></span><br><span class="line">m_cpu-&gt;calculate();</span><br><span class="line">m_vc-&gt;display();</span><br><span class="line">m_mem-&gt;storage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供析构函数释放3个电脑零件</span></span><br><span class="line">~Computer()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//释放CPU零件</span></span><br><span class="line"><span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_cpu;</span><br><span class="line">m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放显卡零件</span></span><br><span class="line"><span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_vc;</span><br><span class="line">m_vc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存条零件指针</span></span><br><span class="line"><span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_mem;</span><br><span class="line">m_mem = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CPU* m_cpu;<span class="comment">//CPU零件指针</span></span><br><span class="line">VideoCard* m_vc;<span class="comment">//显卡零件指针</span></span><br><span class="line">Memory* m_mem;<span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的厂商</span></span><br><span class="line"><span class="comment">//Intel</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Intel的CPU开始计算了&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的厂商</span></span><br><span class="line"><span class="comment">//Lenovo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//组装电脑</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//一台电脑零件</span></span><br><span class="line">CPU* intelcpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">VideoCard* videocard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">Memory* memory = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"><span class="comment">//创建第一台电脑</span></span><br><span class="line">Computer* computer1 = <span class="keyword">new</span> Computer(intelcpu, videocard, memory);</span><br><span class="line">computer1-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//组装第二台电脑</span></span><br><span class="line">Computer* computer2 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer2-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//组装第三台电脑</span></span><br><span class="line">Computer* computer3 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU,<span class="keyword">new</span> IntelVideoCard,<span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer3-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>程序运行时，产生的数据都属于临时数据，程序一旦运行结束就会被释放。</p><p>通过文件可以将数据持久化。</p><p>C++中对文件进行操作需要包含头文件&lt; Fstream&gt;</p><p><strong>文件类型分为两种</strong>:</p><ol><li><strong>文本文件</strong>-文件以文本的ASCII码形式存储在计算机中</li><li><strong>二进制文件</strong>-文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂他们</li></ol><p><strong>操作文件的三大类</strong></p><ol><li>ofstream:写操作</li><li>ifstream：读操作</li><li>fstream:读写操作</li></ol><h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><ol><li>包含头文件——#include&lt; fstream&gt;</li><li>创建流对象——ofstream ofs;</li><li>打开文件——ofs.open(“文件路径”,打开方式)</li><li>写数据——ofs&lt;&lt;”写入的数据”;</li><li>关闭文件——ofs.close();</li></ol><p> 文件打开方式:</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210708171215528.png" alt="image-20210708171215528"></p><p><strong>注意</strong>:文件打开方式可以配合使用，利用|操作符</p><p><strong>例如</strong>:用二进制方式写文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios::binary | ios::out</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//文本文件写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//3.指定打开方式</span></span><br><span class="line">ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);<span class="comment">//如果不指定文件路径，默认和你项目的文件路径一样</span></span><br><span class="line"><span class="comment">//4.写内容</span></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名:张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别:男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄:18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>文件操作必须包含头文件fstream</li><li>读文件可以利用ofstream,或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><p>读文件操作与写文件步骤相似，但是读取方式比较多</p><p>读文件操作步骤如下</p><ol><li>包含头文件——#include&lt; fstream&gt;</li><li>创建流对象——ifstream ifs;</li><li>打开文件并判断文件是否打开成功——ifs.open(“文件路径”，打开方式);</li><li>读数据——四种方式读取</li><li>关闭文件——ifs.close();</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3.打开文件,并且判断是否打开成功</span></span><br><span class="line">ifs.open(<span class="string">&quot;test.txt&quot;</span>,ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.读数据</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="comment">/*char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">while (ifs&gt;&gt;buf)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="comment">/*char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="comment">/*string buf;</span></span><br><span class="line"><span class="comment">while (getline(ifs,buf))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第四种-不推荐</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c = ifs.get()) != EOF)<span class="comment">//EOF——end of file</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>读文件可以利用ifsteam,或者fstream类</li><li>利用is_open函数可以判断是否打开成功</li><li>close关闭文件</li></ul><h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>以二进制的方式对文件进行读写操作</p><p>打开方式主要为<strong>ios::binary</strong></p><h5 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h5><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream&amp; <span class="title">wirte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* buffer,<span class="keyword">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//二进制写文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建头文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"><span class="comment">//3.打开文件</span></span><br><span class="line"><span class="comment">//ofs.open(&quot;person.txt&quot;,ios::out | ios::binary);</span></span><br><span class="line"><span class="comment">//4.写文件</span></span><br><span class="line">Person p = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span> &#125;;</span><br><span class="line">ofs.write((<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;p,<span class="keyword">sizeof</span>(Person));</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>文件输出流对象，可以通过write函数，以二进制的方式写数据</li></ul><h5 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h5><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(<span class="keyword">char</span> * buffer,<span class="keyword">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>参数解释:字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//二进制读文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3.打开文件&amp;判读文件是否打开成功</span></span><br><span class="line">ifs.open(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line"><span class="keyword">if</span> (!(ifs.is_open()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;打开失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.读文件</span></span><br><span class="line">Person p;</span><br><span class="line">ifs.read((<span class="keyword">char</span>*)&amp;p, <span class="keyword">sizeof</span>(Person));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p.m_Name&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><p>文件输入流对象，可以通过read函数，以二进制的方式读数据。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迟到的windows11虚拟机初体验</title>
      <link href="2021/06/30/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2021/06/30/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="迟到的windows11虚拟机初体验"><a href="#迟到的windows11虚拟机初体验" class="headerlink" title="迟到的windows11虚拟机初体验"></a>迟到的windows11虚拟机初体验</h1><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/windows11%E6%A1%8C%E9%9D%A2.png"></p><p>近日微软发布了继win10“最后一个版本”的windows11，相信很多小伙伴早已一睹为快，而我呢当时也是立即就了解到这个事情了，只不过一直没着急真正的感受一下。</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><p>只看更新内容的话，其中最吸引我的是可以安装原生的安卓应用，不过我在我这个版本中还没有发现这个功能，可能到了正式版才会真正推出吧。</p><p>接着咱们来看一下系统本身的变化。</p><p>我是用过几年的xp,6年的win7,加上不到1年的win10,相比win7到win10的过渡，win11在外观上没有太大的变化，主要是部分图标加了一些圆角矩形，小图标色彩变得丰富了一些。</p><p>（忽略我爆满的C盘）</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E5%AF%B9%E6%AF%94%E5%9B%BE1.png"></p><p>还有一个最明显的变化，导航栏的位置被移动到了中间。</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E6%A1%8C%E9%9D%A2-1625022726079.png"></p><p>我觉得除了这个导航栏的位置需要一点时间来适应，大体上和win10是没有什么变化的，用习惯了win10的小伙伴应该很快就能熟练掌握。</p><p>虚拟机性能受限，部分功能体验不到位，但是我感觉到一些过渡动画发生了一些变化，要更丝滑柔和了一些，具体表现还是得等正式版发布之后再进行测试。</p><p><strong>下面是我的安装过程</strong></p><iframe src="//player.bilibili.com/player.html?aid=973950519&bvid=BV1T44y1q7gG&cid=361971319&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -windows </tag>
            
            <tag> -system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NowCoder刷题(1)【树】二叉树的遍历</title>
      <link href="2021/06/21/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>2021/06/21/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p><strong>二叉树的遍历(IO型)</strong></p><p><a href="https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&&tqId=29483&rp=1&ru=/activity/oj&qru=/ta/tsing-kaoyan/question-ranking">二叉树遍历_牛客题霸_牛客网 (nowcoder.com)</a></p><p><strong>题目描述</strong></p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621205635444.png" alt="image-20210621205635444"></p><p>如图所示的这棵树</p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210620204206164.png" alt="image-20210620204206164"></p><p>前序输出结果为</p><p>A-B-D-#-#-E-#-#-C-#-#</p><p>还原过程</p><p><strong>示例1</strong></p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621191417552.png" alt="image-20210621191417552"></p><p><strong>示例2</strong></p><p>——前序遍历还原</p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621192508286.png" alt="image-20210621192508286"></p><p><strong>代码实现</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义一棵树的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line"><span class="keyword">char</span> val;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"><span class="comment">//根据前序遍历还原这棵树</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">CreatBackTree</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[*i] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//井号说明该结点为空</span></span><br><span class="line">++(*i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;val = a[*i];</span><br><span class="line">(*i)++;</span><br><span class="line">root-&gt;left = CreatBackTree(a, i);<span class="comment">//构建子树的时候还是从这个结点开始</span></span><br><span class="line">root-&gt;right = CreatBackTree(a, i);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTree</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrderTree(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;val);</span><br><span class="line">InOrderTree(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//输入一个字符数组</span></span><br><span class="line"><span class="keyword">char</span> arry[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arry);<span class="comment">//输入字符串不用取地址符</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">TreeNode* root = CreatBackTree(arry, &amp;i);</span><br><span class="line">InOrderTree(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%8622-1624279920068.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -树 </tag>
            
            <tag> -二叉树 </tag>
            
            <tag> -NowCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(9)【树】前序&amp;平衡&amp;深度</title>
      <link href="2021/06/18/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&amp;%E5%B9%B3%E8%A1%A1&amp;%E6%B7%B1%E5%BA%A6(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/18/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&amp;%E5%B9%B3%E8%A1%A1&amp;%E6%B7%B1%E5%BA%A6(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>二叉树知识回顾</strong>——<a href="https://blog.csdn.net/qq_51604330/article/details/117955503?spm=1001.2014.3001.5501">【树】之二叉树(C语言)(含图解)_半生瓜のblog-CSDN博客</a></p><p><strong>二叉树的前序遍历</strong></p><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>本题中，对于C++或者Java等语言，返回的是它们的数据结构库里面的数据结构，而C语言没有，这也就是如果用C语言往后通吃数据结构会困难的原因。</p><p>注意本体的传参，操作的是不是一个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//计算结点个数</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(struct TreeNode* root)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> root == <span class="literal">NULL</span>?<span class="number">0</span>:TreeSize(root-&gt;left)+TreeSize(root-&gt;right)+<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//前序遍历</span></span><br><span class="line"><span class="keyword">void</span> _preorder(struct TreeNode* root,<span class="keyword">int</span>* a,<span class="keyword">int</span> *i)<span class="comment">//为了保证一直对一个i进行操作所以要传地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    a[*i] = root-&gt;val;</span><br><span class="line">    (*i)++;</span><br><span class="line">    _preorder(root-&gt;left,a,i);</span><br><span class="line">    _preorder(root-&gt;right,a,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">preorderTraversal</span><span class="params">(struct TreeNode* root, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> size = TreeSize(root);</span><br><span class="line">     <span class="comment">//创建数组</span></span><br><span class="line">     <span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">     _preorder(root,a,&amp;i);</span><br><span class="line">     *returnSize = size;</span><br><span class="line">     <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二叉树的最大深度</strong></p><p><strong>经典的分治问题</strong></p><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>一棵树的高度就是最长路径的结点个数。</p><ul><li>空 -  高度为0</li><li>非空 左右子树深度大的内个+1</li></ul><p>本质上用的后序遍历，先求左，后求右边，再求自己。</p><p><strong>图示</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&%E5%B9%B3%E8%A1%A1&%E6%B7%B1%E5%BA%A6.assets/image-20210618084730107.png" alt="image-20210618084730107"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftDepth &gt; rightDepth?leftDepth+<span class="number">1</span>:rightDepth+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>平衡二叉树</strong></p><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">Loading Question… - 力扣（LeetCode） (leetcode-cn.com)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftDepth &gt; rightDepth?leftDepth+<span class="number">1</span>:rightDepth+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="comment">//空树也满足条件</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line">    <span class="comment">//如果一开始就不满足就没必要往下进行了，满足就递归判断左右</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(leftDepth-rightDepth) &lt; <span class="number">2</span></span><br><span class="line">    &amp;&amp; isBalanced(root-&gt;left)</span><br><span class="line">    &amp;&amp; isBalanced(root-&gt;right);                                          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -LeetCode </tag>
            
            <tag> -树 </tag>
            
            <tag> -二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Butterfly添加天气插件</title>
      <link href="2021/06/17/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/"/>
      <url>2021/06/17/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>我的小站</strong>——<a href="http://doraemon2.xyz/">半生瓜のblog</a></p><p><strong>感谢糖果屋Akilar老哥的帮助</strong>——<a href="https://akilar.top/">Akilarの糖果屋</a></p><h1 id="Hexo-Butterfly添加天气插件"><a href="#Hexo-Butterfly添加天气插件" class="headerlink" title="Hexo-Butterfly添加天气插件"></a><strong>Hexo-Butterfly添加天气插件</strong></h1><p><strong>效果如图所示</strong>：<img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617185624577.png" alt="image-20210617185624577"></p><p>就是JS插件的字体大小我不会调，稍微有一点瑕疵，不过影响不大。</p><p>我用的是心知天气的天气插件(其他天气插件同理)。</p><p><strong>首先</strong>，先到心知天气的官网注册一个账号——<a href="https://www.seniverse.com/">心知天气</a>。</p><p>登录，申请一个免费版，然后在产品的下拉栏中选择天气插件，然后点击立即免费使用。</p><p><strong>然后</strong>，在下面选择显示参数。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190318207.png" alt="image-20210617190318207"></p><p><strong>点击生成代码并复制</strong>。</p><p><strong>打开主题文件目录</strong></p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190559552.png" alt="image-20210617190559552"></p><p>打开<strong>nav.pug</strong></p><p>将下面这行代码放入合适的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tp-weather-widget&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>例如</strong>:</p><p><img src="Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190804513.png" alt="image-20210617190804513"></p><p><strong>保存并关闭</strong></p><p><strong>接着</strong>，在此路径下创建一个JS文件，名称随意。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190908876.png" alt="image-20210617190908876"></p><p><strong>打开</strong>，将刚才复制代码中的 <script></script>中间的内容粘贴进去。</p><p>就是将下图中画横线的代码删除。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617191118038.png" alt="image-20210617191118038"></p><p><strong>保存并关闭</strong></p><p><strong>最后</strong>，找到主题配置文件_config.yml</p><p><strong>打开</strong>，在<strong>inject</strong>处引入刚才创建的JS文件(注意文件名称)。</p><p><img src="Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617191324806.png" alt="image-20210617191324806"></p><p><strong>保存并退出</strong></p><p><strong>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d即可完成</strong></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树】之二叉树(C语言)</title>
      <link href="2021/06/16/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/16/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的概念及结构"><a href="#树的概念及结构" class="headerlink" title="树的概念及结构"></a>树的概念及结构</h2><h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><p>树是一种<strong>非线性</strong>的数据结构，它是由n(n &gt;= 0)个有限结点组成的一个具有层次关系的集合，<strong>把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的</strong>。</p><ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点。</li><li>除跟根结点外，其余结点被分成M（M&gt;0）个互不相交的集合T1、T2……Tm,其中每一个集合Ti(1&lt;=i&lt;=m)又是一棵结构与树类似的子树。每颗子树的根节点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul><hr><p>结点的度：到底有多少个链接的子节点</p><p>叶子结点或终端结点：度为0的结点称为叶子结点，</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210612113428728.png" alt="image-20210612113428728"></p><ul><li>节点的度:一个节点含有的子树的个数称为该节点的度;如上图:A的为6</li><li>叶节点或终端节点:度为0的节点称为叶节点;如上图:B、C、H、I..等节点为叶节点非终端节点或分支节点:度不为0的节点;如上图:D、E、F、G…等节点为分支节点</li><li>兄弟节点:具有相同父节点的节点互称为兄弟节点;如上图:B、C是兄弟节点</li><li>树的度:一棵树中，最大的节点的度称为树的度;如上图:树的度为6</li><li>节点的层次:从根开始定义起，根为第1层，根的子节点为第2层，以此类推;</li><li>树的高度或深度:树中节点的最大层次;如上图:树的高度为4（有两种说法-从0开始还是从1开始，空树-1，空树0）</li><li>节点的祖先:从根到该节点所经分支上的所有节点;如上图:A是所有节点的祖先</li><li>子孙:以某节点为根的子树中任一节点都称为该节点的子孙。如上图:所有节点都是A的子孙</li><li>森林:由m (m&gt;0)棵互不相交的多颗树的集合称为森林;(数据结构中的学习并查集本质就是一个森林)——(日常很少碰到森林，并查集就是一个森林)</li></ul><h2 id="树的要求"><a href="#树的要求" class="headerlink" title="树的要求"></a>树的要求</h2><ul><li>子树是不相交的</li><li>除了根结点之外，每个结点有且仅有一个父结点</li><li>一个N个结点的树有N-1条边</li></ul><h2 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h2><p>相对于线性表，树的结构就复杂很多了。最常用的表示方法——孩子兄弟表示法。</p><h2 id="现实应用"><a href="#现实应用" class="headerlink" title="现实应用"></a>现实应用</h2><p>文件系统的目录树，</p><p>树在实际当中，不太作为存储数据这个角度去用，因为意义不是很大。</p><p>主要用的是二叉树</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>现实中的二叉树</p><p>这还是个满二叉树</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80).assets/src=http___pic2.zhimg.com_v2-48ad88b651e76da3f8958831ba1cd80b_1200x500.jpg&refer=http___pic2.zhimg.jpg"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>与普通的树最大的不同是它最多只有两个子树。</p><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><ol><li><p>满二叉树：每一层都是满的。</p><p>假设一棵满二叉树的高度是 h,那么它的总结点个数是：2^0+2^1+2^2+……2^(h-1) =N。</p><p>推导公式:2^h-1 = N;h = log2N+1以2位底N的对数+1。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210614201257487.png" alt="image-20210614201257487"></p></li><li><p>完全二叉树</p><p>完全二叉树是个效率很高的数据结构，完全二叉树是由满二叉树引出来的。</p><p>假设树的高度是h,前h-1层是满的，最后一层不满，但是最后一层从左往右都是连续的。</p><p>最后一层最少有一个结点。</p><p>结点个数为:2^h-1-X= N,高度近似为:h = log2N+1+X以二为底N的对数+1</p><p> <img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210614202340668.png" alt="image-20210614202340668"></p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在实际中普通二叉树的增删查改没得意义。</p><p><strong>有意义的是搜索二叉树</strong>。</p><p><strong>搜索二叉树</strong>:任何一棵树，左子树都比跟要小，右子树都比根要大。在搜索树中查找一个数，最多查找高度次。时间复杂度O(N)。</p><p>引申：左右两边的结点数量比较均匀。</p><p>接着引出 ——<strong>平衡树</strong></p><ul><li>AVL树</li><li>红黑树</li></ul><p>学习普通二叉树可以为后面学习复杂的有用的平衡树做铺垫。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>1.若规定根结点的层数为1，则一棵非空二叉树的第i层上最多有2^(i-1)个结点</p><p>2.若规定根节点的层数是1，则深度为h的二叉树的最大节点数是2^-1</p><p>3.对于任何一棵二叉树，如果度为0其叶结点个数为n0,度为2的分支结点个数为n2,则有n0 = n2 +1（度为2的结点个数总是比度为0的结点个数多1）</p><p>4.若规定根节点的层数是1，具有n个结点的满二叉树的深度是h = log2 N +1（以2为底N的对数+1）</p><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><p>顺序结构存储就是使用数组来存储，一般使用数组只适合表示完全二叉树，因为不是完全二叉树会有空间的浪费。而现实中使用中只有堆才会使用数组来存储。二叉树顺序存储在物理上是一个数组，在逻辑上是一颗二叉树。</p><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><p>二叉树的链式存储结构是指，用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。通常的方法是链表中每个结点由三个域组成，数据域和左右指针域，左右指针分别用来给出该结点左孩子和右孩子所在的链结点的存储地址。链式结构又分为二叉链和三叉链，当前我们学习中一般都是二叉链，后面到高阶数据结构如红黑树等会用到三叉链。</p><h2 id="构成-amp-遍历"><a href="#构成-amp-遍历" class="headerlink" title="构成&amp;遍历"></a>构成&amp;遍历</h2><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613173854712.png" alt="image-20210613173854712"></p><p>任何一个二叉树由三个部分构成</p><p>1.根节点——2.左子树——3.右子树</p><p> 分治算法：分而治之，大问题分成子问题，子问题再分成子问题，直到无法分割</p><p>前序遍历：根左右——(上图：A-B-D-NULL-NULL-E-NULL-NULL-C-NULL-NULL)</p><p>中序遍历：左根右——(NULL-D-NULL-B-NULL-E-NULL-A-NULL-C-NULL)</p><p>后序遍历：左右根——(NULL-NULL-D-NULL-NULL-E-B-NULL-NULL-C-A) </p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> BinaryTreeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">BinaryTreeType data;</span><br><span class="line">&#125;BTNode;</span><br></pre></td></tr></table></figure><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果树是空树就直接return</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">PrevOrder(root-&gt;left);</span><br><span class="line">PrevOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrder(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,root-&gt;data);</span><br><span class="line">InOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PostOrder(root-&gt;left);</span><br><span class="line">PostOrder(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建一个简单的树"><a href="#构建一个简单的树" class="headerlink" title="构建一个简单的树"></a>构建一个简单的树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个简单的树</span></span><br><span class="line">BTNode* A = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">A-&gt;data = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">A-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">A-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* B = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">B-&gt;data = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">B-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">B-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* C = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">C-&gt;data = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">C-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">C-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* D = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">D-&gt;data = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">D-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">D-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* E = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">E-&gt;data = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">E-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">E-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* F = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">F-&gt;data = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">F-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">F-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">A-&gt;left = B;</span><br><span class="line">A-&gt;right = C;</span><br><span class="line">B-&gt;left = D;</span><br><span class="line">B-&gt;right = E;</span><br><span class="line"> </span><br><span class="line">PrevOrder(A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613202834074.png" alt="image-20210613202834074"></p><h2 id="函数递归图——前序遍历"><a href="#函数递归图——前序遍历" class="headerlink" title="函数递归图——前序遍历"></a>函数递归图——前序遍历</h2><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/%E6%97%A0%E6%A0%87%E9%A2%98-1623589214513.png"></p><h2 id="结点个数"><a href="#结点个数" class="headerlink" title="结点个数"></a>结点个数</h2><p><strong>方法一</strong>：因为我们要对同一个size进行++,所以要设置一个全局变量size进行++就完事了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">TreeSize(root-&gt;left);</span><br><span class="line">TreeSize(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是在进行多次调用的时候因为累加，调用前要先将他置成0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TreeSize(A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>,size);</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">TreeSize(B);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>, size);</span><br></pre></td></tr></table></figure><p>但是这种方法不是线程安全的。引出我们的第二种方法。</p><p><strong>方法二</strong>：传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSize</span><span class="params">(BTNode* root,<span class="keyword">int</span>* psize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">(*psize)++;</span><br><span class="line">&#125;</span><br><span class="line">TreeSize(root-&gt;left, psize);</span><br><span class="line">TreeSize(root-&gt;right, psize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Asize = <span class="number">0</span>;</span><br><span class="line">TreeSize(A,&amp;Asize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>,Asize);</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Bsize = <span class="number">0</span>;</span><br><span class="line">TreeSize(B, &amp;Bsize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>, Bsize);</span><br></pre></td></tr></table></figure><p><strong>方法三</strong></p><p><strong>分治</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root == <span class="literal">NULL</span> ? <span class="number">0</span>:TreeSize(root-&gt;left) + TreeSize(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, TreeSize(A));</span><br></pre></td></tr></table></figure><p><strong>图解</strong></p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210615194041323.png" alt="image-20210615194041323"></p><h2 id="叶子结点的个数"><a href="#叶子结点的个数" class="headerlink" title="叶子结点的个数"></a>叶子结点的个数</h2><p>  叶子结点没有子结点，叶子结点就是度为0的结点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeLeafSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TreeLeafSize(root-&gt;left) + TreeLeafSize(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程：判断是否为空，为空返回0，不为空看左右孩子是否都为空，为空返回1，如果上面两个条件都不满足，分别计算左右孩子…孩子的孩子…递归返回相应的根结点。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210616113316365.png" alt="image-20210616113316365"></p><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>前序中序后序遍历其实也叫深度优先遍历。</p><p>层序遍历本质上也叫做广度优先遍历，以根为主一层一层往下遍历。</p><p>用队列先进先出的性质，</p><p>核心思路:上一层带下一层。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E4%B8%AA%E6%95%B0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line">QueueInit(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (root)<span class="comment">//不为空进队 </span></span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;q))<span class="comment">//队列不为空就继续</span></span><br><span class="line">&#123;</span><br><span class="line">BTNode* front = QueueFront(&amp;q);</span><br><span class="line">QueuePop(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, front-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (front-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (front-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">QueueDestory(&amp;q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613173854712.png" alt="image-20210613173854712"></p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210616125449237.png" alt="image-20210616125449237"></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><hr><p>上面是队列</p><p>相关链接——<a href="https://blog.csdn.net/qq_51604330/article/details/117697458?spm=1001.2014.3001.5501">【线性表】之队列_半生瓜のblog-CSDN博客</a></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">/// 队列</span></span><br><span class="line"><span class="comment">//前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">QueueDataType</span>;</span><span class="comment">//存二叉树的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// //////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> BinaryTreeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">BinaryTreeType data;</span><br><span class="line">&#125;BTNode;</span><br><span class="line"><span class="comment">//二叉树不学习增删查改，因为没得意义</span></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果树是空树就直接return</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">PrevOrder(root-&gt;left);</span><br><span class="line">PrevOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrder(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,root-&gt;data);</span><br><span class="line">InOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PostOrder(root-&gt;left);</span><br><span class="line">PostOrder(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结点的个数</span></span><br><span class="line"><span class="comment">/*因为我们要对同一个size进行++,</span></span><br><span class="line"><span class="comment">所以要设置一个全局变量size进行++就完事了,</span></span><br><span class="line"><span class="comment">但是在进行多次调用的时候因为累加，调用前要先将他置成0*/</span></span><br><span class="line"><span class="comment">//int size = 0;</span></span><br><span class="line"><span class="comment">//void TreeSize(BTNode* root)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (root == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//size++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;left);</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;right);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line"><span class="comment">//int size = 0;</span></span><br><span class="line"><span class="comment">//void TreeSize(BTNode* root,int* psize)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (root == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//(*psize)++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;left, psize);</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;right, psize);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root == <span class="literal">NULL</span> ? <span class="number">0</span>:TreeSize(root-&gt;left) + TreeSize(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeLeafSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TreeLeafSize(root-&gt;left) + TreeLeafSize(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line">QueueInit(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (root)<span class="comment">//不为空进队 </span></span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;q))<span class="comment">//队列不为空就继续</span></span><br><span class="line">&#123;</span><br><span class="line">BTNode* front = QueueFront(&amp;q);</span><br><span class="line">QueuePop(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, front-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (front-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (front-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">QueueDestory(&amp;q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//构建一个简单的树</span></span><br><span class="line">BTNode* A = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">A-&gt;data = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">A-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">A-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* B = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">B-&gt;data = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">B-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">B-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* C = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">C-&gt;data = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">C-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">C-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* D = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">D-&gt;data = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">D-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">D-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* E = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">E-&gt;data = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">E-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">E-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* F = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">F-&gt;data = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">F-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">F-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">A-&gt;left = B;</span><br><span class="line">A-&gt;right = C;</span><br><span class="line">B-&gt;left = D;</span><br><span class="line">B-&gt;right = E;</span><br><span class="line"> </span><br><span class="line">LevelOrder(A);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -树 </tag>
            
            <tag> -二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(8)【栈&amp;队列】用栈实现队列(C语言)</title>
      <link href="2021/06/14/LeetCode%E5%88%B7%E9%A2%98(8)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/14/LeetCode%E5%88%B7%E9%A2%98(8)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>用栈实现队列</strong></p><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><hr><p>相似题目——<strong>用队列实现栈</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/117826806?spm=1001.2014.3001.5501">LeetCode刷题(7)【栈&amp;队列】用队列实现栈(C语言)_半生瓜のblog-CSDN博客</a></p><hr><p><strong>思路</strong>：</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614164351913.png" alt="image-20210614164351913"></p><p>用栈实现队列要比用队列实现栈要简单一些，我们不用来回在两个栈里面导数据，只需要导一次，然后在依次出栈就成功实现队列的出队操作了。</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614164357870.png" alt="image-20210614164357870"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614165007351.png" alt="image-20210614165007351"></p><p><strong>结论</strong>：</p><ol><li>入数据往push栈里面入</li><li>出数据从pop栈里面出，如果里面有数据，直接出，没有就把push栈里面的数据导过来，然后再出。</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">StackDataType* arry;</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//满了</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line">StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">ps-&gt;top++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">ps-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Stack pushST;</span><br><span class="line">    Stack popST;</span><br><span class="line">&#125; MyQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyQueue* <span class="title">myQueueCreate</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyQueue* q = (MyQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyQueue));</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc is fail!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StackInit(&amp;q-&gt;pushST);</span><br><span class="line">    StackInit(&amp;q-&gt;popST);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueuePush</span><span class="params">(MyQueue* obj, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//入数据就往pushST里面入</span></span><br><span class="line">    StackPush(&amp;obj-&gt;pushST,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePop</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//类似于下面的peek</span></span><br><span class="line">    <span class="comment">// if(StackEmpty(&amp;obj-&gt;popST))</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     while(!StackEmpty(&amp;obj-&gt;pushST))</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         StackPush(&amp;obj-&gt;popST,StackTop(&amp;obj-&gt;pushST));</span></span><br><span class="line">    <span class="comment">//         StackPop(&amp;obj-&gt;pushST);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// int top = StackTop(&amp;obj-&gt;popST);</span></span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="comment">//或者直接调用下面的myQueuePeek函数直接获取popST的栈顶元素</span></span><br><span class="line">    <span class="comment">//保存给top之后删除，然后return</span></span><br><span class="line">    <span class="keyword">int</span> top = myQueuePeek(obj);</span><br><span class="line">    StackPop(&amp;obj-&gt;popST);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the front element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePeek</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//出数据要从popST里面出</span></span><br><span class="line">    <span class="comment">//如果popST里面是空的</span></span><br><span class="line">    <span class="comment">//就要先从pushST里面拿</span></span><br><span class="line">    <span class="keyword">if</span>(StackEmpty(&amp;obj-&gt;popST))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把pushST里面的元素导到popST里面</span></span><br><span class="line">        <span class="comment">//然后取第一个</span></span><br><span class="line">        <span class="keyword">while</span>(!StackEmpty(&amp;obj-&gt;pushST))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取pushST最上面的元素依次压进popST</span></span><br><span class="line">            StackPush((&amp;obj-&gt;popST),StackTop(&amp;obj-&gt;pushST));</span><br><span class="line">            StackPop(&amp;obj-&gt;pushST);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StackTop(&amp;obj-&gt;popST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myQueueEmpty</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StackEmpty(&amp;obj-&gt;popST) &amp;&amp; StackEmpty(&amp;obj-&gt;pushST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueueFree</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackDestory(&amp;obj-&gt;pushST);</span><br><span class="line">    StackDestory(&amp;obj-&gt;popST);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = myQueueCreate();</span></span><br><span class="line"><span class="comment"> * myQueuePush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = myQueuePop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_3 = myQueuePeek(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * bool param_4 = myQueueEmpty(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * myQueueFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -LeetCode </tag>
            
            <tag> -栈 </tag>
            
            <tag> -队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(7)【栈&amp;队列】用队列实现栈(C语言)</title>
      <link href="2021/06/11/LeetCode%E5%88%B7%E9%A2%98(7)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/11/LeetCode%E5%88%B7%E9%A2%98(7)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>用队列实现栈</strong></p><p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/images/LeetCode7.assets/image-20210611195234710.png" alt="image-20210611195234710"></p><p><strong>目的</strong>：用队列实现栈，从先进先出——&gt;先进后出，</p><p>1234这四个数据依次从队列1的队尾进入，要让4先出，一个队列是无法实现的，所以这里的队列2就排上用场了，我们可以利用队列2来进行导数据。</p><p><img src="/images/LeetCode7.assets/image-20210611195716778.png" alt="image-20210611195716778"></p><p>将123依次由队列2的队尾进入到队列2中，此时队列1中还剩一个4，将4弹出，同理，再将12依次进入到队列1中，将3弹出……</p><p><strong>也就是说</strong>。</p><p>出数据把不为空的 队列数据向为空的队列中导，知道剩最后一个。</p><p>入数据向不为空的队列入。</p><p>始终保持一个队列为空，一个不为空。</p><hr><p><strong>队列的实现</strong>——队列的实现——<a href="https://blog.csdn.net/qq_51604330/article/details/117697458">【线性表】之队列_半生瓜のblog-CSDN博客</a></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//创建两个队列</span></span><br><span class="line">    Queue q1;</span><br><span class="line">    Queue q2;</span><br><span class="line">&#125; MyStack;</span><br><span class="line"><span class="comment">//creat a queue above this</span></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyStack* <span class="title">myStackCreate</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//保证出了函数还在</span></span><br><span class="line">    MyStack* ps = (MyStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyStack));</span><br><span class="line">    <span class="keyword">if</span>(ps == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc is fail!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    QueueInit(&amp;ps-&gt;q1);</span><br><span class="line">    QueueInit(&amp;ps-&gt;q2);</span><br><span class="line">    <span class="keyword">return</span> ps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x onto stack. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myStackPush</span><span class="params">(MyStack* obj, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//谁为空就往谁里面入</span></span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(&amp;obj-&gt;q1,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(&amp;obj-&gt;q2,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStackPop</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//谁不为空就把谁中的元素导到另一个队列中，直到该队列只剩一个元素</span></span><br><span class="line">    <span class="comment">//先假设一个队列不为空一个队列为空，如果不是这样，就交换一下</span></span><br><span class="line">    Queue* emptyQ = &amp;obj-&gt;q1;</span><br><span class="line">    Queue* noemptyQ = &amp;obj-&gt;q2;</span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        emptyQ = &amp;obj-&gt;q2;</span><br><span class="line">        noemptyQ = &amp;obj-&gt;q1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后循环，进行导元素，将noemptyQ的导入emptyQ中</span></span><br><span class="line">    <span class="keyword">while</span>(QueueSize(noemptyQ)&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(emptyQ,QueueFront(noemptyQ));</span><br><span class="line">        <span class="comment">//出一个删一个</span></span><br><span class="line">        QueuePop(noemptyQ);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接口要求——返回栈顶的元素，就是noemptyQ中剩下的那个元素</span></span><br><span class="line">    <span class="keyword">int</span> top = QueueFront(noemptyQ);</span><br><span class="line">    QueuePop(noemptyQ);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the top element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStackTop</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取栈的最上面的元素，也就是取队列的最后一个元素</span></span><br><span class="line">    <span class="comment">//谁不为空就取谁</span></span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBack(&amp;obj-&gt;q1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBack(&amp;obj-&gt;q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myStackEmpty</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//两个队列都为空才为空</span></span><br><span class="line">    <span class="keyword">return</span> QueueEmpty(&amp;obj-&gt;q1) &amp;&amp; QueueEmpty(&amp;obj-&gt;q2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myStackFree</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueueDestory(&amp;obj-&gt;q1);</span><br><span class="line">    QueueDestory(&amp;obj-&gt;q2);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = myStackCreate();</span></span><br><span class="line"><span class="comment"> * myStackPush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = myStackPop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_3 = myStackTop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * bool param_4 = myStackEmpty(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * myStackFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -LeetCode </tag>
            
            <tag> -栈 </tag>
            
            <tag> -队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</title>
      <link href="2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/"/>
      <url>2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=1">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili</a>（1-83）</p><p>我知道这个视频早已经被很多人学习并且记录笔记，但是我还是想再过一遍前面的基础知识点，所以我这个笔记会非常的简洁，适合有C语言基础的小伙伴进行简单的基础知识复习，好尽快投入到C++的学习中。</p><hr><p>在基础知识部分，好像只有头文件的引用和输入输出函数发生了变化。</p><p>头文件下加入using namespace std;</p><p>#include&lt;stdio.h&gt;——&gt;#include<iostream></p><p>printf——&gt;cout</p><p>scanf——&gt;cin</p><p>C++有字符串类型string,这是C语言所不具备的。</p><hr><p><strong>下面就让我们开始吧！</strong></p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h2 id="Hello-C"><a href="#Hello-C" class="headerlink" title="Hello C++"></a>Hello C++</h2><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hellow world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>方便自己和他人阅读,不会被程序执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*多行注释*/</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>作用：</strong>给一段指定的内存空间起名，方便操作这段内存。</p><p><strong>语法：</strong>数据类型  变量名 = 初始值；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span>&lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>作用：</strong>用于记录程序中不可更改的数据。</p><p>C++定义常量的两种方法</p><p>1.#define宏定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 常量名 常量值</span></span><br></pre></td></tr></table></figure><p>通常在文件上方定义,表示一个常量。</p><p>2.const修饰的变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 数据类型 常量名 = 常量值</span><br></pre></td></tr></table></figure><p>通常在变量定义之前加关键字const,修饰该变量为常量，不可修改。</p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7<span class="comment">//是不可修改的值，一旦修改就会报错</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>**作用:**关键字是C++中预先保留的单词（标识符）</p><p>在定义变量或常量的时候不要使用关键字。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608180216685.png" alt="image-20210608180216685"></p><p>来源（菜鸟教程——<a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</a>）</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><p><strong>作用：</strong>C++规定给标识符(变量、常量)命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或者下划线</li><li>标识符中字母区分大小写</li><li>(建议：给标识符命名的时候，争取做到见名知意，方便自己和他人阅读。)</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C++规定在创建一个变量或者常量的时候，必须要指定出相应的数据类型，否则无法给该变量分配内存空间。</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><strong>作用：</strong>整型变量表示的是整型类型的数据。</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于占用的内存空间不同。</strong></p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608181144671.png" alt="image-20210608181144671"></p><h3 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h3><p><strong>作用：</strong>统计数据类型所占空间的大小。</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(数据类型/变量);</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int类型所占空间的大小是：&quot;</span> &lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实型-浮点型"><a href="#实型-浮点型" class="headerlink" title="实型(浮点型)"></a>实型(浮点型)</h3><p><strong>作用：</strong>用于表示小数。</p><p>浮点型分为两种-单精度float-双精度double。</p><p>两者的区别在于有效数字的表示范围不一样。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608181700530.png" alt="image-20210608181700530"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;<span class="comment">//编译器会默认把一个小数当做双精度</span></span><br><span class="line"><span class="comment">//默认情况下输出一个小数会显示出6位有效数字</span></span><br><span class="line"><span class="comment">//例如：下面这个f1只输出到6</span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.1234567f</span>;</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sb = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">/*注意：</span></span><br><span class="line"><span class="comment">显示字符型变量时用单引号括起来，不是双引号。</span></span><br><span class="line"><span class="comment">单引号内只能有一个字符，不可以是字符串。*/</span></span><br></pre></td></tr></table></figure><ul><li>C和C++中字符型变量只占1个字节。</li><li>字符型变量并不是把所有的字符本身放到内存中存储，而是将对饮的ASCII编码放入到存储单元中。</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p><strong>作用：</strong>用于表示一些不能显示出来的ASCII字符。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608183348489.png" alt="image-20210608183348489"></p><p>(图片来源——w3cschoolw3cschool<a href="http://c.biancheng.net/view/1769.html">C语言转义字符 (biancheng.net)</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; “hello world\n”&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>作用：</strong>用于表示一串字符串。</p><p><strong>两种风格：</strong></p><p>1.C风格字符串</p><p>要用双引号括起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> 变量名[] = <span class="string">&quot;字符串值&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.C++风格字符串</p><p>需要加入头文件#include <string></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> 变量名 = <span class="string">&quot;字符串值&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> st2 = <span class="string">&quot;hellow world&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔类型bool"><a href="#布尔类型bool" class="headerlink" title="布尔类型bool"></a>布尔类型bool</h3><p>**作用:**布尔类型数据代表真或假的值。</p><p>bool类型只有两个值：</p><ul><li>true——真（1）</li><li>false——假（0）</li></ul><p><strong>bool类型占1个字节大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="数据-输入"><a href="#数据-输入" class="headerlink" title="数据 输入"></a>数据 输入</h3><p><strong>作用：</strong>用于从键盘获取数据</p><p><strong>关键字：</strong>cin</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; 变量</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;a;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>**作用:**用于代码的运算。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608193429732.png" alt="image-20210608193429732"></p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><strong>作用：</strong>用于处理四则运算</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608193743764.png" alt="image-20210608193743764"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++ -- </span><br><span class="line">两个整数相除结果还是整数</span><br><span class="line">两个小数相除结构还是小数</span><br><span class="line">两个数相除除数不可以为<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前置递增++a——先让变量+<span class="number">1</span>然后再进行表达式运算</span><br><span class="line">   后置递增a++——先进行表达式运算然后变量再+<span class="number">1</span></span><br><span class="line">   递减同理</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194415559.png"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">a *=<span class="number">2</span>;<span class="comment">//意思就是就是a = a *2;</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194714016.png" alt="image-20210608194714016"></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &lt; b)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//真返回1，假0</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194954139.png" alt="image-20210608194954139"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; !a &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; !!a &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a &amp;&amp; b) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a &amp;&amp; c) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a || c) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h2><p>C/C++支持最基本的三大基本程序运算结构:<strong>顺序结构、选择结构、循环结构。</strong></p><ul><li>顺序结构：程序按顺序执行，不发生跳转。</li><li>选择结构：依据条件是否满足,有选择的执行相应代码。</li><li>循环结构：依据条件是否满足，循环多次指定某段代码。</li></ul><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h4><p><strong>作用：</strong>执行满足条件的语句。</p><ul><li>单行格式if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//条件满足执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多行格式if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;    <span class="comment">//条件满足执行的语句&#125;else&#123;    //条件不满足执行的语句&#125;</span></span><br></pre></td></tr></table></figure><ul><li>多条件if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//条件1满足执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//条件2满足执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//都不满足执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>嵌套if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p><strong>作用：</strong>通过三目运算符实现简单的判断</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span>？表达式<span class="number">2</span>：表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>如果1为真，则结果为表达式2的值。</p><p>如果1为假，则结果为表达式3的值。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//结果为10</span></span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> 结果<span class="number">1</span>：</span><br><span class="line">            执行语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">default</span>：</span><br><span class="line">            执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;    循环语句&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong>只要满足循环条件的结果为真，就执行循环语句。</p><h5 id="猜数字练习"><a href="#猜数字练习" class="headerlink" title="猜数字练习"></a>猜数字练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = rand() % <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> puT = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请你猜一下这个数是多少\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">cin</span> &gt;&gt; puT))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (puT &gt; num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;猜大了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (puT &lt;= num / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;太小了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (puT &gt;= num / <span class="number">2</span> &amp;&amp; puT &lt; num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;再大一点\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == puT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;猜对了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do-while循环语句"></a>do-while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句。</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;    循环语句&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>与while的区别在于do-while会先执行一次循环语句，再判断循环条件。</p><h5 id="水仙花数练习"><a href="#水仙花数练习" class="headerlink" title="水仙花数练习"></a>水仙花数练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ge = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bai = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ge = i % <span class="number">10</span>;</span><br><span class="line">shi = (i / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">bai = i / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (i == ge * ge * ge + shi * shi * shi + bai * bai * bai)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">1000</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(起始条件;条件表达式;末尾循环体)&#123;    循环语句&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)   </span><br><span class="line">    &#123;    </span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="敲桌子练习"><a href="#敲桌子练习" class="headerlink" title="敲桌子练习"></a>敲桌子练习</h4><h5 id="是7的倍数、各位有7、十位有7"><a href="#是7的倍数、各位有7、十位有7" class="headerlink" title="是7的倍数、各位有7、十位有7"></a>是7的倍数、各位有7、十位有7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ge = i % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> shi = (i /<span class="number">10</span>)% <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || ge == <span class="number">7</span> || shi == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p><strong>作用：</strong>在循环体中再嵌套一层循环，解决一些实际问题。</p><h5 id="打印10-10的正方形"><a href="#打印10-10的正方形" class="headerlink" title="打印10*10的正方形"></a>打印10*10的正方形</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="乘法口诀表练习"><a href="#乘法口诀表练习" class="headerlink" title="乘法口诀表练习"></a>乘法口诀表练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt; j&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt; i* j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p><strong>作用：</strong>用于跳出选择结构或者循环结构。</p><p>break使用的时机：</p><ul><li>出现在switch语句中，作用是终止case并跳出swtich</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套语句中，跳出最近的内层循环语句</li></ul><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环。</p><h4 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong>goto标记；</p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句的时候，会跳转到标记的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> sb;......sb:......</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>所谓数组就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1</strong>：数组中的每个数据元素都是相同的数据类型。</p><p><strong>特点2</strong>：数组是由连续的内存位置组成的。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[数组长度];数据类型 数组名[数组长度] = &#123;值<span class="number">1</span>，值<span class="number">2.</span>.....&#125;;数据类型 数组名[] = &#123;值<span class="number">1</span>，值<span class="number">2.</span>.....&#125;;;</span><br></pre></td></tr></table></figure><h4 id="数组名的用途"><a href="#数组名的用途" class="headerlink" title="数组名的用途"></a>数组名的用途</h4><p>1.可以统计整个数组在内存中的长度</p><p>2.可以获取数组在内存中的首地址</p><h4 id="输出最重的一只小猪的体重"><a href="#输出最重的一只小猪的体重" class="headerlink" title="输出最重的一只小猪的体重"></a>输出最重的一只小猪的体重</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Weight[<span class="number">5</span>] = &#123; <span class="number">300</span>,<span class="number">250</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">450</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Weight[i] &gt; temp)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = Weight[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最重的小猪是&quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot;kg&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组元素逆置"><a href="#数组元素逆置" class="headerlink" title="数组元素逆置"></a>数组元素逆置</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    nt nums[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="keyword">sizeof</span>(nums)/<span class="keyword">sizeof</span>(nums[<span class="number">0</span>]) <span class="number">-1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        end--;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>作用：</strong>最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻两个元素，如果第一个比第二个大就交换他们的位置</li><li>每一对相邻元素做同样的工作，整型完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，知道不需要比较</li></ol><p><strong>示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排列这个数组&#123;7,5,2,4,9,8,6,7,1&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">//排序的总轮数=元素个数-1</span></span><br><span class="line"><span class="comment">//每轮对比的次数 = 元素个数- 排序轮数 </span></span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">9</span>] = &#123; <span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内层循环对比</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一个数比第二个数大就交换他们两个的位置</span></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = nums[j+<span class="number">1</span>];</span><br><span class="line">nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组就是在一维数组的基础上多加一个维度，就是在一维数组里面存储一维数组。</p><p><strong>定义:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[行][列];</span><br><span class="line">数据类型 数组名[行][列] = &#123;&#123;数据<span class="number">1</span>，数据<span class="number">2</span>&#125;，&#123;数据<span class="number">3</span>，数据<span class="number">4</span>&#125;&#125;;</span><br><span class="line">数据类型 数组名[行][列] = &#123;数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>，数据<span class="number">4</span>&#125;;</span><br><span class="line">数据类型 数组名[][列] = &#123;数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>，数据<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong>以上4种定义方式，利用第二种更加直观，提高代码的可读性。</p><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><h4 id="考试成绩统计练习"><a href="#考试成绩统计练习" class="headerlink" title="考试成绩统计练习"></a>考试成绩统计练习</h4><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>甲</td><td>50</td><td>40</td><td>60</td></tr><tr><td>乙</td><td>20</td><td>10</td><td>30</td></tr><tr><td>丙</td><td>70</td><td>80</td><td>90</td></tr></tbody></table><p>分别输出三个人的总成绩</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>&#125;,&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;,&#123;<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>&#125; &#125;;</span><br><span class="line">    <span class="comment">//嵌套循环解决</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp += score[i][j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码。</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>函数的几个要素<br>返回值类型，函数名 ，参数，函数体语句，return表达式</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数语句;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p><strong>功能</strong>：使用定义好的函数</p><p><strong>语法：</strong>函数名(参数)</p><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><ul><li>就是函数调用时将参数值传给形参</li><li>值传递时，如果形参发生变化，并不会影响到实参</li></ul><h3 id="函数的常见样式"><a href="#函数的常见样式" class="headerlink" title="函数的常见样式"></a>函数的常见样式</h3><p>无参无返、有参无返、无参有返、有参有返</p><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p><strong>作用</strong>：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数的声明可以有很多次，定义只能有一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>就是在.h的头文件里面放函数声明，函数的定义放到.c文件里</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>指针的作用:可以通过指针间接访问内存。</p><ul><li>内存编号是从0开始记录的，一般用16进制数字标识。</li><li>可以利用指针变量保存地址。</li></ul><h3 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h3><p><strong>指针变量定义语法</strong>：数据类型+变量名</p><h3 id="指针所占内存空间"><a href="#指针所占内存空间" class="headerlink" title="指针所占内存空间"></a>指针所占内存空间</h3><p>在32位操作系统下无论是什么类型的指针，都占4个字节的内存空间。</p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p><strong>空指针：</strong>指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存空间是不可以访问的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>指针变量指向非法的内存空间。</p><h3 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h3><p>const修饰指针有3种情况 </p><ol><li>const修饰指针—常量指针</li><li>const修饰常量—指针常量</li><li>const既修饰指针，又修饰常量、</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>修饰的是指针，指针指向可以改，指针指向的值不可以改</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="keyword">const</span>修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line"><span class="keyword">const</span>既修饰指针，又修饰常量，指针的指向和指针指向的值都不可以改变</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p><strong>作用：</strong>利用指针访问数组元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br></pre></td></tr></table></figure><h3 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h3><p><strong>作用：</strong>利用指针作函数的参数，可以修改实参的值。</p><p>——<strong>传(址)引用</strong></p><h3 id="指针、数组、函数"><a href="#指针、数组、函数" class="headerlink" title="指针、数组、函数"></a>指针、数组、函数</h3><p>封装一个函数，利用冒泡排序，实现对整型数组的升序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len-i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arry[<span class="number">5</span>] = &#123; <span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span> &#125;;</span><br><span class="line">PopSort(arry, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arry[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>​    结构体属于用户自定义的数据类型，允许用户存储不同的数据类型。</p><h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    结构体成员列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过结构体创建变量的方式有三种</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = （成员1值，成员2值……)</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p><strong>作用：</strong>将自定义的结构头放入到数组中方便维护</p><p><strong>语法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 数组名[元素个数]=</span>  &#123;&#123;&#125;，&#123;&#125;...&#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p><strong>作用</strong>：通过指针访问结构体中的成员</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>* <span class="title">p</span> =</span> &amp;s1;</span><br><span class="line">p-&gt;score = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h3><p><strong>作用</strong>：结构体中的成员可以是另一个结构体</p><p><strong>例如</strong>:每个老师辅导一个学员，一个老师的结构体中，记录一个学生的的结构体</p><h3 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种</p><p>同上函数参数-指针</p><ul><li>值传递-无法改变实参</li><li>地址传递-可以改变实参</li></ul><h3 id="结构体中const使用场景"><a href="#结构体中const使用场景" class="headerlink" title="结构体中const使用场景"></a>结构体中const使用场景</h3><p><strong>作用</strong>：用const来防止误操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeInformation</span><span class="params">(<span class="keyword">const</span> struct student* stu1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    加了<span class="keyword">const</span>就无法改变该结构体内的信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体案例"><a href="#结构体案例" class="headerlink" title="结构体案例"></a>结构体案例</h3><p> 每个老师带三个学生</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">sArry</span>[5];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inPutInformation</span><span class="params">(struct Teacher tArry[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> Name = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tArry[i].name = <span class="string">&quot;Teacher_&quot;</span>;</span><br><span class="line">tArry[i].name += Name[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">tArry[i].sArry[j].name = <span class="string">&quot;Student_&quot;</span>;</span><br><span class="line">tArry[i].sArry[j].name += Name[j];</span><br><span class="line"><span class="keyword">int</span> random = rand()% <span class="number">60</span> +<span class="number">40</span>;</span><br><span class="line">tArry[i].sArry[j].score = random;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInformation</span><span class="params">(struct Teacher tArry[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;老师的姓名：&quot;</span> &lt;&lt; tArry[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t学生的姓名：&quot;</span> &lt;&lt; tArry[i].sArry[j].name &lt;&lt; <span class="string">&quot;考试分数：&quot;</span> &lt;&lt; tArry[i].sArry[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">tArry</span>[3];</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArry) / <span class="keyword">sizeof</span>(tArry[<span class="number">0</span>]);</span><br><span class="line">inPutInformation(tArry,len);</span><br><span class="line">printInformation(tArry,len);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建5个人并按年龄排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> categories;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> <span class="title">heroArry</span>[5] =</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">&quot;欣南&quot;</span>,<span class="number">20</span>,<span class="string">&quot;火&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;东杉&quot;</span>,<span class="number">24</span>,<span class="string">&quot;木&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;北淼&quot;</span>,<span class="number">23</span>,<span class="string">&quot;水&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;坤中&quot;</span>,<span class="number">18</span>,<span class="string">&quot;土&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;西昭&quot;</span>,<span class="number">22</span>,<span class="string">&quot;金&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(heroArry) / <span class="keyword">sizeof</span>(heroArry[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (heroArry[j].age &gt; heroArry[j + <span class="number">1</span>].age)</span><br><span class="line">&#123;</span><br><span class="line">temp = heroArry[j].age;</span><br><span class="line">heroArry[j].age = heroArry[j + <span class="number">1</span>].age;</span><br><span class="line">heroArry[j + <span class="number">1</span>].age = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; heroArry[i].name &lt;&lt; heroArry[i].age &lt;&lt; heroArry[i].categories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通讯录"><a href="#通讯录" class="headerlink" title="通讯录"></a>通讯录</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addreassbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">personarry</span>[<span class="title">MAX</span>];</span></span><br><span class="line"><span class="keyword">int</span> m_Size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1.增加联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2.显示联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;3.删除联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;4.查找联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;5.修改联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;6.清空联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.退出通讯录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;联系人已满，无法添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].name = name;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].sex = sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].age = age;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].phone = phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入地址&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].addr = addr;</span><br><span class="line"><span class="comment">//更新通讯录人数</span></span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;personarry[i].name == name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> dname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要删除的人名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dname;</span><br><span class="line"><span class="keyword">int</span> ret = checkPerson(<span class="built_in">abs</span>, dname);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[i] = <span class="built_in">abs</span>-&gt;personarry[i + <span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> fname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找的联系人姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fname;</span><br><span class="line"><span class="keyword">int</span> result = checkPerson(<span class="built_in">abs</span>, fname);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> mname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要修改的联系人姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mname;</span><br><span class="line"><span class="keyword">int</span> result = checkPerson(<span class="built_in">abs</span>, mname);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].name = name;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].sex = sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].age = age;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].phone = phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入地址&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].addr = addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPerson</span><span class="params">(addreassbooks*<span class="built_in">abs</span>)</span><span class="comment">//逻辑清空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录清空成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建通讯录结构体变量</span></span><br><span class="line">addreassbooks <span class="built_in">abs</span>;</span><br><span class="line"><span class="comment">//初始化通讯录中当前人员的个数</span></span><br><span class="line"><span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//添加联系人</span></span><br><span class="line">addPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//显示联系人</span></span><br><span class="line">printPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//删除联系人</span></span><br><span class="line">deletePerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//查找联系人</span></span><br><span class="line">findPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//修改联系人</span></span><br><span class="line">modifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//清空联系人</span></span><br><span class="line">cleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出通讯录</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(6)【栈】有效的括号(C语言)</title>
      <link href="2021/06/09/LeetCode%E5%88%B7%E9%A2%98(6)%E3%80%90%E6%A0%88%E3%80%91%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/09/LeetCode%E5%88%B7%E9%A2%98(6)%E3%80%90%E6%A0%88%E3%80%91%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>有效的括号</strong></p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>思路：是左括号，就入栈，是右括号，就与栈顶的左括号判断是否匹配，如果匹配，继续，不匹配就终止。</p><p><strong>从第79行开始，前面都是实现栈以及其功能接口。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    StackDataType* arry;</span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">    ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">    ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//满了</span></span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ps-&gt;arry = tmp;</span><br><span class="line">            ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">    ps-&gt;top++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">    assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">    ps-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">    Stack  st;</span><br><span class="line">    StackInit(&amp;st);</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(*s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                StackPush(&amp;st,*s);</span><br><span class="line">                s++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(StackEmpty(&amp;st))</span><br><span class="line">                &#123;</span><br><span class="line">                    StackDestory(&amp;st);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span> top = StackTop(&amp;st);</span><br><span class="line">                StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不匹配的三种情况  </span></span><br><span class="line">                <span class="keyword">if</span>((*s == <span class="string">&#x27;&#125;&#x27;</span>&amp;&amp; top != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                || (*s == <span class="string">&#x27;]&#x27;</span>&amp;&amp; top != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                || (*s == <span class="string">&#x27;)&#x27;</span>&amp;&amp; top != <span class="string">&#x27;(&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">//不匹配返回fasle，有可能栈里面还有元素，销毁防止内存泄漏</span></span><br><span class="line">                    StackDestory(&amp;st);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//匹配就继续匹配</span></span><br><span class="line">                    s++;   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> ret = StackEmpty(&amp;st);<span class="comment">//匹配完成了，栈应该是空的。</span></span><br><span class="line">    StackDestory(&amp;st);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -LeetCode </tag>
            
            <tag> -栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线性表】之队列</title>
      <link href="2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列的概念"><a href="#队列的概念" class="headerlink" title="队列的概念"></a>队列的概念</h2><p>队列只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出的FIFO(First in First Out)。</p><p>入队列：进行插入操作的一端称为队尾。</p><p>出队列：进行删除操作的一端称为队头。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%98%9F%E5%88%97.assets/image-20210607194222681.png" alt="image-20210607194222681"></p><p>同样可以使用链表或者数组</p><p>数组：不是适合，队头出数据需要挪动数据。</p><p>链表：适合单链表，单链表头删效率很高。</p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//定义一个新结点</span></span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//依次保存下一个结点，然后删除这个结点</span></span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾入"><a href="#队尾入" class="headerlink" title="队尾入"></a>队尾入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//链接</span></span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//如果插入前是空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">//插到后面</span></span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">        <span class="comment">//称为新的尾巴</span></span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出"><a href="#队头出" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出-1"><a href="#队头出-1" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头数据"><a href="#队头数据" class="headerlink" title="队头数据"></a>队头数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾数据"><a href="#队尾数据" class="headerlink" title="队尾数据"></a>队尾数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回数据个数"><a href="#返回数据个数" class="headerlink" title="返回数据个数"></a>返回数据个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue pq;</span><br><span class="line">QueueInit(&amp;pq);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">1</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">2</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">3</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//为空是假的才成立，进入循环(不为空，进入循环)</span></span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;pq))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取队头的数据然后删除</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, QueueFront(&amp;pq));</span><br><span class="line">QueuePop(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line">QueueDestory(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -队列 </tag>
            
            <tag> -线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线性表】之栈</title>
      <link href="2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>顺序表和链表的区别和联系</p><p>顺序表：</p><p>​    优点：空间连续支持随机访问。</p><p>​    缺点：1.中间或前面的插入删除时间复杂度O(N)。</p><p>​               2.增容的代价比较大</p><p>链表(带头双向循环)：</p><p>​    缺点：</p><p>​        以借点为单位存储，不支持随机访问。</p><p>​    优点：</p><p>​            1.任意位置插入删除时间复杂度为O(1)</p><p>​            2.没有增容消耗，按需申请结点空间，不用了直接释放。</p><hr><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈也是线性表，在逻辑上还是挨着放的。</p><p>栈的概念以及结构</p><p>栈：一种特殊的线性表,其只允许在固定的一端进行插入和删除元素操作。<strong>进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。</strong>栈中的数据元素遵守后进先出LIFO(Last In First Out)的原则。</p><p><strong>压栈：</strong>栈的插入操作叫做进栈/压栈/入栈，<strong>入数据在栈顶</strong>。</p><p><strong>出栈：</strong>栈的删除操作叫做出栈。<strong>出数据也在栈顶</strong>。</p><p><img src="/images/%E6%A0%88.assets/image-20210607120710677.png" alt="image-20210607120710677"></p><p><strong>实现方式：</strong></p><ol><li><p>数组实现</p><p><img src="/images/%E6%A0%88.assets/image-20210607120936928.png" alt="image-20210607120936928"></p><p>总结：</p><p>相当于之前顺序表的尾插尾删，用尾做栈顶，非常合适，唯一缺陷就是，空间不够需要增容(影响不大)。</p><p>(顺序表——<a href="https://blog.csdn.net/qq_51604330/article/details/117593583">【线性表】之顺序表_半生瓜のblog-CSDN博客</a>)</p></li><li><p>链表实现</p></li></ol><p><img src="/images/%E6%A0%88.assets/image-20210607121416245.png" alt="image-20210607121416245"></p><p>出数据得找到前一个，这样的话用双向链表更好一些。</p><p>(所以说数据结构并没有规定用什么方法实现，只要能实现就行，对比的就是效率而已。)</p><p>也可以将单链表反过来。</p><p><img src="/images/%E6%A0%88.assets/image-20210607121819132.png" alt="image-20210607121819132"></p><p>总结：</p><p>​    如果用尾插做栈顶，用双向链表更好。</p><p>​    如果用单链表实现，就用头去做栈顶，这样入栈和出栈效率都是O(1)。</p><p>​    整体来说数组的效率更优一些。</p><hr><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">StackDataType* arry;</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果初识的top给0，意味着top指向栈顶的元素的下一个，top给-1，top指向栈顶元素。</p><p>一定不能为空的东西，可以使用断言来处理。OJ题不可以使用断言。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//满了</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line">StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">ps-&gt;top++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">ps-&gt;top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈中元素个数"><a href="#返回栈中元素个数" class="headerlink" title="返回栈中元素个数"></a>返回栈中元素个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小提示:</strong></p><p>上面有的函数只有两行代码，如果直接用里面的那句代码，可以吗？<br>可以，但是不好，通过那句代码访问到，但严格来说你不应该去访问，这是一种耦合，耦合就是一种强关联，<br>调用函数，无需去想top在0还是在-1，只管用就完事了。(有点软件工程的思想)</p><hr><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack ps;</span><br><span class="line">StackInit(&amp;ps);</span><br><span class="line">StackPush(&amp;ps,<span class="number">1</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">2</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;ps))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, StackTop(&amp;ps));</span><br><span class="line"><span class="comment">//取完栈顶的数据，想取下一个，那就得删一下</span></span><br><span class="line">StackPop(&amp;ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">StackDestory(&amp;ps);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -栈 </tag>
            
            <tag> -线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(5)【链表】环形链表II(C语言)</title>
      <link href="2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>环形链表I</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/117334723?spm=1001.2014.3001.5501">LeetCode刷题(3)【链表】【环形链表】&amp;扩展_半生瓜のblog-CSDN博客</a></p><hr><p><strong>环形链表</strong>II</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>这个题写起来不难，但是证明有点麻烦。</p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184927049.png" alt="image-20210605184927049"></p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184933830.png" alt="image-20210605184933830"></p><hr><p>针对这个入口点怎么求，有人给出了一个结论。</p><p>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。（看下面的过程的时候，先别想这个结论，否则会越来越乱的，就先当不知道。）</p><hr><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210606005633219.png" alt="image-20210606005633219"></p><p>fast走的路程是slow走的路程的2倍。</p><p>slow走的路程：slow进环了以后，在一圈之内，fast一定会追上slow。因为slow走了一圈，fast都走两圈了。</p><p>slow进环之前，fast有可能在环里面转了N圈，如果入环之前的长度越长，环很小，N越大， 如果入环前的长度越短，环很大，N就是1，fast只转了1圈。</p><p>fast走的路程： L + C*N + X</p><p>slow走的路程：L + X</p><p>fast = 2*slow</p><p>L + C*N + X = 2(L +X)   </p><p>化简一下得：</p><p>C* N - X = L</p><p>再化简一下得：<br>(N-1)* C + C - X = L </p><p>C - X就是meet点到入口点的距离。</p><p>再看这个结论。</p><p><strong>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。</strong></p><p>理解一下，就是一个指针从meet点出发，转转转了N-1圈，在走了一个C-X到达入口点，发生相遇。</p><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct ListNode *<span class="title">detectCycle</span><span class="params">(struct ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        <span class="comment">//找到相遇点</span></span><br><span class="line">        <span class="keyword">if</span>(fast == slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//相等即为相遇点</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">meet</span> =</span>  slow;</span><br><span class="line">            <span class="comment">//一个指针从meet走，一个指针从head走，他们会在入口点相遇</span></span><br><span class="line">            <span class="keyword">while</span>(head != meet)</span><br><span class="line">            &#123;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                meet = meet-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> meet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -链表 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(4)移除元素&amp;合并两个有序数组(C语言)</title>
      <link href="2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>移除元素</strong></p><p>典型双指针玩法。</p><p><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p><hr><p>我们都会想到这样的解法：从前面依次往后推，是val就将该数据后面的元素依次覆盖上来，但是这样的时间复杂度是O(n²)，最坏的结果是一个数组中大部分数据都是val。</p><p>所以我们想到另一种解法，以空间换时间 ，另开一个数组，把不是val的数据给新的数组，再把新数组的值拷贝回来。空间复杂度是O(n)。</p><p>但是这个题它不让开辟一个新的数组，所以我们还得换一个思路。</p><hr><p>该思路空间复杂度为O(n),时间复杂度为O(1)。——<strong>双指针解法</strong></p><p>定义两个指针，p1和p2，p1先动，p2后动，如果p1不等于val，就把值传给p2,直到完成一遍遍历，p2的值就是新数组元素的个数。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140450655.png" alt="image-20210605140450655"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140910200.png" alt="image-20210605140910200"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p1和p2都从数组左边出发</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果p1(对应的值)不等于val</span></span><br><span class="line">        <span class="keyword">if</span>(nums[p1] != val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将p1的值赋给p2</span></span><br><span class="line">            nums[p2] = nums[p1];</span><br><span class="line">            <span class="comment">//往后面++</span></span><br><span class="line">            p1++;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p1(对应的值)等于val</span></span><br><span class="line">        <span class="comment">//只有p1走</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是p1在前面开路，p2在后面跟着，同时出发，p1遇到val就跳过，p2就停住,当p1没遇到val的时候将p1的值给p2，（就把p1位置的val值覆盖了）,然后p1，p2都往后走一位……</p><p><strong>合并两个有序数组</strong></p><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605142621467.png" alt="image-20210605142621467"></p><p>可以把num2直接放到num1后面，然后再进行升序排列，只不过效率有点低了。</p><p>所以我们采用下面这种解法。</p><p>num1和num2都从后往前走，取大的往后面放。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155039383.png" alt="image-20210605155039383"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155125941.png" alt="image-20210605155125941"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//题目所给的nums1Size和num2Size没用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end1 = m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end2 = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = m+n<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//end1和end2都还没有结束</span></span><br><span class="line">    <span class="keyword">while</span>(end1 &gt;= <span class="number">0</span> &amp;&amp; end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把他们两个中大的放在后面</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[end1] &gt; nums2[end2])</span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums1[end1];</span><br><span class="line">            end--;</span><br><span class="line">            end1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums2[end2];</span><br><span class="line">            end--;</span><br><span class="line">            end2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果end2先结束，就是num2里面已经没有元素了，那就不需要处理了，因为就是往num1里面放的</span></span><br><span class="line">    <span class="comment">//但是，如果是end1先结束了，还需要处理一下，因为此时num2里面还有元素没有放进num1里面</span></span><br><span class="line">    <span class="keyword">while</span>(end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nums1[end] = nums2[end2];</span><br><span class="line">        end--;</span><br><span class="line">        end2--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -LeetCode </tag>
            
            <tag> -数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线性表】之顺序表</title>
      <link href="2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表(linear list)是n个具有相同特性元素的有限序列 。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串……</p><p>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>它是最简单的数据结构，也是最常用的数据结构——他的作用就是将数据存起来。</p><p>概念：顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p><p>顺序表一般可分为：</p><p>1.静态顺序表：使用定长数据存储。</p><p>2.动态顺序表：使用动态开辟的数组存储。</p><p><strong>下面的代码实现的是动态顺序表</strong></p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SeqListDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SeqListDataType* arry;<span class="comment">//指向动态开辟的数组</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//数组中有效数据的个数(在数组中说就是最后一个数据的下一个位置，因为数组下标是从0开始的)</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//容量空间的大小</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8.assets/image-20210605131238279.png" alt="image-20210605131238279"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInit</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;<span class="comment">//可以一上来就给空间，也可以不给空间</span></span><br><span class="line">ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p>严格来说空间用完之后就要销毁，如果malloc开辟的空间不销毁就会存在内存泄漏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListDestory</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPrint</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arry[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展空间"><a href="#扩展空间" class="headerlink" title="扩展空间"></a>扩展空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果数组满了——有效的数据个数等于空间容量的总大小</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;size == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//要注意如果满了，就进行扩容，在原来基础上*2，但是开始的空间是0，</span></span><br><span class="line"><span class="comment">//0*2还是0,所以开始插入的时候要加一个判断</span></span><br><span class="line"><span class="comment">//如果开始的空间是0，那么就给他赋值4，之后就不是0了，就给他*2</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = ps-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;capacity * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//realloc扩充原来开辟好的空间</span></span><br><span class="line"><span class="comment">//如果原来的空间在原来的地方是空，那就他是直接申请一个新的空间就跟malloc是一样的。</span></span><br><span class="line">SeqListDataType* tmp = (SeqListDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, newCapacity * <span class="keyword">sizeof</span>(SeqListDataType));</span><br><span class="line"><span class="comment">//如果扩容失败，给予提示</span></span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc is fail!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把扩充好的数组传给arry</span></span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity = newCapacity;<span class="comment">//空间容量大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushBack</span><span class="params">(SeqList* ps,SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line">    <span class="comment">//顺序表中的数据要依次存储</span></span><br><span class="line">ps-&gt;arry[ps-&gt;size] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushFront</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//同尾插-空间不够了需要增容</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//从后开始挪</span></span><br><span class="line"><span class="comment">//注意初识条件-结束条件-迭代过程</span></span><br><span class="line"><span class="comment">//先找到最后一个位置</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[<span class="number">0</span>] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopBack</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);<span class="comment">//等于0直接报错，比较粗暴。</span></span><br><span class="line"><span class="comment">//下面这行代码没用，因为了顺序表中具体的数据个数是由size决定的</span></span><br><span class="line"><span class="comment">//把这个位置置 成0，万一这个位置本来就是0呢，或者这个位置的数据类型不是int，是double呢，置成0也不合适，没有意义。</span></span><br><span class="line"><span class="comment">//ps-&gt;arry[ps-&gt;size - 1] = 0;</span></span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopFront</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//检查一下还有没有元素，没有就别删了</span></span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//就是用后面的元素将前面的元素给覆盖了，每次消失的都是第一个，其他的依次向前推</span></span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置插入数据"><a href="#在指定位置插入数据" class="headerlink" title="在指定位置插入数据"></a>在指定位置插入数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInsert</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);<span class="comment">//大于就报错</span></span><br><span class="line"><span class="comment">//思路：先创建空间，利用循环找到pos这个位置，将元素放入数组，size+1</span></span><br><span class="line"><span class="comment">//创建空间</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//找到最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//依次往后推移一位，</span></span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">ps-&gt;capacity++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListErase</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line"><span class="comment">//被删除元素后面的位置</span></span><br><span class="line"><span class="keyword">int</span> start = pos + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFind</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//找到返回下标，找不到返回-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry[i] == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListModity</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【链表】单链表的实现</title>
      <link href="2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.assets/image-20210602112335408.png" alt="image-20210602112335408"></p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>下面的删除和插入都要在先在链表中找到为前提。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置前插入某个数据"><a href="#在指定位置前插入某个数据" class="headerlink" title="在指定位置前插入某个数据"></a>在指定位置前插入某个数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br><span class="line"><span class="comment">//改变头结点的传2级指针，不改变的传1级指针</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在pos前插入某个数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除pos位置的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* plist = <span class="literal">NULL</span>;</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">0</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">2</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">3</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">4</span>);</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line">SLTNode* pos = SLTFind(plist, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明找到了</span></span><br><span class="line">SLTErase(&amp;plist, pos);</span><br><span class="line">&#125;</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【链表】带头双向循环链表</title>
      <link href="2021/06/01/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/06/01/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<hr><p>单链表存在的缺陷：</p><p>不能从后往前走,</p><p>找不到他的前驱,</p><p>指定位置 删除  增加 尾删 都要找前一个，时间复杂度都是O(n)</p><hr><p>针对上面的这些缺陷的解决方案——<strong>双向链表</strong>。</p><hr><p>实际中要实现的链表的结构非常多样，以下情况组合起来就有8种链表结构：</p><ol><li>单向、双向</li><li>带头、不带头——带哨兵位的头结点，这个结点不存储有效数据，好处是什么？尾插的判断更方便简单，带头就不需要二级指针了，（带头结点，不需要改变穿过来的指针，也就是意味着不需要传二级指针了。）</li><li>循环、非循环</li></ol><hr><ol><li>无头单向非循环：结构简单，一般不会单独用来存数据，实际中更多是作为其他数据结构的子结构，如哈希桶，图的邻接表等，另外这种数据结构在笔试面试中出现很多。</li><li>带头双向循环链表：结构最复杂，一般用在单独存储数据。实际中使用的链表数据结构，都是带头循环双向链表，另外，这个结构虽然复杂，但是使用代码代码实现的以后会发现结构带来许多优势，实现反而简单了。</li></ol><hr><h1 id="带头双向循环链表"><a href="#带头双向循环链表" class="headerlink" title="带头双向循环链表"></a>带头双向循环链表</h1><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210530182401579.png" alt="image-20210530182401579"></p><h2 id="结构体创建"><a href="#结构体创建" class="headerlink" title="结构体创建"></a>结构体创建</h2><p><strong>结构体创建：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> LSTNodeData;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LSTNodeData data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev</span>;</span></span><br><span class="line">&#125;LSTNode;</span><br></pre></td></tr></table></figure><h2 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h2><p><strong>创建结点：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTCreat</span><span class="params">(DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTNode* newnode = (DBLSTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DBLSTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><strong>初始化：</strong></p><p>有个小哨兵位的头结点，并且是一个循环状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//用一个返回值可以 替代二级指针</span></span><br><span class="line">DBLSTNode* phead = DBLSTCreat(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line">phead-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = phead;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p><strong>销毁：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTDestory</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到第一个结点</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur !=phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//保存下一个结点</span></span><br><span class="line">DBLSTNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(phead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>画图有利于双向链表的理解。</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210531122103491.png" alt="image-20210531122103491"></p><hr><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p><strong>打印：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPrint</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果链表是空的会发生错误吗?</span></span><br><span class="line"><span class="comment">//不会。因为phead-&gt;next还是自己。</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;<span class="comment">//这里我容易忘记指向next</span></span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><p><strong>尾插：</strong></p><p>双向带头循环链表，结构虽然复杂了，但是更容易操作了。</p><p>这就是结构设计的优势。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushBack</span><span class="params">(DBLSTNode* phead, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">DBLSTNode* tail = phead-&gt;prev;</span><br><span class="line"><span class="comment">//插入-链接</span></span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = tail;</span><br><span class="line">newnode-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><p> <strong>头插：</strong></p><p>如果插入的时候链表是空的同样不会有影响。</p><p>有first这几个指针先动谁都行，没有first也可以，就是会有顺序要求。</p><p>示例：</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210531170125744.png" alt="image-20210531170125744"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">newnode-&gt;next = phead-&gt;next;</span><br><span class="line">phead-&gt;next-&gt;prev = newnode;</span><br><span class="line">phead-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = phead;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushFront</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//拿到第一个结点</span></span><br><span class="line">DBLSTNode* first = phead-&gt;next;</span><br><span class="line"><span class="comment">//插入-链接</span></span><br><span class="line">phead-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = phead;</span><br><span class="line">newnode-&gt;next = first;</span><br><span class="line">first-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><p><strong>头删：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopFront</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//保存第一个和第二个结点</span></span><br><span class="line">DBLSTNode* first = phead-&gt;next;</span><br><span class="line">DBLSTNode* second = first-&gt;next;</span><br><span class="line">phead-&gt;next = second;</span><br><span class="line">second-&gt;prev = phead;</span><br><span class="line"><span class="built_in">free</span>(first);</span><br><span class="line">first = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><p><strong>尾删：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopBack</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到最后的一个结点</span></span><br><span class="line">DBLSTNode* tail = phead-&gt;prev;</span><br><span class="line"><span class="comment">//找到最后一个结点的前一个结点</span></span><br><span class="line">DBLSTNode* tailPrev = tail-&gt;prev;</span><br><span class="line">tailPrev-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = tailPrev;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找位置"><a href="#查找位置" class="headerlink" title="查找位置"></a>查找位置</h2><p><strong>查找位置：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTFind</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//从第一个结点开始往下寻找，找到返回结点</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DBLSTNode* pos = DBLSTFind(phead,x);</span><br><span class="line"><span class="keyword">if</span>(pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除pos位置的值"><a href="#删除pos位置的值" class="headerlink" title="删除pos位置的值"></a>删除pos位置的值</h2><p><strong>删除pos位置的值：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTErase</span><span class="params">(DBLSTNode* pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到pos的前一个</span></span><br><span class="line">DBLSTNode* posPrev = pos-&gt;prev;</span><br><span class="line"><span class="comment">//找到pos的后一个</span></span><br><span class="line">DBLSTNode* posNext = pos-&gt;next;</span><br><span class="line"><span class="comment">//链接pos的前一个和pos的后一个</span></span><br><span class="line">posPrev-&gt;next = posNext;</span><br><span class="line">posNext-&gt;prev = posPrev;</span><br><span class="line"><span class="comment">//释放pos</span></span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">pos = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在pos前插入x"><a href="#在pos前插入x" class="headerlink" title="在pos前插入x"></a>在pos前插入x</h2><p><strong>在pos前插入x：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTInsert</span><span class="params">(DBLSTNode* pos, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//知道pos前的一个结点</span></span><br><span class="line">DBLSTNode* posPrev = pos-&gt;prev;</span><br><span class="line"><span class="comment">//创建新的结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//将新的结点插入</span></span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;prev = posPrev;</span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">pos-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回链表的结点数量"><a href="#返回链表的结点数量" class="headerlink" title="返回链表的结点数量"></a>返回链表的结点数量</h2><p><strong>返回链表的结点数量：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DBLSTSize</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//其实就是遍历一遍，找一个计数的</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断链表是否为空"><a href="#判断链表是否为空" class="headerlink" title="判断链表是否为空"></a>判断链表是否为空</h2><p><strong>判断链表是否为空：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DBLSTEmpty</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个cur指向第一个结点，如果第一个结点就是phead,说明链表为空</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (phead == cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>为了更快的实现一个双向循环的带头链表，我们可以直接利用Insert和Erase。</strong></p><p>如果Erase的pos位置是第一个结点，那就代表着头删，如图：</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210601185722567.png" alt="image-20210601185722567"></p><p>所以头删还可以这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopFront</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DBLSTErase(phead-&gt;next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾删同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopBack</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTErase(phead-&gt;prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushFront</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTInsert(phead-&gt;next,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插：</p><p>其实就是插到头结点phead的前面。</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210601191026935.png" alt="image-20210601191026935"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushBack</span><span class="params">(DBLSTNode* phead, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTInsert(phead, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>带头双向循环链表，任意位置插入和删除数据，时间复杂度都是O(1)。</p><p>查找最优的结构不是这个，查找就得遍历，时间复杂度还是O(N)。</p><p>查找的最优结构有三种：</p><ul><li>平衡搜索树（AVL树和红黑树）</li><li>哈希表</li><li>B树 &amp; B+树系列 (数据库底层核心引擎)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -链表 </tag>
            
            <tag> -双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(3)【链表】环形链表(C语言)</title>
      <link href="2021/05/27/LeetCode%E5%88%B7%E9%A2%98(3)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/05/27/LeetCode%E5%88%B7%E9%A2%98(3)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>环形链表</strong></p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>什么是链表带环：链表的最后一个元素不指向空而指向前面的某个结点。</p><p>思路：<strong>快慢指针</strong>，慢指针走一步，快指针走两步，二者先后 进入环内进行追逐，最终会在某个点相遇。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(struct ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>请证明：</p><p>**(1)**slow和fast一定会在环里面相遇呢？有没有可能永远追不上？</p><p>当slow 走1步，fast走2步时，<strong>一定可以</strong>追上。</p><p>若slow和fast已经进入环中，追逐已经开始了，假设他们之间的距离是N,slow走1步，fast走2步，二者的距离每次缩减1，N,N-1,N-2,……0,直到相遇。</p><p>**(2)**slow一次走1步，fast一次走3不行不行？4不行不行？    </p><p><strong>不一定可以追上，甚至有可能会进入死循环。</strong>我比你快不一定追上，因为存在错过。若开始追逐，假设二者距离为N，假设slow走1步，fast走3步，距离每次缩减2，N,N-2,N-4,N-6……。如果N是偶数最后会减到0，如果N是偶数则减到-1，距离为0代表相遇，距离为-1代表反超了，进入新的追逐，他们之间的距离是 C-1(假设C 是环的长度)，如果C-1是偶数，就可以追上，如果C-1是奇数，就永远追不上，因为是奇数的时候又像开始那样反超，距离又是C-1，就永远追不上。</p><p>其他fast步数同理。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -链表 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(2)【链表】合并链表&amp;返回中间链表(C语言)</title>
      <link href="2021/05/26/LeetCode%E5%88%B7%E9%A2%98(2)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8&amp;%E8%BF%94%E5%9B%9E%E4%B8%AD%E9%97%B4%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/05/26/LeetCode%E5%88%B7%E9%A2%98(2)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8&amp;%E8%BF%94%E5%9B%9E%E4%B8%AD%E9%97%B4%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<p><strong>快慢指针问题：</strong></p><p>思路：定义一个快指针和一个慢指针，快指针走到结束的时候，慢指针刚好走到一半。</p><p><strong>链表的中间结点。</strong></p><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点 - 力扣（LeetCode） (leetcode-cn.com)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *next;</span><br><span class="line"> * &#125;;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct ListNode* middleNode(struct ListNode* head)&#123;</span><br><span class="line">    struct ListNode* slow &#x3D; head;</span><br><span class="line">    struct ListNode* fast &#x3D; head;</span><br><span class="line">    while(fast !&#x3D; NULL &amp;&amp; fast-&gt;next !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        slow &#x3D; slow-&gt;next;</span><br><span class="line">        fast &#x3D; fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并两个有有序链表：</strong></p><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>思路：从头开始取两个链表中小的那个尾插到新链表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">mergeTwoLists</span><span class="params">(struct ListNode* l1, struct ListNode* l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果有一个链表是空的，那么直接返回另个一个链表</span></span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个头指针head和尾指针tail</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">tail</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//如果来个两边都不是空链表进入迭代循环 </span></span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果取出来的值l1的小于l2的</span></span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果新链表是第一次插入</span></span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//头尾指针都是l1的这一个元素</span></span><br><span class="line">                head = tail = l1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果新链表不是第一次插入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//新链表的下一个结点是l1这个与元素</span></span><br><span class="line">                tail-&gt;next = l1;</span><br><span class="line">                <span class="comment">//现在的尾巴是传入的这个元素</span></span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//链表l1的第一个元素往后推移一个</span></span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果l1的第一个元素大于等于l2的第一个元素</span></span><br><span class="line">        <span class="comment">//下面同上</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = tail = l2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tail-&gt;next = l2;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束</span></span><br><span class="line">    <span class="comment">//如果链表l1或者链表l2其中的一个还有元素，那么就直接插到后面</span></span><br><span class="line">    <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next = l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -链表 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(1)【链表】反转链表(C语言)</title>
      <link href="2021/05/23/LeetCode%E5%88%B7%E9%A2%98(1)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
      <url>2021/05/23/LeetCode%E5%88%B7%E9%A2%98(1)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</url>
      
        <content type="html"><![CDATA[<hr><p>题目链接——<a href="https://leetcode-cn.com/problems/reverse-linked-list/submissions/">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a>**</p><hr><p><strong>反转链表</strong></p><p><strong>思路一:反转指针</strong>。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125459086.png" alt="image-20210523125459086"></p><p>本质上就是调转指针的方向。</p><p>首先我们定义两个指针,一个叫n1，一个叫n2。(Node1,Node2)</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125823700.png" alt="image-20210523125823700"></p><p>让n2指向第一个结点，让n1指向空。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125932679.png" alt="image-20210523125932679"></p><p>n2-&gt;next指向n1。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523130017978.png" alt="image-20210523130017978"></p><p>但是，两个指针是反不转的。因为：</p><p>这里让n2-&gt;next指向n1，就是把n1的值存到n2的next上，n2-&gt;next原来存的是2的地址，现在存的是NULL，但是继续往后走的时候，我们发现找不到2了 。</p><p>所以要反转指针，两个指针是反不动的，要用3个。</p><p>前两个指针 反转，最后一个指针负责记录下一个位置。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523130643211.png" alt="image-20210523130643211"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131751386.png" alt="image-20210523131751386"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131821728.png" alt="image-20210523131821728"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131916171.png" alt="image-20210523131916171"></p><p>什么时候结束</p><p>n2 == NULL；</p><hr><p>重复的条件用循环解决</p><ol><li>初始条件</li><li>迭代过程</li><li>结束条件</li></ol><p>画图看起来很浪费时间，但提升了写代码的体验，更好的解决问题。</p><hr><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">reverseList</span><span class="params">(struct ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化条件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">n1</span> =</span> <span class="literal">NULL</span>,*n2 = head,*n3 = n2-&gt;next;</span><br><span class="line">    <span class="comment">//结束条件</span></span><br><span class="line">    <span class="keyword">while</span>(n2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//迭代过程</span></span><br><span class="line">        n2-&gt;next = n1;</span><br><span class="line">        <span class="comment">//往后推移</span></span><br><span class="line">        <span class="comment">//两个相等就是往后推移</span></span><br><span class="line">        n1 = n2;</span><br><span class="line">        n2 = n3;</span><br><span class="line">        <span class="keyword">if</span>(n3 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            n3 = n3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><strong>思路二：头插法</strong></p><p>取结点头插到新链表中。cur是当前操作结点，用一个next来保存下一个结点(同上)。</p><p>文字简单描述：</p><p>​    从原链表去一个点下来，放到新的链表中，当做新链表的头结点cur = newhead,</p><p>迭代往后走，取下一个结点……</p><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">reverseList</span><span class="params">(struct ListNode* head)</span></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">cur</span> =</span> head;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newHead</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span> =</span> cur-&gt;next;</span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        cur-&gt;next =newHead;</span><br><span class="line">        newHead = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -数据结构 </tag>
            
            <tag> -链表 </tag>
            
            <tag> -LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现学生成绩管理系统</title>
      <link href="2021/05/19/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/05/19/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV13z4y117qC?p=8">【C/C++课程设计】史上最全最详细的学生成绩管理系统上线啦，完成大学课程设计不是问题！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//从键盘接收一个按键，无序按回车的那种</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> stuNum;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="comment">//定义链表的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Student stu;<span class="comment">//学生-数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">pNext</span>;</span><span class="comment">//指向下一个结点的指针</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//定义头结点</span></span><br><span class="line">Node* g_pHead = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//录入学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个结点-动态开辟</span></span><br><span class="line">Node* pNewNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">pNewNode-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead == <span class="literal">NULL</span>)<span class="comment">//原来什么也没有</span></span><br><span class="line">&#123;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNewNode-&gt;pNext = g_pHead;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生姓名:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pNewNode-&gt;stu.name);<span class="comment">//name是数组名，不用加&amp;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生年龄:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pNewNode-&gt;stu.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pNewNode-&gt;stu.stuNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的成绩:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pNewNode-&gt;stu.score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;录入完成！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t————————欢迎使用高校学生管理系统——————----\t\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t学号\t*\t姓名\t*\t年龄\t*\t成绩*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%d\t\t%s\t\t%d\t\t%d\t\n&quot;</span>,p-&gt;stu.stuNum,p-&gt;stu.name,p-&gt;stu.age,p-&gt;stu.score);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败。\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fwrite(&amp;p-&gt;stu, <span class="number">1</span>,<span class="keyword">sizeof</span>(Student),fp);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;保存数据成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">browerStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\xuanxuan\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">Student stu;</span><br><span class="line"><span class="keyword">while</span> (fread(&amp;stu, <span class="number">1</span>, <span class="keyword">sizeof</span>(Student), fp))<span class="comment">//只要不是文件末尾就继续读</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点</span></span><br><span class="line">Node* pNewNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">pNewNode-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(pNewNode,&amp;stu,<span class="keyword">sizeof</span>(Student));</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead == <span class="literal">NULL</span>)<span class="comment">//原来什么也没有</span></span><br><span class="line">&#123;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNewNode-&gt;pNext = g_pHead;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加载数据成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计所有学生人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">nCount++;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找学生</span></span><br><span class="line"><span class="function">Node* <span class="title">findStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStudent;</span><br><span class="line"><span class="keyword">char</span> nName[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的学生学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nStudent);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的学生姓名:\n&quot;</span>, nName);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,nName);</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;stu.stuNum == nStudent || <span class="number">0</span> == <span class="built_in">strcmp</span>(p-&gt;stu.name , nName))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStunum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要修改学生的学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nStunum);</span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改学生的姓名 年龄 成绩：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, p-&gt;stu.name, &amp;p-&gt;stu.age, &amp;p-&gt;stu.score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功。\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到该学生信息。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStunum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的学生学号。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;nStunum);</span><br><span class="line"></span><br><span class="line">Node* p1,*p2;</span><br><span class="line"><span class="comment">//判断是不是头结点</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line">p1 = g_pHead;</span><br><span class="line">g_pHead = g_pHead-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是头结点</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line">p2 = p-&gt;pNext;</span><br><span class="line">p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext ==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t欢迎使用高校学生管理系统*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t1.录入学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t2.打印学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t3.保存学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t4.读取学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t5.统计所有学生人数\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t6.查找学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t7.修改修生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t8.删除学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t0.退出系统\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//键盘输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">char</span> ch = _getch();</span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:<span class="comment">//录入</span></span><br><span class="line">inputStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:<span class="comment">//打印</span></span><br><span class="line">printStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:<span class="comment">//保存</span></span><br><span class="line">saveStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:<span class="comment">//读取</span></span><br><span class="line">browerStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:<span class="comment">//统计</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学生总人数为:%d\n&quot;</span>, countStudent());</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:<span class="comment">//查找</span></span><br><span class="line">&#123;</span><br><span class="line">Node* p = findStudent();</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号:%d\t姓名:%s\t年龄:%d\t成绩:%d\n&quot;</span>, p-&gt;stu.stuNum, p-&gt;stu.name, p-&gt;stu.age, p-&gt;stu.score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到该学生。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:<span class="comment">//修改</span></span><br><span class="line">modifyStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:<span class="comment">//删除</span></span><br><span class="line">deleteStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line">keyDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言文件操作</title>
      <link href="2021/05/18/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2021/05/18/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1F54y1r7ww?from=search&seid=15927253292233017726">C语言精华——C语言文件操作，文件打开、关闭、读取、定位如何操作？为你逐一讲解文件操作标准库函数_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>文件分类：</strong></p><p>一种是文本文件，一种是二进制文件。</p><ul><li>文本文件：保存的时候，没一个字符对应一个字节。</li><li>二进制文件：按照二进制编码保存的文件。</li></ul><p><strong>文件操作：</strong></p><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a><strong>打开文件</strong></h1><p> 打开文件fopen(“文件路径”，”打开方式”)</p><p>参数：-(百度百科)</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.assets/20210517213436.png"></p><p>(选中函数按F1打开msdn文档）</p><p>打开文件成功返回一个文件指针，打不开返回 NULL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(fp)) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ch);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose();</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><h2 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch  = fgetc();<span class="comment">//返回一个字符，一个字符一个字符的读取。</span></span><br></pre></td></tr></table></figure><p> 打开文件之后，到关闭文件之前操作，会有一个文件指针定位到你当前操作到哪里了，读取了一个字节，文件指针就会继续往后偏移。</p><hr><p><strong>读取完会将文件指针移动到下一个字符。</strong></p><hr><p>可以使用循环将全部文本全部内容读取。</p><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h2><p>读取一行fgets()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">fgets(str,<span class="number">200</span>,fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str);</span><br></pre></td></tr></table></figure><p>也可以通过循环将内容一行一行的读取出来。</p><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>fread想读多少读多少</p><p>fread(str存到哪,每个元素大小，读几个，文件)；</p><p>返回实际读取的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(str,<span class="number">1</span>,<span class="number">10</span>,fp);</span><br></pre></td></tr></table></figure><hr><p>清零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化</span></span><br><span class="line">   或</span><br><span class="line"><span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="keyword">sizeof</span>(str);</span><br><span class="line">       或</span><br><span class="line"><span class="keyword">int</span> n = fread(str,<span class="number">1</span>,<span class="number">10</span>,fp);</span><br><span class="line">str[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><h2 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h2><p>fputc(‘内容’,文件);</p><h2 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h2><p>写入一个字符串</p><p>fputs();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* str = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx\r\n&quot;</span>;</span><br><span class="line">\r\n回车</span><br><span class="line"><span class="built_in">fputs</span>(str,fp);</span><br></pre></td></tr></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><p>fwrite想写多少写多少</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">123124</span>;</span><br><span class="line">fwrite(&amp;num,<span class="keyword">sizeof</span>(num),<span class="number">1</span>,fp);</span><br><span class="line">第一个参数类型是<span class="keyword">void</span>* 可以转化为任意类型</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;_Person;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person p1 = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">20</span>&#125;;</span><br><span class="line">fwrite(&amp;p1, <span class="number">1</span>, <span class="keyword">sizeof</span>(p1), fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.assets/image-20210518120745992.png" alt="image-20210518120745992"></p><h1 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h1><p>文件指针定位</p><h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h2><p>fseek(fp,0,SEEK_SET)</p><p>能够移动文件指针</p><p>可以指定文件从哪里开始读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">fseek(fp, <span class="number">10</span>, SEEK_SET);</span><br><span class="line">fread(str,<span class="number">1</span>,<span class="number">100</span>,fp);</span><br></pre></td></tr></table></figure><p>在当前位置再往后移动x个位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">10</span>,SEEK_CUR);</span><br></pre></td></tr></table></figure><p>读取文件最后一行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">0</span>,SEEK_END);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;_Person;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取文件最后一行</span></span><br><span class="line">fseek(fp,<span class="number">0</span>,SEEK_END);</span><br><span class="line"><span class="comment">//反着读</span></span><br><span class="line">fseek(fp, <span class="number">-1</span>, SEEK_END);</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fread(&amp;ch, <span class="number">1</span>, <span class="number">1</span>, fp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(fp,<span class="number">-2</span>,SEEK_CUR);</span><br><span class="line">length++;<span class="comment">//统计退了多少格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length = %d\n&quot;</span>, length);</span><br><span class="line">fseek(fp, -length, SEEK_END);</span><br><span class="line"><span class="keyword">char</span>* buffer = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * length + <span class="number">1</span>);<span class="comment">//多一个空间存储字符串终止符</span></span><br><span class="line"><span class="built_in">memset</span>(buffer,<span class="number">0</span>,length+<span class="number">1</span>);</span><br><span class="line">fread(buffer, <span class="number">1</span>, length,fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buffer);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p>重置文件指针，返回到文件的开头。</p><h2 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h2><p>返回当前指针位置。</p><hr><p>文件指针移动了多少个字节，该文件的大小就是多少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rewind(fp);<span class="comment">//重置文件指针到开头</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);<span class="comment">//将文件指针定位到结尾</span></span><br><span class="line"><span class="keyword">int</span> nSize = ftell(fp);<span class="comment">//文件指针偏移量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nSize);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机二级考试公共基础知识部分——-数据库</title>
      <link href="2021/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1Hb411G7bV?p=23&spm_id_from=pageDriver">【极客学院】计算机等级考试二级c语言：公共基础知识部分（下）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>我的小站——[半生瓜のblog](<a href="http://doraemon2.xyz/">半生瓜のblog (doraemon2.xyz)</a>)</p><p>现在是不是就只有河北和重庆还没考试了T_T。</p><hr><h1 id="数据库系统的基本概念"><a href="#数据库系统的基本概念" class="headerlink" title="数据库系统的基本概念"></a>数据库系统的基本概念</h1><ul><li>数据：描述事物的符号记录。</li><li>数据的特点：有一定的结构，有型与值之分，如整型、实型、字符型等。而数据的值给出了符合定性的值，如整形值15。</li><li>数据库(DB):是数据的集合，具有统一的结构形式并存放于统一的存储介质内，是多种应用数据的集成，并可被各个应用程序共享。</li></ul><p>数据库存放数据是按 <strong>数据所提供的数据模式存放的，具有集成与共享的特点。</strong></p><ul><li>数据库管理系统(DBMS):一种系统软件，负责数据库中的数据组织、数据操纵、数据维护、控制及保护和数据服务等，是<strong>数据库的核心。</strong></li><li>数据库管理系统的功能：<ul><li>数据模式定义；</li><li>数据存取的物理构建；</li><li>数据操纵；</li><li>数据的完整性、安全性定义与检查；</li><li>数据的并发控制与故障恢复；</li><li>数据的服务：如拷贝、转存、重组、性能监测、分析等。</li></ul></li><li>为了完成上述六个功能，数据库管理系统提供以下的数据语言：<ul><li>数据定义语言(DDL):负责数据的模式定义与数据的物理存取构建；</li><li>数据操纵语言(DML):负责数据的操纵，如增删查改等；</li><li>数据的控制语言(DCL):负责数据完整性、安全性的定义与检查以及并发控制、故障恢复等。</li></ul></li><li>数据语言按使用方式有两种结构形式：<ul><li>交互式命令( 又称自含型或自主型语言)；</li><li>宿主型命令(一般可嵌入某些宿主语言中)。</li></ul></li><li>数据库管理员(DBA):对数据库进行规划、设计、维护、监视等专业管理人员。</li><li>数据库系统(DBS):由数据库(数据)、数据库管理软件(软件)、数据库管理员(r人员)、硬件平台(硬件)、软件平台(软件)五个部分构成的运行实体。</li><li>数据库应用系统(DBAS):由数据库系统、应用软件及应用界面三者组成。</li></ul><h1 id="数据库系统的发展"><a href="#数据库系统的发展" class="headerlink" title="数据库系统的发展"></a>数据库系统的发展</h1><ul><li>数据库系统的发展：<ul><li>文件系统阶段:提供了简单的数据共享与数据管理能力，但是它无法提供完整的、统一的、管理和数据共享的能力。</li><li>层次数据库与网状数据库系统阶段:为统一与共享数据提供了有力支撑。</li><li>关系数据库系统阶段:结构简单,使用方便,逻辑性强,物理性少,使用广泛。</li></ul></li><li>数据库的<strong>根本目的</strong>：解决<strong>数据的共享</strong>问题。</li></ul><h1 id="数据库系统的基本特点"><a href="#数据库系统的基本特点" class="headerlink" title="数据库系统的基本特点"></a>数据库系统的基本特点</h1><ul><li>数据库系统的基本特点：<ul><li>数据的集成性；</li><li>数据的高共享性与低冗余性；</li><li>数据的独立性(物理独立性和逻辑独立性)；</li><li>数据的统一管理与控制。</li></ul></li></ul><h1 id="数据库系统的内部结构体系"><a href="#数据库系统的内部结构体系" class="headerlink" title="数据库系统的内部结构体系"></a>数据库系统的内部结构体系</h1><ul><li><p>数据库系统的三级模式：</p><ul><li>概念模式：数据库系统中全局数据逻辑结构的描述，全体用户公共数据视图；</li><li>外模式:也称子模式与用户模式。是用户的数据视图，也就是用户所见到的数据模式；</li><li>内模式:又称物理模式,它给出了<strong>数据库物理存储结构与物理存取方法。</strong></li></ul></li><li><p>数据库系统的两级映射</p><ul><li>概念模式到内模式映射；</li><li>外模式到概念模式的映射。</li></ul></li><li><p>示意图：</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93.assets/image-20210518104351969.png" alt="image-20210518104351969"></p></li></ul><h1 id="数据库的设计与管理"><a href="#数据库的设计与管理" class="headerlink" title="数据库的设计与管理"></a>数据库的设计与管理</h1><ul><li>数据库设计概述<ul><li><strong>数据库设计是数据应用的核心</strong>。</li><li>数据库设计的两种方法：<ul><li>面向数据:以信息需求为主，兼顾处理需求；</li><li>面向过程:以处理需求为主，兼顾信息需求。 </li></ul></li><li>数据库的生命周期:需求分析阶段、概念设计阶段、逻辑设计阶段、物理设计阶段、编码阶段、测试阶段、运行阶段、进一步修改阶段。</li></ul></li><li>数据设计的需求分析<ul><li>需求分析:主要任务是收集和分析数据，这一阶段收集的基础数据和数据流图是下一阶段的基础。</li><li>需求分析常用结构化分析方法和面向对象的方法。<ul><li>结构化分析(SA）方法用自顶向下、逐层分解的方式分析系统。用数据流图表达数据和处理过程的关系。对数据库设计来讲，数据字典是进行详细的数据收集和数据分析所获得的主要结果。</li><li>数据字典是各类数据描述的集合,包括5个部分:数据项数据结构、数据流（可以是数据项,也可以是数据结构)、数据存储、处理过程。</li></ul></li></ul></li><li>数据库概念设计<ul><li>数据库<strong>概念设计</strong>的目的是<strong>分析数据内在的语义关系</strong>，建立数据的抽象模型，即E-R图。</li><li>设计的方法有两种：<ul><li>集中式模式设计法(适用于小型或并不复杂的单位或部门)；</li><li>视图集成设计法。</li></ul></li><li> E-R模型与视图集成</li><li>视图设计一般有三种设计次序:自顶向下、由底向上、由内向外。</li><li>视图集成的几种冲突:命名冲突、概念冲突、域冲突、约束冲突。</li></ul></li><li>数据库的逻辑设计<ul><li><strong>逻辑设计</strong>:将E-R图转化为制定RDBMS中的关系模式。</li><li>关系视图设计:关系视图的设计又称外模式设计。</li><li>关系视图的主要作用:<ul><li>提供数据逻辑独立性；</li><li>能适应用户对数据的不同需求；</li><li>有一定数据保密功能。 </li></ul></li></ul></li><li>数据库的物理设计<ul><li>数据库的物理设计主要目标是对数据内部物理结构作调整并选择合理的存取路径,以提高数据库访问速度有效利用存储空间。</li><li>一般RDBMS中留给用户参与物理设计的内容大致有索引设计、集成簇设计和分区设计。</li></ul></li><li>数据库管理<ul><li>数据库的建立；</li><li>数据库的调整；</li><li>数据库的重组；</li><li>数据库安全性与完整性控制；</li><li>数据库的故障恢复；</li><li>数据库监控。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的灵魂——-指针</title>
      <link href="2021/05/16/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88/"/>
      <url>2021/05/16/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——强烈推荐<a href="https://www.bilibili.com/video/BV1bo4y1Z7xf?p=1">【强烈推荐】4小时彻底掌握C指针 - 顶尖程序员图文讲解 - UP主亲自翻译校对 (已完结)_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p>在学习这个之前，你需要了解函数、循环、数组等C语言知识</p><hr><h1 id="指针基本介绍"><a href="#指针基本介绍" class="headerlink" title="指针基本介绍"></a>指针基本介绍</h1><hr><p>计算机的每一个字节都有一个地址。</p><p>int a,当代码运行的时候，计算机会在内存中开辟一些空间给a。分配多少空间，取决有具体的数据类型。</p><hr><p>指针是一个变量，他存放这另一个变量的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//定义一个整型变零a</span></span><br><span class="line">    <span class="keyword">int</span>* p;<span class="comment">//定义一个指针变量p</span></span><br><span class="line">    p = &amp;a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个指针变量，换句话说p是一个可以存放整型变量地址的变量。</p><p>&amp;叫做取地址符，放在一个变量的前面，我们就得到了那个变量的地址，它返回一个指针，指向那个特定的变量。</p><p>*叫做解引用操作符，操作指针所指向的那个地址的内容（值）。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的结果是什么？</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;p);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//a的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);<span class="comment">//a的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a);<span class="comment">//a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p;<span class="comment">//a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;p);<span class="comment">//p的地址</span></span><br></pre></td></tr></table></figure><hr><p>int* a;意味着指向整型的指针然后写出变量名。</p><h2 id="指针的算数运算"><a href="#指针的算数运算" class="headerlink" title="指针的算数运算"></a>指针的算数运算</h2><p>步长：与是指向什么类型的指针有关系，就是走一步能跨过几个字节的距离。</p><p>下面两个输出，相差4个字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出的是一个垃圾值，因为我们根本就没有对这个地址分配一个整型变量，所以解引用会出现一个随机值（垃圾值）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h1><p>指针是强类型的，你需要一个特定类型的指针变量来存放特定类型变量的地址，</p><p>例如对于int*来说，你就需要一个指向整型类型的指针，来存放整型数据的地址。</p><p><strong>为什么指针是强类型的？</strong></p><p><strong>因为，</strong>我们不仅使用指针来存储内存地址，同时也用来解引用他所存储的地址所对应的内容，这样我们就能访问并且修改这些地址对应的值了。</p><p><strong>不同</strong>的数据有不同的大小，例如整型在内存中占四个字节，字符型占一个字节。</p><p>假设int a = 1021;</p><p>在内存中占4个字节，32个比特位，如图：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511175536148.png" alt="image-20210511175536148"></p><p>​    </p><p>其中，最左边的位来表示符号位，0为正，1位负，剩下的32位来存储值。</p><p>现在声明一个整型指针来指向a,</p><p>int* p = &a;</p><p>现在打印p——printf（”%d\n”,p）;</p><p>得到的结果200，也就是说该整型变量在内存中的起始地址是200。</p><p>现在打印p所指向地址所对应的值——pintf(“%d\n”,*p);</p><p>从200开始，int类型占4个字节，到203，提取这个整型的值，得到的结果1025。</p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1025</span>;</span><br><span class="line"><span class="keyword">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;整型所占字节数是%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p所指向的地址是%d\np所指向的地址对应的值是%d\n&quot;</span>,p,*p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511185807926.png" alt="image-20210511185807926"></p><p><strong>接着我们在上面的基础上生命一个字符型指针,并且将整型指针的值赋给该字符型指针。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* p0;</span><br><span class="line">p0 = p;</span><br></pre></td></tr></table></figure><p>这会提示一个编译错误，因为p0是一个字符型指针，而p是一个整型指针。</p><p><strong>下面我们进行强制类型转换,并进行输出。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p0  = (<span class="keyword">char</span>*)p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符型所占的字节数是%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p0所指向的地址是%d\np0所在指向的地址对应的值是%d\n&quot;</span>, p0, *p0);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190049581.png" alt="image-20210511190049581"></p><p>我们发现所对应的内存地址变了，因为程序在每次运行的时候，都会重新为变量分配内存地址。</p><p>这里p0所指向的地址所对应的值也变了，我们发现跟p并不一样，这是为什么呢？</p><p>同上面的图，这是1025作为整型在内存中的分部，整型在内存中占4个字节，32个比特位，而我们这里将他强制存进了字符型指针中，字符型在内存中占1个字节，8个比特位，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190200850.png" alt="image-20210511190200850"></p><p>所以只获得了最左边的一个字节，也就是1。</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190512584.png" alt="image-20210511190512584"></p><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p>这里我们再次进行指针的算数运算，将p0+1获得新地址，并且对他进行解引用得到该地址所对应的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p0+1所指向的地址是%d\np0+1所指向的地址对应的值是%d\n&quot;</span>, p0+<span class="number">1</span>, *(p0+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>结果如下图表示。</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511191001194.png" alt="image-20210511191001194"></p><p>因为char类型所占字节数是1，所以步长(+1跳过的字节数)是1，该地址所对应的值是，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511191301868.png" alt="image-20210511191301868"></p><p>二进制转化为十进制表示得4(0*2^0+0 *2^1+ 1 * 2^2 = 4)。</p><hr><p>进制转化忘了的同学可以来看一下我的这篇笔记——<a href="http://doraemon2.xyz/2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/">进制之间的转换 | 半生瓜のblog (doraemon2.xyz)</a></p><hr><h2 id="void空指针"><a href="#void空指针" class="headerlink" title="void空指针"></a>void空指针</h2><p>现在我们讨论一种通用的指针类型，它不针对某个特定的数据类型，这种类型的指针被称为void类型的指针，我们使用void来声明这种特定的指针类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* p1;p1 = p;</span><br></pre></td></tr></table></figure><p>这里我们不需要显式的类型转换,p1 = p是合法的，不会有编译错误。</p><p>但是它没有映射到特定的类型，所以我们不能对它进行解引用，*p1是违法的。</p><p>我们只能打印出地址。（p0+1也是不行的，也会有编译错误）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p1);</span><br></pre></td></tr></table></figure><h1 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h1><p>直接上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int x = 5;int* p = &amp;x;*p = 6;int** q = &amp;p;int*** r = &amp;q;return 0; &#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>接下来让我们打印一些东西</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*q);<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*q));<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*r));<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*(*r)));</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511200806837.png" alt="image-20210511200806837"></p><p><strong>解释：</strong></p><p><strong>第一次没读懂一定要多读几次。</strong></p><p>​    p存的是x的地址，对x进行解引用得到x的值。<br>​    q存的是p的地址，p存的是x的地址,对q进行解引用得到x的地址，再进行一次解引用就是通过x的地址寻找对应的值，那就是x的值。</p><p>​    r存的是q的地址，q存的是p的地址，第一次解引用操作就是通过q的地址找到q所存的p的地址，p存的是x的地址，再对r进行一次解引用操作，就是p的地址里面存的是x的地址，结果得到x的地址，再对r进行一次解引用操作，就是通过x的地址寻找对应的值，那就是x的值。</p><p><strong>我们通过三级指针可以直接修改x的值</strong></p><p>就是通过对指针变量的解引用来修改对应地址所对应值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***r = <span class="number">10</span>;<span class="comment">//此时x的值由5变成了10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**q = *p + <span class="number">2</span>;<span class="comment">//此时x的值由10变成了12</span></span><br></pre></td></tr></table></figure><h1 id="函数传值-amp-传-址-引用"><a href="#函数传值-amp-传-址-引用" class="headerlink" title="函数传值&amp;传(址)引用"></a>函数传值&amp;传(址)引用</h1><p>函数与指针。</p><p><strong>传值。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Increment(int a)&#123;a += 1;&#125;int main(void)&#123;int a = 10;Increment(a);printf(&quot;a = %d\n&quot;, a);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>我们发现值并没有改变，我们打印下两个地址看一下，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512111430844.png" alt="image-20210512111430844"></p><p>是两个<strong>不同的内存空间</strong>，所以值没被修改。</p><p><strong>解释：</strong></p><p>main()是主调函数，Increment()是被调函数，当我们在主调函数中调用其他函数时，这个参数叫做实参，这个被调函数的参数叫做形参，实参会被映射到形参，当这个函数被调用的时候，主函数中的实参’a’会被映射到Increment函数的形参’a’里面，当我们进行这样的调用的时候，基本上就是把一个变量拷贝到另一个变量，这种形式的函数掉用也被称为，<strong>传值调用。</strong></p><p>如果修改成功的话，这两个应该是一个地址，<strong>引出传(址)引用。</strong></p><p><strong>传(址)引用，只需要一点点的修改。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Increment(int* a)&#123;*a = *a + 1;&#125;int main(void)&#123;int a = 10;Increment(&amp;a);printf(&quot;%d\n&quot;,a);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>这样的函数调用不是传值，而是将变量的地址传了过去，我们可以引用这个变量，解引用并且进行一些操作，这就是传(址)引用，传(址)引用可以节省很多内存空间，相比之下引用所占的内存也会小得多，避免复杂的数据类型的拷贝，可以让我们节省内存。</p><h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p>二者之间有很强的联系。</p><p><strong>数组名就是一个指针。</strong></p><p> 如果使用数组名,会得到一个指向数组首元素的指针。</p><p><strong>例如：</strong></p><p>int* p = a；我们甚至都不需要在a前写&amp;。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;int* p = a;return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>如果我们打印a，会得到数组a的首元素地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>如果对它解引用会得到他首元素的值，1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*a);</span><br></pre></td></tr></table></figure><p>如果打印a+1,则会打印数组a第二个元素的地址。</p><p>同理对他解引用也会得到该地址所对应的元素值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>完整代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;printf(&quot;%d\n&quot;,a );//首元素地址printf(&quot;%d\n&quot;,&amp;a );//首元素地址printf(&quot;%d\n&quot;,*a );//首元素printf(&quot;%d\n&quot;,a[0]);//首元素return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512204028411.png" alt="image-20210512204028411"></p><p>需要注意的是，当把数组名字作为指针的时候，不能对它进行自增操作，会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;<span class="keyword">int</span>* p = a;p++;<span class="comment">//可以a++;//不可以</span></span><br></pre></td></tr></table></figure><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><p>数组作为函数参数传入。</p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int SumOfElement(int a[],int size)&#123;int sum = 0;for (int i = 0; i &lt; size; i++)&#123;sum += a[i];&#125;return sum;&#125;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;//得到数组中元素个数int size = sizeof(a) / sizeof(a[0]);int Sum = SumOfElement(a,size);printf(&quot;%d\n&quot;, Sum);//得到结果21return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>现在我们将求元素个数的代码放入SumOfElement函数中。代码如下，我们发现此时结果变成了1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int SumOfElement(int a[])&#123;int sum = 0;int size = sizeof(a) / sizeof(a[0]);for (int i = 0; i &lt; size; i++)&#123;sum += a[i];&#125;return sum;&#125;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;int Sum = SumOfElement(a);printf(&quot;%d\n&quot;, Sum);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p>​    <img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512205738054.png" alt="image-20210512205738054"></p><p><strong>这是为什么呢？</strong></p><p>当编译器看到数组作为函数参数的时候，他不会拷贝整个数组，而是仅仅创建一个同名的指针，我们这里就是创建了一个整型指针，编译器只是拷贝了主调函数的数组首元素地址。</p><p>不管你在被调函数的参数中写int a[],还是int *a,结果都是一样的，它都只是一个整形指针而已。</p><p>这里我们不是拷贝变量的值，而仅仅拷贝了一个变量的地址，所以这里是传(址)引用，这个很有意义，因为数组可以很大， 每次拷贝整个数组没有意义，他会消耗大量的内存，一次对于数组来说不使用传值引用，而是传(址)引用。</p><p>这就是为什么我们这次数组的结果是1了， 因为被调函数中的a是个整型指针，而在主函数中a是一个数组。</p><p>所以计算数组元素个数的代码，还是应该放到主函数中。</p><hr><h2 id="指针和字符数组"><a href="#指针和字符数组" class="headerlink" title="指针和字符数组"></a>指针和字符数组</h2><p><strong>字符数组</strong></p><p>在C语言中为了更高效的操作字符串，我们需要理解一些事情，</p><p>我们如何把字符串存入和字符数组，</p><p>为了能够在字符数组中存储字符串，首要的需求就是字符数组必须要足够大，大到能够容纳字符串，字符数组的大小要大于等于字符的数量+1，</p><p>C语言的字符串必须以null结尾，这就是为什么我们需要一个额外的空间，是用来存放null的。</p><p><strong>代码示例：</strong></p><p>错误例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;char c[4];c[0] = &#x27;N&#x27;;c[1] = &#x27;S&#x27;;c[2] = &#x27;S&#x27;;c[3] = &#x27;B&#x27;;printf(&quot;%s\n&quot;, c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>我们发现字母后面出现了几个乱码，这是因为我们破坏了printf的默认规则,也就是字符串必须是以null结尾吧，这就是发生<strong>未定义</strong>行为的原因。</p><p><strong>下面我们进行一下修改</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;char c[5];c[0] = &#x27;N&#x27;;c[1] = &#x27;S&#x27;;c[2] = &#x27;S&#x27;;c[3] = &#x27;B&#x27;;c[4] = &#x27;\0&#x27;;printf(&quot;%s\n&quot;, c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果就正常了</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210513123554138.png" alt="image-20210513123554138"></p><p><strong>其他的字符操作函数也同样需要遵守这个固定，以null为结尾。</strong></p><p>写在同一行，系统会隐式的自动添加null为结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = <span class="string">&quot;NSSB&quot;</span>;</span><br></pre></td></tr></table></figure><p> 不声明字符数组的个数也是可以的，系统会自动分配对应的字节数，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = <span class="string">&quot;ABCD&quot;</span>;<span class="keyword">sizeof</span>(c);<span class="comment">//sizeof的结果就是5，它刚好同来存放ABCDstrlen(c);//长度是4，不包括null</span></span><br></pre></td></tr></table></figure><p>如果我们这么声明，代码如下，这时我们需要显式的声明它的结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = &#123;<span class="string">&#x27;A&#x27;</span>，<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>引入指针</strong></p><p>声明一个字符数组和一个字符指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1[<span class="number">5</span>] = <span class="string">&quot;hello&quot;</span>;<span class="keyword">char</span>* c2;</span><br></pre></td></tr></table></figure><p>我们使用这个数组的名字和这个字符指针的名字放到等式中是成立的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是，将换个位置，    c1 = c2;是非法的</span><br></pre></td></tr></table></figure><p>c2中存的就是字符数组c1中首元素的地址(同上面的整型数组)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2 =c1;</span><br></pre></td></tr></table></figure><p>解引用操作同上面的数组。</p><p><strong>代码示例：打印数组中的所有元素。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void print(char* c)&#123;int  i = 0;//*(c+i)同理while (c[i] != &#x27;\0&#x27;)&#123;printf(&quot;%c&quot;, c[i]);i++;&#125;&#125;int main(void)&#123;char c[20] = &quot;ABCDEF&quot;;print(c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>* c)</span></span>&#123;<span class="keyword">while</span> (*c!= <span class="string">&#x27;\0&#x27;</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *c);c++;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：此时的字符数组就是一个指针，存的就是元素的地址，从首元素开始只要不是null就进入循环，然后元素地址进行自增，因为是字符型指针，所以步长就是1，遍历每个元素，直到null。</p><h2 id="指针和二维数组"><a href="#指针和二维数组" class="headerlink" title="指针和二维数组"></a>指针和二维数组</h2><p>简单复习一下什么是多维数组。</p><p><strong>就是在数组中储存数组。</strong></p><p>学习此部分之前，可以再复习一下上面指针和一维数组。</p><p><strong>个人理解</strong>：<strong>当多维数组名被当做指针的时候，多维数组就是指向指针的指针。</strong></p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int B[2][3] = &#123; &#123;1,2,3&#125;,&#123;4,5,6,&#125; &#125;;int(*p)[3] = B;//打印首元素地址B[0][0]printf(&quot;%d\n&quot;, &amp;B[0][0]);printf(&quot;%d\n&quot;,B );printf(&quot;%d\n&quot;,p );printf(&quot;%d\n&quot;,*B );printf(&quot;%d\n&quot;,*p);return  0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>为什么我这么说呢？</strong></p><p><strong>对比理解</strong></p><p> 就是，一个二级指针，存的是一个一级指针的地址（首元素地址），然后再对该一级指针的地址进行解引用，得到该一级指针所存地址的值。</p><p><strong>例如：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**B);<span class="comment">//当数组名被作为指针的时候，B和*B意思一样。</span></span><br></pre></td></tr></table></figure><p>当二维数组的数组B被当成指针的时候，他里面存的是B [0] [0]的地址，再对他进行解引用得到的是对应的值，1。</p><p>（<strong>（同上）</strong>因为直接使用数组名会返回该数组的首元素的指针，是二维数组中的第一个一维数组的首元素地址，然后对这个首元素进行解引用操作，得到的是第一个元素的值。）</p><p><strong>不同点：</strong></p><p>B返回一个指向一个一维数组的指针，而*B返回一个指向整型的指针，当我们只是打印地址的时候，一维数组B[0]和B[0]的首元素的起始地址是一样的，所以打印的地址是相同的，指针类型会在你尝试解引用时或者尝试做指针算术的时候起作用。</p><hr><p>B [I] [J]可以写成 *（B[i]+j）  或者 *( *(B +i)+j )。—就是把B[i]写成 *(B+i)</p><p><strong>解释：</strong>直接用 数组名返回一个指向首元素的指针，（该二维数组中对应的哪个一维数组）,然后+j是对应一位数组中的，跳过的元素个数，也就是往后跳过几个字节，得到新的元素地址，最后，解引用得到该元素的值。</p><h2 id="指针和多维数组"><a href="#指针和多维数组" class="headerlink" title="指针和多维数组"></a>指针和多维数组</h2><p>（如何理解多维数组，最左边的维数就是一共划分了几块，第二位就是在每一块中继续分为几块，依次类推。）</p><p>（定义多维数组的指针的时候，后面的参数是该数组除去一个参数的几个参数）</p><p>多维数组-例如：三维数组就是二维数组的数组。     </p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int C[3][2][2] = &#123; &#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;,&#123;&#123;5,6&#125;,&#123;7,8&#125;&#125;,&#123;&#123;9,10&#125;,&#123;10,11&#125;&#125; &#125;;int (*p)[2][2] = C;//首元素地址printf(&quot;%d\n&quot;, &amp;C[0][0][0]);printf(&quot;%d\n&quot;,p);printf(&quot;%d\n&quot;, *p);printf(&quot;%d\n&quot;, C[0]);//打印首元素printf(&quot;%d\n&quot;, C[0][0][0]);printf(&quot;%d\n&quot;, ***p);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>同上面指针和二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C[i][j][k] = *(C[i][j]+k) = *(*(C[i][j]+k))</span><br></pre></td></tr></table></figure><p>如果你已经理解了，请问下面这个结果是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(C[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>));<span class="comment">//结果是4，上面示例中的代码。</span></span><br></pre></td></tr></table></figure><h2 id="多维数组作为参数传给函数"><a href="#多维数组作为参数传给函数" class="headerlink" title="多维数组作为参数传给函数"></a><strong>多维数组作为参数传给函数</strong></h2><p> （是几维数组,使用数组名作为指针就返回几维度-1的指针）</p><p>（例如：一维数组返回指向整型的指针，二维数组返回指向一维数组的指针，三维数组返回指二维数组的指针……）</p><p>多维数组作为函数参数的时候，数组的第一个维度可以省略，但是其余的维度需要指定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Func (int (*C)[2][2])&#123;&#125;int main(void)&#123;int C[3][2][2] = &#123;&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;,&#123;&#123;5,6&#125;,&#123;7,8&#125;&#125;,&#123;&#123;9,10&#125;,&#123;10,11&#125;&#125; &#125;;Func(C);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h1 id="指针和动态内存"><a href="#指针和动态内存" class="headerlink" title="指针和动态内存"></a>指针和动态内存</h1><hr><p>内存是机器中很关键的资源。</p><p>也可以看看我的这篇笔记——<a href="http://doraemon2.xyz/2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/">C语言动态内存开辟 | 半生瓜のblog (doraemon2.xyz)</a></p><hr><p><strong>相关函数：</strong></p><p>堆上分配内存的相关函数malloc calloc realloc</p><p>释放内存free</p><hr><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a><strong>malloc</strong></h2><p><strong>malloc</strong>返回一个void指针，这个指针指向了分配给我们的内存块的第一个字节的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>*p = <span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>我们不能解引用一个void指针，通常需要将它<strong>转化为一个特定类型的指针</strong>，然后再使用它。</p><p>因为malloc只是个通用的函数，在堆上分配一些内存，它并不关心你用这块内存存什么，它只是简单返回指向开辟出来的内存起始地址的指针。</p><p>为了使用这块内存我们需要进行<strong>指针类型转换</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>动态内存的操作都是基于指针的，你拥有一个基地址指针。</p><hr><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a><strong>calloc</strong></h2><p><strong>calloc</strong> 和malloc类似，callo也是返回一个void型指针， 但是calloc接收两个参数，第一个参数是特定的元素数量，第二个参数是类型的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p = (<span class="keyword">int</span> *)<span class="built_in">calloc</span>(<span class="number">3</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span><br></pre></td></tr></table></figure><p>还有一个区别是，calloc在分配完内存之后会对其进行初始化，而malloc不会。</p><h2 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a><strong>realloc</strong></h2><p>如果你有一块内存，动态分配的内存，你想修改内存块的大小，那你就可以使用realloc，realloc接收两个参数，第一个参数是指向已分配内存的起始地址的指针，第二个参数是新的内存块的大小。</p><p><strong>如果去掉第一个参数，那么他和malloc是一样的效果</strong></p><p>这时会创建一个空的内存块，而不会从之前的内存块拷贝任何数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(<span class="literal">NULL</span>,n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); </span><br></pre></td></tr></table></figure><p> <strong>第二个参数是0,那么他和free是一样的效果</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(A,<span class="number">0</span>);<span class="comment">//将A释放 = free(A)</span></span><br></pre></td></tr></table></figure><p>reallo可能会有多种场景</p><ul><li>比如我们想要的新内存块可能比原来的内存要大，这种情况下机器可能会创建一块新的内存然后把原来的值拷贝过去，然后释放之前的内存，如果之前的那块内存的相邻处，还有还有连续的内存可用，那么可能会直接扩展之前的那块内存。</li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>free()将开辟出来的内存空间释放。</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h2><p>数组的个数不能是个变量，这时候我们就能用到动态内存开辟</p><p><strong>创建一个大小为n的数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main(void)&#123;int n = 0;scanf(&quot;%d&quot;, &amp;n);int* p = (int*)malloc(n * sizeof(int));    //int* p = (int *)calloc(n,sizeof(int));    //修改开辟内存大小    int* p1 = realloc(p,2*n*sizeof(int));return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>这种情况是由于不正确的使用动态内存引起的。</p><p><strong>内存泄漏就是在堆上增长垃圾。</strong></p><p>不正确的动态内存(堆)的使用引起。由于程序中已动态分配的没有释放，造成的系统内存浪费，导致系统运行减慢或者崩溃。——百度百科。</p><h1 id="函数返回指针"><a href="#函数返回指针" class="headerlink" title="函数返回指针"></a>函数返回指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int* Add(int* a,int* b)&#123;int c = *a + *b;return &amp;c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);    printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>加入一个简单的函数并且调用之后，我们发现程序运行错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Print()&#123;printf(&quot;Hello world\n&quot;);&#125;int* Add(int* a,int* b)&#123;int c = *a + *b;return &amp;c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);Print();printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210515211156453.png" alt="image-20210515211156453"></p><p><strong>这是为什么呢？</strong></p><p>栈，先进后出，先进的被压倒栈底， 当Add函数调用完成，返回一个指向结果的指针（地址），然后内存被释放，所指向的地址对应的值就是个垃圾值，尽管他指向这个地址，但是他的值是不能被保证的，因为内存被释放了，为后面的函数分配空间。</p><p>之后为Print函数分配栈空间，覆盖之前的空间。</p><hr><p>如果我们尝试将返回一个被调函数的局部变量给主函数，就像我们要返回一个Add函数的局部变量给main函数，当被调函数结束控制返回给主函数的时候，那块内存已经释放了，因此从栈顶向上传参数是可以的。</p><p>但是，</p><p>从栈顶向下传一个局部变量或者一个局部变量的地址是不可以的，</p><p>那么，什么情况下我们想要从函数返回一个指针呢？</p><p>如果我们在堆上有一个内存地址或者，在全局区有一个变量，那么我们就可以安全地返回他们的地址，因为堆上分配内存需要显示释放，由我们来控制他的释放。</p><hr><p>修改后的代码</p><p>malloc是在堆上开辟的空间不会被显式的释放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void Print()&#123;printf(&quot;Hello world\n&quot;);&#125;int* Add(int* a,int* b)&#123;int* c = (int*)malloc(sizeof(int));*c = *a + *b;return c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);Print();printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>因此，从函数返回指针的时候，我们需要小心它的作用范围，我们必须保证地址没有被重用（用来存储其他东西），以及那个地址的数据没有被清除。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>用来存储函数的地址</p><p>它指向或引用内存中的数据，这里的数据未必一定指变量，也可以是常量。</p><p>可以使用这样的指针来解引用和执行函数。</p><p>当我们说函数指针存放函数地址的时候， 我们是在说函数指针存放了函数在内存中的起始地址或者入口点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int Add(int a, int b)&#123;return a + b;&#125;int main(void)&#123;int c = 0;    //函数返回类型 参数类型 参数类型int (*p)(int, int);p = &amp;Add;//不使用&amp;也可以，只使用函数名会返回函数的地址    //p = Add;    //p(2,3)c = (*p)(2, 3);printf(&quot;%d\n&quot;, c);return 0;&#125;  </span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Print()&#123;printf(&quot;Hello&quot;);&#125;int main(void)&#123;void (*p)();p = Print;p();return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>函数指针可以被用来作为函数参数，接收函数指针的这个函数，可以回调函数指针所指向的那个函数，</p><p><strong>就是一个函数作为参数传递给另外一个函数。</strong></p><p>格式-返回类型(*函数名)(参数类型，参数类型，……)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int compare(int a, int b)&#123;if (a &gt; b)return 1;elsereturn -1;&#125;void maopaoSort(int *a,int n,int(*compare)(int,int))&#123;int temp = 0;for (int i = 0; i &lt; n; i++)&#123;for (int j = 0; j &lt; n - 1; j++)&#123;if (compare(a[j] ,a[j+1])&gt;0)&#123;temp = a[j];a[j] = a[j + 1];a[j + 1] = temp;&#125;&#125;&#125;&#125;int main(void)&#123;int a[5] = &#123; 2,5,4,8,9 &#125;;maopaoSort(a, 5,compare);for (int i = 0; i &lt; 5; i++)&#123;printf(&quot;%d &quot;, a[i]);&#125;return  0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>可以根据情况的不同写不同的回调函数</p><p>例如：比较绝对值后的大小，升序排列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">absSort</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">if</span> (<span class="built_in">abs</span>(a) &gt; <span class="built_in">abs</span>(b))<span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">else</span><span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br></pre></td></tr></table></figure><p>调用库函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int compare(const void*a,const void* b)&#123;int A = *((int*)a);int B = *((int*)b);return A - B;//值越大排名越高&#125;int main(void)&#123;int a[5] = &#123; 5,-6,-2,3,7 &#125;;qsort(a,5,sizeof(int),compare);for (int i = 0; i &lt; 5; i++)&#123;printf(&quot;%d &quot;,a[i]);&#125;return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210516122128095.png" alt="image-20210516122128095"></p><p>qsort能对任何数组进行排序，不仅仅是整形数组。只是你需要给出比较逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识EasyX图形编程</title>
      <link href="2021/05/09/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/"/>
      <url>2021/05/09/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV11p4y1i74A?p=1">【C/C++/EasyX】学编程，做游戏，小白快速入门图形编程，零基础入门到精通，学习就是这么快乐_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-基本说明"><a href="#1-基本说明" class="headerlink" title="1.基本说明"></a>1.基本说明</h1><ul><li>EasyX是针对C++的图形库，可以帮助C/C++初学者快速上手图形和游戏编程。</li><li>比如 ,可以基于EasyX图形库很快用几何图形画一个房子，或者一辆移动的小车，可以编写俄罗斯方块 、贪吃蛇、黑白棋等小游戏。</li><li>许多人学编程是从C语言入门的，而目前的现状是“<ul><li>学校值只教基础语法，一直在黑窗口练习，同学们学的很乏味。、</li><li>即使有的学校教图形编程，也是使用一些难度较高的， 比如Win32,OpenlGl门槛依然很高，初学者容易收到打击。</li><li>开始引出我们的EasyX。</li></ul></li></ul><h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h1><p>​        基于Windows图形编程，将Windows下的复杂程序过程进行封装,将Windows下的编程过程隐藏，给用户提供一个简单熟悉的接口。用户对于图形库中函数的调用，最终都会由Windows的底层API实现。</p><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h1><ul><li>Easyx图形库支持Vs各种版本，下载解压后，直接执行安装程序即可。</li><li>头文件graphics.h</li><li>帮助文档<a href="https://docs.easyx.cn/zh-cn/intro">EasyX 文档 - 基本说明</a></li><li>下载<a href="https://easyx.cn/">EasyX Graphics Library for C++</a></li></ul><h1 id="4-颜色"><a href="#4-颜色" class="headerlink" title="4.颜色"></a>4.颜色</h1><p>​    用RGB宏合成颜色，实际上合成出来的颜色是一个十六进制的的整数。</p><p>​    <strong>每个颜色部分的值都是0~255</strong></p><h1 id="5-坐标和设备"><a href="#5-坐标和设备" class="headerlink" title="5.坐标和设备"></a>5.坐标和设备</h1><ul><li>坐标默认的原点在窗口的左上角，X轴向右为正，Y 轴向下为正，度量单位是像素点。</li><li>设备：简单来说，就是绘图表面。<ul><li>在EasyX中,设备分两种，一种是默认的绘图窗口另一种是IMAGE对象。通过SetWorkinglmage()函数可以设置当前用于绘图的设备。设置当前用于绘图的设备后,所有的绘图函数都会绘制在该设备上。(后面再去理解)</li></ul></li></ul><h1 id="6-窗口函数"><a href="#6-窗口函数" class="headerlink" title="6.窗口函数"></a>6.窗口函数</h1><p>​    窗口函数用于窗口的一些操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="keyword">int</span> width,<span class="keyword">int</span> height,<span class="keyword">int</span> flag = <span class="literal">NULL</span>);<span class="comment">//用于初始化绘图窗口</span></span><br><span class="line"><span class="comment">//width 指定窗口的宽度</span></span><br><span class="line"><span class="comment">//height 指定窗口的高度</span></span><br><span class="line"><span class="comment">//flag 窗口的样式默认为NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">closegraph();<span class="comment">//关闭绘图窗口</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br></pre></td></tr></table></figure><h1 id="7-图形绘制函数"><a href="#7-图形绘制函数" class="headerlink" title="7.图形绘制函数"></a>7.图形绘制函数</h1><ul><li><p>图形绘制函数用于在窗口上绘制各种图形。</p></li><li><p>绘图函数从填充样式分类可以分为无填充，有边框填充，无边框三种。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以画圆为例</span><br><span class="line">    circle()无填充</span><br><span class="line">    fillcircle()有边框填充</span><br><span class="line">    solidcircle()无边框填充</span><br></pre></td></tr></table></figure><p>区别：</p><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202623558.png" alt="image-20210508202623558"></p><ul><li>从形状来分，常用的可以分为八种。</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508201228945.png" alt="image-20210508201228945"></p><ul><li>设置填充颜色setfillcolor()；</li><li>设置线条颜色setlinecolor();</li><li>设置线条样式setlinestyle();高，宽，字体</li></ul><h1 id="8-文字绘制函数"><a href="#8-文字绘制函数" class="headerlink" title="8.文字绘制函数"></a>8.文字绘制函数</h1><ul><li>文字绘制函数用于在窗口上绘制文字</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202106822.png" alt="image-20210508202106822"></p><h1 id="9-图像处理函数"><a href="#9-图像处理函数" class="headerlink" title="9.图像处理函数"></a>9.图像处理函数</h1><ul><li>图像处理函数用于在窗口上显示图片</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202202224.png" alt="image-20210508202202224"></p><h1 id="10-鼠标消息函数"><a href="#10-鼠标消息函数" class="headerlink" title="10.鼠标消息函数"></a>10.鼠标消息函数</h1><ul><li>鼠标消息函数用于获取鼠标的信息</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509115406258.png" alt="image-20210509115406258"></p><h1 id="11-键盘消息函数"><a href="#11-键盘消息函数" class="headerlink" title="11.键盘消息函数"></a>11.键盘消息函数</h1><ul><li>键盘消息函数用于获取键盘按键消息</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509121713266.png" alt="image-20210509121713266"></p><h1 id="12-其他函数"><a href="#12-其他函数" class="headerlink" title="12.其他函数"></a>12.其他函数</h1><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509122340561.png" alt="image-20210509122340561"></p><h1 id="13-音乐播放"><a href="#13-音乐播放" class="headerlink" title="13.音乐播放"></a>13.音乐播放</h1><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509123501332.png" alt="image-20210509123501332"></p><h1 id="易错集锦"><a href="#易错集锦" class="headerlink" title="易错集锦"></a>易错集锦</h1><ol><li><p>源文件问题： fata1 error c1189: #error : EasyXis only for C++。</p><p><strong>后缀要是cpp</strong></p></li><li><p>参数错误，找不到对应的函数：error C2665： “outtextxy”:2个重载中没有一个可以转换所有参数类型。</p><p>是由于字符集导致的，1.在字符串前面加上大写的L，2.用TEXT(_T())把字符串包起起来。</p><p>不需要添加任何代码，项目-属性-常规-字符集-使用多字节字符集</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 图形编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -EasyX </tag>
            
            <tag> -图形编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ轰炸器</title>
      <link href="2021/05/08/QQ%E8%BD%B0%E7%82%B8%E5%99%A8/"/>
      <url>2021/05/08/QQ%E8%BD%B0%E7%82%B8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1Vf4y1W7aj?t=3">【C/C++技术教程】QQ轰炸机（两种版本）！程序员带你实现腾讯QQ消息轰炸，瞬间99+让对面防不胜防！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>注意：群体轰炸，当轰完(群发)完你所选中的分组后，它会继续往下进行，对下一个分组进行发送,连QQ的各种服务号都算上。</strong></p><hr><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;//使用windows的资源</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.单独轰炸\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.群体轰炸\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.退出\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要轰炸的对象-&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要轰炸的次数-&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;times);</span><br><span class="line"><span class="comment">//HWND-窗口句柄</span></span><br><span class="line"><span class="comment">//窗口的id-编号 每一个窗口对应一个编号</span></span><br><span class="line">HWND qqhwnd;<span class="comment">//定义一个变量存储一个窗口的id</span></span><br><span class="line">qqhwnd = FindWindowA(<span class="literal">NULL</span>,name);<span class="comment">//两个信息，一个类名称，一个标题</span></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="comment">//向某一个窗口发送消息 鼠标-键盘-消息</span></span><br><span class="line"><span class="comment">//将要发送的消息复制到全局剪贴板</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line">&#123;</span><br><span class="line">SendMessageA(qqhwnd, WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">SendMessageA(qqhwnd, WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在吗？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//群体轰炸</span></span><br><span class="line">HWND qqhwnd;</span><br><span class="line"><span class="comment">//得到QQ主界面的窗口ID</span></span><br><span class="line">qqhwnd = FindWindowA(<span class="literal">NULL</span>, <span class="string">&quot;QQ&quot;</span>);</span><br><span class="line">MoveWindow(qqhwnd, <span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//1.选中主界面</span></span><br><span class="line"><span class="comment">//2.TAB TAB</span></span><br><span class="line"><span class="comment">//3.不断的按回车和下-打开一个对话框</span></span><br><span class="line"><span class="comment">//4.粘贴</span></span><br><span class="line"><span class="comment">//5.发送</span></span><br><span class="line"><span class="comment">//5.关闭对话框</span></span><br><span class="line"></span><br><span class="line">SetForegroundWindow(qqhwnd);<span class="comment">//设置某一个窗口为最前-就是选中主界面</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//按下TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//慢一点</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);<span class="comment">//弹起TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//按下TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//慢一点</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);<span class="comment">//弹起TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不断的按回车和下 打开对话框</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//回车</span></span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//下键</span></span><br><span class="line">keybd_event(VK_DOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_DOWN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qqhwnd != GetForegroundWindow())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//粘贴</span></span><br><span class="line">keybd_event(VK_CONTROL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(<span class="string">&#x27;V&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">keybd_event(<span class="string">&#x27;V&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_CONTROL, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭对话框</span></span><br><span class="line">keybd_event(VK_ESCAPE,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_ESCAPE,<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现图书管理系统</title>
      <link href="2021/05/07/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/05/07/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1E64y1171r">C语言课程设计实战：图书管理系统！计算机专业同学的一大难题，今天用代码实战演示，手把手带你完成！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>在开始之前我们要解决三个问题。</p><ol><li><p>指针如何变成变量</p><ol><li><p>用变量的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">p = &amp;a;</span><br><span class="line">*p = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure></li><li><p>动态内存申请</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(sizeiof(<span class="keyword">int</span>));</span><br><span class="line">*p = <span class="number">10033</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>什么是结构体？</p><p>就是一种类型，将几段内存组合成一段内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> A;</span><br><span class="line">    <span class="keyword">float</span> B;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何访问？</p><ol><li><p>变量——.成员， </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">C</span>;</span></span><br><span class="line">C.A = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure></li><li><p>指针——-&gt;，指针指向运算符,C-&gt;A</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">sb</span> =</span> &amp;C;</span><br><span class="line">sb-&gt;A = <span class="number">1002</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>什么是链表？</p></li></ol><p>多个结构体变量链接在一起的线性结构。就是一个变量。</p><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h1><p><strong>缺陷：</strong></p><p><strong>不包括用户信息</strong></p><p><strong>借出和归还没有放到文件操作里面</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书管理系统 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//3.数据的设计</span></span><br><span class="line"><span class="comment">// 3.1程序用什么东西处理数据  -数组 -链表 ——无非就是去考虑用什么容器来装数据</span></span><br><span class="line"><span class="comment">// 3.2数据的结构 --- 图书的信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//书名</span></span><br><span class="line"><span class="keyword">float</span> price;<span class="comment">//价格</span></span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//数量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//链表的第一个结点不存放数据，叫做有表头链表。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">list</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//创建表头 表头就是一个结构体变量</span></span><br><span class="line"><span class="function">struct Node* <span class="title">creatHead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//动态内存申请</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">headNode</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="comment">//变量的基本规则——使用前必须初始化</span></span><br><span class="line">headNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建结点——为插入做准备</span></span><br><span class="line"><span class="comment">//把用户的数据编程结构体变量</span></span><br><span class="line"><span class="function">struct Node* <span class="title">creatNode</span><span class="params">(struct bookInfo data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//插入-只需要一种插入方法-表头法插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNodeByHead</span><span class="params">(struct Node* headNode,struct bookInfo data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> creatNode(data);</span><br><span class="line"><span class="comment">//必须先链接后断开</span></span><br><span class="line">newNode-&gt;next = headNode-&gt;next;</span><br><span class="line">headNode-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="comment">//void insertNodeByTail(struct Node* headNode, int data)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//struct Node* pMove = headNode;</span></span><br><span class="line"><span class="comment">//while (pMove-&gt;next != NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//pMove = pMove-&gt;next;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//struct Node* newNode = creatNode(data);</span></span><br><span class="line"><span class="comment">//pMove-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//指定位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNodeByName</span><span class="params">(struct Node* headNode, <span class="keyword">char</span>* bookName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posLeftNode</span> =</span> headNode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posNode</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="comment">//书籍名字是字符串，所以要采用字符串比较函数来处理。</span></span><br><span class="line"><span class="keyword">while</span> (posNode != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(posNode-&gt;data.name,bookName))</span><br><span class="line">&#123;</span><br><span class="line">posLeftNode = posNode;</span><br><span class="line">posNode = posLeftNode-&gt;next;</span><br><span class="line">posNode = posLeftNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//讨论查找的结果</span></span><br><span class="line"><span class="keyword">if</span> (posNode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;delete successful\n&quot;</span>);</span><br><span class="line">posLeftNode-&gt;next = posNode-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(posNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct Node* <span class="title">searchByName</span><span class="params">(struct Node* headNode, <span class="keyword">char</span>* bookName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posNode</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (posNode != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(posNode-&gt;data.name,bookName))</span><br><span class="line">&#123;</span><br><span class="line">posNode = posNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> posNode; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个指针，从第二个开始打印</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pMove</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名\t价格\t数量\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (pMove != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印数据——剥洋葱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>, pMove-&gt;data.name,pMove-&gt;data.price,pMove-&gt;data.num);</span><br><span class="line">pMove = pMove-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.写界面---菜单---模块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-Libraty manangement system-\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————0.exit———————-\n&quot;</span>);<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————1.resiger——————\n&quot;</span>);<span class="comment">//登记</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————2.browse————-----\n&quot;</span>);<span class="comment">//浏览</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————3.borrow————-----\n&quot;</span>);<span class="comment">//借</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————4.back————-------\n&quot;</span>);<span class="comment">//还</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————5.sort————-------\n&quot;</span>);<span class="comment">//排序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————6.delete————-----\n&quot;</span>);<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————7.seek————-------\n&quot;</span>);<span class="comment">//查找</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——please input 0 to 7------\n&quot;</span>);<span class="comment">//提示</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接文件操作</span></span><br><span class="line"><span class="comment">//所有的文件都在这个容器里面，做文件操作就是对这个List进行文件操作</span></span><br><span class="line"><span class="comment">//运行的时候把文件的信息读到List里面</span></span><br><span class="line"><span class="comment">//结束的时候把List里面的信息同步到文件里面</span></span><br><span class="line"><span class="comment">//文件存（写）操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveInfoToFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName, struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(fileName, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pMove</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pMove != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>,pMove-&gt;data.name,pMove-&gt;data.price,pMove-&gt;data.num);</span><br><span class="line">pMove = pMove-&gt;next; </span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件读操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readInfoFromFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName, struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(fileName, <span class="string">&quot;r&quot;</span>);<span class="comment">//第一次打开文件肯定是不存在的</span></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不存在就把文件创建出来</span></span><br><span class="line"><span class="comment">//如果第一次打开文件是空的，用w+方式打开文件，可读可写。</span></span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempData</span>;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%f\t%d\n&quot;</span>, tempData.name, &amp;tempData.price, &amp;tempData.num) != EOF);</span><br><span class="line">&#123;</span><br><span class="line">insertNodeByHead(<span class="built_in">list</span>, tempData);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法是一种思想</span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortList</span><span class="params">(struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (struct Node* p = headNode-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (struct Node* q = headNode-&gt;next; q-&gt;next != <span class="literal">NULL</span>; q = q-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data.price &gt; q-&gt;next-&gt;data.price)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//交换值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempData</span> =</span> q-&gt;data;</span><br><span class="line">q-&gt;data = q-&gt;next-&gt;data; </span><br><span class="line">q-&gt;next-&gt;data = tempData; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printList(headNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.交互-按键处理-跳转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> userKey = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempbook</span>;</span><span class="comment">//产生一个临时的变量存储书籍信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">result</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;userKey);</span><br><span class="line"><span class="keyword">switch</span>(userKey)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【exit】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;successful\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//关闭整个程序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【resiger】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input your book&#x27;s information(name,price,num):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%f%d&quot;</span>,tempbook.name, &amp;tempbook.price, &amp;tempbook.num);</span><br><span class="line"><span class="comment">//第一个temobook.name是字符串 不用取地址</span></span><br><span class="line">insertNodeByHead(<span class="built_in">list</span>, tempbook);</span><br><span class="line">saveInfoToFile(<span class="string">&quot;bookinfo.txt&quot;</span>,<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【browse】\n&quot;</span>);</span><br><span class="line">printList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【borrow】\n&quot;</span>);</span><br><span class="line"><span class="comment">//书籍存在可以借阅，存在书的数量-1，不存在借阅失败</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>,tempbook.name);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;without the book\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result-&gt;data.num &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">result-&gt;data.num--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;borrow successful\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the book it&#x27;s not here\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【back】\n&quot;</span>);</span><br><span class="line"><span class="comment">//把当前书籍的数量+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;illegal book\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result-&gt;data.num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【sort】\n&quot;</span>);</span><br><span class="line">bubbleSortList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【delete】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">deleteNodeByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line">saveInfoToFile(<span class="string">&quot;bookinfo.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【seek】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t find\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;name\tprice\tnum\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>, result-&gt;data.name, result-&gt;data.price, result-&gt;data.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【error】\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>  = creatHead();</span><br><span class="line">readInfoFromFile(<span class="string">&quot;bookinfo.txt&quot;</span>,<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line">keyDown();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//防闪退</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清除</span></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言编写Web服务器</title>
      <link href="2021/05/06/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/05/06/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1uA411u7kD">C/C++技术教学：web 网络服务器开发！纯C语言手写web服务器，仅需 80 行代码，制作出你的专属服务器_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><ol><li><p>什么是端口？</p><p>物理端口：电脑网口、USB、看的见的接口。</p><p>虚拟端口：程序和网络进行通信的端口。</p><p>端口就好比一个房子的门，是初入这个房子的必经之路。</p></li><li><p>端口号</p><p>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535。</p><p>（为什么最大是65535？）</p></li><li><p>端口号怎么分配的</p><p>端口号不是随意使用的，而是按照一定的规定进行分配。</p></li><li><p>知名端口</p><p>知名端口是众所周知的端口号，范围从0到1023，</p><p> 80端口分配给HTTP服务，</p><p>21端口分配给FTP服务。</p></li><li><p>动态端口</p><p>动态端口的范围是从1024到65535，由操作系统进行分配。    </p><p>之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。</p><p>动态分配是指当一个系统进程或应用程序进程需要网络通信时，</p><p>它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。</p><p>当这个进程关闭时，同时也就释放啦它所占用的端口号。</p></li></ol><h1 id="Tcp服务器"><a href="#Tcp服务器" class="headerlink" title="Tcp服务器"></a>Tcp服务器</h1><p>如同接电话的过程一样，在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：</p><ol><li>socket创建一个套接字</li><li>bind绑定ip和port</li><li>listen使套接字变为可以被动链接</li><li>accept等待客户端的链接</li><li>recv/send接收发送数据</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web Server</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;//包含网络编程的头文件，引入静态库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">bool</span> isok;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merror</span><span class="params">(<span class="keyword">int</span> redata,<span class="keyword">int</span> error,<span class="keyword">char</span>* showinfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (redata == error)</span><br><span class="line">&#123;</span><br><span class="line">perror(showinfo);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(SOCKET s, <span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;weclome to my WebServer\n&quot;</span>);</span><br><span class="line">WSADATA wsdata;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>),&amp;wsdata);<span class="comment">//确定socket版本信息</span></span><br><span class="line"><span class="comment">//short两个字节2.2</span></span><br><span class="line">merror(isok,WSAEINVAL,<span class="string">&quot;申请socket失败&quot;</span>);</span><br><span class="line"><span class="comment">//第一个参数-协议族，决定socket的地址类型</span></span><br><span class="line"><span class="comment">//第二个参数-传输类型,SOCK_STREAM流传输</span></span><br><span class="line"><span class="comment">//第三个参数-指定的传输协议，tcp</span></span><br><span class="line">SOCKET server = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);<span class="comment">//使用af-inet,ipv4地址</span></span><br><span class="line">merror(server, INVALID_SOCKET, <span class="string">&quot;创建socker失败&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">seraddr.sin_family = AF_INET;<span class="comment">//和创建的时候一样，使用了Ipv4</span></span><br><span class="line">seraddr.sin_port = htons(<span class="number">80</span>);<span class="comment">//注意网络中的数据和电脑上的数据存储是有区别的，网络是大端存储，pc是小端存储</span></span><br><span class="line">seraddr.sin_addr.s_addr = INADDR_ANY;<span class="comment">//监听任意的地址</span></span><br><span class="line">isok  = bind(server,&amp;seraddr,<span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">merror(isok, SOCKET_ERROR, <span class="string">&quot;绑定失败...\n&quot;</span>);</span><br><span class="line">isok = listen(server, <span class="number">5</span>);</span><br><span class="line">merror(isok, SOCKET_ERROR, <span class="string">&quot;监听失败...\n&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">claddr</span>;</span></span><br><span class="line"><span class="keyword">int</span> cllen = <span class="keyword">sizeof</span>(claddr);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SOCKET client = accept(server, &amp;claddr, &amp;cllen);<span class="comment">//谁连进来了，发了多少数据</span></span><br><span class="line">merror(client, INVALID_SOCKET, <span class="string">&quot;连接失败...\n&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> revdata[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">recv(client,revdata,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s 共接收到%d字节数据\n&quot;</span>, revdata,<span class="built_in">strlen</span>(revdata));</span><br><span class="line"><span class="comment">//如果下面这两行显示文字，测试发送成功。</span></span><br><span class="line"><span class="keyword">char</span> sendata[<span class="number">1024</span>] = <span class="string">&quot;&lt;h1 style =\&quot; color:pink;\&quot;&gt;hello,i&#x27;m sb&lt;/h1&gt;&quot;</span>;</span><br><span class="line">send(client,sendata,<span class="built_in">strlen</span>(sendata),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* filename = <span class="string">&quot;/&quot;</span>;<span class="comment">//填入文件名称xxx.html</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(client, filenama)</span></span>;</span><br><span class="line">closesocket(client);</span><br><span class="line">&#125;</span><br><span class="line">closesocket(server);</span><br><span class="line">WSACleanup();</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打开文件-网页</span></span><br><span class="line"><span class="comment">//将文件放入项目文件夹下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(SOCKET s, <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pfile = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfile == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(temp, <span class="number">1024</span>, pfile);</span><br><span class="line">send(s, temp, <span class="built_in">strlen</span>(temp), <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (!feof(pfile));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -网络编程 </tag>
            
            <tag> -服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识各种图</title>
      <link href="2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/"/>
      <url>2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=55">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><ul><li><p>图按照有无方向分为<strong>无向图</strong>和有向图。</p><ul><li>无向图由定点和边构成。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162522098.png" alt="image-20210506162522098"></p><ul><li>有向图由定点和弧构成，弧有弧尾和弧头之分。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162528354.png" alt="image-20210506162528354"></p></li><li><p>如果任意两个顶点之间都存在边叫做<strong>完全图</strong>。</p><ul><li>无向的叫做<strong>无向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162751354.png" alt="image-20210506162751354"></p><ul><li>有向的叫做<strong>有向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170101163.png" alt="image-20210506170101163"></p></li><li><p>图按照边或弧的多少分为<strong>稀疏图</strong>和稠密图。</p><ul><li>都是相对而言的多少。</li></ul></li><li><p>若无重复的变到自身的边叫做<strong>简单图</strong>。</p><p><strong>反例</strong>：下面这两个图都不是简单图。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163031340.png" alt="image-20210506163031340"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163047070.png" alt="image-20210506163047070"></p></li><li><p>图和顶点之间有邻接点、依附的概念。</p></li><li><p>无向图顶点的边数叫做度，有向图顶点分入度和出度。</p><p>（入度：有几个箭头指向这个顶点，出度：指向几个顶点。）</p></li><li><p>图上的边或弧上带权则称为网。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163216486.png" alt="image-20210506163216486"></p><ul><li><p>图中顶点间存在路径，两顶点存在路径则说明是连通的。</p><ul><li>例如：由B到D在无向图上有四种不同的路径。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163830914.png" alt="image-20210506163830914"></p></li><li><p>在有向图上由B到D有两种路径。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164007180.png" alt="image-20210506164007180"></p><ul><li><p>如果路径最终回到起始点则称为环，当中不重复叫简单环。</p><ul><li>简单环</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164241631.png" alt="image-20210506164241631"></p><ul><li>不是简单环，顶点C重复了。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164329827.png" alt="image-20210506164329827"></p></li><li><p>若任意两顶点都是连通的，则图就是<strong>连通图</strong>。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164424476.png" alt="image-20210506164424476"></p><ul><li>不连通图</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164831080.png" alt="image-20210506164831080"></p><ul><li>有向则称为强连通图。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506165613351.png" alt="image-20210506165613351"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170130769.png" alt="image-20210506170130769"></p><p><strong>（结合上面的有向完全图，我们不难发现，有向完全图就是强连通图，因为它任意两个定点间都有是连通的，但是强连通图不一定是有完全向图，因为有向完全图需要任意两个顶点间有相反的两条路径。）</strong></p><ul><li><p>连通分量强调：</p><ul><li>要是子图；</li><li>子图是连通的；</li><li>连通子图含有极大顶点数；<strong>极大顶点数就是最大连通子图上的顶点数量。</strong></li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul></li><li><p>无向图中的极大连通子图称为连通分量，有向的则称为<strong>强连通分量</strong>。</p><ul><li>非连通图的连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506172939981.png" alt="image-20210506172939981"></p><p>​    它的连通分量</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173010623.png" alt="image-20210506173010623"></p><ul><li>有向但是非强连通图的(极大)强连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173231860.png" alt="image-20210506173231860"></p><p>它的强连通分量。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173330999.png" alt="image-20210506173330999"></p></li></ul></li><li><p><strong>连通生成树。</strong></p><ul><li>所谓的连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一个树的n-1条边。</li><li>无向图的连通生成树。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506180115966.png" alt="image-20210506180115966"></p><ul><li><p>有向图恰<strong>有一个顶点的入度为0，其余顶点的入度为1，</strong>则是一棵有向树。</p><p>例如下面这两棵有向树。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174842218.png" alt="image-20210506174842218"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174924663.png" alt="image-20210506174924663"></p></li><li><p>一个有向图由若干棵有向树构成生成<strong>森林</strong>。</p><ul><li>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧</li><li>例如：一下三张图，图1是一棵有向图。去掉一些弧之后，它可以分解为两课有向树，如图2和图3，这两棵就是图1有向图的生成森林。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181019760.png" alt="image-20210506181019760"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181102303.png" alt="image-20210506181102303"></p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181109968.png" alt="image-20210506181109968"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数据结构 </tag>
            
            <tag> -树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赫夫曼树及其应用</title>
      <link href="2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>前言:</p><p>最基本的压缩编码方法——赫夫曼(huffman)编码。</p><p>在了解赫夫曼编码之前，我们必须了解一下赫夫曼树，赫夫曼编码就是基于赫夫曼树实现的。</p><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=52">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><hr><h1 id="1-赫夫曼树的定义与原理"><a href="#1-赫夫曼树的定义与原理" class="headerlink" title="1.赫夫曼树的定义与原理"></a>1.赫夫曼树的定义与原理</h1><ul><li><p>结点的路径长度</p><ul><li>-从根节点到该结点的路径上的连接数。</li></ul></li><li><p>数的路径长度</p><ul><li>-树中每个叶子结点的路径长度之和。</li></ul></li><li><p>结点带权路径长度</p><ul><li>-结点的路径长度与结点权值的乘积。</li></ul></li><li><p>树的带权路径长度(WPL)</p><ul><li>-是树中所有叶子结点的带权路径长度之和。</li></ul></li><li><p>(数结点间的连线相关的数叫做权，Weight)</p></li></ul><hr><p><strong>其中：带权路径长度（WPL）最小的二叉树叫做赫夫曼树。</strong></p><p><strong>带权路径长度(WPL)的值越小，说明构造出来的二叉树性越优。</strong></p><hr><h1 id="2-构造赫夫曼树的过程"><a href="#2-构造赫夫曼树的过程" class="headerlink" title="2.构造赫夫曼树的过程"></a>2.构造赫夫曼树的过程</h1><p>初识森林</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204148343.png" alt="image-20210505204148343"></p><p>在森林中选出两棵根节点的权值最小的二叉树，小的放左边，大的放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204302270.png" alt="image-20210505204302270"></p><p>合并两颗选出的二叉树，增加一个新结点作为新二叉树的根，权值为左右孩子的权值之和。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204501617.png" alt="image-20210505204501617"></p><p>再从剩下的森林里面选出权值最小的二叉树，如果比第一次合并的结点权值小就放左边，反之，放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204621908.png" alt="image-20210505204621908"></p><p>再次进行合并。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204703975.png" alt="image-20210505204703975"></p><p>第二次合并完成，第三次合并同理。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204752864.png" alt="image-20210505204752864"></p><p>合并完成，这个二叉树就是赫夫曼树。</p><h1 id="3-赫夫曼编码原理"><a href="#3-赫夫曼编码原理" class="headerlink" title="3.赫夫曼编码原理"></a>3.赫夫曼编码原理</h1><hr><p>补充：</p><p>赫夫曼研究这种最优树的目的是为了解决当年远距通信(主要是电报)的数据传输的最优化问题。</p><hr><p><strong>名词解释：</strong></p><ul><li>定长编码<ul><li>-像ASCII编码，用八位二进制数来表示一个字符。</li></ul></li><li>变长编码<ul><li>-单个编码的长度不一致，可以根据整体频率来调节。</li></ul></li><li>前缀码<ul><li>-所谓的前缀码，就是没有任何码字是其他码字的前缀。</li></ul></li></ul><hr><p><strong>编码过程（encode）：</strong>还是利用上面的赫夫曼二叉树。</p><p>上图为构造赫夫曼树的过程权值显示。</p><p>下图为将权值左支改为0，右支改为1后的赫夫曼树。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210353927.png" alt="image-20210505210353927"></p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210746239.png" alt="image-20210505210746239"></p><p>我们对这4个字母(ABCD)用其从树根到叶子所经过路径0或1来进行编码。</p><p>例如原文字内容是ABCD。</p><p><strong>原编码二进制串：000001010011</strong>(共12个字符)</p><p><strong>新编码二进制串：010110111</strong>(共9 个字符)</p><p>也就是说我们的数据被压缩了，节约了25%的存储空间或者传输成本，随着字符的增加和字符权重的不同，这种压缩会更加显出其优势。</p><hr><p><strong>解码过程（decode）：</strong></p><p>发送方和接收方必须要约定好同样的赫夫曼编码规则，由约定好的赫夫曼树可以成功解码。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数据结构 </tag>
            
            <tag> -树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树理论基础</title>
      <link href="2021/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<hr><p>推荐视频——<a href="https://www.bilibili.com/video/BV1Hy4y1t7ij">关于二叉树，你该了解这些！| 二叉树理论基础一网打尽，二叉树的种类、二叉树的存储方式、二叉树节点定义、二叉树的遍历顺序_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>理论基础，这些都是我们平时刷题应该掌握的内容。</p><p>把基础打牢了，有了逻辑基础，学的才会更好一些。</p><hr><h1 id="1-二叉树的种类"><a href="#1-二叉树的种类" class="headerlink" title="1.二叉树的种类"></a>1.二叉树的种类</h1><h2 id="1-满二叉树"><a href="#1-满二叉树" class="headerlink" title="1.满二叉树:"></a>1.满二叉树:</h2><ul><li>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树叫做满二叉树。</li><li>结点数量2^k-1</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429175608363.png" alt="image-20210429175608363"></li></ul><h2 id="2-完全二叉树"><a href="#2-完全二叉树" class="headerlink" title="2.完全二叉树"></a>2.完全二叉树</h2><ul><li>除了底层以外，其它层都是满的，底层是从左到右连续的。</li><li>这个是二叉树</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429180224698.png" alt="image-20210429180224698"></li><li>这个就不是二叉树，底层不连续。</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429180259535.png" alt="image-20210429180259535"></li></ul><hr><p><strong>满二叉树一定是一棵完全二叉树，但完全而二叉树不一定是满的。</strong></p><hr><h2 id="3-二叉搜索树"><a href="#3-二叉搜索树" class="headerlink" title="3.二叉搜索树"></a>3.二叉搜索树</h2><ul><li><p>在它里面的结点顺序，左子树的所有结点都小于中间结点，右子树的所有结点都大于中间结点。</p></li><li><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429181442803-1619691288466.png" alt="image-20210429181442803"></p></li><li><p>二叉搜索树对结点的布局是没有要求的，元素有顺序就可以。</p></li><li><p>平衡二叉搜索树</p><ul><li>左子树和右子树的高度差不能超过1。</li></ul></li></ul><h1 id="2-二叉树的存储方式"><a href="#2-二叉树的存储方式" class="headerlink" title="2.二叉树的存储方式"></a>2.二叉树的存储方式</h1><h2 id="1-顺序存储"><a href="#1-顺序存储" class="headerlink" title="1.顺序存储"></a>1.顺序存储</h2><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429184344211.png" alt="image-20210429184344211"></p><p>用这个字符数组来保存二叉树。</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429184437352.png" alt="image-20210429184437352"></p><p>*<em>2</em>i+1——左孩子，2 <em>i+2——右孩子。</em>*</p><h2 id="2-链式存储"><a href="#2-链式存储" class="headerlink" title="2.链式存储"></a>2.链式存储</h2><p>一般用的都是链式存储。</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429185353229.png" alt="image-20210429185353229"></p><h1 id="3-二叉树的遍历"><a href="#3-二叉树的遍历" class="headerlink" title="3.二叉树的遍历"></a>3.二叉树的遍历</h1><hr><p><strong>扩展：</strong></p><ul><li>深度优先搜索：一般都是用递归的方式来实现的，前序遍历，中序遍历，后序遍历，都是深度优先搜索。(迭代法也可以实现前中后序，非递归的方式。)</li><li>广度优先搜索：一层一层的去遍历，或者是一圈一圈的去遍历。层序遍历就是广度优先搜索的一种。</li></ul><hr><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429193726478.png" alt="image-20210429193726478"></p><p>前序遍历：<strong>中左右。</strong>5412678</p><p>中序遍历：左中右。4125768</p><p>后序遍历：左右中。1247865</p><h1 id="4-二叉树结点的定义"><a href="#4-二叉树结点的定义" class="headerlink" title="4.二叉树结点的定义"></a>4.二叉树结点的定义</h1><p><strong>将二叉树理解为一个链表就会简单很多。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> val;<span class="comment">//放数值</span></span><br><span class="line">   TreeNode* left;</span><br><span class="line">   TreeNode* right;</span><br><span class="line">    <span class="comment">//实现一个构造函数，在new一个结点的时候，方便对其进行初始化。</span></span><br><span class="line">   TreeNode(t):val:t,left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数据结构 </tag>
            
            <tag> -树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="2021/04/28/KMP%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/28/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>强烈推荐Carl老哥的视频！！！</strong></p><p>多看几遍肯定是可以学会的。</p><p>理论篇——<a href="https://www.bilibili.com/video/BV1PD4y1o7nd">帮你把KMP算法学个通透！（理论篇）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>求Next数组代码篇——<a href="https://www.bilibili.com/video/BV1M5411j7Xx?t=133">帮你把KMP算法学个通透！（求next数组代码篇）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-什么是KMP算法"><a href="#1-什么是KMP算法" class="headerlink" title="1.什么是KMP算法"></a>1.什么是KMP算法</h1><p>​        KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。(百度百科)</p><h1 id="2-KMP算法能解决哪些问题"><a href="#2-KMP算法能解决哪些问题" class="headerlink" title="2.KMP算法能解决哪些问题"></a>2.KMP算法能解决哪些问题</h1><p><strong>解决字符串匹配问题</strong>    </p><p>给出文本串和模式串，用两层for循环进行匹配，进行暴力匹配，时间复杂度是O(m,n).其中m是模式串长度，n是文本串长度。</p><h1 id="3-KMP算法是如何运行的"><a href="#3-KMP算法是如何运行的" class="headerlink" title="3.KMP算法是如何运行的"></a>3.KMP算法是如何运行的</h1><p>给出两个要匹配的串，<strong>文本串和模式串。</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427205533964.png" alt="image-20210427205533964"></p><p><strong>第一次匹配</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427205812823.png" alt="image-20210427205812823"></p><p><strong>第二次匹配</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427210037607.png" alt="image-20210427210037607"></p><p><strong>跳到b处继续进行匹配</strong>。</p><p><strong>这就是KMP算法。</strong></p><h1 id="4-KMP算法是如何进行跳的"><a href="#4-KMP算法是如何进行跳的" class="headerlink" title="4.KMP算法是如何进行跳的"></a>4.KMP算法是如何进行跳的</h1><p>用到了很重要的表——<strong>前缀表。</strong></p><p>那么，KMP算法为什么不用hash表或者其它表呢?</p><hr><p><strong>前缀表的特性：</strong></p><ul><li><p><strong>如何实现：当进行到不匹配的元素时，找到该元素前面的字串，找到一组相等的前后缀，在该前缀的后面进行第二次匹配，就跳过去了。其实就是找最长相等前后缀的长度，从这个以这个长度为下标的元素开始进行匹配。</strong></p></li><li><p><strong>前缀：包括首元素不包括尾元素的所有字串，都称为前缀。</strong></p></li><li><p><strong>后缀：包括尾元素不包括首元素的所有字串，都称为后缀。</strong></p></li></ul><hr><h1 id="5-如何求取前缀表"><a href="#5-如何求取前缀表" class="headerlink" title="5.如何求取前缀表"></a>5.如何求取前缀表</h1><ul><li><p>  求最长相等(公共)前后缀</p></li><li><p>a的最长相等(公共)前后缀是0</p><p>aa的最长相等(公共)前后缀是1</p><p>aab的最长相等(公共)前后缀是0</p></li></ul><p>  ​    aaba的最长相等(公共)前后缀是1</p><p>  ​    aabaa的最长相等(公共)前后缀是2</p><p>  ​    aabaaf的最长相等(公共)前后缀是0</p><p>  ​    <strong>所以得出此模式串的前缀表是010120</strong></p><ul><li>得到最长相等(公共)前后缀是2<ul><li>2意味着：这里有一个后缀aa,前面有一个与其相等的前缀aa。</li><li>在后缀(aa)的后面(是f)后面不匹配(冲突)了。</li><li>就找与其相等的前缀(前面那个aa)后面那个元素(b)开始匹配。</li><li>(其实就是从最长相等前后缀的长度下标开始。)</li><li>(此模式串最长相等前后缀是2，就从该模式串下标为2的元素开始匹配。)</li><li>(2表示的是最长相等前后缀的长度，我们要跳到前缀的后面，前缀的后面的下标正好是前缀的长度，因为串的下标是从0开始的。)</li></ul></li><li>匹配成功,完成匹配过程。</li></ul><hr><p><strong>流程图:</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/kmpsuanfa.png"></p><hr><h1 id="6-KMP算法的实现"><a href="#6-KMP算法的实现" class="headerlink" title="6.KMP算法的实现"></a>6.KMP算法的实现</h1><p>有的做法会将前缀表进行一些调整，但总的思想是相同的。</p><p>有的用next数组，有的用perfix，这里用的Next数组。</p><p><strong>碰到了冲突的位置，我们要向前回退，这是Next数组的核心所在。</strong></p><p>对于实现，不同的人有不同的方法。</p><p>这里就用前缀表作为我们的Next数组。</p><p>求出来的Next数组就是该模式串的前缀表。</p><p>那么具体的代码应该怎么写呢？</p><hr><p><strong>明确求Next数组有几个步骤<br>    1.初始化<br>    2.处理前后缀不同的情况<br>    3.处理前后缀不相同的情况<br>    4.更新Next数组的值</strong></p><hr><p>**j指向前缀末尾位置(还代表着i之前包括i,字串的最长相等前后缀的长度)**。</p><p><strong>i指向后缀末尾位置。</strong></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span>* next,<span class="keyword">const</span> <span class="built_in">string</span>&amp;S)</span><span class="comment">//S为模式串，（此代码类似于伪代码）</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//1.初始化</span></span><br><span class="line">   <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//j初始化为0，前缀一开始是从开始的位置开始。</span></span><br><span class="line">    next[<span class="number">0</span>];<span class="comment">//next数组初始位置也是0。</span></span><br><span class="line">    <span class="comment">//初始化完成</span></span><br><span class="line">    <span class="comment">//i的初始化就进入到我们的循环遍历里了</span></span><br><span class="line">    <span class="comment">//因为要比较前后缀所对应的字符是否相等，那i就应该是从1开始，这样i和j才能进行比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;S.size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2.处理前后缀不相同情况</span></span><br><span class="line">        <span class="comment">//遇到不匹配看前一位 </span></span><br><span class="line">        <span class="comment">//这里的while容易写成if，我们回退的过程并不是一步就完事的</span></span><br><span class="line">        <span class="comment">//要判断前一位所以j&gt;0 </span></span><br><span class="line">        <span class="comment">//否则产生负数会造成数组越界</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; S[i] != S[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.处理前后缀相同的情况</span></span><br><span class="line">        <span class="comment">//这时候j应该+1，因为j不仅代表着前缀末尾的位置，还代表着i以及i之前这个字串的最长相等前后缀的长度。</span></span><br><span class="line">        <span class="keyword">if</span>(S[i] == S[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j++;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新Next数组</span></span><br><span class="line">        next[i] = j;</span><br><span class="line">        <span class="comment">//在循环里面,i++，向后面走一位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -笔记 </tag>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础知识总结</title>
      <link href="2021/04/27/JAVA%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/27/JAVA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<hr><p>6.17日偶然发现里面代码块的格式崩了，哭哭了。</p><p><strong>改代码块的格式实在是太累了</strong></p><p><strong>大火看我CSDN上改好的这个吧</strong></p><p><strong>这个我就不改了❤️</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/116205580">JAVA基础知识总结_半生瓜のblog-CSDN博客</a></p><hr><h1 id="1-JAVA基础"><a href="#1-JAVA基础" class="headerlink" title="1.JAVA基础"></a>1.JAVA基础</h1><h2 id="1-Hello-world"><a href="#1-Hello-world" class="headerlink" title="1. Hello world"></a>1. Hello world</h2><p><strong>psvm自动生成方法</strong></p><p>**sout自动生成system out **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello sb!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><p><strong>单行注释：</strong>//</p><p><strong>多行注释：</strong>  /**/</p><p><strong>文档注释：</strong>JavaDoc /** * * * */(用处不大)</p><h2 id="3-标识符和关键字"><a href="#3-标识符和关键字" class="headerlink" title="3.标识符和关键字"></a>3.标识符和关键字</h2><p><strong>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210412205124735.png" alt="image-20210412205124735"></p><ul><li>所有的字标识符都应该以字母(A-Z,a-z)、美元符($)、或者下划线(_)开始。</li><li>首字符之后可以是(A-Z,a-z)、美元符($)、下划线(_)或数字的任何字符组合</li><li><strong>不能使用关键字作为变量名或方法名</strong></li><li>标识符是大小敏感的(<strong>区分大小写</strong>)</li><li>可以使用中文命名，但是一般不建议，也不建议使用拼音，sb</li></ul><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><p><strong>强类型语言：</strong>要求变量的使用要严格符合规定，所有变量必须先定义之后才能使用。</p><p>(安全、严谨、避免很多错误)</p><p><strong>弱类型语言：</strong>随便定义</p><p><strong>Java的数据类型分为两大类：</strong></p><ul><li><p>基本类型 -数值类型-整数类型-byte-short-int-long</p><p>​                                    -浮点类型-float-double</p><p>​                                    -字符类型-char</p><p>​                 -boolean类型//默认true（if）</p></li><li><p>引用类型 - 类</p><p>​                 -接口</p><p>​                 -数组</p></li></ul><p><strong>数据类型+变量名+值     可以使用逗号隔开来声明多个同类型的变量。</strong></p><p><strong>转义字符：</strong></p><p><strong>变量：</strong>就是可以变化的量</p><p>​            Java是一种强类型语言，每个变量都必须声明其类型</p><p>​            Java变量程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><hr><h2 id="5-类型转换"><a href="#5-类型转换" class="headerlink" title="5.类型转换"></a>5.类型转换</h2><p>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换。</p><p><strong>运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><ul><li>强制类型转换</li></ul><p><strong>从高-低</strong></p><p><strong>(要转换的类型)变量名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动类型转换</li><li><strong>从低-高</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">double</span> b =  i;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>不能对bool类型进行转换。</li><li>不能把对象的类型转换为不相干的类型。</li><li>高容量转化为低容量的时候，强制类型转换。</li><li>转化的时候可能存在内存溢出，或者精度问题。</li></ol><p>精度问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">18.3</span>);<span class="comment">//18.7</span></span><br><span class="line">System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);<span class="comment">//45</span></span><br></pre></td></tr></table></figure><p>溢出问题</p><p>操作比较大的数的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line"><span class="keyword">long</span> total = money*year;</span><br><span class="line"><span class="comment">//得到的结果溢出，默认是int，在转换之前就出现问题了。</span></span><br><span class="line"><span class="keyword">long</span> total2 = money*(<span class="keyword">long</span>(year));</span><br></pre></td></tr></table></figure><h2 id="6-变量"><a href="#6-变量" class="headerlink" title="6.变量"></a>6.变量</h2><p><strong>什么是变量：</strong>就是可以变化的量。</p><p>Java是一种强类型语言，每个变量都必须声明其类型。</p><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><p><strong>数据类型  变量名 =  值</strong></p><p><strong>注意：</strong></p><ul><li>每个变量都有类型，类型可以是基本的类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每个声明都必须以分号结束。</li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sb</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks = <span class="number">0</span>; <span class="comment">//类变量</span></span><br><span class="line">    String str = <span class="string">&quot;hello sb&quot;</span>; <span class="comment">//实例变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sb</span></span>&#123;</span><br><span class="line">    <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;<span class="comment">//2500默认是int类型 自动转换成了double</span></span><br><span class="line">    <span class="comment">//属性:简单理解为变量</span></span><br><span class="line">    <span class="comment">//实例变量：从属于对象,如果不进行初始化，这个数值类型的默认值</span></span><br><span class="line">    <span class="comment">//布尔值：默认是false</span></span><br><span class="line">    <span class="comment">//除了基本类型：其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//mian方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部变量:必须声明和初始化值</span></span><br><span class="line">        <span class="keyword">int</span>  i = <span class="number">23</span>;</span><br><span class="line">        System.out.println(i); </span><br><span class="line">        sb sb1 = <span class="keyword">new</span> sb1();</span><br><span class="line">        System.<span class="function">out <span class="title">println</span><span class="params">(sb1.age)</span></span>;</span><br><span class="line">        <span class="comment">//类变量static </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><p>​    <img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210413204212919.png" alt="image-20210413204212919"></p><h2 id="7-常量"><a href="#7-常量" class="headerlink" title="7.常量"></a>7.常量</h2><p>常量：初始化之后不能变动的值。</p><p><strong>可以理解为一个特殊的变量。</strong></p><p><strong>final</strong> 常量名 = 值；(<strong>final是个修饰符，不区分前后。</strong>)</p><p>常量名一般使用大写字符。</p><h2 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210413204342365.png" alt="image-20210413204342365"></p><p><strong>()括号的优先级高</strong></p><p>**关系运算符的结果是: 正确 错误  布尔值 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自增++ 自减--</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//执行完这段代码之后先将3赋值给b，然后再自增。</span></span><br><span class="line"><span class="keyword">int</span> c = ++a;<span class="comment">//执行这行代码前，先给a自增然后再给c赋值。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//很多运算我们会使用工具类运算double Pow = Math.pow(3,2);System.out.println(Pow);//9.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;——逻辑与 两个都为真 结果为真||——逻辑或 其中一个为 结果为真！——取反 真变假 假变真</span><br></pre></td></tr></table></figure><p><strong>位运算——看二进制位</strong></p><p>&amp;、|、类似于上面的逻辑操作符</p><p>^相同为0 不相同为1</p><p>~按位取反 </p><p>左移&lt;&lt; ——相当于把数字乘2、</p><p>右移 &gt;&gt;——相当于把数字除2、</p><p><strong>字符串连接符</strong></p><p>在+号后出现string类型，就会把操作数转化为字符串然后再连接。</p><p>在后面的就会正常进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> a = <span class="number">10</span>;        <span class="keyword">int</span> b = <span class="number">20</span>;        System.out.println(<span class="string">&quot; &quot;</span>+a+b);        System.out.println(a+b+<span class="string">&quot; &quot;</span>);        <span class="comment">//输出 1020//    30     &#125;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><p>x?a:b</p><p>x为真 结果为a</p><p>x为假 结果为b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       <span class="keyword">int</span> score = <span class="number">20</span>;       String type = score &gt; <span class="number">60</span>?<span class="string">&quot;及格&quot;</span>:<span class="string">&quot;不及格&quot;</span>;        System.out.println(type);    &#125;    &#125;</span><br></pre></td></tr></table></figure><h2 id="9-包机制"><a href="#9-包机制" class="headerlink" title="9.包机制"></a>9.包机制</h2><ul><li>为了更好的组织类，JAVA提供了包机制，用于区别类名的命名空间。</li></ul><p>(基本就是新建一个文件夹将两个名称相同的文件分开放，<strong>包的本质就是一个文件夹</strong>。)</p><ul><li><p>包机制的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pk1[.pk2[.pk3...]];</span><br></pre></td></tr></table></figure></li><li><p>一般利用公司域名倒置作为包名(<a href="http://www.baidu.com/">www.baidu.com</a> - com.baidu.www)</p></li><li><p>为了能够使用某一个包的成员，我们需要在Java程序明确导入该包。使用import语句可以完成此功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-JavaDoc"><a href="#10-JavaDoc" class="headerlink" title="10.JavaDoc"></a>10.JavaDoc</h2><p>是用来生成自己API文档的。</p><p><strong>参数信息：</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210414210704599.png" alt="image-20210414210704599"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sb;<span class="comment">/*** <span class="doctag">@author</span>  zhaoyuxuan* <span class="doctag">@version</span>  1.0 * <span class="doctag">@since</span>  1.8 * * */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocJava</span> </span>&#123;    String name;    <span class="comment">/**     * <span class="doctag">@author</span> zhaoyuxuan      * <span class="doctag">@param</span> name     * <span class="doctag">@return</span>     * <span class="doctag">@throws</span>  Exception     */</span>    <span class="function"><span class="keyword">public</span> String  <span class="title">test</span><span class="params">(String  name)</span> <span class="keyword">throws</span> Exception</span>&#123;        <span class="keyword">return</span>  name;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>IDEA、命令行都可以生成javadoc文件。</p><h1 id="2-JAVA流程控制"><a href="#2-JAVA流程控制" class="headerlink" title="2.JAVA流程控制"></a>2.JAVA流程控制</h1><h2 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h2><p><strong>Scanner获取用户的输入</strong></p><p><strong>基本语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>通过next()和nextLine()方法获取输入的字符串，在读取前我们一般需要视同hasNext() 与hasNextLine()判断是否还有输入的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>    </span>&#123;        <span class="comment">//创建一个扫描器对象        Scanner scanner = new Scanner(System.in);        System.out.println(&quot;使用next的方式接收：&quot;);        //判断用户有没有输入字符串        if(scanner.hasNext())&#123;            //使用next方式接收            String str = scanner.next();            System.out.println(&quot;输出的内容为：&quot;+str);        &#125;        //凡是IO流的类如果不关闭会一直占用资源，要养成良好的习惯用完就关掉        scanner.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>next():</strong></p><ul><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next()不能得到带有空格的字符串。</li></ul><p><strong>nextLine():</strong></p><ul><li>以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);        <span class="comment">//从键盘接收数据        int i = 0 ;        float f = 0.0f;        System.out.println(&quot;请输入整数：&quot;);        if(scanner.hasNextInt())        &#123;            i= scanner.nextInt();            System.out.println(&quot;整数数据：&quot;+i);        &#125;        else&#123;            System.out.println(&quot;输入的不是整数数据&quot;);        &#125;        System.out.println(&quot;请输入小数数据：&quot;);        if(scanner.hasNextFloat())        &#123;            f = scanner.nextInt();            System.out.println(&quot;小数数据：&quot;+f);        &#125;        else&#123;            System.out.println(&quot;输入的不是小数数据&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo3</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//我们可以输入多个数字，并求其总和 每输入一个数字用回车确认，用过输入非数字来结束        //输入并输出执行结果。        Scanner scanner = new Scanner(System.in);        //和        double sum = 0;        //计算输入了多少个数字        int m = 0;        while(scanner.hasNextDouble())        &#123;            double x = scanner.nextDouble();            m = m  + 1;            sum = sum +x;            System.out.println(&quot;你输入了第&quot;+m+&quot;个数据当前结果sum&quot;+sum);        &#125;        System.out.println(m + &quot;个数字的总和是：&quot;+ sum);        System.out.println(m + &quot;个数字平均数是：&quot;+ (sum/m));        scanner.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><ul><li>JAVA的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li><li>语句和语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的， <strong>它是任何一种算法都离不开的一种基本算法结构。</strong></li></ul><h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><h3 id="1-if单选择结构"><a href="#1-if单选择结构" class="headerlink" title="1.if单选择结构"></a>1.if单选择结构</h3><ul><li>判断是否可行，然后再去执行</li><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;<span class="comment">//如果布尔表达式为True将执行的语句&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">import</span>  java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Scanner scanner  = <span class="keyword">new</span> Scanner(System.in);        System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);        String s = scanner.nextLine();        <span class="keyword">if</span>(s.equals(<span class="string">&quot;Hello&quot;</span>))        &#123;            System.out.println(s);        &#125;        System.out.println(<span class="string">&quot;sb&quot;</span>);        scanner.close();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-if双选择结构"><a href="#2-if双选择结构" class="headerlink" title="2.if双选择结构"></a>2.if双选择结构</h3><ul><li>if-else</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;<span class="comment">//如果布尔表达式的值为true&#125;else&#123;    //如果布尔表达式的值为false&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">if_else</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        System.out.println(<span class="string">&quot;请输入你的成绩&quot;</span>);        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);        <span class="comment">//大于等于60分及格，否则不及格        int score = scanner.nextInt();        if(score &gt;= 60)        &#123;            System.out.println(&quot;及格&quot;);        &#125;        else        &#123;            System.out.println(&quot;不及格&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-if多选择语句"><a href="#3-if多选择语句" class="headerlink" title="3.if多选择语句"></a>3.if多选择语句</h3><ul><li>if-else if - else - if </li><li>语法 ……</li></ul><h3 id="4-嵌套的if语句"><a href="#4-嵌套的if语句" class="headerlink" title="4.嵌套的if语句"></a>4.嵌套的if语句</h3><p>……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;    <span class="keyword">if</span>()&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Switch多选择结构"><a href="#5-Switch多选择结构" class="headerlink" title="5.Switch多选择结构"></a>5.Switch多选择结构</h3><ul><li>switch case</li><li>switch case语句判断一个变量与一系列值中的某个值是否相等，每个值称为一个分支</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;    <span class="keyword">case</span> value:        <span class="comment">//语句        break;    case value:        //语句        break;    ......    default:       // &#125;</span></span><br></pre></td></tr></table></figure><p><strong>switch语句中的变量类型可以是：</strong></p><ul><li>byte、short、int或者char。</li><li>从Java SE 7开始。</li><li>switch 支持字符串String类型了</li><li>同时case标签必须为字符串常量或者字面量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">char</span> grade = <span class="string">&#x27;D&#x27;</span>;        <span class="keyword">switch</span>(grade)        &#123;            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:                System.out.println(<span class="string">&quot;优秀&quot;</span>);                <span class="keyword">break</span>;            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:                System.out.println(<span class="string">&quot;良好&quot;</span>);                <span class="keyword">break</span>;            <span class="keyword">default</span>:                System.out.println(<span class="string">&quot;sb&quot;</span>);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>（不加break会发生case穿透现象。）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK7的新特性，表达式的结果可以是字符串//字符的本质还是数字//反编译//java——class(字节码文件)//——反编译(IDEA)//每一个对象都有自己的一个hashcodepackage struct;public class Switch2 &#123;    public static void main(String[] args) &#123;        String name = &quot;sb&quot;;        switch (name)        &#123;            case &quot;sb&quot;:                System.out.println(&quot;大sb&quot;);                break;            default:                System.out.println(123);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>反编译</strong></p><p><strong>看原码</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210415170423339.png" alt="image-20210415170423339"></p><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h3><ul><li>while是最基本的循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;    <span class="comment">//循环内容&#125;</span></span><br></pre></td></tr></table></figure><ul><li>只要布尔表达式为true，循环就会一直执行下去。</li><li>我们大多数情况是会让循环停下来的，我们需要让一个表达式失效的方式来结束循环。</li><li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</li><li>循环条件为true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环。会影响程序性能或者造成程序卡死崩溃。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While01</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//输出1~100        int num = 1;        while(num &lt;101)        &#123;            System.out.println(num);            num++;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whiledemo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;     <span class="comment">//计算1+。。。。100        int sum = 0;        int num = 1;        while(num &lt;=100)        &#123;            sum += num;            num ++;        &#125;        System.out.println(sum);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2.do-while循环"></a>2.do-while循环</h3><ul><li>对于while语句而言，如果不满足条件，就不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li><li>do…while循环和while循环相似，不同的是，do..while循环至少会执行一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;    <span class="comment">//语句&#125;while(布尔表达式)</span></span><br></pre></td></tr></table></figure><ul><li><strong>while和do-while的区别</strong><ul><li>while先判断在执行，do-while先执行后判断。</li><li>do-while总是保证循环体被会至少被执行一次，这是他们的主要差别。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dowhile</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> num = <span class="number">1</span>;        <span class="keyword">int</span> sum = <span class="number">0</span>;        <span class="keyword">do</span>&#123;            sum += num;            num ++;        &#125;<span class="keyword">while</span>(num &lt;= <span class="number">100</span>);        System.out.println(sum);    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dowhile</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         <span class="keyword">int</span> a = <span class="number">0</span>;         <span class="keyword">while</span>(a &lt; <span class="number">0</span>)         &#123;             System.out.println(a);             a++;         &#125;        System.out.println(<span class="string">&quot;``````````````````````````&quot;</span>);         <span class="keyword">do</span>&#123;             System.out.println(a);             a++;         &#125;<span class="keyword">while</span> (a&lt; <span class="number">0</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><ul><li>for循环是一种支持迭代的一种通用结构，是最有效、最灵活的循环结构。</li><li>for循环的执行次数是在执行之前就确定的。</li><li>语法</li><li>IDEA快捷键100.for</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;<span class="comment">//代码语句&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOr</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>; i++)         &#123;             System.out.println(i);         &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOr</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> oddSum = <span class="number">0</span>;        <span class="keyword">int</span> evenSum = <span class="number">0</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)        &#123;            <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)            &#123;                evenSum += i;            &#125;            <span class="keyword">else</span>            &#123;                oddSum += i;            &#125;        &#125;        System.out.println(<span class="string">&quot;偶数的和&quot;</span>+evenSum);        System.out.println(<span class="string">&quot;奇数的和&quot;</span>+oddSum);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOR2</span> </span>&#123;    <span class="comment">//练习2，输入1~1000之间的能被5整除的数，并且每行输出3个    public static void main(String[] args) &#123;        for (int i = 1; i &lt; 1000; i++) &#123;            if(i % 5 == 0)            &#123;                System.out.print(i+&quot;\t&quot;);            &#125;            if(i %(3*5) == 0)            &#123;                //都可以System.out.println();                System.out.println(&quot;\n&quot;);            &#125;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>println(自动换行)和print</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表package struct;public class Chengfa &#123;    public static void main(String[] args) &#123;        for (int j = 0; j &lt;= 9; j++) &#123;            for(int i =1; i &lt;=j ; i++)            &#123;                System.out.print(j+&quot;*&quot;+i+&quot;=&quot;+(j*i) + &quot;\t&quot;);            &#125;            System.out.println(&quot;&quot;);//换行        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>增强for——主要用于数组或集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chengfa</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;        <span class="comment">//增强型for        for(int x:numbers)        &#123;            System.out.println(x);        &#125;        System.out.println(&quot;123456789&quot;);        //或者        for(int i = 0; i &lt; 5 ; i++)        &#123;            System.out.println(numbers[i]);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-break、continue、goto"><a href="#4-break、continue、goto" class="headerlink" title="4.break、continue、goto"></a>4.break、continue、goto</h3><ul><li><p>break语句在任何循环语句的主题部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)</p></li><li><p>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体尚未执行的语句，接着进行下一次是否执行循环的判定。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> i = <span class="number">0</span>;        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)        &#123;            <span class="keyword">if</span>(i == <span class="number">30</span>)            &#123;                <span class="keyword">break</span>;            &#125;            System.out.println(i);            i++;        &#125;    &#125;&#125;<span class="comment">////////////////////////////////package struct;public class Break &#123;    public static void main(String[] args) &#123;        int i = 0;        while(i&lt;10)        &#123;            i++;            if(i == 3)            &#123;               continue;            &#125;            System.out.println(i);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>关于goto关键字</li></ul><p>(JAVA没有)但是有标签</p><h2 id="5-流程控制练习"><a href="#5-流程控制练习" class="headerlink" title="5.流程控制练习"></a>5.流程控制练习</h2><p><strong>打印三角形5行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sanjiao</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)        &#123;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">5</span> ; j &gt;= i; j--)            &#123;                System.out.print(<span class="string">&quot; &quot;</span>);            &#125;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= i; j++)            &#123;                System.out.print(<span class="string">&quot;+&quot;</span>);            &#125;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i; j++)            &#123;                System.out.print(<span class="string">&quot;+&quot;</span>);            &#125;            System.out.println(<span class="string">&quot;&quot;</span>);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="3-JAVA方法"><a href="#3-JAVA方法" class="headerlink" title="3.JAVA方法"></a>3.JAVA方法</h1><h2 id="1-什么是方法"><a href="#1-什么是方法" class="headerlink" title="1.什么是方法"></a>1.什么是方法</h2><p><strong>就是其他语言的函数。</strong></p><ul><li>JAVA方法是语句的集合，它们在一起执行一个功能。<ul><li>方法是解决一类问题的步骤的有序组合。</li><li>方法包含于类或对象中。</li><li>方法在程序中被创建，在其他地方被引用。</li></ul></li><li>设计方法的原则：方法的本意是功能快，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成一个功能，这样有利于我们后期的扩展。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="comment">//main方法    public static void main(String[] args) &#123;        int sum = add(1,2);        System.out.println(sum);    &#125;    //加法    public static int add(int a,int b)    &#123;        return a+b;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-方法的定义"><a href="#2-方法的定义" class="headerlink" title="2.方法的定义"></a>2.方法的定义</h2><ul><li>结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型  方法名(参数类型 参数名)&#123;    \\\    方法体        \\\    <span class="keyword">return</span> 返回值；&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法包含一个方法头和方法体</p><ul><li>修饰符：修饰符，这是可选的，告诉编译器如何调用方法。定义了该方法的访问类型。</li><li>返回值：方法可能会有返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。这种情况下，returnValueType是关键字void。</li><li>方法名：是方法的实际名称。方法和参数表共同构成方法签名。</li><li>参数类型：参数像一个占位符。放方法被调用的时 ，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<ul><li>形式参数：在方法被调用的时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li>方法体：方法体包含具体的语句，定义该方法的功能</li></ul><p><strong>return可以终止方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> result = Max(<span class="number">10</span>,<span class="number">10</span>);        System.out.println(result);    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span>    </span>&#123;        <span class="keyword">int</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-方法的重载"><a href="#3-方法的重载" class="headerlink" title="3.方法的重载"></a>3.方法的重载</h2><ul><li>重载就是在同一个类中，有相同的函数名称，但形参不同的函数。</li><li>方法重载的规则：<ul><li>方法名必须相同。</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li>实现理论：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">double</span> result = Max(<span class="number">10.0</span>,<span class="number">20.0</span>);        System.out.println(result);    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span>    </span>&#123;        <span class="keyword">int</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Max</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span>    </span>&#123;        <span class="keyword">double</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-命令行传参"><a href="#4-命令行传参" class="headerlink" title="4.命令行传参"></a>4.命令行传参</h2><p>有时你希望运行一个程序的时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//args.Length数组长度        for(int i = 0;i &lt;args.length;i++)        &#123;            System.out.println(&quot;args[&quot;+1+&quot;]:&quot;+args[i]);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h2><ul><li>从JKD1.5开始，JAVA支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后面加一个省略号(…)。</li><li>一个方法只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在他前面声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kbian</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//这个东西的本质就是即将要讲的数组        Kbian kbian = new Kbian();        kbian.test(1,23,4,5,3,2);    &#125;    public void test(int...i)    &#123;        System.out.println(i[0]);        System.out.println(i[1]);        System.out.println(i[2]);        System.out.println(i[3]);        System.out.println(i[4]);        System.out.println(i[5]);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diaoyongkebian</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//调用可变参数方法        printMax(34, 2, 5, 4, 8, 1, 5, 6, 55, 45);        printMax(new double[]&#123;1, 2, 3&#125;);    &#125;    public static void printMax(double... numbers) &#123;        if (numbers.length == 0) &#123;            System.out.println(&quot;这里什么也没有&quot;);            return;        &#125;        double result = 0;        for (int i = 0; i &lt; numbers.length; i++) &#123;            if (numbers[i] &gt; result) &#123;                result = numbers[i];            &#125;        &#125;        System.out.println(&quot;最大的数是&quot;+result);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h2><ul><li>递归就是A方法调用A方法，自己调用自己。</li><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似规模较小的问题来求解，递归策略只需要少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li><li>递归结构包括两个部分<ul><li>递归头:什么时候不调用自身方法 。如果没有头，将陷入死循环。</li><li>递归体:什么时候需要调用自身方法。</li></ul></li><li>注意：<ul><li>对于一些嵌套比较深的，递归就有些力不从心了，依次压在栈上面，物理上会造成内存崩溃。</li><li>一般小计算我们可以用一些递归，大计算还是用一些其他的算法吧。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算阶乘//依次类推，就是将这个的结果传递给下一个，学了C语言之后，在学JAVA的，会感觉简单很多，很容易理解的。package Method;public class Self &#123;    public static void main(String[] args) &#123;        System.out.println(f(3));    &#125;    public static int f(int n)    &#123;        if(n == 1) &#123;            return 1;        &#125;        else        &#123;            return n*f(n-1);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h1><p>（基础部分的最后一个东西）</p><p>（JAVA的学习，说白了就是学习一个又一个的类。）</p><h2 id="1-什么是数组"><a href="#1-什么是数组" class="headerlink" title="1.什么是数组"></a>1.什么是数组</h2><ul><li>数组是相同类型数据的有序集合。</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><h2 id="2-数组的声明创建"><a href="#2-数组的声明创建" class="headerlink" title="2.数组的声明创建"></a>2.数组的声明创建</h2><ul><li>首先必须声明数组变量，才能在程序中使用数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;<span class="comment">//首选的方法或者dataType[] arrayRefVar[];//效果相同，但不是首选方法//这个是C和C++的写法，早些年为了上程序员更好的熟悉java。</span></span><br></pre></td></tr></table></figure><ul><li>JAVA语言使用new操作符来创建数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];<span class="comment">//定义了一个什么类型的数组，就new一个什么类型的数组。</span></span><br></pre></td></tr></table></figure><ul><li>数组元素是通过索引访问的，数组索引从0开始。</li><li>获取数组长度:<strong>arrays.length</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//变量的类型 变量的名字 = 变量的值；        //数组类型；        int[] nums ;//定义        nums = new int[10];//这里面可以存放10个int类型的数字。        //给数组中的元素赋值        nums[0] = 1;        nums[1] = 2;        nums[2] = 3;        nums[3] = 4;        nums[4] = 5;        nums[5] = 6;        nums[6] = 7;        nums[7] = 8;        nums[8] = 9;        nums[9] = 10;       //计算所有元素的和        int sum =0;        for(int i= 0 ; i &lt; nums.length ; i++)        &#123;            sum +=  nums[i];        &#125;        System.out.println(&quot;数组nums的和是&quot;+sum);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3.内存分析"></a>3.内存分析</h2><ul><li>JAVA内存分析：<ul><li>堆：<ul><li>可以存放new的对象和数组</li><li>可以被所有的线程共享，不会存放别的对象引用。</li></ul></li><li>栈：<ul><li>存放基本变量类型(会包含这个基本类型的具体数值)</li><li>引用对象的变量(会存放这个引用在堆里面的具体地址)</li></ul></li><li>方法区：<ul><li>可以被所有线程共享</li><li>包含了所有的class和static变量</li></ul></li></ul></li></ul><h2 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h2><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];a[<span class="number">0</span>] = <span class="number">1</span>;a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>数组的默认初始化<ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul></li></ul><h2 id="5-数组特点"><a href="#5-数组特点" class="headerlink" title="5.数组特点"></a>5.数组特点</h2><ul><li><p>数组的长度时确定的。数组一但被创建，它的大小就是不可以改变的。</p></li><li><p>其元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</p></li><li><p>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</p><p>数组本身就是对象，JAVA中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</p></li></ul><h2 id="6-数组边界"><a href="#6-数组边界" class="headerlink" title="6.数组边界"></a>6.数组边界</h2><ul><li>下标的合法区间：[0,length-1],如果越界就会报错：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    <span class="keyword">int</span>[] a  = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];        System.out.printlen(a[<span class="number">2</span>]);    &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>ArrayIndexOutOfBoundsException:数组下标越界异常！</strong></p></li><li><p>小结</p><ul><li><p>数组是相同数据类型(数据类型可以为任意类型)的有序集合。</p></li><li><p>数组也是对象。数组元素相当于对象的成变量。</p></li><li><p>数组长度是确定的，不可变的。如果越界，则报</p><p>​    ArrayIndexOutOfBoundsException。 </p></li></ul></li></ul><h2 id="7-数组的使用"><a href="#7-数组的使用" class="headerlink" title="7.数组的使用"></a>7.数组的使用</h2><ul><li>for-each循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo03</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4</span>,<span class="number">55</span>,<span class="number">6</span>&#125;;        <span class="comment">//计算数组nums的元素之和        int Sum = 0;        for(int i = 0; i &lt;nums.length;i++)        &#123;            Sum += nums[i];        &#125;           System.out.println(&quot;数组nums的和是&quot;+Sum);        System.out.println(&quot;#####################&quot;);        //找出数组中的 最大值        int Max = 0;        for(int i = 0; i &lt; nums.length;i++)        &#123;            if(nums[i]&gt; Max)            &#123;                Max = nums[i];            &#125;        &#125;        System.out.println(&quot;数组nums的最大值是&quot;+Max);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p> <strong>增强型for-主要用于打印数组中的各个元素，如果要操作其中的元素就没那么适合了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;        <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)        &#123;            System.out.println(x);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>数组做方法入参&amp;数组作为返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;        <span class="comment">//打印数组元素        printfA(nums);        System.out.println();        //反转数组        int[] nums2 = reverse(nums);        printfA(nums2);    &#125;    public static void printfA(int[] Array)    &#123;        for(int i = 0 ; i&lt; Array.length;i++)        &#123;            System.out.print(Array[i]+&quot; &quot;);        &#125;    &#125;    //反转数组    public static int[] reverse(int[] arrays) &#123;        int[] result = new int[arrays.length];        for(int i  = 0 , j = result.length-1; i &lt;arrays.length;i++,j--)        &#123;            result[j] = arrays[i];        &#125;        return result;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="8-多维数组"><a href="#8-多维数组" class="headerlink" title="8. 多维数组"></a>8. 多维数组</h2><ul><li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每个元素都是一个一维数组(在数组中存放数组)。</li><li>二维数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span><span class="keyword">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><ul><li><p>解析：以上二维数组a，可以看成一个4行2列的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo05</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//[4][2]        int[][] arrays = &#123;&#123;1,2&#125;,&#123;2,3&#125;,&#123;3,4&#125;,&#123;4,5&#125;&#125;;        for(int i = 0; i &lt;arrays.length; i++)        &#123;            for(int j = 0; j &lt; arrays[i].length; j ++)            &#123;                System.out.print(arrays[i][j]);            &#125;            System.out.println(&quot;&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-Arrays类"><a href="#9-Arrays类" class="headerlink" title="9.Arrays类"></a>9.Arrays类</h2><ul><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用”使用对象来调用(注意是”不用”而不是”不能”。)</p></li><li><p>具有一下常用功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sor方法，按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p><h2 id="9-冒泡排序"><a href="#9-冒泡排序" class="headerlink" title="9.冒泡排序"></a>9.冒泡排序</h2></li></ul></li><li><p>冒泡排序无疑是最出名的排序算法之一，总共有八大排序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> arrays;<span class="keyword">import</span> java.util.Arrays;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo02</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//冒泡排序：比较相邻的两个数，如果第 一个数比第二个数大，就交换他们俩个，        int[] nums = &#123;1,23,323,35,2&#125;;        //输出原本的数组顺序        System.out.println(Arrays.toString(nums));        int[] sort = sort(nums); //调用完我们自己写的排序方法之后，返回一个排序后的数组        //打印输出nums数组        System.out.println(Arrays.toString(nums));    &#125;    public static int[] sort(int[] arrays)    &#123;        int temp = 0;        //如果数组已经排列好了，我们就没有必要再进行排列了        boolean flag = false;//通过flag标识位来减少没有意义的比较        //外层循环-判断我们要走多少次        for(int i = 0; i &lt; arrays.length-1;i++)        &#123;            //内层循环，比较两个数            for(int j = 0; j &lt; arrays.length-1-i;j++)            &#123;                if(arrays[j] &gt; arrays[j+1])                &#123;                    temp = arrays[j];                    arrays[j] = arrays[j+1];                    arrays[j+1] = temp;                    flag = true;                &#125;                if(flag == false)                &#123;                    break;                &#125;            &#125;        &#125;        return arrays;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-稀疏数组"><a href="#9-稀疏数组" class="headerlink" title="9.稀疏数组"></a>9.稀疏数组</h2><ul><li><p>需求:编写五子棋游戏中，有存盘退出和续上盘的功能。</p></li><li><p>分析问题：因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</p></li><li><p>解决:稀疏数组。</p></li><li><p>什么是稀疏数组：</p><ul><li>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li></ul></li><li><p>稀疏数组的处理方式是：</p><ul><li>记录数组有几行几列，有多少个不同值。</li><li>把具有不同值的元素和行列及值记录在一个小规模数组中，从而缩小程序的规模。</li><li>例如：左边为原始数组，右边为稀疏数组。</li></ul><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210417192808182.png" alt="image-20210417192808182"></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> arrays;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo08</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;            <span class="comment">//创建一个 11*11的数组 0-没棋 1-黑棋 2-白棋        int[][] arrays1 = new int[11][11];        arrays1[1][2] = 1;        arrays1[2][3] = 2;        //输出原始的数组        System.out.println(&quot;原始的数组是&quot;);        for(int[] ints:arrays1)        &#123;            for(int anInt:ints)            &#123;                System.out.print(anInt+&quot;\t&quot;);            &#125;            System.out.println();        &#125;        //转化为稀疏数组保存        //获取有效值的个数        int numbers = 0;        for(int i = 0 ; i&lt;11; i++)        &#123;            for(int j = 0; j &lt; 11; j++)            &#123;                if(arrays1[i][j] != 0)                numbers++;            &#125;        &#125;        System.out.println(&quot;数组中的有效值一共有&quot;+numbers+&quot;个&quot;);        //创建一个稀疏数组的数组        int[][] arrays2 = new int[numbers+1][3];        arrays2[0][0] = 11;        arrays2[0][1] = 11;        arrays2[0][2] = numbers;        //遍历二维数组，将非零的值存进稀疏数组        int count = 0 ;        for(int i = 0; i &lt; arrays1.length;i++)        &#123;            for(int j = 0; j &lt;arrays1[i].length;j++) &#123;                if (arrays1[i][j] != 0)                &#123;                    count++;                    arrays2[count][0] = i;                    arrays2[count][1] = j;                    arrays2[count][2] = arrays1[i][j];                &#125;            &#125;        &#125;        //输出稀疏数组        System.out.println(&quot;输出稀疏数组&quot;);        for(int i = 0; i &lt; arrays2.length;i++)        &#123;            System.out.println(arrays2[i][0]+&quot;\t&quot;+ arrays2[i][1]+&quot;\t&quot;+arrays2[i][2]+&quot;\t&quot;);        &#125;        System.out.println(&quot;========&quot;);        System.out.println(&quot;还原&quot;);        //读取稀疏数组        int[][] arrays3 = new int[arrays2[0][0]][arrays2[0][1]];        //给其中的元素还原它的值        for(int i = 1; i &lt;arrays2.length;i++)        &#123;            arrays3[arrays2[i][0]][arrays2[i][1]] = arrays2[i][2];        &#125;        //打印        System.out.println(&quot;输出原始的数组&quot;);        for(int[] ints:arrays3)        &#123;            for(int anInt:ints)            &#123;                System.out.print(anInt+&quot;\t&quot;);            &#125;            System.out.println();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="5-面向对象编程"><a href="#5-面向对象编程" class="headerlink" title="5.面向对象编程"></a>5.面向对象编程</h1><h2 id="1-面向过程-amp-面向对象"><a href="#1-面向过程-amp-面向对象" class="headerlink" title="1.面向过程&amp;面向对象"></a>1.面向过程&amp;面向对象</h2><ul><li>面向过程思想<ul><li>步骤清晰简单，第一步做什么，第二步做什么……(线性思维)</li><li>面对过程适合处理一些较为简单的问题。</li></ul></li><li>面向对象思想<ul><li>物以聚类，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li></ul></li><li><strong>对于描述复杂的的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是具体到微观操作 ，仍然需要面向过程的思路去处理。</strong></li></ul><p><strong>面向对象编程的本质就是：以类的方式组织代码，以对象的组织(封装)数据。</strong></p><ul><li>抽象——将事物的共性特点抽取出来。</li><li>三大特性：<ul><li>封装</li><li>继承——父类、子类</li><li>多态</li></ul></li><li>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</li><li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li></ul><h2 id="2-方法的回顾及加深"><a href="#2-方法的回顾及加深" class="headerlink" title="2.方法的回顾及加深"></a>2.方法的回顾及加深</h2><ul><li><p>方法的定义</p><ul><li>修饰符</li><li>返回类型</li><li><strong>break和return的区别</strong><ul><li>break跳出循环</li><li>return结束方法，返回一个结果，可以为空也可以为任意的其他类型</li></ul></li><li>方法名-注意规范</li><li>参数列表-(参数类型、参数名)</li><li>异常抛出</li></ul></li><li><p>方法的调用</p><ul><li>静态方法-static</li><li>非静态方法-</li><li>形参和实参</li><li>值传递和引用传递</li><li>this关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo02</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//函数调用的两种方法        System.out.println(new demo02().Add(3,4));//非静态        System.out.println(Bdd(3,4));//静态    &#125;    public static int Bdd(int a ,int b)    &#123;        return a+b;    &#125;    public int Add(int a ,int b)    &#123;        return a+b;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="comment">//值传递 无法改变public class demo03 &#123;    public static void main(String[] args) &#123;        int a = 1;        System.out.println(a);        new demo03().change(a);        System.out.println(a);    &#125;    public void change(int a )    &#123;        a = 10;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="comment">//引用传递：传递一个对象，本质还是值传递。public class demo04 &#123;    public static void main(String[] args) &#123;        Person person =  new Person();        System.out.println(person.name);        demo04.Change(person);        System.out.println(person.name);    &#125;    public static void Change(Person person) &#123;        //person是一个具体的类 指向一个人 Person person =  new Person();这是一个具体的人 可以改变属性        person.name = &quot;傻逼&quot;;    &#125;&#125;class Person&#123;    String name;//默认为Null&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-类与对象的创建"><a href="#3-类与对象的创建" class="headerlink" title="3.类与对象的创建"></a>3.类与对象的创建</h2><p>(一个对象就相当于C语言里面的结构体)</p><ul><li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul><li>动物、植物、手机、电脑……</li><li>Persoin类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为。</li></ul></li><li><strong>对象是抽象概念的具体实例</strong><ul><li>张三就是一个人的具体实例，张三家里的旺财就是狗的一个具体实例。</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h2 id="4-创建与初始化对象"><a href="#4-创建与初始化对象" class="headerlink" title="4.创建与初始化对象"></a>4.创建与初始化对象</h2><ul><li><strong>使用new关键字创建对象。</strong></li><li>使用ne关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化及对类中构造器的调用。</li><li><strong>构造器必须要掌握</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类是一个抽象的模板， 通过给它赋值来将它具体化package FACE;public class demo05 &#123;   //属性：字段    String name ; //null     int age ; //0//方法    public void study()    &#123;        System.out.println(this.name+&quot;在学习&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体化package FACE;//一个项目应该只存一个main方法public class demo06 &#123;    public static void main(String[] args) &#123;        //类：抽象的，实例化。        //类实例化后会返回一个自己得对象        //demo05对象就是一个student类的具体实例！        demo05 xiaoming = new demo05();        demo05 xiaohong = new demo05();        xiaoming.name = &quot;sb&quot;;        System.out.println(xiaoming.name);        System.out.println(xiaoming.age);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-构造器详解"><a href="#5-构造器详解" class="headerlink" title="5.构造器详解"></a>5.构造器详解</h2><ul><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="comment">//一个类即使什么都不写，也会存在一个方法    //显式定义的构造器    String name;    //实例化初始值    //使用new关键字，本质上实在调用构造器    public Person()    &#123;    &#125;    //有参构造:一旦定义了有参构造，无参定义就必须显示定义    public Person(String name)    &#123;        this.name = name;    &#125;&#125;/**构造器：* 1必须和类名相同* 2没有返回值* 作用* 1new本质在调用构造方法* 2,初始化对象的值* 注意点：* 1.定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造* Alt+insert*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//使用new关键词实例化了一个对象        Person person = new Person(&quot;sb&quot;);        System.out.println(person.name);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-创建对象内存分析"><a href="#6-创建对象内存分析" class="headerlink" title="6.创建对象内存分析"></a>6.创建对象内存分析</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210420110303023.png" alt="image-20210420110303023"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Pet;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Pet dog = <span class="keyword">new</span> Pet();        dog.name = <span class="string">&quot;旺财&quot;</span>;        dog.age =  <span class="number">3</span>;        dog.shout();        System.out.println(dog.name);        System.out.println(dog.age);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;    <span class="keyword">public</span> String name;    <span class="keyword">public</span> <span class="keyword">int</span> age;    <span class="comment">//无参构造    public void shout()    &#123;        System.out.println(&quot;叫了一声&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summary</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">/**         * 1.类与对象         *  类是一个模板：抽象，对象是一个具体的实例         * 2.方法         *  定义、调用！         * 3.对象的引用         *  引用类型：基本类型（8）         *  对象是通过引用来操作的：栈--》堆（地址）         * 4.属性：字段：Field 成员变量         *  默认初始化值：         *      数字： 0 0.0         *      char： u0000         *      bool:false（默认）         *      引用：         *          null         *   修饰符 属性类型 属性名 = 属性值！         * 5.对象的创建和使用         * -必须使用new关键字创造对象，构造器Person sb = new Person();         * -对象的属性 sb.name;         * -对象的方法 sb.sleep();         * 6.类         *  静态的属性         *  动态的行为         */</span>        /    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="8-封装"><a href="#8-封装" class="headerlink" title="8.封装"></a>8.封装</h2><ul><li>该露的露，该藏的藏<ul><li>我们设计程序的要求是”高内聚，低耦合”。高内聚就是类的内部数据细节自己完成 ，不允许外部干涉；低耦合:仅暴露少量的方法给外部使用。</li></ul></li><li>封装(数据的隐藏)<ul><li>通常禁止访问一个对象中数据中的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></li><li><strong>属性私有，get/set</strong></li></ul><p><strong>alt+insert</strong></p><ul><li><p>封装的意义：</p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口，系统的可维护性提高了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;    <span class="comment">//属性私有    private String name;    private int id;    private char sex;    private int age;    //提供一些可以操作这个属性的方法    //提供一些public的get、set方法    //get获得这个数据    public String getName()    &#123;        return this.name;    &#125;    //set给这个数据设置值    public void setName(String name)    &#123;        this.name =name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        if(age&gt;120 || age&lt;0)        &#123;            this.age = 3;        &#125;        else&#123;            this.age = age;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Student;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Student s1 = <span class="keyword">new</span> Student();        s1.setName(<span class="string">&quot;sb&quot;</span>);        System.out.println(s1.getName());        s1.setAge(<span class="number">15</span>);        System.out.println(s1.getAge());    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Student;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Student s1 = <span class="keyword">new</span> Student();        s1.setName(<span class="string">&quot;sb&quot;</span>);        System.out.println(s1.getName());        s1.setAge(<span class="number">15</span>);        System.out.println(s1.getAge());    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>判断两个方法是否相同看-方法名-参数</strong></p></li></ul><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思是”扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承。(<strong>一个儿子只有一个爸爸，一个爸爸有可以有多个儿子</strong>)</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类(派生类)，一个为父类(基类)。子类继承父类，使用关键字extands来表示。</li><li>子类和父类之间，从意义上讲应该具有”is a”的关系。</li><li>object类</li><li>super(代表父,this代表当前)</li><li>方法重写</li></ul><p><strong>子类继承了父类就会拥有父类的全部方法。</strong></p><p><strong>父类public的方法可以继承，private的方法无法继承。</strong></p><p><strong>Ctrl+h——显示继承的关系</strong></p><p><strong>在JAVA中所有的类都默认直接或间接继承object类</strong></p><hr><p><strong>super注意点</strong></p><ul><li>super调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须只能出现在子类的方法或者构造方法中。</li><li>super和this不能同时调用构造方法。</li></ul><p><strong>和this对比</strong></p><ul><li>代表的对象不同<ul><li>this:本身调用者这个对象。</li><li>super:代表父类对象的应用。</li></ul></li><li>前提：<ul><li>this:没有继承也可以使用。</li><li>super:只能在继承条件下才可以使用。</li></ul></li><li>构造方法：<ul><li>this():本类的构造。</li><li>super():父类的构造。</li></ul></li></ul><hr><p><strong>方法重写：</strong></p><p><strong>重写需要有继承关系，子类重写父类的方法</strong></p><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符:范围可以扩大，但是不能缩小public-&gt;Portected&gt;Default&gt;private</li><li>抛出异常:可以被缩小，但不能扩大ClassNotFoundException–&gt;Exception(大)</li></ul><p>重写，子类的方法和父类必要一致，方法体不同。</p><p><strong>为什么要重写？</strong></p><ul><li>父类的功能，子类不一定需要，或者不一定满足。</li></ul><p>Alt+Insert:override</p><h2 id="10-多态"><a href="#10-多态" class="headerlink" title="10.多态"></a>10.多态</h2><ul><li>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多。（父类、有关系的类）</li><li>多态存在的条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li>注意：多态是方法的多态，属性没有多态性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;        <span class="meta">@java</span>.lang.<span class="function">Override        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;            System.out.println(<span class="string">&quot;son&quot;</span>);        &#125;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;            System.out.println(<span class="string">&quot;eat&quot;</span>);        &#125;    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;<span class="keyword">import</span> DuoTai.Student;<span class="keyword">import</span> DuoTai.Person;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//一个对象的实际类型是确定的        //new Student();        //new Person();        //可以指向的引用类型就不确定了        //父类的引用指向子类        //Student能调用的方法都是自己的或者继承父类的        Student s1 = new Student();        Person  s2 = new Student();        Object s3 = new Student();       //子类重写了父类的方法，执行子类的方法        s2.run();        s1.run();       //对象能执行那些方法只要看对象左边的类型，和右边关系不大        ((Student)s2).eat();//强制类型转换 高转低        s1.eat();    &#125;&#125;/*1.多态是方法的多态，属性没有多态2.父类和子类有联系 类型转换异常 ClassCastException3.多态存在的条件：有继承关系，方法需要重写（否则就是调用各自的方法，那就没有任何区别了）4. 父类的引用指向子类对象 Father f1 = new Son();Static是静态方法属于类，不属于实例final常量private方法：都没有重写 哪来的多态呢 */</span></span><br></pre></td></tr></table></figure><hr><p><strong>instanceof类型转换（与JAVA基础差不多，只是这里的类型转换指的是引用类型的转换）</strong></p><p>判断一个对象是什么类型 instanceof，判断两个类之间是否存在父子关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;<span class="keyword">import</span> DuoTai.Student;<span class="keyword">import</span> DuoTai.Person;<span class="keyword">import</span> DuoTai.Teacher;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//System.out.println(x instanceof y);        //就是看x和y之间有没有父子，没有则报错        //Object - Person - Student        Object object = new Student();        System.out.println(object instanceof Student);        System.out.println(&quot;###########&quot;);        Student student = new Student();        System.out.println(student instanceof  Person);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>static关键字详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//static加在方法上叫静态方法，加在属性上叫静态属性public class Student &#123;        private static  int age;//静态变量        private double score;//非静态变量        public  void run()&#123;        &#125;        public static void  go()&#123;        &#125;    public static void main(String[] args) &#123;        Student s1 = new Student();        //静态可以这样调用        System.out.println(Student.age);        new Student().run();        //非静态        System.out.println(s1.age);        go();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="comment">//赋初始值    &#123;        //匿名代码块（不建议这么写）        System.out.println(&quot;匿名代码块&quot;);    &#125;    //只执行一次    static &#123;        //静态代码块        System.out.println(&quot;静态代码块&quot;);    &#125;    public Person()&#123;        System.out.println(&quot;构造方法&quot;);    &#125;    public static void main(String[] args) &#123;        Person person1 =  new Person();        System.out.println(&quot;##############&quot;);        Person person2 =  new Person();    &#125;&#125;/** * 静态代码块 * 匿名代码块 * 构造方法 *///输出静态代码块匿名代码块构造方法##############匿名代码块构造方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//静态导入包import static java.lang.Math.random;public class demo01 &#123;    public static void main(String[] args) &#123;        System.out.println(random());//代替Math，random    &#125;&#125;//final表示该类不能被继承</span></span><br></pre></td></tr></table></figure><h2 id="11-抽象类"><a href="#11-抽象类" class="headerlink" title="11.抽象类"></a>11.抽象类</h2><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法，如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字类创建对象，它是用来让子类继承的。</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类继承的。</li><li>子类继承抽象列，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//abstract抽象类//extends单继承 接口多继承(例如插座可以插很多个插头)public abstract class demo02 &#123;    //约束，有人帮我们实现    //抽象方法 只有方法名字 没有方法实现    //抽象类的所有方法，继承了他的子类都要实现它的方法    //除非它的子类也是abstract,那就让它的子子类去实现......    public abstract void doSomething()&#123;    &#125;    /**     *不能new这个抽象类，只能靠子类去实现它，     *抽象类中可以写普通的方法     * 抽象方法必须在抽象类中     * 抽象的抽象 约束     * 存在的意义：抽象出来 提高开发效率 后期可扩展性比较高     * /    /&#125;</span></span><br></pre></td></tr></table></figure><h2 id="12-接口"><a href="#12-接口" class="headerlink" title="12.接口"></a>12.接口</h2><ul><li>普通类:只有具体实现</li><li>抽象类：具体实现和规范(抽象方法)都有</li><li>接口:只有规范,自己无法写方法，约束和实现分离。</li><li>接口就是规范，定义的一组规则，体现了现实世界中的”如果你是… 则必须能…”的思想。如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人。……</li><li><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定了就必须要遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口，为什么我们讨论设计模式都只针具备了抽象能力的语言(C++,java,c#等)，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li></ul><p><strong>声明类的关键字是class,声明接口的关键字是interface</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="comment">//interface定义的关键字：接口都需要实现类//抽象的思维-架构师public interface UserService &#123;    //接口中的所有定义其实都是抽象的public    //接口中定义常量    //一般来说是没有在接口中定义常量的    public static final int AGE = 99;    //返回类型+方法    //定义的方法都是public abstract    void  add(String name);    void  delete(String name);    void  update(String name);    void  query(String name);&#125;</span></span><br></pre></td></tr></table></figure><p><strong>作用:</strong></p><ul><li>约束</li><li>定义一些方法，让不同的人来实现</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化-因为接口中没有构造方法</li><li>implements可以实现多个接口</li><li>必须重写接口中的方法</li></ul><h2 id="13-内部类"><a href="#13-内部类" class="headerlink" title="13.内部类"></a>13.内部类</h2><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就成为内部类，而A类相对B类来说就是外部类了。</li><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);    &#125;    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);        &#125;        <span class="comment">//获得外部类的私有属性        public void getID()&#123;            System.out.println(id);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    <span class="comment">//new-外部类        Outer outer = new Outer();        //通过这个外部类来实例化内部类        Outer.Inner inner = outer.new Inner();        inner.in();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;    <span class="comment">//局部内部类    public void method()&#123;        class Inner&#123;        &#125;    &#125;&#125;//一个java类中只能有一个public class//但能有多个class类class A&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">// Apple apple = new Apple();        //没有名字初始化类-就是匿名初始化类        //不用将实例保存到变量中        new Apple().eat();    &#125;&#125;class Apple&#123;    public void eat()&#123;        System.out.println(&quot;1&quot;);    &#125;&#125;interface UserService&#123;  &#125;</span></span><br></pre></td></tr></table></figure><p>(上面一些奇奇怪怪的创建类的方法不推荐使用，否则这个代码就只有你能看懂啦。)</p><h1 id="6-异常"><a href="#6-异常" class="headerlink" title="6.异常"></a>6.异常</h1><h2 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h2><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或者硬盘可能满了。等等。</li><li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是:Exception,意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</li><li>异常程序在运行过程中出现的不期而遇的各种状况，如：文件找不到、网络链接失败、非法参数等。</li><li>异常发生在程序运行期间，它影响了正常的程序执行流程。</li></ul><h2 id="2-简单分类"><a href="#2-简单分类" class="headerlink" title="2.简单分类"></a>2.简单分类</h2><ul><li>要理解JAVA异常处理是如何工作的，你需要掌握以下三种类型的异常：</li><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误ERROR:错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><h2 id="3-异常体系结构"><a href="#3-异常体系结构" class="headerlink" title="3.异常体系结构"></a>3.异常体系结构</h2><ul><li>JAVA把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超累。</li><li>在JAVA API 中已经定义了许多异常类，这些异常类分为两大类，错误ERROR和异常Exception。</li></ul><h2 id="4-ERROR"><a href="#4-ERROR" class="headerlink" title="4.ERROR"></a>4.ERROR</h2><ul><li>ERROR类对象由java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>JAVA虚拟机运行错误,当JVM不在有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定于(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而却绝大多数是程序运行时不允许出现的状况。</li></ul><h2 id="5-Exception"><a href="#5-Exception" class="headerlink" title="5.Exception"></a>5.Exception</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210426201055911.png" alt="image-20210426201055911"></p><ul><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和Exception的区别:Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程；Exception通常情况下可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li></ul><h2 id="6-异常处理机制"><a href="#6-异常处理机制" class="headerlink" title="6.异常处理机制"></a>6.异常处理机制</h2><ul><li>抛出异常</li><li>捕获异常</li><li>异常处理五个关键字<ul><li>try、catch、finally、throw、throws </li></ul></li></ul><p>（快捷键ctrl+alt+t快速选择语句将所选中的语句包裹起来）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.security.mscapi.CPublicKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.AttributeInUseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abnormal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//监控异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;<span class="comment">//捕获异常/里面的参数是捕获错误的类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常啦&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;<span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//假设在这个方法中处理不了异常，在方法上抛出异常。</span></span><br><span class="line">        <span class="comment">//主动抛出异常throw throws</span></span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-自定义异常"><a href="#7-自定义异常" class="headerlink" title="7.自定义异常"></a>7.自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常，只需要继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可以分为一下几个步骤：</li></ul><ol><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo01</span><span class="params">(<span class="keyword">int</span> a )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail  = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString：异常的打印信息</span></span><br><span class="line">    <span class="comment">//实现了一个自定义的异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo01&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;detail=&quot;</span> + detail +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> demo01</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为:&quot;</span>+a);</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> demo01(a);<span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (demo01 e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210427165820171.png" alt="image-20210427165820171"></p><p>视频<a href="https://www.bilibili.com/video/BV12J41137hu?t=17">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -计算机 </tag>
            
            <tag> -笔记 </tag>
            
            <tag> -JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用---四则运算表达式求值</title>
      <link href="2021/04/24/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>2021/04/24/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>栈的应用——四则运算表达式求值</p><h2 id="后缀表达式计算"><a href="#后缀表达式计算" class="headerlink" title="后缀表达式计算"></a>后缀表达式计算</h2><p>先将    数学表达式 用<strong>后缀(逆波兰)表示法</strong>表示。</p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/QQ%E6%88%AA%E5%9B%BE20210423203619-1619183614531-1619240927723.png"></p><p><strong>运算规则：从左到右遍历表达式每个数字和符号，遇到数字就进栈，遇到符号，就将处于栈顶的两个数字出栈，进行运算，运算结果进栈</strong></p><p><strong>运算流程图如下：</strong></p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1619240927723.jpg"></p><h2 id="将中缀表达式转化为后缀表达式"><a href="#将中缀表达式转化为后缀表达式" class="headerlink" title="将中缀表达式转化为后缀表达式"></a>将中缀表达式转化为后缀表达式</h2><p><strong>规则：从左到右遍历中缀表达式的每个数字和符号吗，若是数字则输出，即称为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右符号或优先级低于栈顶符号(乘除优先加减)则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</strong></p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F(2)-1619240927723.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数据结构 </tag>
            
            <tag> -栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言动态内存开辟</title>
      <link href="2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/"/>
      <url>2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-动态内存管理"><a href="#1-动态内存管理" class="headerlink" title="1.动态内存管理"></a>1.动态内存管理</h1><h2 id="1-为什么存在动态内存管理"><a href="#1-为什么存在动态内存管理" class="headerlink" title="1.为什么存在动态内存管理"></a>1.为什么存在动态内存管理</h2><p>当前我们知道的<strong>内存的使用方式</strong>主要是两种。</p><p><strong>1.创建一个变量</strong></p><p>int a = 10;//局部变量  - 在栈区中开辟空间</p><p>int g_a = 10;//全局变量 - 静态区</p><hr><p>在内存中，分为三个区域</p><p><strong>栈区</strong>-局部变量、函数的形参、</p><p><strong>堆区</strong>-动态内存分配-malloc-free-calloc-realloc</p><p><strong>静态区</strong>-全局变量、静态变量、statint int a = 10;</p><hr><p><strong>2.创建一个数组</strong></p><p>int arr[10] =  { 10 };（局部范围-栈区，全局范围-静态区）</p><p>在空间上开辟10个字节的连续空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr</span>[50];</span><span class="comment">//50个struct S类型的数据</span></span><br><span class="line">    <span class="comment">//如果只有30个学生，就会有空间上的浪费</span></span><br><span class="line">    <span class="comment">//如果有60个学生，空间又会不够</span></span><br><span class="line">    <span class="comment">//数组的元素个数，是给定的一个常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>C语言是可以创建变长数组的 -C99中增加了（很多个编译器可能都还没有支持）</p><p>不够普遍。</p><hr><p>因为上面的两种开辟内存空间的方式比较局限，不能满足我们想用多少就开辟多少空间的需求，所以引出动态内存管理。</p><p><strong>提高内存的使用率。</strong></p><h2 id="2-相关函数"><a href="#2-相关函数" class="headerlink" title="2.相关函数"></a>2.相关函数</h2><h3 id="1-malloc和free"><a href="#1-malloc和free" class="headerlink" title="1.malloc和free"></a>1.malloc和free</h3><p><strong>头文件：#include&lt;stdlib.h&gt;</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//向内存申请10整型的空间</span></span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//p里面放的就是那块地址</span></span><br><span class="line">    <span class="comment">//失败时返回空指针NULL</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印错误原因的一个方式</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正常使用空间</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p + i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当动态申请的空间不再使用的时候</span></span><br><span class="line">    <span class="comment">//就应该还给操作系统</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>malloc</strong></p><p>C语言提供了一个动态内存开辟的函数：</p><p>​    void* malloc (size_t size);</p><p>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针。</p><ul><li>如果开辟成功，则返回一个指向开辟好空间的指针。</li><li>如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。</li><li>返回值的类型是*void，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。</li><li>如果size为0，malloc的行为是标准未定义的，取决于编译器。</li></ul><hr><p><strong>free</strong></p><p>C语言提供了另外一个函数free,专门是用来做动态内存释放和回收的。</p><p>free(空间);例如：上面开辟的那个，free(p);</p><p>//就算不free，刚才开辟的空间死掉的话，也会自动还给操作系统。</p><p>free之后，指向的将内存空间被释放了还给操作系统，但是p依然有能力找到这快空间，</p><p>p = NULL，主动将p赋值给空指针，彻底断开了联系，很好的避免了它犯错误。</p><p>free函数用来释放动态开辟的内存</p><ul><li><p>如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未定义的。</p></li><li><p>如果参数prt是NULL指针，咋函数什么事都不做。</p></li></ul><h3 id="2-calloc"><a href="#2-calloc" class="headerlink" title="2.calloc"></a>2.calloc</h3><p>也是一个内存开辟函数，开辟一个空间并且把元素初始化为0.</p><p>原型如下：</p><p>void* </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>*p= (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(<span class="number">10</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));  </span><br><span class="line">    <span class="keyword">if</span>( p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(*p+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="comment">//free函数是用来释放动态开辟的内存空间的</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calloc和malloc一个初始化效率低一点，一个不初始化，效率高一点。</p><ul><li>函数的功能是为num个大小为size的元素开辟一块空间，并且把空间的每个字节初始化为0。</li><li>与函数malloc的区别只在于calloc会在返回地址之前把申请的空间的每个字节初始化为全0。</li></ul><h3 id="3-realloc"><a href="#3-realloc" class="headerlink" title="3.realloc"></a>3.realloc</h3><p><strong>调整动态开辟内存的大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//只是在使用malloc开辟的20个字节空间</span></span><br><span class="line">    <span class="comment">//假设这里，20个字节不能满足我们的使用要求</span></span><br><span class="line">    <span class="comment">//希望我们能够有40个字节的空间</span></span><br><span class="line">    <span class="comment">//这里就可以使用realloc来调整动态开辟的内存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">realloc</span><span class="params">(p,<span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> *p2 = <span class="built_in">realloc</span>(p,<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(p2+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>realloc函数的出现让动态内存管理更加灵活。</li><li>有时我们发现过去申请的内存空间太小了，有时候又会觉得申请的空间过大了，那为了合理的使用内存，我们一定会对内存的大小做灵活的调整。那realloc函数就可以做到对动态开辟内存大小的调整。函数原型如下：</li></ul><p>void* realloc (void* ptr,size_t size);</p><ul><li>ptr是要调整的内存地址</li><li>size是调整之后的大小</li><li>返回值为调整之后的内存起始位置</li><li>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间</li><li>realloc在调整内存空间存在两种情况</li></ul><p><strong>注意事项：</strong></p><ol><li>如果p指向的空间之后有足够的内存空间可以追加，则直接追加，后返回p指向空间的地址。</li><li>如果p指向的空间之后没有足够的内存空间可以追加，则realloc函数会重新找一块新的内存区域，开辟一块满足需求的空间并且把原来内存中的数据拷贝回来，释放旧的内存空间。最后返回新开辟的内存空间地址。</li><li>得用一个新的变量来接收realloc的返回值。</li><li>最后都要free</li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于C语言的计算机网络编程(初识)</title>
      <link href="2021/04/04/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%88%9D%E8%AF%86/"/>
      <url>2021/04/04/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a>1.计算机网络概述</h1><h2 id="1-最早的广域网"><a href="#1-最早的广域网" class="headerlink" title="1.最早的广域网"></a>1.最早的广域网</h2><p>在通信双方或多方之间，通过电路交换建立电路连接的网络。</p><p><img src="/images/image-20210401162927335.png"></p><h2 id="2-电路交换网的特点"><a href="#2-电路交换网的特点" class="headerlink" title="2.电路交换网的特点"></a>2.电路交换网的特点</h2><ol><li><p>建立链接-&gt;使用链接-&gt;释放链接</p></li><li><p>物理通路被双方独占。</p><p>计算机数据是突发式出现在数据链路上的，而电路交换网的建立链接、使用链接、释放链接三个过程使得传输效率太低，故电路交换不适合传输计算机数据。</p><h2 id="3-计算机的网络要求"><a href="#3-计算机的网络要求" class="headerlink" title="3.计算机的网络要求"></a>3.计算机的网络要求</h2><ol><li><p>不是为了打电话</p></li><li><p>结构简单，可靠的传输数据</p></li><li><p>能够连接不同种类的计算机</p></li><li><p>所有网络节点同等重要</p></li><li><p>必须由冗余的路由</p><p><strong>最早的计算机网络</strong>-美国创造的ARPA，最早的ARPA无法连接不同类型的计算机和不同类型操作系统。</p><h2 id="4-分组交换"><a href="#4-分组交换" class="headerlink" title="4.分组交换"></a>4.分组交换</h2><p> <strong>分组交换——</strong>通过标有地址的分组进行路由选择传送数据，使通信通道在传送期间被占用的一种交换方式。</p><p>分组的组成：每个分组都有首部和数据段组成。</p><p><img src="/images/image-20210401163007059.png"></p><h2 id="5-交换方式"><a href="#5-交换方式" class="headerlink" title="5.交换方式"></a>5.交换方式</h2><p>交换方式——<strong>存储转发</strong></p><p>节点收到分组，先暂时存储下来，再检查其首部，按照首部中的目的地址，找到合适的节点转发出去。</p><p><img src="/images/image-20210401162904189.png"></p><p>特点：</p><ol><li><p>以分组作为传输单位</p></li><li><p>独立的选择转发路由</p></li><li><p>逐段占用，动态分配传输带宽。</p><h2 id="6-因特网的发展史"><a href="#6-因特网的发展史" class="headerlink" title="6.因特网的发展史"></a>6.因特网的发展史</h2><p>从的那个APPANET向因特网的发展过程</p><p>1983年 TCP/IP协议称为APPANET的标准协议</p><p><strong>计算机网络世界的世界语——TPC/IP协议</strong></p><p>到现在为止，只要是能够通信、上网的机器，一定用的就是TPC/IP协议族。</p><p>（TPC/IP协议是由很多协议组成的）</p><h2 id="7-三级结构的因特网"><a href="#7-三级结构的因特网" class="headerlink" title="7.三级结构的因特网"></a>7.三级结构的因特网</h2><p>（NSFNET国家科学基金网）</p><p>围绕六台大型计算机中心建设起来的计算机网络</p><p>主干网、地区网、校园网、</p><p><img src="/images/image-20210401164144400.png"></p></li></ol></li></ol></li></ol><p>现在我们国家的网络基本由移动、联通、电信，来进行下分，说白了国家把网络的一些布置，和网络的下分交给了这三大机构来实现。</p><h2 id="8-多级结构因特网"><a href="#8-多级结构因特网" class="headerlink" title="8.多级结构因特网"></a>8.多级结构因特网</h2><p>NSFNET逐步商用因特网主干网代替</p><p><img src="/images/image-20210401164451581.png"></p><h2 id="9-TCP-IP协议简介"><a href="#9-TCP-IP协议简介" class="headerlink" title="9.TCP/IP协议简介"></a>9.TCP/IP协议简介</h2><p>为了使各种不同计算机之间进可以互联，ARPANET指定了一套计算机通信协议，即TCP/IP协议(族)。 </p><p>为了减少协议设计的复杂性，大多数网络模型均采用分层的方式来组织 ，每一层利用下一层提供的服务来为上一层提供服务，本层服务的实现细节对上层屏蔽。</p><h2 id="10-分层结构"><a href="#10-分层结构" class="headerlink" title="10.分层结构"></a>10.分层结构</h2><p>为了实现不同类型的计算机和不同类型的操作系统之间的通信，引入了分层的概念。</p><p>最早的分层体系结构叫做OSI开放系统互联模型，是由国际化标准组织（ISO）指定的，由于OSI过于复杂，所以到现在为止也没有使用它，而使用的是TCP/IP协议族。</p><p>OSI一共分为7层，TPC/IP协议族一共分为4层，虽然TPC/IP协议族层次少，但是却干了OSI7层所有任务</p><p><img src="/images/image-20210401170310168.png"></p><p><strong>应用层</strong>：应用程序间沟通的层（手机电脑上用的微信QQ,用户能操纵的全都是应用层的）</p><p>​    例如：FPT（文件传输协议）、Telnet、HTTP （超文本协议）等。</p><p><strong>传输层：</strong>提供进程之间的数据传送服务</p><p>​    负责传送数据、提供应用程序端到端的逻辑通信</p><p>​    例如：TCP、UDP。</p><p><strong>网络层：</strong>提供基本的数据封包传送功能</p><p>​    最大可能的让每个数据包都能到大目的主机</p><p>​    例如：IP（网际协议）、ICMP等。</p><p><strong>链路层：</strong>负责数据帧的发送和接收</p><p>​    每层完成自己的任务，最终通过不同层次的处理完成数据的收发。</p><p><img src="/images/image-20210401172352190.png"></p><p>（U形 从我传输数据到张3）</p><h2 id="11-IP协议简介"><a href="#11-IP协议简介" class="headerlink" title="11.IP协议简介"></a>11.IP协议简介</h2><p><strong>IP协议也叫做网际协议。</strong></p><p>特指为实现在一个相互连接的网络系统上从源地址到目的地址传输数据包（互联网数据包）所提供必要功能的协议。</p><p><strong>特点：</strong></p><p>​    不可靠：它不能保证IP数据包能成功到达它的目的地，仅提供尽力而为的传输服务。</p><p>(就告诉你对方是谁，至于你怎么传输，它不管。)</p><p>​    无连接：IP并不维护任何关于后续数据包的状态信息。每个数据包的处理是相互独立的。IP数据包可以不按发送顺序接收。</p><p><strong>IP数据包中含有发送它主机的IP地址（源地址）和接收它主机的地址（目的地址）。</strong></p><p><strong>在网络中IP地址是我们主机的唯一标识。</strong></p><h2 id="12-TPC协议简介"><a href="#12-TPC协议简介" class="headerlink" title="12.TPC协议简介"></a>12.TPC协议简介</h2><p><strong>TPC协议——传输控制协议。</strong></p><p><strong>TPC是一种面向连接的，可靠的传输层通信协议。</strong></p><p><strong>功能：</strong></p><p>​    提供不同主机上 的进程间通信。</p><p><strong>特点：</strong></p><ol><li><p>建立链接-&gt;使用链接-&gt;释放链接（虚电路）。</p></li><li><p>TPC数据包中包含序号和确认序号。（保证数据传输的无误）</p></li><li><p>对包进行排序并检错，而损坏的包可以被重传。</p><p><strong>服务对象：</strong></p><p>需要高度可靠性且面向连接的服务。</p><p>如HTTP（超文本协议）、FTP（文件传输协议）、SMTP（简单邮件传输协议）等。</p><p>（如果用的不都是TCP协议，就无法保证数据可以完整可靠的到达，从而出现问题，像文件传输、邮件传输、浏览网页，一定都是建立在TCP协议的基础上的。）</p><h2 id="13-UDO协议简介"><a href="#13-UDO协议简介" class="headerlink" title="13.UDO协议简介"></a>13.UDO协议简介</h2><p><strong>UDP协议——用户数据报协议</strong>。</p><p><strong>UDP是一种面向无连接的传输层通信协议</strong>。</p><p><strong>功能：</strong></p><p>​    提供不同主机间上的进程间通信。</p><p><strong>特点：</strong></p><ol><li><p>发送数据之前不需要建立链接。</p></li><li><p>不对数据包的顺序进行检查。（可能有顺序问题，但是快啊 ）</p></li><li><p>没有错误检测和重传机制。</p><p><strong>服务对象：</strong></p><p>主要用于”查询-应答”的服务</p><p>如：NFS、NTP、DNS等</p></li></ol></li></ol><h2 id="14-MAC地址、IP地址、Netmask、端口"><a href="#14-MAC地址、IP地址、Netmask、端口" class="headerlink" title="14.MAC地址、IP地址、Netmask、端口"></a>14.MAC地址、IP地址、Netmask、端口</h2><h3 id="1-网卡"><a href="#1-网卡" class="headerlink" title="1.网卡"></a><strong>1.网卡</strong></h3><p>​    网卡又称为网络适配器或网络接口卡NIC，但是现在更多的人愿意使用更为简单的名称’网卡’，通过网卡能够使不同的计算机之间连接，从而完成数据通信等功能。</p><h3 id="2-MAC地址："><a href="#2-MAC地址：" class="headerlink" title="2.MAC地址："></a><strong>2.MAC地址：</strong></h3><p>​    每一个网卡在出厂的时候都会给它分配一个编号，这个编号就叫做<strong>MAC地址</strong>。</p><p>MAC地址，用于标识网络设备，类似于身份证，且理论上全球唯一。</p><p>（MAC地址是可以修改的，但是一般是不建议修改的。）</p><p><strong>MAC地址的组成：</strong>——以太网内的MAC地址是一个48bit的值，通常人为识别时是通过16进制数来识别的，以两个十六进制数为一组，一共分为6组，每组通过冒号隔开，前三组叫做，厂商ID，后三组叫做，设备ID.</p><p>如何查询Linux的MAC地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>如何查询 Windows的MAC地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">鼠标右键点击计算机右下角电脑图标，选择网络和共享中心，选择更改适配器设置，找到联网的图标，双击打开，点击详细信息，即可找到MAC地址。</span><br></pre></td></tr></table></figure><h3 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3.IP地址"></a>3.<strong>IP地址</strong></h3><p>IP地址是一种Intenet上的主机编址方式，也称为网际协议地址。</p><p> IP地址是任意一台主机在网络中的唯一表示。</p><p><strong>IP地址的分类：</strong></p><p>IPV4——占32位，（主要用）</p><p>IPV6占128位，</p><p>（任意一个IP地址通过路由器都可以下分一个局域网。）</p><p><strong>IP地址组成：</strong></p><p>IPV4一般使用点分十进制字符串来表示，比如192.168.6.106</p><p>（ip地址有点类似于MAC地址，MAC地址是通过冒号把两个十六进制的数放一块来表示一组，一共有六组组成，而ipv4是通过点来把ip地址分开，相当于每一个点把它间隔1个字节，这是我们认为的时候是通过点分十进制的，但是如果实在网络中计算机识别，它还是一个整型的数据，占四个字节。）</p><hr><p>使用32bit，由（网络、ID、主机 ID）两部分组成</p><p>子网ID:IP地址中由子网掩码中1覆盖的连续位。</p><p>主机ID:IP地址中由子网掩码中0覆盖的连续位。</p><hr><p>子网ID和主机ID为什么这么区分呢？</p><p>——通过主机ID的范围可以确定当前一个网段到底可以下分多少个主机。</p><p><img src="/images/image-20210401191658443.png"></p><p><strong>IP地址的特点：</strong></p><p>子网ID不同的网络不能直接通信，如果要通信则需要路由器转发。</p><p>主机ID全为0的IP地址表示网段地址。</p><p>主机ID全为1（255个）的IP地址表示该网段的广播地址。 </p><p>例如：192.168.3.10和192.168.3.111可以直接通信。</p><p>​            对192.168.3.x网段而言，192.168.3.0表示网段， 192.168.3.255表示广播地址 。</p><p><strong>IP地址分类如下:</strong></p><p><strong>ABC三类地址是最常用的</strong></p><p>IPV4地址的分类（依据前8位进行区分）</p><p>A类地址：默认8bit子网ID,第一位为0，前八位范围00000000-011111111，0.x.x.x-127.x.x.x</p><p>B类地址：默认16bit子网ID，前两位为10，前八位范围10000000-10111111,128.x.x.x-191.x.x.x</p><p>C类地址：默认24bit子网ID,前三位为110，前八位范围11000000-11011111 ，192.x.x.x-223.x.x.x</p><p>D类地址：前四位为1110，多播（组播）地址,前八位范围11100000-11101111，  224.x.x.x-239.x.x.x</p><p>E类地址：前五位为11110，保留为今后使用，前八位范围11110000-11111111,</p><p>240.x.x.x-255.x.x.x</p><hr><p><strong>公有IP：</strong>（可直接连接Internet）</p><p>​    经由InterNIC所统一规划的IP。</p><p><strong>私有IP：</strong>（不可直接连接Internet）</p><p>​    主要用于局域网内的主机连接规划。</p><p><img src="/images/image-20210401194106678.png"></p><p>​    <strong>回环IP地址：</strong></p><p>通常127.0.0.1称为回环地址。</p><p>功能：主要测试本机的网络配置，能ping通127.0.0.1说明本机的网卡和IP协议安装都没有问题。</p><p>注意：127.0.0.1-127.255.255.254中的任何地址都将回环到本地主机中，</p><p>不属于任何一个有类别地址类，它代表设备的本地虚拟接口。</p><p><strong>查询IP地址的命令：</strong></p><p>Linux——ifconfig</p><p>Windows——ipconfig</p><p><strong>判断主机是否可以连接通信：</strong></p><p>ping ip地址，</p><p>如果显示%0 packet loss，就表示可以正常通信。</p><p><strong>子网掩码：</strong></p><p>子网掩码（subnet mask）又叫做网络掩码、地址掩码是一个32bit由1和0组成的数值，并且1和0 分别连续。</p><p>作用：指明IP地址中哪些位标识的是主机所在的子网以及哪些是标识的主机号。</p><p>特点：必须结合IP地址一起使用，不能单独存在。</p><p>​            IP地址中由子网掩码中1覆盖的连续位为子网ID，其余为主机ID。</p><p>子网掩码的表现形式：</p><p>192.168.220.0/255.255.255.0</p><p>192.168.220.0/24</p><p>手动配置:</p><p>Linux——<img src="/images/image-20210401200652709.png"></p><p>默认的子网掩码：</p><p>A类IP地址的默认子网掩码-255.0.0.0</p><p>B类IP地址的默认子网掩码-255.255.0.0</p><p>C类IP地址的默认子网掩码-255.255.255.0(对应的网络ID是前三个字节，主机ID是最后一个字节，最多能给他分配256个IP地址，其中.0和.255分别表示网段和广播地址，所以一共可以分配254个IP地址)</p><h3 id="4-端口："><a href="#4-端口：" class="headerlink" title="4.端口："></a>4.<strong>端口：</strong></h3><p>端口概述</p><p>TPC/IP协议采用端口标识通信的进程</p><p>用于区分一个系统里的多个进程</p><p>特点：</p><ol><li><p>对于同一个端口，在不同系统中对应着不同的进程。</p></li><li><p>对于同一个系统，一个端口只能被一个进程拥有。</p></li><li><p>一个进程拥有一个端口后，传输层送到该端口的数据全部被该进程接收，同样，进程送交给传送层的数据也通过该端口被送出。</p><p><strong>端口号：</strong></p><p>类似pid（进程号）标识一个进程，在网络程序中，用端口号(port)来标识一个运行的网络程序。</p><p><strong>特点：</strong></p><ol><li>端口号是无符号短整型类型。</li><li>每个端口都有一个端口号。</li><li>TPC、UDP维护各自独立的端口号。</li><li>网络应用程序，至少占用一个端口号，也可以占用多个端口号。</li></ol><p><strong>知名端口</strong>号（1~1023）</p><p>由互联网数字分配机构（IANA）根据用户需要进行统一分配</p><p>例如：FTP-21,HTTP-80</p><p>服务器通常使用的范围：</p><p>若强制使用，需加root权限 。</p><p><strong>动态端口</strong>（1024~65535）</p><p>应用程序通常使用的范围。</p><p>一般我们可以使用的端口号就在这个范围，比如：6666、7777、8888、9999、10000、10001等。</p><p><strong>注意：</strong></p><p>​    端口号类似于进程号，同一时刻只能标识一个进程。</p><p>​    可以重复使用。</p></li></ol><h2 id="15-数据包的组装、拆解"><a href="#15-数据包的组装、拆解" class="headerlink" title="15.数据包的组装、拆解"></a>15.数据包的组装、拆解</h2><h3 id="1-数据包在各个层之间的传输"><a href="#1-数据包在各个层之间的传输" class="headerlink" title="1.数据包在各个层之间的传输"></a>1.数据包在各个层之间的传输</h3><p><img src="/images/image-20210402121144462.png"></p><h3 id="2-链路层封包模式"><a href="#2-链路层封包模式" class="headerlink" title="2.链路层封包模式"></a>2.链路层封包模式</h3><p><img src="/images/image-20210402121958302.png"></p><p>目的地址：目的MAC地址</p><p>源地址：源MAC地址</p><p>类型：确定以太网头后面跟的是哪个协议</p><p>​            0X0800 IP协议</p><p>​            0x0806 arp协议</p><p>​            0x0835 rarp协议</p><p><strong>注意：</strong></p><p>1、IEE802.2/802.3封装常用在无线。</p><p>2、以太网封装常用在有线局域网</p><h3 id="3-网络层、传输层封包格式"><a href="#3-网络层、传输层封包格式" class="headerlink" title="3.网络层、传输层封包格式"></a>3.网络层、传输层封包格式</h3><p><img src="/images/image-20210402122735364.png"></p><h2 id="16-网络应用程序开发流程"><a href="#16-网络应用程序开发流程" class="headerlink" title="16.网络应用程序开发流程"></a>16.网络应用程序开发流程</h2><h3 id="1-TPC——面向连接"><a href="#1-TPC——面向连接" class="headerlink" title="1.TPC——面向连接"></a>1.TPC——面向连接</h3><p>电话系统服务模式的抽象。</p><p>每一次完整的数据传输都要经过建立连接、使用连接、终止连接的过程。</p><p>本质上，连接是一个管道，收发数据不但顺序一致，而且内容相同。</p><p>保证数据传输的可靠性。</p><p><img src="/images/image-20210402143007985.png"></p><h3 id="2-UDP面向无连接"><a href="#2-UDP面向无连接" class="headerlink" title="2.UDP面向无连接"></a>2.UDP面向无连接</h3><p>邮件系统服务模式的抽象。</p><p>每个分组都携带完整的目的地地址。</p><p>不能保证分组的先后顺序。</p><p>不进行分组出错的恢复和重传。</p><p>不保证数据传输的可靠性。</p><p><img src="/images/image-20210402143326619.png"></p><hr><p>无论采用面向连接的还是无连接的，两个进程通信过程中，大多采用c/s架构（客户端 服务器架构）,</p><p>client向server发送请求，server接收到后提供相应的服务。</p><p>在通信过程中往往都是client先发送请求，而server等待请求然后进行服务。</p><p><img src="/images/image-20210402143629366.png"></p><hr><p>c/s架构示例，（面向连接）</p><p><img src="/images/image-20210402144056505.png"></p><p>服务器要先与客户端进行连接，TCP三次握手，三次握手成功之后，才可以相互发送数据，结束时，TCP四次挥手。</p><hr><p><strong>suerver工作过程</strong></p><p>打开通信通道告诉本地主机，它愿意在一特定端口（如80）上接收客户请求，</p><p>等待客户请求到达该端口，</p><p>接收客户请求，并发送应答信号，激活一新的线程处理这个客户请求，</p><p>服务完成后，关闭新线程与客户的通信链路。</p><p><strong>client工作过程</strong></p><p>打开一通信通道并连接到服务器特定端口，</p><p>向服务器发送服务请求，等待并接收应答，</p><p>根据需求继续提出请求，</p><p>请求结束后关闭通信通道并终止。</p><hr><h1 id="2-UDP编程"><a href="#2-UDP编程" class="headerlink" title="2.UDP编程"></a>2.UDP编程</h1><h2 id="1-编程准备-字节序、地址转换"><a href="#1-编程准备-字节序、地址转换" class="headerlink" title="1.编程准备-字节序、地址转换"></a>1.编程准备-字节序、地址转换</h2><h3 id="1-字节序概述"><a href="#1-字节序概述" class="headerlink" title="1.字节序概述"></a>1.字节序概述</h3><p>是指多字节数据的存储顺序。</p><p><strong>分类：</strong></p><p>​        小端格式：将低位字节数据存储在低地址。</p><p>​        大端格式：将高位字节数据存储在低地址。</p><p><strong>注意：</strong></p><p>​        LSB:低地址。</p><p>​        MSB:高地址。</p><p><img src="/images/image-20210402151122456.png"></p><p><strong>如何判断当期机器的字节序：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">un</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">un</span> <span class="title">myun</span>;</span></span><br><span class="line">myun.a = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %#x\n&quot;</span>, myun.a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %#x\n&quot;</span>, myun.b);</span><br><span class="line"><span class="keyword">if</span> (myun.b == <span class="number">0x78</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端存储模式\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端存储模式\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字节序转换函数"><a href="#2-字节序转换函数" class="headerlink" title="2.字节序转换函数"></a>2.字节序转换函数</h3><p><strong>特点：</strong></p><ol><li>网络协议指定通信字节序为大端存储。</li><li>只有在字节数据处理时才需要考虑字节序。</li><li>运行在同一台计算机上的进程互相通信时，一般不用考虑字节序。</li><li>异构计算机之间通讯，需要转换自己的字节序为网络字节序。</li></ol><p><strong>在需要字节转换的时候一般调用特定字节序转换函数。</strong></p><blockquote><p>host —&gt; network</p><p>1——htonl</p><p>2——htons</p><p>network —&gt; host</p><p>3——ntohl</p><p>4——ntohs</p></blockquote><h4 id="1-htonl"><a href="#1-htonl" class="headerlink" title="1.htonl"></a>1.htonl</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint32_t htonl(uint32_t hostint32);</p><p><strong>功能：</strong></p><p>​        将32位主机字节序数据转换成网络字节序数据</p><p><strong>参数：</strong></p><p>​        hostint32:待转换的32位主机字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回网络字节序的值.</p><h4 id="2-htons"><a href="#2-htons" class="headerlink" title="2.htons"></a>2.htons</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint16_t htons(uint16_t hostint16);</p><p><strong>功能：</strong></p><p>​        将16位主机字节序数据转换成网络字节序数据</p><p><strong>参数：</strong></p><p>​        uint16_t: unsigned short int </p><p>​        hostint16:待转换的16位主机字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回网络字节序的值。</p><h4 id="3-ntohl"><a href="#3-ntohl" class="headerlink" title="3.ntohl"></a>3.ntohl</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint32_t ntosl(uint32_t hostint32);</p><p><strong>功能：</strong></p><p>​        将32位网络字节序数据主机字节序数据。</p><p><strong>参数：</strong></p><p>​        uint32_t: unsigned  int </p><p>​        netint32:待转换的32位网络字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回主机字节序的值。</p><h4 id="4-ntohs"><a href="#4-ntohs" class="headerlink" title="4.ntohs"></a>4.ntohs</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint16_t ntosl(uint16_t hostint16);</p><p><strong>功能：</strong></p><p>​        将16位网络字节序数据主机字节序数据。</p><p><strong>参数：</strong></p><p>​        uint32_t: unsigned  short int </p><p>​        netint32:待转换的16位网络字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回主机字节序的值。</p><hr><p>案例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Linux</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x123456789</span>;</span><br><span class="line">    <span class="keyword">short</span> b = <span class="number">0x1234</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,htonl(a));<span class="comment">//0x785612</span></span><br><span class="line">    <span class="comment">//转化为网络字节序变成了大端存储模式</span></span><br><span class="line">    <span class="comment">//c语言%#x是指带格式的16进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,htons(a));<span class="comment">//0x3412</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-地址转换函数"><a href="#3-地址转换函数" class="headerlink" title="3.地址转换函数"></a>3.地址转换函数</h3><p>人为识别的ip地址是点分十进制数串形式，但是计算机或者网络中识别的ip地址是整形数据，所以需要进行转化。</p><h4 id="1-inet-pton函数"><a href="#1-inet-pton函数" class="headerlink" title="1.inet_pton函数"></a>1.inet_pton函数</h4><p>字符串 ip地址转整型数据</p><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>int inet_pton(int famliy,const char &amp;strptr, void *addrptr)</p><p>人为识别的时候，ip地址就是一串字符串。让网络或者识别的时候，要将他转化为整型数据。用四字节的整数来保存整个ip地址。</p><p><strong>功能：</strong></p><p>​        将点分十进制的数转换成32位无符号整数。</p><p><strong>参数;</strong></p><p>​        family 协议族</p><pre><code>             AF_INET   IPV4网络协议</code></pre><p>​                AF_INET6 IPV6网络协议</p><p>​        strptr 点分十进制数串 </p><p>​        addrptr 32位无符号整数的地址</p><p><strong>返回值：</strong></p><p>​        成功返回1、失败返回其他</p><hr><p>案例：</p><p>​    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ip_str = <span class="string">&quot;192.168.3.103&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ip_int = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *ip_p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//将点分十进制ip地址转化为32位无符号整型数据</span></span><br><span class="line">    inet_pton(AF_INET ,ip_str,&amp;ip_int);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ip_net = %d\n&quot;</span>,ip_net);</span><br><span class="line">    ip_p = (<span class="keyword">char</span> *)&amp;ip_int;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in_uint = %d,%d,%d,%d\n&quot;</span>,*ip_p,*(ip_p+<span class="number">1</span>),*(ip_p+<span class="number">2</span>),*(ip_p+<span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/images/image-20210403100508157.png"></p><hr><h4 id="2-inet-ntop函数"><a href="#2-inet-ntop函数" class="headerlink" title="2.inet_ntop函数"></a>2.inet_ntop函数</h4><p>整型数据转字符串格式ip地址</p><p><strong>头文件：</strong></p><p>​    #include&lt;arpa/inet.h&gt;</p><p>const char *inet_ntop(int family,const void *addrptr,char *strptr,size_t len);</p><p><strong>功能：</strong></p><p>​    将32位无符号整数转换为点分十进制数串。</p><p><strong>参数：</strong><br>    family 协议族</p><p>​    addrptr 32位无符号整数</p><p>​    strptr点分十进制数串</p><p>​    len strptr缓冲区长度</p><p>​                len 的宏定义</p><p>​                #define INET_ADDRSTRLEN 16     //for IPV4</p><p>​                #define INET_ADDRSTRLEN 46     //for IPV6</p><p><strong>返回值：</strong></p><p>​    成功：则返回字符串首地址。</p><hr><p>案例;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ip_net[] = &#123;<span class="number">192.168</span><span class="number">.3</span><span class="number">.103</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ip_str[<span class="number">16</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    inet_ntop(AF_INET,&amp;ip_int,ip_str,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ip_s = %s\n&quot;</span>,ip_str);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="/images/image-20210403101223448.png"></p><hr><h4 id="3-inet-addr-和ine-ntoa"><a href="#3-inet-addr-和ine-ntoa" class="headerlink" title="3.inet_addr()和ine_ntoa()"></a>3.inet_addr()和ine_ntoa()</h4><p>只能用在IPV4的ip地址的转换中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">in_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></span>;</span><br><span class="line">功能：</span><br><span class="line">    将点分十进制ip地址转化为整型数据。</span><br><span class="line">参数：</span><br><span class="line">    cp:点分十进制ip地址</span><br><span class="line">返回值：</span><br><span class="line">    成功：整型数据</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br><span class="line">功能：</span><br><span class="line">    将整型数据转化为点分十进制的ip地址</span><br><span class="line">参数：</span><br><span class="line">    in:保存ip地址的结构体</span><br><span class="line">返回值:</span><br><span class="line">成功：点分十进制ip地址。</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-UDP介绍、编程流程"><a href="#2-UDP介绍、编程流程" class="headerlink" title="2.UDP介绍、编程流程"></a>2.UDP介绍、编程流程</h2><h3 id="1-UDP概述"><a href="#1-UDP概述" class="headerlink" title="1.UDP概述"></a>1.UDP概述</h3><p><strong>UDP协议：</strong></p><p>​    面向无连接的用户数据协议，在传输数据前不需要先建立连接，目的主机的运输层收到UDP报文后，不需要给出任何确认。</p><p><strong>UDP特点：</strong></p><ol><li>相比TCP速度稍快。</li><li>简单的请求/应答应用程序可以使用UDP.</li><li>对于海量的数据传输不应该使用UDP.</li><li>广播和多播应用必须使用 UDP。</li></ol><p><strong>UDP应用：</strong></p><p>​    DNS(域名解析)、NFS(网络文件系统)、RTP(流媒体)等。</p><p>​    一般语音和视频通话都是使用UDP来通信的</p><h3 id="2-网络的编程接口socket"><a href="#2-网络的编程接口socket" class="headerlink" title="2.网络的编程接口socket"></a>2.网络的编程接口socket</h3><p><strong>网络通信要解决的是不用主机进程间的通信。</strong></p><ol><li><p>首要问题是网络间进程标识问题。</p></li><li><p>以及多重协议的识别问题。</p><p>​    20世纪80年代初，加州大学Berkeley分校在BSD(一个UNIX OS版本)系统内实现了TPC/IP协议；其网络程序编程开发接口为socket。</p></li></ol><p>随着UNIX以及类UNIX的操作系统的广泛应用，socket成为最流行的网络程序开发接口。</p><p>(Linux操作系统就是类UNIX操作系统。)</p><p><strong>socket作用：</strong></p><p>​    提供不同主机上进程之间的通信。</p><p><strong>socket特点:</strong></p><ol><li>socket也成”套接字”。</li><li>是一种文件描述符，代表了一个通信管道的一个端点。</li><li>类似于对文件的操作一样（读写操作），可以使用read、write、close等函数对socket套接字进行网络数据的收取和发送等操作。</li><li>得到socket套接字（描述符）的方法调用socket()。</li></ol><p><strong>socket的分类：</strong></p><p>SOCK_STREAM，流式套接字，用于TCP。</p><p>SOCK_DGRAM，数据报套接字，用于UDP。</p><p>SOCK_ROW，原始套接字，对于其他层次的协议操作时需要使用这个类型。</p><h3 id="3-UDP编程c-s架构"><a href="#3-UDP编程c-s架构" class="headerlink" title="3.UDP编程c/s架构"></a>3.UDP编程c/s架构</h3><p><img src="/images/image-20210403161617968.png"></p><p>（左边UDP客户端                                                                 右边UDP服务器     ）</p><p>（服务器永远是被动的，客户端是主动的。）</p><p><strong>UDP网络编程流程：</strong></p><p>​    <strong>服务器：</strong></p><p>​            创建套接字socket()</p><p>​            将服务器的IP地址、端口号与套接字进行绑定bind()</p><p>​            (为什么要进行绑定，只有当你进行绑定了之后，服务器所对应的信息才能固定，客户端才能找到服务器。)</p><p>​            接收数据recvfrom()</p><p>​            发送数据sendto()</p><p>​    <strong>客户端：</strong></p><p>​            创建套接字socket()</p><p>​            发送数据sendto()</p><p>​            接收数据recvfrom()</p><p>​            关闭套接字close()</p><h3 id="4-UDP编程-创建套接字"><a href="#4-UDP编程-创建套接字" class="headerlink" title="4.UDP编程-创建套接字"></a>4.UDP编程-创建套接字</h3><p>int socket(int family,int type,int protocol);</p><p><strong>功能：</strong></p><p>​    创建一个用于网络通信的socket套接字（描述符）。</p><p><strong>参数：</strong></p><p>​    family:协议族(AF_INET、AF_INET6、PF_PACKET等)</p><p>​    type:套接字类(SOCK_STREAM、SOCK_DGRAM、SOCK_RAW等)</p><p>​    protocol:协议族类(0、IPPROTO_TCP、IPPROTO_UDP等)</p><p><strong>返回值：</strong></p><p>​    套接字</p><p><strong>特点：</strong></p><p>​     创建套接字时，系统不会分配端口。</p><p>​     创建的套接字默认属性是主动的，即主动发起服务的请求；当作为服务器时，往往需要修改为被动的。</p><p><strong>头文件：</strong></p><p>​    #include&lt;sys/socket.h&gt;</p><h3 id="5-创建UDP套接字demo"><a href="#5-创建UDP套接字demo" class="headerlink" title="5.创建UDP套接字demo"></a>5.创建UDP套接字demo</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//使用socket函数创建套接字</span></span><br><span class="line">    <span class="comment">//创建一个用于UDP网络编程的套接字</span></span><br><span class="line">    <span class="keyword">int</span> socket;</span><br><span class="line">    <span class="keyword">if</span>((socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fail to socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockfd = %d\n&quot;</span>,sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">sockfd = <span class="number">3</span>；</span><br></pre></td></tr></table></figure><h2 id="3-UDP编程-发送-、绑定、接收数据"><a href="#3-UDP编程-发送-、绑定、接收数据" class="headerlink" title="3.UDP编程 - 发送 、绑定、接收数据"></a>3.UDP编程 - 发送 、绑定、接收数据</h2><h3 id="1-IPV4套接字地址结构"><a href="#1-IPV4套接字地址结构" class="headerlink" title="1.IPV4套接字地址结构"></a>1.IPV4套接字地址结构</h3><p>**在网络编程中经常使用的结构体 **sockaddr_in</p><p> <strong>头文件：</strong>#include&lt;netinet/in.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  int_addr_t_s_addr;<span class="comment">//4字节</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socketaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;<span class="comment">//2 协议族</span></span><br><span class="line">    <span class="keyword">in_port_t</span> sin_port;<span class="comment">//2字节 端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">//4个字节 IP地址</span></span><br><span class="line">    <span class="keyword">char</span> sin_zero[<span class="number">8</span>];<span class="comment">//8个字节------填充，不起什么作用，一个char类型的数组。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了使不同格式地址能被传入套接字函数，地址须要强制转换成通用套接字地址结构。</p><p>因为：不同场合使用的结构体不一样，但是调用的函数却是同一个，所以定义一个通用结构体，当在指定场合使用时，再根据要求传入指定的结构体即可。</p><p><strong>通用结构体</strong></p><p>sockaddr</p><p>#include&lt;netinet/in.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family;<span class="comment">//2个字节</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];<span class="comment">//14个字节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>​    以上三个结构在Linux系统中已经定义。</p><h3 id="2-两种地址结构使用场合"><a href="#2-两种地址结构使用场合" class="headerlink" title="2.两种地址结构使用场合"></a>2.两种地址结构使用场合</h3><p>在定义源地址和目的地址结构时，选用struct sockaddr_in</p><p>例：</p><p>struct sockaddr_in my_addr;</p><p>当调用编程接口函数，且该函数也需要传入地址结构时需要用struct sockaddr进行强制转换。</p><p>例：</p><p>bind(sockfd,(struct sockaddr*)&amp;my_addr,sizeof(my_addr));</p><h3 id="3-发送数据-sendto函数"><a href="#3-发送数据-sendto函数" class="headerlink" title="3.发送数据-sendto函数"></a>3.发送数据-sendto函数</h3><p>ssize_t sendto(int sockfd const void *buf,</p><p>​                        size_t nbytes,int flags,</p><p>​                        const struct sockaddr *to,</p><p>​                        socklen_t addrlen);</p><p><strong>功能：</strong></p><p>​    向to结构体指针中指定的ip，发送UDP数据。</p><p><strong>参数：</strong></p><p>​    sockfd:套接字</p><p>​    buf:发送数据缓冲区</p><p>​    nbytes:发送数据缓冲区的大小</p><p>​        </p><p>​    flags:一般为0</p><p>​    to:指向目的主机地址结构体的指针</p><p>​    addrlen:to所指向内容的长度</p><p><strong>注意：</strong></p><p>​    to和addrlen确定目的地址</p><p>​    可以发送0长度的UDP数据包</p><p><strong>返回值：</strong></p><p>​    成功：发送数据的字符数</p><p>​    失败：-1</p><h3 id="4-向”网络调试助手”发送消息"><a href="#4-向”网络调试助手”发送消息" class="headerlink" title="4.向”网络调试助手”发送消息"></a>4.向”网络调试助手”发送消息</h3><h3 id="5-绑定-bind函数"><a href="#5-绑定-bind函数" class="headerlink" title="5.绑定 bind函数"></a>5.绑定 bind函数</h3><p>UDP网络程序想要收取数据需要什么条件？</p><p>​    确定的ip地址</p><p>​    确定的port</p><p>怎样完成上面的条件呢？</p><p>​    接收端 使用bind函数，来完成地址结构和socket套接字的绑定，这样ip、port就固定了。</p><p>​    发送端 在sendto函数中指定接收端的ip、port,就可以发送数据了。</p><hr><p>由于服务器是被动的，客户端是主动的，一般先运行服务器，后运行客户端，所以服务器需要固定自己的信息（ip、port），这样客户端才可以找到服务器并与之通信，客户端一般不需要bind绑定，因为系统会自动给客户端分配ip地址和端口号。</p><hr><p>int bind(int sockfd,</p><p>​                    const struct sockaddr * myaddr , socklen_t addrlen);</p><p><strong>功能：</strong></p><p>​    将本地协议地址与sockfd绑定。</p><p><strong>参数：</strong></p><p>​    sockfd: socket套接字</p><p>​    myaddr:指向特定协议的地址结构指针</p><p>​    addrlen:该地址结构的长度</p><p><strong>返回值：</strong></p><p>​    成功：返回0</p><p>​    失败：其他</p><h3 id="6-bind示例"><a href="#6-bind示例" class="headerlink" title="6.bind示例"></a>6.bind示例</h3><h3 id="7-接收数据——recvfrom-函数"><a href="#7-接收数据——recvfrom-函数" class="headerlink" title="7.接收数据——recvfrom 函数"></a>7.接收数据——recvfrom 函数</h3><p>ssize_t recvfrom(int sockfd,void *buf,</p><p>​                            size_t nbytes,int flags,</p><p>​                            struct sockaddr *from,</p><p>​                            socklen_t 8addrlen);</p><p><strong>功能：</strong></p><p>​    接收UDP数据 ，并将源地址信息保存在from指向的结构中。</p><p><strong>参数：</strong></p><p>​    sockfd:套接字</p><p>​    buf:接收数据缓区</p><p>​    flags:套接字标志(常为0)</p><p>​    from:源地址结构体指针，用来保存数据的来源</p><p>​    addrlen:from所指内容的长度</p><p><strong>注意：</strong></p><p>​    通过from和addrlen存放数据来源的信息</p><p>​    from和addrlen可以为NULL,表示不保存数据的来源</p><p><strong>返回值：</strong></p><p>​    成功：接收到的字符数</p><p>​    失败：-1</p><h3 id="8-接收”网络调试助手”的数据"><a href="#8-接收”网络调试助手”的数据" class="headerlink" title="8.接收”网络调试助手”的数据"></a>8.接收”网络调试助手”的数据</h3><h2 id="4-回顾"><a href="#4-回顾" class="headerlink" title="4.回顾"></a>4.回顾</h2><p><strong>UDP编程-client、server</strong></p><p>​    其实在网络编程开发中，clent和server双方既可以有发送数据还可以接收数据；一般认为服务的一方为server,而接受服务的一方为client.</p><p>​    <strong>C/S架构回顾</strong></p><h2 id="5-UDP客户端注意点"><a href="#5-UDP客户端注意点" class="headerlink" title="5.UDP客户端注意点"></a>5.UDP客户端注意点</h2><ol><li>本地ip,本地端口（我是谁）</li><li>目的ip.目的端口（发给谁）</li><li>在客户端代码中，我们只设置了目的ip,目的端口。</li></ol><p><img src="/images/image-20210404105327134.png">                            </p><h2 id="6-UDP服务器注意点"><a href="#6-UDP服务器注意点" class="headerlink" title="6.UDP服务器注意点"></a>6.UDP服务器注意点</h2><ol><li>服务器之所以需要bind是因为它的本地port是需要固定的，而不是随机的。</li><li>服务器也可以主动地给客户端发送数据。</li><li>客户端也可以用bind ，这样客户端的本地端口就是固定的了，但一般不这样做。</li></ol><hr><p>参考视频：<a href="https://www.bilibili.com/video/BV1pX4y1N7T4?p=41">https://www.bilibili.com/video/BV1pX4y1N7T4?p=41</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现字母数字雨小程序</title>
      <link href="2021/03/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E9%9B%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/03/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E9%9B%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字母数字雨</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//随机数头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//包含easyX图形库 可以使用绘图函数 以及鼠标操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 20<span class="comment">//没串雨的字符个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RAIN_NUM 128<span class="comment">//雨的数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH 960</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEIGHT 640</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_W 15<span class="comment">//字符宽度</span></span></span><br><span class="line"><span class="comment">//结构体封装属性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rain</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> speed;</span><br><span class="line"><span class="keyword">char</span> str[STR_SIZE];<span class="comment">//每一串字符语</span></span><br><span class="line">&#125;rain[RAIN_NUM];</span><br><span class="line"><span class="comment">//每一个字符串由字符组成</span></span><br><span class="line"><span class="comment">//写一个函数生成字符</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">createch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//随机产生字符，使用rand函数,</span></span><br><span class="line"><span class="comment">//随机中的随机</span></span><br><span class="line"><span class="keyword">int</span> flag = rand() % <span class="number">3</span>;<span class="comment">// 0 1 2</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//产生0~9的随机数 加一个&#x27;0&#x27;把数字转化成字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;<span class="comment">//随机产生字母 大写 小写 26个字母</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].x = i*STR_W;<span class="comment">//每条雨之间的距离等距</span></span><br><span class="line">rain[i].y = rand() % HEIGHT;</span><br><span class="line">rain[i].speed = rand() % <span class="number">5</span> +<span class="number">5</span> ;<span class="comment">//在5 ~ 9之间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].str[j] = createch();<span class="comment">//初始化每条雨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//双缓冲绘图</span></span><br><span class="line">BeginBatchDraw();</span><br><span class="line"><span class="comment">//清楚屏幕</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置颜色</span></span><br><span class="line">settextcolor(RGB(<span class="number">0</span>,<span class="number">255</span>-j*<span class="number">13</span>,<span class="number">0</span>));<span class="comment">//由下到上 越来越浅</span></span><br><span class="line"><span class="comment">//out text xy 输出文本到指定的位置</span></span><br><span class="line">outtextxy(rain[i].x,rain[i].y<span class="number">-15</span>*j,rain[i].str[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EndBatchDraw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeCh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到每一个字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//让字符串的每一个字符，都有可能发生改变，但是不是同一时间发生改变。</span></span><br><span class="line">rain[i].str[rand() % STR_SIZE] = createch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让它动起来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GamePlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].y+=rain[i].speed;</span><br><span class="line"><span class="comment">//当它掉出屏幕后 传到上面</span></span><br><span class="line"><span class="keyword">if</span> (rain[i].y-STR_SIZE*STR_W &gt;= HEIGHT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//让速度重新生成</span></span><br><span class="line">rain[i].speed = rand() % <span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line">rain[i].y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeCh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下落的过程中，数字字母不断变化</span></span><br><span class="line"><span class="comment">//让程序暂停 原理就是运用死循环</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断是否有按键产生</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit() &amp;&amp; _getch() == <span class="string">&#x27; &#x27;</span>)<span class="comment">//有按键返回非0值，否则返回0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (_getch() != <span class="string">&#x27; &#x27;</span>);<span class="comment">//如果没有输入空格就一直等待</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个图形窗口,init初始化 大小 参数 宽高 SHOWCONSOLE显示黑窗口</span></span><br><span class="line">initgraph(WIDTH, HEIGHT);</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line">srand(GetTickCount());<span class="comment">//返回从开机到现在所经过的毫秒数，让所产生的随机数不断的变化。</span></span><br><span class="line">GameInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">GamePlay();</span><br><span class="line">GameDraw();</span><br><span class="line">changeCh();</span><br><span class="line">stop();</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考视频：<a href="https://www.bilibili.com/video/BV1kK411M7qo?t=5027">https://www.bilibili.com/video/BV1kK411M7qo?t=5027</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义结构类型(2)</title>
      <link href="2021/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2/"/>
      <url>2021/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>参考视频：<a href="https://www.bilibili.com/video/BV1oi4y1g7CF?p=58">https://www.bilibili.com/video/BV1oi4y1g7CF?p=58</a></p><p><strong>大纲：</strong></p><ol><li><p>结构体的声明</p></li><li><p>结构体的自引用</p></li><li><p>结构体内存对齐</p></li><li><p>结构体传参</p></li><li><p>结构体实现位段(位段的填充&amp;可移植性)</p><hr><p>char short  int long short float double -这些都叫做内置类型，是C语言自己的类型</p><p>对于一些复杂对象，光用内置函数是不够的。</p><p>复杂类型(自定义类型)-结构体、枚举、联合体。</p></li></ol><h2 id="1-结构体的声明"><a href="#1-结构体的声明" class="headerlink" title="1.结构体的声明"></a>1.结构体的声明</h2><ol><li><p><strong>结构体的基础知识</strong>：结构体是一些值的集合，这些值称为成员变量。结构体的每个成员可以是不同类型的变量。</p><hr><p><strong>结构体的声明</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>//随便定义名字</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    member-<span class="built_in">list</span>;</span><br><span class="line">&#125;vairable-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure></li></ol><p>例如描述一个学生</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明一个结构题类型</span></span><br><span class="line"><span class="comment">//声明一个学生类型，通过学生类型来创建学生变量(对象)</span></span><br><span class="line"><span class="comment">//描述学生；属性-名字-电话-性别</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//下面这些叫做成员变量</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];<span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">5</span>];<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">20</span>];<span class="comment">//学号</span></span><br><span class="line">&#125;s4, s5, s6;<span class="comment">//变量列表;//分号不能丢</span></span><br><span class="line"><span class="comment">//全局变量 上面的s4~6也是</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s3</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊的声明</strong></p><p>在结构声明的时候，可以不完全的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名结构体类型 没给结构体名字</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">char</span> b ;</span><br><span class="line">    <span class="keyword">float</span> c;   </span><br><span class="line">&#125;x;<span class="comment">//没有结构体名字，只有一种创建方式，赶紧用这个匿名结构体类型的变量列表创建一个x，否则以后就创建不了了，因为该结构体没有具体的名字。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">char</span> b ;</span><br><span class="line">    <span class="keyword">float</span> c;   </span><br><span class="line">&#125;a[<span class="number">20</span>],*p;</span><br><span class="line"><span class="comment">//上面两个结构在声明的时候省略掉了结构体标签(tag)</span></span><br><span class="line"><span class="comment">//p = &amp;x;是不合法的，编译器会把上面的两个声明当成完全不同的两个类型。所以是非法的。</span></span><br></pre></td></tr></table></figure><h2 id="2-结构的自引用"><a href="#2-结构的自引用" class="headerlink" title="2.结构的自引用"></a>2.结构的自引用</h2><hr><p>数据结构：数据在内存中的存储结构  </p><hr><p><strong>错误自引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">// 4</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Nod</span> <span class="title">n</span>;</span> <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//n里面包含n,程序报错。//类似于递归的思路</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(struct Node);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确方式：结构体能够找到同类型的其他的变量，用指针串连起来。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放数据的地方叫数据域 存放地址的地方叫指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">// 4</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span> <span class="comment">//4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>typedef重命名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>  //自引用的时候不建议省略名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">    </span><br><span class="line">&#125;Node;<span class="comment">//结尾的这个Node是类型名，不是变量名</span></span><br></pre></td></tr></table></figure><h2 id="3-结构体变量的定义和初始化"><a href="#3-结构体变量的定义和初始化" class="headerlink" title="3.结构体变量的定义和初始化"></a>3.结构体变量的定义和初始化</h2><p><strong>结构体变量的初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化结构体中的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">short</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">T</span> <span class="title">sy</span>;</span></span><br><span class="line">    <span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="comment">//结构体初始化的时候用大括号</span></span><br><span class="line">    struct S s = &#123;&#x27;c&#x27;，&#123;2.21,2&#125;,100,3.14，&#x27;hello sb&#x27;&#125;;</span><br><span class="line">    <span class="comment">//结构体成员的访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %d %lf %s\n&quot;</span>,s.c,s.a,s.d,s.arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,s.st.weight);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-结构体内存对齐"><a href="#4-结构体内存对齐" class="headerlink" title="4.结构体内存对齐"></a>4.结构体内存对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> C1;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> C1;</span><br><span class="line">    <span class="keyword">char</span> c2;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S1</span> <span class="title">s1</span> =</span> &#123;<span class="number">0</span>&#125;;<span class="comment">//一个0 将里面所有的内容都初始化0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S2</span> <span class="title">s2</span>=</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">// 12</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">// 8</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构体的对齐规则：</strong></p><p>1.第一个成员在与结构体变量偏移为0的地址处。</p><p>2.其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。</p><p>对齐数=编译器默认的一个对齐数与该成员大小的较小值。</p><p>VS中默认的值是8            gcc编译器没有默认对齐数。</p><p>3.结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。</p><p>4.如果嵌套结构体的情况，嵌套的结构对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</p><p><strong>为什么存在内存对齐？</strong></p><p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的，某些硬件平台只能在某些地址处取某些特定类型的数据。否则抛出硬件异常。</p><p>2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界对齐。原因在于，为了访问未对齐的内存，处理器需要做两次内存访问；而对齐的内存访问仅需要一次访问。</p><p><strong>总的来说：</strong></p><p>​    结构体的内存对齐是拿空间来换取时间的做法。提升一下效率。</p><p><strong>如何设计结构体</strong></p><p>既要满足对齐，又要节省空间。</p><p>​                                        <strong>让占用空间小的成员尽量集中在一起</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line">S1和S2的结构体成员一模一样，但是S1和S2所占空间的大小有了一些区别。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改默认对齐数</strong></p><p><strong>#pragma pack()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)<span class="comment">//设置默认对齐数为4</span></span></span><br><span class="line"><span class="comment">//默认对齐数设置为1，其实就没有对齐了，就该是什么就往里面放什么了。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()<span class="comment">//取消设置的默认对齐数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>结构在对齐方式不合适的时候，我们可以自己更改默认对齐数。</p><p><strong>offsetof()——结构体成员相对于结构体起始位置的偏移量</strong></p><p>头文件——#include&lt;stddef.h&gt;</p><p>(结构体名字,结构体成员)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,offsetof(struct S,c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-结构体传参"><a href="#5-结构体传参" class="headerlink" title="5.结构体传参"></a>5.结构体传参</h2><p>类似于：函数内部想改变函数外部的某个值的话，就要传地址进去。</p><p>（-&gt;是C语言和C++语言的一个运算符，叫做指向结构体成员运算符，用处是使用一个指向结构体或对象的指针访问其内成员。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(struct S* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ps-&gt;a = <span class="number">100</span>;</span><br><span class="line">ps-&gt;c = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">ps-&gt;d = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(struct S tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,tmp.a,tmp.c,tmp.d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="comment">//如果害怕就打印一个值而传值过来可能会导致值的改变，就加一个const</span></span><br><span class="line"><span class="comment">//综合考虑建议结构体传参传地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> struct S* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,ps-&gt;a,ps-&gt;c,ps-&gt;d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;&#125;;</span><br><span class="line">Init(&amp;s);</span><br><span class="line">    Print1(s);</span><br><span class="line">    Print2(&amp;s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数传参的时候，参数是需要压栈，会有时间和空间上的系统开销。</p><p>如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现飞翔的小鸟小游戏</title>
      <link href="2021/03/27/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9F%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>2021/03/27/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9F%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>参考视频<a href="https://www.bilibili.com/video/BV1Xo4y1R7hs">https://www.bilibili.com/video/BV1Xo4y1R7hs</a></p><p><strong>缺点：撞柱子功能暂未实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//飞翔的小鸟</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;//C语言标准头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;//图形库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//按键处理</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;//随机函数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mmstream.h&gt;//多媒体库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">数据设计</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line">IMAGE background;</span><br><span class="line">IMAGE bigBird[<span class="number">2</span>]; <span class="comment">//bigBird[0] bigBird[1]</span></span><br><span class="line">IMAGE endImg[<span class="number">2</span>];</span><br><span class="line">IMAGE up[<span class="number">2</span>];</span><br><span class="line">IMAGE down[<span class="number">2</span>];</span><br><span class="line">HWND hwnd;<span class="comment">//句柄-表示的是窗口的意思</span></span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//鸟的x和y坐标</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> speed; <span class="comment">//鸟的速度</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//鸟的属性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bird</span> <span class="title">myBird</span> =</span> &#123; <span class="number">124</span>,<span class="number">304</span>,<span class="number">100</span> &#125;;</span><br><span class="line"><span class="comment">//加载资源：把图片和变量名绑定在一起</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先加载掩码如 再加载背景图</span></span><br><span class="line">loadimage(&amp;background, <span class="string">&quot;./images/background.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;bigBird[<span class="number">0</span>], <span class="string">&quot;./images/birdy.bmp&quot;</span>,<span class="number">48</span>,<span class="number">48</span>);</span><br><span class="line">loadimage(&amp;bigBird[<span class="number">1</span>], <span class="string">&quot;./images/bird.bmp&quot;</span>,<span class="number">48</span>,<span class="number">48</span>);</span><br><span class="line">loadimage(&amp;endImg[<span class="number">0</span>], <span class="string">&quot;./images/endy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;endImg[<span class="number">1</span>], <span class="string">&quot;./images/end.bmp&quot;</span>);</span><br><span class="line"></span><br><span class="line">loadimage(&amp;down[<span class="number">0</span>], <span class="string">&quot;./images/downy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;down[<span class="number">1</span>], <span class="string">&quot;./images/down.bmp&quot;</span>);</span><br><span class="line"></span><br><span class="line">loadimage(&amp;up[<span class="number">0</span>], <span class="string">&quot;./images/upy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;up[<span class="number">1</span>], <span class="string">&quot;./images/up.bmp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">鸟的模块</span></span><br><span class="line"><span class="comment">1.绘制鸟的过程</span></span><br><span class="line"><span class="comment">2.按键操作控制鸟的过程</span></span><br><span class="line"><span class="comment">3.音乐部分---多线程知识</span></span><br><span class="line"><span class="comment">要开辟一个线程来播放音乐，要不他会影响背景的效果</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="comment">//绘制鸟的过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawBigbird</span><span class="params">(<span class="keyword">int</span> x ,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//贴图（掩码图）</span></span><br><span class="line">putimage(x, y, &amp;bigBird[<span class="number">0</span>], SRCAND);</span><br><span class="line">putimage(x, y, &amp;bigBird[<span class="number">1</span>], SRCPAINT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程处理函数---》C语言中函数指针</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">playMusic</span><span class="params">(LPVOID pVoid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mciSendString(<span class="string">&quot;open jump.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play jump.mp3 wait&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;clos jump.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">柱子部分</span></span><br><span class="line"><span class="comment">1.画柱子</span></span><br><span class="line"><span class="comment">2.初始化柱子</span></span><br><span class="line"><span class="comment">3.移动柱子</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pillar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//上面柱子的属性</span></span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="keyword">int</span> y ;</span><br><span class="line"><span class="keyword">int</span> h ;</span><br><span class="line"><span class="comment">//根据上面柱子的属性能够退出下面柱子的属性</span></span><br><span class="line"><span class="comment">//Height - h</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pillar</span> <span class="title">zhuzi</span>[3];</span></span><br><span class="line"><span class="comment">//初始化柱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPillar</span><span class="params">(struct pillar zhuzi[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zhuzi[i].h = rand() % <span class="number">100</span> + <span class="number">160</span>;</span><br><span class="line">zhuzi[i].y = <span class="number">0</span>;</span><br><span class="line">zhuzi[i].x = <span class="number">288</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画柱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPillar</span><span class="params">(struct pillar zhuzi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//上面的柱子</span></span><br><span class="line">putimage(zhuzi.x, <span class="number">0</span>, <span class="number">52</span>, zhuzi.h,&amp;down[<span class="number">0</span>],<span class="number">0</span>,<span class="number">320</span> - zhuzi.h,SRCAND);</span><br><span class="line">putimage(zhuzi.x, <span class="number">0</span>, <span class="number">52</span>, zhuzi.h, &amp;down[<span class="number">1</span>], <span class="number">0</span>, <span class="number">320</span> - zhuzi.h, SRCPAINT);</span><br><span class="line"><span class="comment">//下面的柱子</span></span><br><span class="line">putimage(zhuzi.x, <span class="number">512</span>-(<span class="number">320</span>-zhuzi.h), <span class="number">52</span>, <span class="number">320</span>-zhuzi.h, &amp;up[<span class="number">0</span>], <span class="number">0</span>,<span class="number">0</span>, SRCAND);</span><br><span class="line">putimage(zhuzi.x, <span class="number">512</span> - (<span class="number">320</span> - zhuzi.h), <span class="number">52</span>, <span class="number">320</span> - zhuzi.h, &amp;up[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>, SRCPAINT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">通用性技术：</span></span><br><span class="line"><span class="comment">1.并发编程</span></span><br><span class="line"><span class="comment">2.网络编程</span></span><br><span class="line"><span class="comment">3.数据库编程</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="comment">//按键交互</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> userKey = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">userKey = _getch();</span><br><span class="line"><span class="comment">//暂停功能</span></span><br><span class="line"><span class="keyword">if</span> (userKey == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (_getch() != <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (userKey)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line">myBird.y -= myBird.speed;</span><br><span class="line">CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>, playMusic, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//碰地板和上边界处理</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hitFloor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (myBird.y &lt;= <span class="number">0</span> || myBird.y &gt;= (<span class="number">512</span> - <span class="number">48</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束动画</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gameOverAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  x = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">608</span>;</span><br><span class="line"><span class="keyword">while</span> (y &gt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;background);</span><br><span class="line">putimage(x, y, &amp;endImg[<span class="number">0</span>], SRCAND);</span><br><span class="line">putimage(x, y, &amp;endImg[<span class="number">1</span>], SRCPAINT);</span><br><span class="line">y -= <span class="number">50</span>;</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">MessageBox(hwnd,<span class="string">&quot;GameOver You Die!&quot;</span>,<span class="string">&quot;提示&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">入口函数</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">//加载资源</span></span><br><span class="line">loadResource();</span><br><span class="line"><span class="comment">//创建图形窗口</span></span><br><span class="line">initgraph(<span class="number">288</span>, <span class="number">608</span>);</span><br><span class="line"><span class="comment">//柱子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">initPillar(zhuzi, i);</span><br><span class="line">zhuzi[i].x = <span class="number">288</span> + i * <span class="number">150</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;background);</span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line">drawBigbird(myBird.x, myBird.y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">zhuzi[i].x -= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(zhuzi[i].x &lt; (<span class="number">-52</span> - <span class="number">150</span>))</span><br><span class="line">&#123;</span><br><span class="line">initPillar(zhuzi, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">drawPillar(zhuzi[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hitFloor())</span><br><span class="line">&#123;</span><br><span class="line">gameOverAction();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鸟的自由落体</span></span><br><span class="line">myBird.y += <span class="number">10</span>;</span><br><span class="line"><span class="comment">//只有按键处理，没有按键不处理</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line">keyDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时处理</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">_getch();<span class="comment">//等待用户按键-防止闪屏</span></span><br><span class="line"><span class="comment">//关闭窗口</span></span><br><span class="line">closegraph();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言推箱子小程序</title>
      <link href="2021/03/27/C%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/03/27/C%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>参考视频<a href="https://www.bilibili.com/video/BV1By4y1a79o?t=4428">https://www.bilibili.com/video/BV1By4y1a79o?t=4428</a></p><p><strong>包括黑窗界面和图形界面</strong></p><p><strong>BUG：当人物进入到目的地的时候就动不了了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//这个库函数不是C 语言标准的，在VS上可以直接用，在Linux上就不行。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用布尔类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用图形界面-图形界面头文件（需要安装）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="comment">//推箱子</span></span><br><span class="line"><span class="comment">//知识点：数组 、函数、</span></span><br><span class="line"><span class="comment">//开发环境 vs2019</span></span><br><span class="line"><span class="comment">//准备地图数据 用二维数组来存储</span></span><br><span class="line"><span class="comment">//表示——空地 0 墙 1 目的地 2 箱子 3 玩家 4  </span></span><br><span class="line"><span class="comment">//这两个是动态变化的 箱子+目的地 5 玩家+目的地 6 </span></span><br><span class="line"><span class="comment">//难点在于判断移动导致的变化</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPACE0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WALL1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEST2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLAYER4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 10</span></span><br><span class="line"><span class="comment">//当前所在关卡</span></span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//变成3纬数组 可以存多个地图</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">3</span>][ROW][COL] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设计地图样式</span></span><br><span class="line"><span class="comment">//map1</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//map2</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//map3</span></span><br><span class="line">    &#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义一个图片的数组int image</span></span><br><span class="line">IMAGE img[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadImg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temFileName[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">sprintf_s(temFileName,<span class="string">&quot;./images/%d.bmp&quot;</span>, i);</span><br><span class="line">loadimage(img + i, temFileName, <span class="number">63</span>, <span class="number">63</span>); <span class="comment">//项目属性-高级-字符集-使用多字符字符集</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">map</span>[level][i][k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SPACE:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WALL:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX + DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER + DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">map</span>[level][i][k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">map</span>[level][i][k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SPACE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WALL:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;▓&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;☆&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♂&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX + DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;◇&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER + DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♀&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">map</span>[level][i][k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushBox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到玩家所在的下标</span></span><br><span class="line"><span class="comment">//地图里面哪些数据有可能是玩家</span></span><br><span class="line"><span class="comment">//PLAYER PLAYER+DEST</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k&lt;<span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k] == PLAYER)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end:;<span class="comment">//goto到这里</span></span><br><span class="line"><span class="comment">//获取键盘按键 -  _getch()-一触即发不需要按回车 getchar()-输入之后需要按回车</span></span><br><span class="line"><span class="keyword">char</span> key = _getch();</span><br><span class="line"><span class="comment">//printf(&quot;%d %c\n&quot;, key, key);</span></span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:<span class="comment">//向上移动</span></span><br><span class="line"><span class="comment">//什么情况下 玩家才能移动 才能推箱子？</span></span><br><span class="line"><span class="comment">//玩家的前面是空地(目的地)、玩家的前面是箱子（箱子的前面是什么） 可以动</span></span><br><span class="line"><span class="comment">//如果玩家的前面是空地</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i- <span class="number">1</span>][k] == SPACE || <span class="built_in">map</span>[level][i - <span class="number">1</span>][k] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">1</span>][k] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[level][i<span class="number">-1</span>][k] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i - <span class="number">2</span>][k] == SPACE || <span class="built_in">map</span>[level][i - <span class="number">2</span>][k] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">2</span>][k] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">1</span>][k] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:<span class="comment">//向下移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == SPACE || <span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">1</span>][k] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">2</span>][k] == SPACE || <span class="built_in">map</span>[level][i + <span class="number">2</span>][k] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">2</span>][k] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">1</span>][k] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:<span class="comment">//向左移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == SPACE || <span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">1</span>] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">2</span>] == SPACE || <span class="built_in">map</span>[level][i][k - <span class="number">2</span>] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">2</span>] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">1</span>] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:<span class="comment">//向右移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == SPACE || <span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">1</span>] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">2</span>] == SPACE || <span class="built_in">map</span>[level][i][k + <span class="number">2</span>] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">2</span>] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">1</span>] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//什么情况下才过关呢，当前关卡没有箱子了 就通关了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; COL; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[level][i][k] == BOX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置黑窗口的大小</span></span><br><span class="line">system(<span class="string">&quot;mode con  cols=30 lines=20&quot;</span>);<span class="comment">//设置cols和lines数值的时候不能有空格，否则会报错。</span></span><br><span class="line"><span class="comment">//创建图形界面窗口</span></span><br><span class="line"><span class="comment">//参数 窗口的宽度 高度 SHOWCONSOLE表示同时显示控制台和控制台</span></span><br><span class="line">initgraph(ROW*<span class="number">63</span>,COL*<span class="number">63</span>,SHOWCONSOLE);</span><br><span class="line"><span class="comment">//Easyx只能用于C++,所以源文件后缀改为.cpp</span></span><br><span class="line">loadImg();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">show();</span><br><span class="line">DrawMap();</span><br><span class="line"><span class="comment">//判断是否过关</span></span><br><span class="line"><span class="keyword">if</span> (Judge())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//切换关卡</span></span><br><span class="line">level++;<span class="comment">//最大只有三关，超过了就数组越界了</span></span><br><span class="line"><span class="keyword">if</span> (level &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按任意键进入下一关......\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushBox(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getchar();——防止闪退的，加了while 1就不需要了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言贪吃蛇小程序</title>
      <link href="2021/03/25/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/03/25/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>参考视频</p><p><a href="https://www.bilibili.com/video/BV1LN41197zV?from=search&amp;seid=15462998985727977257">https://www.bilibili.com/video/BV1LN41197zV?from=search&amp;seid=15462998985727977257</a></p><p><strong>代码有点缺陷：1.食物有可能会生成在吃不到的地方</strong></p><p>​                        <strong>2.吃掉食物的音效添加失败</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及、 结构体 、循环、 函数 、easyx-是一个图形库帮助做界面的、数组、枚举</span></span><br><span class="line"><span class="comment">//1做界面 创建一个窗口 图形窗口</span></span><br><span class="line"><span class="comment">//2创建一个蛇 蛇的结构 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h &gt;</span></span></span><br><span class="line"><span class="comment">//多媒体设备接口的两个东西</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mmsystem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SNAKE_NUM 500 <span class="comment">//蛇的最大节数</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DIR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">UP,</span><br><span class="line">DOWN,</span><br><span class="line">LEFT,</span><br><span class="line">RIGHT,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//蛇的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//蛇的节数</span></span><br><span class="line"><span class="keyword">int</span> dir;<span class="comment">//蛇的方向</span></span><br><span class="line"><span class="keyword">int</span> speed;<span class="comment">//蛇的速度</span></span><br><span class="line">POINT coor[SNAKE_NUM];<span class="comment">//坐标</span></span><br><span class="line">&#125;snake;</span><br><span class="line"><span class="comment">//食物的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> r;<span class="comment">//食物的半径(大小）</span></span><br><span class="line"><span class="keyword">bool</span> flag;<span class="comment">//食物是否被吃了的标记</span></span><br><span class="line">DWORD color;<span class="comment">//食物的颜色</span></span><br><span class="line">&#125;food;</span><br><span class="line"><span class="comment">//数据的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//播放背景音乐</span></span><br><span class="line">mciSendString(<span class="string">&quot;open ./res/snake_bgm.mp3 alias  BGM&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play BGM repeat&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//init 初始化 graph 图形窗口SHOWCONSOLE-显示控制台</span></span><br><span class="line">initgraph(<span class="number">600</span>, <span class="number">480</span>);</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line"><span class="comment">//GetTickCount获取系统从开机到现在所经过的毫秒数</span></span><br><span class="line">srand(GetTickCount());</span><br><span class="line"><span class="comment">//初始化 蛇 一开始有3节</span></span><br><span class="line">snake.size = <span class="number">3</span>;</span><br><span class="line">snake.speed = <span class="number">10</span>;</span><br><span class="line">snake.dir = RIGHT;<span class="comment">//初始化方向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//横着的是x轴,像右为正方向</span></span><br><span class="line"><span class="comment">//竖着的是y轴,向下为正方向</span></span><br><span class="line">snake.coor[i].x = <span class="number">40</span><span class="number">-10</span>*i; </span><br><span class="line">snake.coor[i].y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化食物</span></span><br><span class="line"><span class="comment">//rand-随机函数-随机生成一个整数，但是如果没有设置随机数种子，每次产生的都是固定的整数。</span></span><br><span class="line"><span class="comment">//设置种子需要头文件 stdlib.h</span></span><br><span class="line"><span class="comment">//一般把时间作为随机数种子，因为时间在不断变化的。</span></span><br><span class="line">food.x = rand() % <span class="number">640</span>;</span><br><span class="line">food.y = rand() % <span class="number">480</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">10</span>+<span class="number">5</span>;</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//双缓冲绘图 -防止卡顿</span></span><br><span class="line">BeginBatchDraw();</span><br><span class="line"><span class="comment">//设置背景颜色-两步</span></span><br><span class="line">setbkcolor(RGB(<span class="number">28</span>, <span class="number">115</span>, <span class="number">119</span>));</span><br><span class="line">cleardevice();<span class="comment">//清除图形屏幕</span></span><br><span class="line"><span class="comment">//绘制蛇</span></span><br><span class="line">setfillcolor(RED); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size; i++)</span><br><span class="line">&#123;</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);<span class="comment">//此函数用来画填充圆</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制食物</span></span><br><span class="line"><span class="comment">//判断食物是否存在</span></span><br><span class="line"><span class="keyword">if</span> (food.flag)</span><br><span class="line">&#123;</span><br><span class="line">solidcircle(food.x, food.y,food.r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双缓冲结束</span></span><br><span class="line">EndBatchDraw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//蛇的移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SnakeMove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//移动是什么发生改变？  ---坐标</span></span><br><span class="line"><span class="comment">//**</span></span><br><span class="line"><span class="comment">//让身体跟着头移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = snake.size - <span class="number">1</span>; i &gt;<span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line">snake.coor[i] = snake.coor[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断方向</span></span><br><span class="line"><span class="keyword">switch</span> (snake.dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> UP:</span><br><span class="line">snake.coor[<span class="number">0</span>].y-=snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].y &lt;= <span class="number">0</span>)<span class="comment">//超出了上边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].y = <span class="number">480</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWN:</span><br><span class="line">snake.coor[<span class="number">0</span>].y+= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].y&gt;= <span class="number">480</span>)<span class="comment">//超出了下边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LEFT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x-= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &lt;= <span class="number">0</span>)<span class="comment">//超出了左边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].x = <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RIGHT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x+= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &gt;= <span class="number">600</span>)<span class="comment">//超出了右边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过按键改变蛇的移动方向</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keycontrol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断一下有没有按键</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())<span class="comment">//如果有按键就返回1真</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取键盘输入</span></span><br><span class="line"><span class="keyword">switch</span> (_getch())<span class="comment">//_getch是个阻塞函数，</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断输入的是什么</span></span><br><span class="line"><span class="comment">//键值 72 80 75 77 上下左右</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = UP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//空格暂停</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断蛇吃食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EatFood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (food.flag &amp;&amp; snake.coor[<span class="number">0</span>].x &gt;= food.x-food.r &amp;&amp; snake.coor[<span class="number">0</span>].x &lt;= food.x+food.r &amp;&amp;</span><br><span class="line">snake.coor[<span class="number">0</span>].y &gt;= food.y - food.r &amp;&amp; snake.coor[<span class="number">0</span>].y &lt;= food.y + food.r)</span><br><span class="line">&#123;</span><br><span class="line">food.flag = <span class="literal">false</span>;</span><br><span class="line">snake.size++;</span><br><span class="line"><span class="comment">//下面的吃掉音效添加失败</span></span><br><span class="line">mciSendString(<span class="string">&quot;open ./res/eatfood.mp3 alias  BGM2&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play BGM2 &quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//食物被吃掉之后再次初始化</span></span><br><span class="line"><span class="keyword">if</span> (!food.flag)</span><br><span class="line">&#123;</span><br><span class="line">food.x = rand() % <span class="number">640</span>;</span><br><span class="line">food.y = rand() % <span class="number">480</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以加一个分数，吃一个食物加n分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GameInit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//while 1直接卡死 不让他闪退 </span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">GameDraw();</span><br><span class="line">SnakeMove();</span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//延迟xx毫秒(减速)</span></span><br><span class="line">keycontrol();</span><br><span class="line">EatFood();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义数据类型</title>
      <link href="2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h1><h2 id="1什么是位段"><a href="#1什么是位段" class="headerlink" title="1什么是位段"></a>1什么是位段</h2><p>位段的声明和结构是类似的，有两个不同</p><p>1位段的成员必须是int、unsigned int 或signed int 。</p><p>2位段的成员名后边有一个冒号和一个数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">int_a:<span class="number">2</span>;</span><br><span class="line">     int_b:<span class="number">5</span>;</span><br><span class="line">    int_c:<span class="number">10</span>;</span><br><span class="line">    int_d:<span class="number">30</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A就是一个位段类型</span><br><span class="line">那位段A的大小是多少？</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//位段 位是二进制位</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//后面的：是所对应变零需要的比特位</span></span><br><span class="line"><span class="keyword">int</span> a:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> d:<span class="number">30</span>;</span><br><span class="line">    <span class="comment">//一共47个比特位——6个字节就够了*8=48bit</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>；</span></span><br><span class="line"><span class="class">  <span class="title">printf</span>(&quot;%<span class="title">d</span>\<span class="title">n</span>&quot;,<span class="title">sizeof</span>(<span class="title">s</span>));</span><span class="comment">//占8个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2位段的内存分配"><a href="#2位段的内存分配" class="headerlink" title="2位段的内存分配"></a>2位段的内存分配</h2><p>1位段成员可以是int unsigned int signed int  或者是char（属于整型家族）类型。</p><p>2位段的空间上是按照需要以4个字节或者1个字节（char)的方式开辟的。</p><p>3位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段。</p><p><strong>在定义位段的变量中，最后一个不能大于32</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a : <span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> b : <span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span> c : <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> d : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    s.a = <span class="number">10</span>;</span><br><span class="line">    s.b = <span class="number">20</span>;</span><br><span class="line">    s.c = <span class="number">3</span>;</span><br><span class="line">    s.d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3位段的跨平台问题"><a href="#3位段的跨平台问题" class="headerlink" title="3位段的跨平台问题"></a>3位段的跨平台问题</h2><p>1int位段被当成有符号数还是无符号数是不确定的。</p><p>2位段中最大位的数目不能确定。（16位机器最大16，32位机器最大32，写成27，在16位机器会出问题）</p><p>3位段中的成员在内存中从左向右 分配，还是从右向左分配标准尚未定义。</p><p>4当一个结构包含两个位段，第二个成员比较大，无法容纳第一个剩余的位段时，是舍弃剩余的位还是利用，这是不确定的。</p><p><strong>总结：</strong></p><p>​    和结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是有跨平台的问题存在。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举故名思义就是一一列举</p><p>把可能的取值一一列举</p><h2 id="1定义"><a href="#1定义" class="headerlink" title="1定义"></a>1定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值</span></span><br><span class="line">    Mon,</span><br><span class="line">    Tus,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值—— 常量</span></span><br><span class="line">    MALE,<span class="comment">//0</span></span><br><span class="line">    FEMALE,<span class="comment">//1      可以在后面加入 = 给他一个初始值</span></span><br><span class="line">    <span class="comment">//如果前面的赋值了，后面的没有赋值，就按顺序往下延。</span></span><br><span class="line">    </span><br><span class="line">    SECRET<span class="comment">//2</span></span><br><span class="line">        </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//规定好了它的取值</span></span><br><span class="line">    <span class="comment">//enum是类型</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line">    <span class="comment">//S</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">red,<span class="comment">//0</span></span><br><span class="line">    green,<span class="comment">//1</span></span><br><span class="line">    blue<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在上面定义的枚举常量中green所对应的值就是2，那么我们在这可不可以直接给s赋值为2呢？</span></span><br><span class="line">    <span class="comment">//可以看到编译器并没有报错，说明编译器的语法检测不严格。</span></span><br><span class="line">    <span class="comment">//2在这里是整型</span></span><br><span class="line">    <span class="comment">//Color是枚举类型，两侧的类型是有差异的</span></span><br><span class="line">    <span class="comment">//在c++中会报错，c++语法检测更为严格</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">s</span> =</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> red 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> green 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> blue 2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color = red;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举的写法比这个要更加好一些</span></span><br></pre></td></tr></table></figure><h2 id="2枚举的优点"><a href="#2枚举的优点" class="headerlink" title="2枚举的优点"></a>2枚举的优点</h2><p>为什么使用枚举？</p><p>我们可以使用#define来定义常量，使用枚举的优点是什么呢。</p><p>1增加代码的可读性和可维护性。</p><p>2和#define定义的标识符比较枚举有类型检查，更加严谨。</p><p>3防止命名污染（<strong>命名冲突</strong>)（封装）。</p><p> <strong>封装就是把数据和函数打包到一个类里面</strong></p><p>4便于调试。</p><p>5使用方便，一次可以定义多个常量。</p><hr><p>程序的执行过程</p><p>c语言的源代码–预编译-链接-可执行程序</p><p>这里的预编译就是在处理#define之类的东西</p><p>预编译会把所有的注释都删除</p><hr><p>enum的大小怎么算呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    male,</span><br><span class="line">    female,</span><br><span class="line">    secret</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">sex</span> <span class="title">s</span> <span class="title">male</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h1><h2 id="1联合类型的定义"><a href="#1联合类型的定义" class="headerlink" title="1联合类型的定义"></a>1联合类型的定义</h2><p>联合是一种特殊的自定义类型，这种自定义类型的变量也包含一系列的成员，特征是这些成员公用同一块空间（所以联合也叫共用体）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;<span class="comment">//一个字节</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//四个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//4个字节</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">sb</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.c));<span class="comment">//注意是句号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.a));</span><br><span class="line">    <span class="comment">//三个地址相同</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2特点"><a href="#2特点" class="headerlink" title="2特点"></a>2特点</h2><p>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合有能力 保存最大的那个成员）。</p><p>联合体内的成员不能同时使用</p><hr><p>结构体、枚举、联合体的关键字不一样，性质也不一样</p><hr><h2 id="3联合大小的计算"><a href="#3联合大小的计算" class="headerlink" title="3联合大小的计算"></a>3联合大小的计算</h2><p>联合的大小至少是最大成员的大小。</p><p>当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。</p><p>相关推荐视频——<a href="https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C二级错题积累(5)</title>
      <link href="2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/"/>
      <url>2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/</url>
      
        <content type="html"><![CDATA[<ol><li><p>常用的连续存储管理技术有固定分区存储管理和可变分区存储管理。</p></li><li><p>程序流程图中带有箭头的线段表示的是控制流。</p></li><li><p>若二叉树没有叶子结点，则为空二叉树。</p></li><li><p>带链栈的栈底指针是随栈的操作而动态变化的。</p></li><li><p>若带链队列中只有一个元素，则对头指针与队尾指针必定相同。</p></li><li><p>清晰第一，效率第二的论点已经成为当今主导的程序设计风格。</p></li><li><p>需求分析方法可以分为结构化分析方法和面向对象分析方法两大类。结构化分析方法的常用工具：数据流图（DFD图）、数据字典（DD）、判定表、判定树。</p></li><li><p>数据库应用系统包括数据库、数据库管理系统、人员（数据库管理员和用户）、硬件平台、软件平台、应用软件、应用界面7个部分。</p></li><li><p>数据库设计是数据应用的核心。</p></li><li><p>在数据库系统中，数据模型包括概念模型、逻辑模型和物理模型。</p></li><li><p>从关系中找到满足给定条件的元组的操作称为选择。</p></li><li><p>计算机系统由硬件系统和软件系统组成。</p></li><li><p>I/O方中的程序查询方式是指当 CPU需要执行I/O操作时，程序将主动查询I/O设备是否准备好。</p></li><li><p>采用循序存储的完全二叉树属于非线性结构。</p></li><li><p>应避免滥用goto语句。</p></li><li><p>需求分析阶段的工作可以分为4个方面：需求获取、需求分析、需求规格说明编写和需求评审。</p></li><li><p>数据库是指长期存储在计算机内的、有组织的、可共享的数据集合。</p></li><li><p>逻辑数据模型是面向数据库系统的模型，着重于在数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>I/O方式中的程序中断方式指的是当出现异常情况时，CPU暂时停止当前程序的运行，转向执行相应的服务程序。</p></li><li><p>对象的基本特点是：标识唯一性、分类性、多态性、模块独立性好。可移植性</p></li><li><p>数据字典(DD)的作用是定义数据流图中各个成分的具体含义。</p></li><li><p>逻辑数据模型又称为数据模型，是面向数据库系统的模型，着重于数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>进程一旦创建，即进入就绪状态。</p></li><li><p>算法的复杂度包括时间复杂度与空间复杂度。</p></li><li><p>软件需求规格说明书的作用不包括软件可行性研究的依据。</p></li><li><p>数据库系统可以减少数据冗余和增强数据独立性，而文件系统不能。</p></li><li><p>物理数据模型，也称物理模型，是面向计算机物理表示的模型，此模型给出了数据模型在计算机上物理结构的表示。</p></li><li><p>虚拟存储器是对主存的扩展。</p></li><li><p>在主存储器和CPU之间增加高速缓冲存储器来解决CPU和主存之间速度不匹配的问题。</p></li><li><p>程序和计算机执行程序的活动不再一一对应，在多道程序环境下。</p></li><li><p>算法的时间复杂度是指执行算法所需要的计算工作量。</p></li><li><p>面向对象方法中继承是指类之间共享属性和操作的机制。</p></li><li><p>在数据库管理系统提供的数据语言中，负责数据模式定义的是数据定义语言。</p></li><li><p>在E-R图中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>CPU可以通过总线访问计算机内存和各种输入输出设备。</p></li><li><p>采用虚拟存储管理技术的主要有点是可为用户提供比物理内存大的多的逻辑地址空间。</p></li><li><p>线性链表可以有多个指针域。</p></li><li><p>软件声明周期是指软件产品从提出、实现、使用维护到停止使用退役的过程。</p></li><li><p>软件设计汇总模块划分应遵循的准则是高内聚低耦合。</p></li><li><p>数据库系统中支持安全性定义和检查的语言是数据控制语言。</p></li><li><p>分布式计算机系统指的是由多态分散的计算机经网络连接而成，且可协作完成同一任务的系统。</p></li><li><p>固定分区存储管理技术采用静态地址重定位。</p></li><li><p>程序可以作为算法的一种描述方法。</p></li><li><p>软件声明周期可分为定义阶段、开发阶段和维护阶段，定义阶段包括问题定义、可行性研究和需求分析，开发阶段包括概要设计、详细设计、实现和测试，维护阶段包括使用和维护。</p></li><li><p>概要设计的任务为：设计软件系统解雇，数据结构及数据库设计，编写概要设计文档，概要设计文档评审。</p></li><li><p>数据库系统的三级模式结构为：概念模式、内模式和外模式。</p></li><li><p>在关系数据库中，用来表示实体间联系的是二维表。</p></li><li><p>实时操作系统是指当外界事件或数据产生时，系统能够接收并以足够快的速度予以处理和相应，能够控制所欲任务协调一直运行。飞机的飞行控制系统使用实时操作系统。</p></li><li><p>I/O方式中的DMA方式是指T/O设备与主存之间由硬件组成的直接数据通路，用于成组数据传送。</p></li><li><p>数据的处理效率与数据的存储结构有关。</p></li><li><p>先到先服务的作用调度与队列结构有关联。</p></li><li><p>软件过程不规范不属于软件危机表现。</p></li><li><p>模块独立性的概念是抽象、模块化、信息隐蔽和局部化的直接结果。</p></li><li><p>数据库设计中反映用户对数据要求的模式是外模式。</p></li><li><p>在关系模式模型中必须有键，键由一个或多个属性组成，其值能够唯一关系中的一个元组（表中的一行）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C二级错题积累(4)</title>
      <link href="2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/"/>
      <url>2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在栈中，栈项指针的动态变化决定栈中元素的个数。</p></li><li><p>详细设计的人物是为软件结构体中的每一个模块确定实现算法和局部数据结构，用某种选定的表达工具表示算法和数据结构的细节。</p></li><li><p>扇出指由一个模块直接调用的其他模块个数。</p></li><li><p>按照传统的数据模型分类，数据模型分为层次模型、网状模型、关系模型。</p></li><li><p>数据库管理系统能实现对数据库汇总数据的查询、插入、修改和删除，这类功能称为数据操纵功能。</p></li><li><p>机器周期的同步标准是CPU访问存储器一次所需要的时间。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足，进程将从运行状态变迁为等待（阻塞）状态，需要调用阻塞进程原语。</p></li><li><p>软件测试的实施步骤是单元测试、集成测试、确认测试。</p></li><li><p>数据库管理系统中关系代数的运算有：投影运算、选择运算、笛卡尔积、交、连接等。</p></li><li><p>当一个进程在运行过程中释放了系统资源后要调用唤醒进程原语。</p></li><li><p>机器数补码的符号位取反即是偏移码。</p></li><li><p>所有的线性结构都可以采用顺序存储结构。</p></li><li><p>在希尔排序法中，没经过一次数据交换后能消除多个逆序。</p></li><li><p>对象实现了数据和操作(方法)的结合，其实现的机制是封装。</p></li><li><p>软件需求规格说明的内容不包括算法的详细设计。</p></li><li><p>数据库系系统减少了数据冗余</p></li><li><p>第一范式（INF）要求主属性（主键）不为空且不重复，字段不可再分。</p></li><li><p>从表中任何一个结点位置出发就可以不重复的访问到表中其他所有结点的链表是循环链表。</p></li><li><p>面向对象的主要特征：抽象、封装、继承、多态。</p></li><li><p>数据库中的数据具有集成、共享的特点，可以被不同应用程序所使用，减少相同数据重复存储的现象。</p></li><li><p>在任何一个关系数据控中，第一范式（1NF）是对关系模式的基本要求。</p></li><li><p>系统在创建一个进程时需要调用阻塞进程原语。</p></li><li><p>虚拟存储器是对主存的逻辑扩展，虚拟存储器的空间大小取决于计算机的访存能力而不是实际外存的大小。</p></li><li><p>将数据和操作置于对象统一体中的实现方式是封装。</p></li><li><p>数据流图（DFD）的作用是支持软件系统功能建模。</p></li><li><p>数据库管理系统(DBMS)是一种系统软件。</p></li><li><p>一个数据库可以有多个外模式（也成子模式或者用户模式），但概念模式和内模式（物理模式）只能有一个。</p></li><li><p>进程调度仅负责对CPU进行分配。</p></li><li><p>计算机内部采用二进制来表示指令和数据。</p></li><li><p>快速排序每经过一次元素交换就会产生新的逆序。</p></li><li><p>需求分析阶段产生的主要分档是需求规格说明书。</p></li><li><p>软件测试用例是为测试设计的数据，由测试输入数据和与之对应的预期输出结构两部分组成。</p></li><li><p>内模式对数据库的存储方式和物理结构的逻辑进行描述。</p></li><li><p>过程控制系统属于实时系统。</p></li><li><p>地址重定位方式包括静态地址重定位和动态地址重定位。</p></li><li><p>数据流图(DPD)中的有向箭头向右表示数据流。</p></li><li><p>代码编写阶段可进行的软件测试是单元测试。</p></li><li><p>数据模型通常由数据结构、数据操作及数据约束三部分组成。</p></li><li><p>在关系表中，属性值必须是另一个表主键的有效值或空值，这样的属性是外键。</p></li><li><p>静态地址重定位要求程序必须占用连续固定的内存空间。</p></li><li><p>动态地址重定位是在程序执行期间进行的。</p></li><li><p>静态地址重定位是在程序执行之前进行的。</p></li><li><p>循环链表是一种链式存储结构，循环队列是队列的一种顺序存储结构。</p></li><li><p>栈是线性结构。</p></li><li><p>二叉链表是二叉树的存储结构。</p></li><li><p>循环队列是队列的存储结构。</p></li><li><p>“数据流”应表示数据流名违背了数据流图(DFD)构造规则。</p></li><li><p>用树型结构表示实体及其之间联系的模型称为层次模型。用网状结构表示实体及其之间的联系模型称为网状模型。关系模型采用二维表来表示关系。</p></li><li><p>允许多个联机用户同时使用一台计算机系统进行计算的操作系统称为分时操作系统。</p></li><li><p>计算机中CPU通过总线与内存、外设等链接。</p></li><li><p>在循环队列中，对头指针和队尾指针的动态变化决定队列的长度</p></li><li><p>白盒测试的主要技术有逻辑覆盖测试、基本路径测试等。</p></li><li><p>在关系模式中凡能唯一标识元组最小属性集成为该关系的键或码。</p></li><li><p>在数据库中，产生数据不一致的根本原因是数据冗余。</p></li><li><p>操作系统的功能和任务主要有处理机管理（进程管理）、存储管理、设备管理、文件管理和用户接口。</p></li><li><p>软件需求规格说明书要涵盖用户对系统的所有需求，包括功能要求、性能要求、接口要求、设计约束等。</p></li><li><p>软件需求规格说明书的可验证性指描述的每一个用户都可在有限代价的有效过程中验证确认，对于软件没有可以验证性。</p></li><li><p>基本路径测试是属于白盒测试方法且是动态测试。</p></li><li><p>概念模型时用于现实世界的建模，与具体地DBMS无关。</p></li><li><p>关于计算机内带符号的定点数，补码的符号位取反即是偏移码。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C二级错题积累(3)</title>
      <link href="2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/"/>
      <url>2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/</url>
      
        <content type="html"><![CDATA[<ol><li><p>整数在计算机中存储和运算通常采用的格式是补码。</p></li><li><p>在操作系统中，将文件名转化为文件存储地址的结构是文件目录。</p></li><li><p>在长度为n的有序链表中进行查找，最坏情况下需要比较的次数为n。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。一个对象通常可由对象名（标识）、属性和操作三部分组成。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>数据库管理阶段的数据库系统的基本特点：数据集成性、数据的共享性高，冗余性低、数据独立性高、数据统一管理与控制。</p></li><li><p>对于关系模式，若其中的每个属性已经不能再分为简单项，则它属于第一范式。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足要调用阻塞进程原语。</p></li><li><p>进程是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先入后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：循序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指程序、数据和文档的集合。</p></li><li><p>数据库中存储的是数据以及数据之间的联系。</p></li><li><p>在关系数据库设计中，关系模式是用来记录用户数据的二维表。（关系模式采用二维表来表示关系，简称表）</p></li><li><p>在计算机中，运算器的基本功能是进行算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存的最大容量取决于计算机的地址位数。</p></li><li><p>循环链表的存储空间不一定是连续的。</p></li><li><p>对象是由描述对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>消息传递是对象间通信手段，一个对象通过像另一个对象发送消息来请求其服务。</p></li><li><p>类是对象的抽象，一个对象则是其对应类的一个实例。</p></li><li><p>数据库管理系统的主要功能包括：数据库的定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据数据库的并发性与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>整数在计算机存储和运算通常采用的格式是补码。</p></li><li><p>一个计算机系统中有成千上万个文件，为了便于对文件进行存取和管理，计算机系统建立文件的索引，即文件名和文件物理位置之间的映射关系，这种我呢间的索引称为文件目录。</p></li><li><p>规则不属于对象构成成分。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>I/O方式中使计算机系统并行工作程度最高的是程序查询。</p></li><li><p>计算机中的缓冲技术用于提高主机和设备交换信息的速度。</p></li><li><p>对长度为n的线性表进行快速排序，最坏的情况下需要比较的次数为n（n-1）/2。</p></li><li><p>对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>黑盒测试又称功能测试或数据驱动测试，着重测试软件的功能。黑盒测试依据需求规格说明书的功能描述。</p></li><li><p> 概念数据模型，简称概念模型，他是一种面向客观世界、面向用户的模型，它与具体的数据库管理系统和具体的计算机平台无关。</p></li><li><p>概念模型着重与客观世界复杂事物描述及对它们内在联系的刻画。目前，最著名的概念模型有实体-联系模型和面向对象模型。</p></li><li><p>总线带宽是指总线的数据传输率。</p></li><li><p>在快速排序法中，每经过一次数据交换（或移动后）能消除多个逆序。</p></li><li><p>结构化程序设计的重要原则是自项向下、逐步求精、模块及限制使用goto语句。</p></li><li><p>多态性是面向对象程序设计的特性。</p></li><li><p> 没有从属节点的模块是原子模块。</p></li><li><p>扇入指调用一个给定模块的模块个数。</p></li><li><p>结构图是描述软件系统结构的图形工具。</p></li><li><p>深度是指控制的层数。数据模型通常由数据结构、数据操作及数据约束3部分组成。完整性规则属于数据约束。</p></li><li><p>数据库概念设计阶段得到的结果是E-R模型。</p></li><li><p>进程是可以并发执行的程序的执行过程，它具有动态性、共享性、独立性、制约性和并发性5种属性。</p></li><li><p>二叉树属于非线性结构，但满二叉树与完全二叉树可以按层次进行顺序存储。</p></li><li><p>需求分析对待开发软件提出的需求进行分析并给出详细定于，是确定软件系统要做什么的阶段。</p></li><li><p>宽度指最大模块数的层的控制跨度（横向最大模块数）。</p></li><li><p>概念模式在关系数据库中，描述全局数据逻辑结构。</p></li><li><p>将实体-联系模型转换为关系模型时，一个多对多的联系可以转换为一个独立的关系模式，关系的键为联系中各实体键的组合。</p></li><li><p>CPU芯片内部连接各元件的总线是内部总线。</p></li><li><p>如果一个进程在运行时因某种原因暂停，该进程将脱离运行状态进入阻塞状态。</p></li><li><p>软件生存周期中，解决软件“怎么做”的阶段是软件设计。</p></li><li><p>软件深度表示控制的层数。</p></li><li><p>将数据库的结构划分成多个层次，是为了提高数据库的数据独立性。</p></li><li><p>关系的实体完整性要求关系中不能为空的属性是主键属性。</p></li><li><p>计算机工作的本质是取指令、分析指令和执行指令。</p></li><li><p>软件设计常用的工具有结构体、程序流程图、N-S图、PAD图、HIPO图、判定表、PDL。DFD（数据流程图）是需求分析阶段使用的工具。</p></li><li><p>软件测试的目的是发现程序中的错误。</p></li><li><p>用树型结构表示实体之间联系的模型时层次模型。</p></li><li><p>处于阻塞状态的进程，当阻塞原因解除后即进入就绪状态。</p></li><li><p>文件内容不属于文件属性。</p></li><li><p>需求分析产生的主要文档是需求规格说明书。</p></li><li><p>黑盒测试方法和技术有等价类划分法、边界值分析法、错误推测法和因果图等。</p></li><li><p>白盒从屙屎的主要技术有逻辑覆盖测试、基本路径测试，其中逻辑覆盖测试包括语句覆盖、路径覆盖、判定覆盖、条件覆盖、判断-条件覆盖。</p></li><li><p>在E-R图汇中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>关系模式的候选关键字可以有1个或多个。</p></li><li><p>在CPU执行一条指令的过程中至少占用一个机器周期。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C二级错题积累(2)</title>
      <link href="2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/"/>
      <url>2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>要是用外存储器中的信息，应先将其调入内存储器。</p></li><li><p>进制是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先进后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：顺序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。</p></li><li><p>在数据库中存储的是数据以及数据之间的联系。</p></li><li><p>关系模式是用来记录用户数据的二维表。</p></li><li><p>在一C语言程序中可以进行多种算法的实现，对算法的个数没有规定。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。</p></li><li><p>赋值运算符的优先级高于逗号运算符的优先级。</p></li><li><p>数组定义后，不可以对数组整体赋值。</p></li><li><p>全局变量的作用域是从声明处到文件的结束。</p></li><li><p>关键字typedef的作用只是将C语言中的已有的数据类型作了置换，并不是增加新的类型。</p></li><li><p>当对文件的读（写）操作完成之后，必须将他关闭，否则可能导致数据丢失。</p></li><li><p>选择中打开一个已存在的文件并进行了写操作后，原有文件中的全部数据不一定被覆盖，也可以对源文件进行追加操作等。</p></li><li><p>选项中在一个程序中当对文件进行了写操作后，不用先关闭该文件然后再打开，才能读到第一个数据，可以用fseek()函数进行重新定位即可。</p></li><li><p>C语言中的文件可以进行随机读写。</p></li><li><p>在计算机中，运算器的基本功能是继续宁算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存最大容量取决于计算机地址位数。</p></li><li><p>线性表链式存储结构的特点是，用一组不连续的存储单元存储线性表中的各个元素。线性链表的存储单元是任意的，即各数据结点取得存储序列可以是连续的，也可以是不连续的。循环链表采链式存储结构，因此存储空间也可以是不连续的。</p></li><li><p>二叉树的性质，对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>软件应首先满足用户的功能需求。</p></li><li><p>数据库管理系统的主要功能包括：数据模式定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据库的并发控制与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>使用顺序、选择、循环三种基本结构构成的程序可以解决所有问题，而不只是解决简单问题。</p></li><li><p>C语言是一种结构化程序设计语言。</p></li><li><p>程序化程序设计提倡模块化的设计方法。</p></li><li><p>在C语言中整型常量可以用十进制、八进制和十六进制等进制形式表示，但不包括二进制。</p></li><li><p>C语言中标识符由字母、数字、下划线、组成，另外关键字不能作为标识符。</p></li><li><p>算数运算符+的优先级高于- =，且- = 的结合方向为自右向左。</p></li><li><p>default语句在switch语句中可以省略。</p></li><li><p>宏替换没有数据类型限制。</p></li><li><p>宏定义卸载函数的花括号外边，作用域为其后的程序，通常在文件的最开头。</p></li><li><p>宏名一般用大写，但不是必须用大写。</p></li><li><p>计算机完成一条指令所花费的时间称为一个执行周期。</p></li><li><p>人工管理阶段没有专门的软件对数据进行管理。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C二级错题积累(1)</title>
      <link href="2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/"/>
      <url>2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/</url>
      
        <content type="html"><![CDATA[<ol><li><p>计算机完成一条指令所花费的时间称为一个指令周期。</p></li><li><p>顺序程序具有顺序性、封闭性和可再现性的特点，使得程序设计者能够控制程序执行的过程（包括执行顺序、执行时间），对程序执行的中间结果和状态可以预先估计，这样就可以方便地进行程序的测试和调试。</p></li><li><p>为了降低算法的空间复杂度，主要应减少输入数据所占的存储空间以及额外空间，通常采用压缩存储技术。</p></li><li><p>算法的计算工作量是用算法所执行的基本运算次数来度量的，而算法所执行的基本运算次数是问题规模（通常用整数）表示的函数。</p></li><li><p>算法的复杂程度与程序的编制无关。</p></li><li><p>算法需要考虑可行性、确定性、有穷性等。</p></li><li><p>栈按先进后出的原则组织数据，所以入栈最早的元素最后出栈。队列按先进先出的原则组织数据，所以入队最早的元素最先退队。</p></li><li><p>树的总的结点数为树中所有结点的度数之和再加1.</p></li><li><p>结构化程序设计的目的：通过设计结构良好的程序保证程序动态执行的正确性，使程序易理解、易调试、易维护，以提高软件开发的效率，减少出错率，减少出错率，因此结构化程序强调程序的易读性。</p></li><li><p>系统软件是管理计算机的资源，提高计算机的使用效率，为用户提供各种服务的软件，如操作系统、数据库管理、编译程序、汇编程序和网络软件等。</p></li><li><p>数据库管理技术的三个阶段是人工管理阶段、文件系统阶段和数据库系统阶段。人工管理阶段没有专门的软件对数据进行管理。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>C语言中的非执行语句不会被编译，不会生成二进制的机器指令。</p></li><li><p>由C语言构成的指令序列称C源程序，C源程序经过C语言编译程序编译之后生成一个后缀为.OBJ的二进制文件（称为目标文件）；最后要由”连接程序”把此.OBJ文件与C语言提供的各种数据库函数连接起来生成一个后缀为.EXE的可执行文件。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。关键字不能作为标识符。</p></li><li><p>取模运算符%，二元运算符，具有左结合性。</p></li><li><p>在VC6.0平台中，int4字节，double8字节</p></li><li><p>C语言的逻辑运算符比较特别，他的操作数没有明确的数据类型，可以是任意合法的表达式。</p></li><li><p>不能将一个整数直接赋给指针变量作为地址。</p></li><li><p>函数的返回这可以是地址，即指针。</p></li><li><p>函数调用中形参值的变化不会传递给实参。</p></li><li><p>指针是用来存放地址的变量，用（类型名 *指针变量名）的形式定义。赋值时应将某个变量地址即&amp;x赋值给指针变量。</p></li><li><p>scanf(“%s”,s)表示输入一个字符串，遇到空格后会结束输入。所以当字符串内带有空格时，不能使用此语句。</p></li><li><p>在C语言中，只有在使用时才占用内存单元的变量，其存储类型是auto和register</p></li><li><p>不能再定义结构体的同时，又用结构体类型名定义变量。</p></li><li><p>预处理命令是以#号开头的命令，这些，命令因该在函数外书写，一般在源文件的最前面书写，但不是必须在起始位置书写。</p></li><li><p>C语言的预处理能够实现宏定义和条件编译等功能</p></li><li><p>buffer-用于接收数据的内存地址，大小至少是size*count字节</p></li><li><p>size-单位元素的大小，单位是字节</p></li><li><p>count-元素的个数，每个元素是size字节</p></li><li><p>stream-输入流</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月C语言二级(2)</title>
      <link href="2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/"/>
      <url>2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/</url>
      
        <content type="html"><![CDATA[<h3 id="4什么是字符常量"><a href="#4什么是字符常量" class="headerlink" title="4什么是字符常量"></a>4什么是字符常量</h3><p>单引号括起来，中间只有一个字符。“a”,’abc’都是不对的</p><h3 id="5什么是字符串常量"><a href="#5什么是字符串常量" class="headerlink" title="5什么是字符串常量"></a>5什么是字符串常量</h3><p>双引号括起来，中间由若干字符和转义字符组成。</p><p>例如：“abc” “acb\n”</p><h3 id="6字符计算"><a href="#6字符计算" class="headerlink" title="6字符计算"></a>6字符计算</h3><p>‘B’ - ‘A’ = 1</p><p>‘a’ - ‘A’ = 32</p><h2 id="2字符变量"><a href="#2字符变量" class="headerlink" title="2字符变量"></a>2字符变量</h2><h3 id="1定义形式：-char-变量名-值"><a href="#1定义形式：-char-变量名-值" class="headerlink" title="1定义形式： char 变量名[=值]"></a>1定义形式： char 变量名[=值]</h3><p>例如：</p><p>char a = ‘a’;</p><p>char a = 97;</p><h2 id="3字符的输入输出"><a href="#3字符的输入输出" class="headerlink" title="3字符的输入输出"></a>3字符的输入输出</h2><p>printf中应用格式控制符%c在相应位是输出字符。]</p><p>scanf中应用格式控制符%c接收字符</p><p>注意：</p><p>​    <strong>在scanf中要一次输入完全部字符，中间不要按tab,空格，回车，因为tab，空格、回车，也是字符，会被接收</strong></p><hr><p>字符输出：putchar(字符)</p><p>字符输入：变量= getchar();</p><p>注意：<br>空格、tab、回车会被接收</p><h2 id="4程序举例"><a href="#4程序举例" class="headerlink" title="4程序举例"></a>4程序举例</h2><p><strong>重点算法 字母大小写转换</strong></p><p>例1：把从终端输入的小写字母转换成大写字母，其他字符不变</p><p>分析：</p><p>1小写字母转大写需要减去32</p><p>2如何判断小写字母，在’a’到’Z’之间的字符</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310200349872.png" alt="image-20210310200349872"></p><p>例2：统计字符中大写字母和小写字母的个数</p><img src="C:/Users/xuanxuan/Desktop/3月c语言二级考试.assets/image-20210310200513256.png" alt="image-20210310200513256" style="zoom:200%;" /><h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1><p>大纲分析</p><p>1库函数的正确调用</p><p>2函数的定义方法</p><p>3函数的类型和返回值</p><p>4形式参数与实在参数，参数值的传递</p><p>5函数的正确调用，嵌套调用，递归调用。</p><p>6局部变量和全局变量</p><p>7变量的存储类别（自动，静态，寄存器，外部）</p><p>变量的作用域和生存期</p><h2 id="1库函数"><a href="#1库函数" class="headerlink" title="1库函数"></a>1库函数</h2><h3 id="1c语言是由函数组成的"><a href="#1c语言是由函数组成的" class="headerlink" title="1c语言是由函数组成的"></a>1c语言是由函数组成的</h3><p>从main()函数开始，在main()函数结束</p><h3 id="2标准库函数的引入"><a href="#2标准库函数的引入" class="headerlink" title="2标准库函数的引入"></a>2标准库函数的引入</h3><p>通过命令行的形式#include&lt;库函数头文件&gt;</p><p>或者#include”库函数头文件”</p><h3 id="3标准库函数的调用形式"><a href="#3标准库函数的调用形式" class="headerlink" title="3标准库函数的调用形式"></a>3标准库函数的调用形式</h3><p>函数名(参数表)</p><p>例如：</p><p> y = sqrt(13);——开平方</p><h3 id="3常用数学公式"><a href="#3常用数学公式" class="headerlink" title="3常用数学公式"></a>3常用数学公式</h3><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310201107634.png" alt="image-20210310201107634"></p><p>#include&lt;math.h&gt;</p><h2 id="2函数的定义和返回值"><a href="#2函数的定义和返回值" class="headerlink" title="2函数的定义和返回值"></a>2函数的定义和返回值</h2><h3 id="1用户自定义函数的一般形式"><a href="#1用户自定义函数的一般形式" class="headerlink" title="1用户自定义函数的一般形式"></a>1用户自定义函数的一般形式</h3><p>函数返回值的类型名 函数名（类型名 形参1，</p><p>类型名 形参2,…….） 函数的首部</p><p>{</p><p>说明部分</p><p>语句部分                    //函数体</p><p>}</p><p><strong>注意：</strong></p><p>1函数名及形参由用户定义的标识符组成</p><p>2同一程序中函数名必须唯一</p><p>3形参名字在同一函数中命名唯一</p><p>4不能在函数内部定义函数</p><p>5如果不指定返回值类型，返回值为int型</p><p>6函数调用前必须先定义（说明）</p><p>7无返回值，在函数返回类型处，用void</p><hr><h3 id="2返回值"><a href="#2返回值" class="headerlink" title="2返回值"></a>2返回值</h3><p>函数返回值通过return语句返回，形式：return表达式；</p><p>一个函数中允许有多条return,但是只能有一条执行</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210717411.png" alt="image-20210310210717411"></p><h2 id="3函数的调用"><a href="#3函数的调用" class="headerlink" title="3函数的调用"></a>3函数的调用</h2><h3 id="1调用方法"><a href="#1调用方法" class="headerlink" title="1调用方法"></a>1调用方法</h3><p>1函数名（实在参数表）</p><p>2函数名（）无实参情况下</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210839305.png" alt="image-20210310210839305"></p><h2 id="4函数的说明"><a href="#4函数的说明" class="headerlink" title="4函数的说明"></a>4函数的说明</h2><p>函数的调用原则</p><p>先定义，后调用。如果函数在调用之后，除返回值是int和char型的，都需要在程序之前进行说明</p><p>说明形式：</p><p>类型名 函数名（参数类型1，参数类型2）；</p><p>说明值：main()函数之外，main()函数之中</p><p>例：<br>double add(double,double);</p><h2 id="5函数调用之间的数据传递"><a href="#5函数调用之间的数据传递" class="headerlink" title="5函数调用之间的数据传递"></a>5函数调用之间的数据传递</h2><p>函数调用中，实参的数据和形参对应传递</p><p>两种传递方式</p><p>1值传递</p><p>只传送值，实参不做改变</p><p>2地址传递</p><p>传送值，实参被改变</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211747377.png" alt="image-20210310211747377"></p><h2 id="6程序距离"><a href="#6程序距离" class="headerlink" title="6程序距离"></a>6程序距离</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211820461.png" alt="image-20210310211820461"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211916480.png" alt="image-20210310211916480"></p><h1 id="第八章-地址和指针"><a href="#第八章-地址和指针" class="headerlink" title="第八章 地址和指针"></a>第八章 地址和指针</h1><p>  大纲分析</p><p>1变量的地址和指针</p><p>2指针变量的定义和指针变量的基类型</p><p>3给指针变量赋值</p><p>4对指针变量的操作</p><p>5函数之间地址值的传递</p><h2 id="1变量的地址和指针"><a href="#1变量的地址和指针" class="headerlink" title="1变量的地址和指针"></a>1变量的地址和指针</h2><p>计算机的内存是以字节为单位的一片连续的存储空间，每一个字节都有一个编号，这个编号就成为了内存地址。</p><p>每个变量的地址是指该变量所占存储的单元的第一个字节的地址</p><p>回忆：<br>计算机的存储点位</p><p>二进制的位bit</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310212657371.png" alt="image-20210310212657371"></p><p>一种特殊的变量</p><p>这种变量只是用来存放内存地址的，起名为指针变量</p><p>假设定义了一个只存地址的变量p</p><p>把变量a的地址赋予指针变量p</p><p>则指针变量p的值为1245052</p><p>当访问变量a时，访问的是什么？5</p><p>当访问指针变量P时，访问的是什么？1245052</p><hr><p>当访问变量时，为“直接存取（直接访问）”我们也可以通过指针变量间接的访问该地址中原来的值。</p><p>此时成为”间接存取（间接访问）“</p><h2 id="2指针变量的定义和指针变量的"><a href="#2指针变量的定义和指针变量的" class="headerlink" title="2指针变量的定义和指针变量的"></a>2指针变量的定义和指针变量的</h2><p>定义指针变量的一般形式如下：<br>类型名 指针变量名</p><p>或</p><p>类型名 <em>指针变量名1，</em>指针变量名2,…；</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224241889.png" alt="image-20210310224241889"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224315129.png" alt="image-20210310224315129"></p><h2 id="3给指针变量赋值"><a href="#3给指针变量赋值" class="headerlink" title="3给指针变量赋值"></a>3给指针变量赋值</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224519420.png" alt="image-20210310224519420"></p><hr><p>给指针变量赋地址值之外，还可以给指针变量赋一个特殊的值，该值为’’空’’值</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224850845.png" alt="image-20210310224850845"></p><p><strong>注意：</strong></p><p>此时，指针变量p中不是没有值，而是有一个’’空’’值。</p><h2 id="4对指针变量的操作"><a href="#4对指针变量的操作" class="headerlink" title="4对指针变量的操作"></a>4对指针变量的操作</h2><p>通过指针来引用一个存储单元，”间址运算符”</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310225724159.png" alt="image-20210310225724159"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月C语言二级</title>
      <link href="2021/03/09/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7/"/>
      <url>2021/03/09/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>二级C语言程序设计</p><h1 id="第一章-程序的概念"><a href="#第一章-程序的概念" class="headerlink" title="第一章 程序的概念"></a>第一章 程序的概念</h1><h2 id="1程序的概念"><a href="#1程序的概念" class="headerlink" title="1程序的概念"></a>1程序的概念</h2><p>程序是指令的集合</p><p>指令-编译-计算机运行</p><p>指令：编写程序的执行程序（要干什么的步骤）</p><p>编译：将程序转换为二进制（怎么干）</p><p>计算机运行：将二进制运行出结果</p><h2 id="2-C程序的运行过程"><a href="#2-C程序的运行过程" class="headerlink" title="2 C程序的运行过程"></a>2 C程序的运行过程</h2><p>.c文件(源程序)——.obj(目标程序——二进制程序)——.exe(可执行程序(debug文件夹中))——计算机运行</p><p>​                         ——连接程序（运行库）</p><h2 id="3-程序设计的步骤"><a href="#3-程序设计的步骤" class="headerlink" title="3 程序设计的步骤"></a>3 程序设计的步骤</h2><p>（1）确定数据结构</p><p>（<strong>2</strong>）<strong>确定算法</strong>——有穷性（步骤有限）</p><p>​                          ——确定性（含义确切）</p><p>​                          ——可行性（能够实现）</p><p>​            有零个或多个输入（数据输入）</p><pre><code>         有一个或多个输出（数据输出）</code></pre><p>（3）编码</p><p>（4）在计算机上调试程序</p><p>（5）整理并写出文档资料</p><h2 id="4结构化程序"><a href="#4结构化程序" class="headerlink" title="4结构化程序"></a>4结构化程序</h2><p>三大结构：<br>顺序结构：程序从上到下顺序执行</p><p>选择结构：程序可以沿着不同路径执行</p><p>循环结构：指定程序重复执行</p><h1 id="第二章-C程序设计的初步知识"><a href="#第二章-C程序设计的初步知识" class="headerlink" title="第二章 C程序设计的初步知识"></a>第二章 C程序设计的初步知识</h1><h2 id="1大纲分析"><a href="#1大纲分析" class="headerlink" title="1大纲分析"></a>1大纲分析</h2><p>（1）C的数据类型（基本结构，<strong>构造类型，指针类型，无值类型</strong>，）及其定义方法</p><p>（2）C运算符的种类、运算优先级和结核性。</p><p>（3）不同类型数据间的转换与运算</p><p>（4）C表达式类型（赋值表达式，<strong>算数表达式，关系表达式，逻辑表达式，条件表达式</strong>,逗号表达式）和求值规则。</p><h2 id="2简单C语言构成和格式"><a href="#2简单C语言构成和格式" class="headerlink" title="2简单C语言构成和格式"></a>2简单C语言构成和格式</h2><p>#include&lt;stdio.h&gt;——命令行 调用标准库函数</p><p>main ——主函数 程序的入口 有且只有一个叫做 main()的函数</p><p>{</p><p>​    printf(“xxx”);</p><p>}</p><h2 id="3标识符"><a href="#3标识符" class="headerlink" title="3标识符"></a>3标识符</h2><h3 id="（1）什么是标识符"><a href="#（1）什么是标识符" class="headerlink" title="（1）什么是标识符"></a>（1）什么是标识符</h3><p>符合一定规则的符号集合</p><h3 id="（2）标识符命名规则"><a href="#（2）标识符命名规则" class="headerlink" title="（2）标识符命名规则"></a>（2）标识符命名规则</h3><p>由字母（a-z,A-Z),数字（0-9），下划线</p><p>必须由字母，下划线开头，如A3,_sb</p><p>不能是c语言关键字</p><p>区分小写b2和B2是两个不同的标识符</p><p>长度一定，与系统有关（考试不涉及）</p><h3 id="（3）标识符的分类"><a href="#（3）标识符的分类" class="headerlink" title="（3）标识符的分类"></a>（3）标识符的分类</h3><p>-关键字</p><p>-预定义标识符（系统中具有某些功能含义的名字）</p><p>-用户标识符</p><p>例如：</p><p>正确的标识符：sum a2 a_2 ,_a2</p><p>错误的标识符：2a a? if while</p><h2 id="4常量"><a href="#4常量" class="headerlink" title="4常量"></a>4常量</h2><h3 id="（1）什么是常量"><a href="#（1）什么是常量" class="headerlink" title="（1）什么是常量"></a>（1）什么是常量</h3><p>常量就是在程序汇其值不能被改变的量</p><p>例如：π</p><h3 id="（2）常量类型"><a href="#（2）常量类型" class="headerlink" title="（2）常量类型"></a>（2）常量类型</h3><p>-数值型常量-整型常量 -1， 0 ，2不带小数点</p><p>​                     -实型常量 -12.68带小数点的</p><p><strong>在C语言中0和0.0是两个不同的东西</strong></p><p>-非数值型常量 -字符型常量 ‘A’</p><p>​                           -字符串常量 “A”</p><h3 id="3-如何定义符号常量"><a href="#3-如何定义符号常量" class="headerlink" title="(3)如何定义符号常量"></a>(3)如何定义符号常量</h3><p>关键字define</p><p>用法#define 标识符 常量值</p><h2 id="5变量"><a href="#5变量" class="headerlink" title="5变量"></a>5变量</h2><h3 id="1-什么是变量"><a href="#1-什么是变量" class="headerlink" title="(1)什么是变量"></a>(1)什么是变量</h3><p>在程序运行中，值可以改变的量</p><h3 id="（2）变量的命名规则"><a href="#（2）变量的命名规则" class="headerlink" title="（2）变量的命名规则"></a>（2）变量的命名规则</h3><p>与标识符相同  字母数字下划线组成，必须由字母下划线开头，不可以是c语言的关键字</p><p>（3）变量的特点</p><p>变量在内存汇总要占用连续的若干个字节</p><p>所占用的字节数由变量的数据类型确定</p><p>变量使用必须要先定义</p><p><strong>记忆理解：一个大小的盒子，大小取决于数据类型</strong></p><h3 id="（3）整型数据"><a href="#（3）整型数据" class="headerlink" title="（3）整型数据"></a>（3）整型数据</h3><p>整型数据</p><p>整型常量的表示形式</p><p>十进制整数：0、-111</p><p>八进制整数：00、-0111</p><p>十六进制整数： 0x0、-0x111</p><p>注意：**只有十进制整数有负数、八进制最大到7、十六进制最大到F **</p><h3 id="（4）整型数据存储形式"><a href="#（4）整型数据存储形式" class="headerlink" title="（4）整型数据存储形式"></a>（4）整型数据存储形式</h3><p>计算机的存储单位</p><p>二进制的位bit</p><p>8 bit = 1字节  1024字节 = 1Kb  1024kb = 1m  1024m = 1g</p><h3 id="（5）负数的存储"><a href="#（5）负数的存储" class="headerlink" title="（5）负数的存储"></a>（5）负数的存储</h3><p>-转成反码</p><p>-在反码上加一 （得到补码）</p><p><strong>注意转换是最高位符号位不转换，如果是无符号的，最高位当做数字</strong></p><p>整数</p><h3 id="（6）整型数据"><a href="#（6）整型数据" class="headerlink" title="（6）整型数据"></a>（6）整型数据</h3><p>-有符号位(没有负数)</p><p> unsigned</p><p>-无符号位（有正负）</p><p>signed</p><h3 id="7-实型数据"><a href="#7-实型数据" class="headerlink" title="(7)实型数据"></a>(7)实型数据</h3><p>实型常量（浮点数、实数）的表示形式</p><p>一般形式的实数：12.3456、-1.23456、7.0</p><p>指数形式的实数：-1.2345E3、0.12345e-4</p><p>注意：<strong>E或e之前必须要有数字、之后必须是整数、数字和E（e）之间没有空格</strong></p><hr><p>实型数据类型</p><p>float单精度浮点型</p><p>double双精度浮点型</p><p>注意：</p><p><strong>如不特别定义任意用到一个实数在C中都是double类型的，超出范围处理成0值，实数存在误差</strong></p><h2 id="6算数表达式"><a href="#6算数表达式" class="headerlink" title="6算数表达式"></a>6算数表达式</h2><h3 id="（1）基本运算符号"><a href="#（1）基本运算符号" class="headerlink" title="（1）基本运算符号"></a>（1）基本运算符号</h3><p>注意：<strong>不同类型转换，例如1/2.0 = 0.5</strong></p><p><strong>相同类型结构类型不变 例如：1/2 = 0</strong></p><p><strong>若是单精度后面加0变成双精度</strong></p><p><strong>%左右运算必须都是整数</strong></p><h3 id="（2）运算规则（优先级）"><a href="#（2）运算规则（优先级）" class="headerlink" title="（2）运算规则（优先级）"></a>（2）运算规则（优先级）</h3><p><strong>先函数，再括号，后乘除，终加减</strong></p><p>强制转换类型 （数据类型）（表达式 ）</p><p><strong>实型转换为整型时，把小数位砍掉</strong></p><h2 id="7赋值表达式"><a href="#7赋值表达式" class="headerlink" title="7赋值表达式"></a>7赋值表达式</h2><h3 id="1-主要运算符号"><a href="#1-主要运算符号" class="headerlink" title="(1)主要运算符号="></a>(1)主要运算符号=</h3><p>形式 变量名 = 表达式 ，例如 a = 10</p><p>理解记忆：*<em>变量好比一个盒子，把等于号右边东西放到左边的盒子里面</em></p><p><strong>注意：</strong></p><p>（1）等号优先级最低，先计算右边，在赋值给左边；</p><p>（2）n =n+1；有意义，在原有变量n的基础上，增加1；</p><p>（3）左边不能是表达式 a + b = c <strong>错误</strong></p><p>（4）右边可以是赋值表达式 a = b = 7 +1 ;但是 a = 7 +1 = b<strong>是错误的</strong></p><p>主要运算符号+= -= *= /= %=</p><h3 id="2-赋值运算的类型转换"><a href="#2-赋值运算的类型转换" class="headerlink" title="(2)赋值运算的类型转换"></a>(2)赋值运算的类型转换</h3><p>​    赋值两边类型不一致，将等号右边的值转换成左边数据类型，仅限数值，成为”赋值兼容”</p><p>整型运算符转换原则：</p><p>1运算符号两边一个短整型，一个长整型，都转化成长整型</p><p>2运算符号两边一个无符号，一个有符号，都转化成无符号</p><p>整数赋值转换原则：</p><p>1左短右长，截取右边，丢高保低</p><p>2左无右有，赋值右边，负数变整数</p><p>3左有右无，复制右边，高位为1，变负数</p><h3 id="（3）自增、自减、逗号运算符"><a href="#（3）自增、自减、逗号运算符" class="headerlink" title="（3）自增、自减、逗号运算符"></a>（3）自增、自减、逗号运算符</h3><p>++ – </p><p>注意：</p><p><strong>1自增、自减符号可以放在变量前面形成前缀，也可以放在后面形成后缀</strong></p><p><strong>2如果是前缀，先做自我运算，后运算语句</strong></p><p><strong>3如果是后缀，先运算语句，后运行语句</strong></p><p><strong>4不要在一个表达式中多次对同一个变量做++,–运算</strong></p><hr><p>逗号表达式：<br>    逗号表达式运算法则从左到右，一个表达式一个表达式计算，全部运算完毕后，最后一个表达式的结构是整个表达式的值</p><h1 id="第三章-顺序结构"><a href="#第三章-顺序结构" class="headerlink" title="第三章 顺序结构"></a>第三章 顺序结构</h1><p>大纲分析：<br>1表达式语句，空语句，复合语句</p><p>2输入和输出函数的调用，正确输入数据并正确设计输出格式</p><h2 id="1赋值语句"><a href="#1赋值语句" class="headerlink" title="1赋值语句"></a>1赋值语句</h2><p>赋值语句也称为表达式语句，主要在赋值表达式后加入分号：,构成表达式语句</p><h2 id="2数据输出"><a href="#2数据输出" class="headerlink" title="2数据输出"></a>2数据输出</h2><p>1什么是数据输出</p><p>2C语言如何进行数据输出</p><p>注意：</p><p><strong>C语言没有输入输出语句，应用标准库中的函数完成输出</strong></p><h3 id="（1）格式控制"><a href="#（1）格式控制" class="headerlink" title="（1）格式控制"></a>（1）格式控制</h3><p>格式控制的作用</p><p>1按照指定的输出格式输出，格式有%符号和紧跟的其后格式描述符组成，如整型%d，单精度%f,双精度%lf</p><p>2原样输出文字和字符</p><h3 id="（2）数据输出"><a href="#（2）数据输出" class="headerlink" title="（2）数据输出"></a>（2）数据输出</h3><p>%c——输出一个字符</p><p>%d——整型、</p><p>%0 ——输出八进制形式</p><p>%x(X)——输出十六进制形式</p><p>%u——以无符号输出整形数</p><p>%f——输出单精度数或双精度，也可用%lf输出双精度</p><p>%e(3)——以质数形式输出浮点数</p><p>%g(G)——系统决定使用%f还是%e输出保证输出宽度最小</p><p>%s——输出一个字符串，遇到\0终止，不受最大宽度约束</p><p>%p——输出变量内存地址</p><p>%%——输出一个%</p><h3 id="3-长度修饰符"><a href="#3-长度修饰符" class="headerlink" title="(3)长度修饰符"></a>(3)长度修饰符</h3><p>输出数据所占宽度的格式说明</p><p>（1）默认输出实际宽度，且右对齐</p><p>（2）%nd整数输出，小于n左边补空格，右对齐</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302152159882.png" alt="image-20210302152159882"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302152234672.png" alt="image-20210302152234672"></p><h3 id="（4）printf使用注意事项"><a href="#（4）printf使用注意事项" class="headerlink" title="（4）printf使用注意事项"></a>（4）printf使用注意事项</h3><p>（1）输出自由控制</p><p>（2）如有格式控制即%，有几项后边输出几项，类型必须匹配，%多于输出项，会出乱码，%少于输出项，多余的不输出</p><p>（3）转义字符\n回车\r换行但无回车\t 制表  \a响铃等控制符</p><p>（4）输出% 输出两个%%</p><p>（5）printf(函数有返回值)</p><p>（6）尽量不要在printf中做变量运算，printf（”%d %d”,k,++k)</p><p>(7)如果出现*号，顺序写入</p><h2 id="3数据输入"><a href="#3数据输入" class="headerlink" title="3数据输入"></a>3数据输入</h2><p>scanf函数调用形式：<br>scanf(格式控制，输入项1，输入项2…….);</p><p>注意：</p><p><strong>1务必使用&amp;运算符，除非变量本身是地址变量</strong></p><p><strong>2输入double类型时候一定使用%lf</strong></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153230356.png" alt="image-20210302153230356"></p><h3 id="1-scanf函数使用说明"><a href="#1-scanf函数使用说明" class="headerlink" title="(1)scanf函数使用说明"></a>(1)scanf函数使用说明</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153318246.png" alt="image-20210302153318246"></p><p> 特别注意：<strong>如果在scanf格式控制符出加入其他符号，输入时必须按照它原样格式输出</strong></p><h2 id="4复合语句和空语句"><a href="#4复合语句和空语句" class="headerlink" title="4复合语句和空语句"></a>4复合语句和空语句</h2><p>一对大括号之间多条语句组成的一个语句组称为复合语句</p><p>{;;}</p><h1 id="第四章-选择结构"><a href="#第四章-选择结构" class="headerlink" title="第四章 选择结构"></a>第四章 选择结构</h1><p>大纲分析：<br>1用if语句实现选择结构</p><p>2用switch语句实现多分支选择结构</p><p>3选择结构的嵌套</p><h3 id="1什么是逻辑值"><a href="#1什么是逻辑值" class="headerlink" title="1什么是逻辑值"></a>1什么是逻辑值</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153854555.png" alt="image-20210302153854555"></p><h3 id="2什么是关系运算"><a href="#2什么是关系运算" class="headerlink" title="2什么是关系运算"></a>2什么是关系运算</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153923659.png" alt="image-20210302153923659"></p><p>注意：</p><p><strong>关系运算尽量避免两个浮点数做相等比较</strong></p><h2 id="3逻辑运算符"><a href="#3逻辑运算符" class="headerlink" title="3逻辑运算符"></a>3逻辑运算符</h2><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154444443.png" alt="image-20210302154444443"></p><h2 id="4if语句合用if语句构成的选择结构"><a href="#4if语句合用if语句构成的选择结构" class="headerlink" title="4if语句合用if语句构成的选择结构"></a>4if语句合用if语句构成的选择结构</h2><h3 id="（1）语句形式"><a href="#（1）语句形式" class="headerlink" title="（1）语句形式"></a>（1）语句形式</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154538668.png" alt="image-20210302154538668"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154632832.png" alt="image-20210302154632832"></p><h3 id="5条件表达式"><a href="#5条件表达式" class="headerlink" title="5条件表达式"></a>5条件表达式</h3><p>条件运算符 ？</p><p>条件表达式形式：表达式1？表达式2：表达式3</p><p>含义：当表达式1非零时，运算表达式2的值，否则运算表达式3的值 </p><h2 id="6swich语3句及break"><a href="#6swich语3句及break" class="headerlink" title="6swich语3句及break"></a>6swich语3句及break</h2><h3 id="（1）语句形式-1"><a href="#（1）语句形式-1" class="headerlink" title="（1）语句形式"></a>（1）语句形式</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303180141802.png" alt="image-20210303180141802"></p><p>表达式可以是整型表达式，也可以是字符型表达式</p><h2 id="7goto语句（非大纲考点要求）"><a href="#7goto语句（非大纲考点要求）" class="headerlink" title="7goto语句（非大纲考点要求）"></a>7goto语句（非大纲考点要求）</h2><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303180443728.png" alt="image-20210303180443728"></p><h1 id="第五章-循环结构"><a href="#第五章-循环结构" class="headerlink" title="第五章 循环结构"></a>第五章 循环结构</h1><p>大纲分析</p><p>1 for循环结构</p><p>2 while 和do -while循环结构</p><p>3 continue 语句和break语句</p><p>4循环的嵌套</p><h2 id="1while循环语句"><a href="#1while循环语句" class="headerlink" title="1while循环语句"></a>1while循环语句</h2><h3 id="（1）一般形式"><a href="#（1）一般形式" class="headerlink" title="（1）一般形式"></a>（1）一般形式</h3><p>while（表达式）循环体</p><h2 id="2do-while循环语句"><a href="#2do-while循环语句" class="headerlink" title="2do-while循环语句"></a>2do-while循环语句</h2><p>do 循环体 while(表达式)</p><h2 id="3while与do-while的比较"><a href="#3while与do-while的比较" class="headerlink" title="3while与do-while的比较"></a>3while与do-while的比较</h2><h3 id="（1）形式比较"><a href="#（1）形式比较" class="headerlink" title="（1）形式比较"></a>（1）形式比较</h3><p>while(表达式)循环体</p><p>do循环体while(表达式)</p><h3 id="（2）最少循环次数"><a href="#（2）最少循环次数" class="headerlink" title="（2）最少循环次数"></a>（2）最少循环次数</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184133675.png" alt="image-20210303184133675"></p><h3 id="（3）程序举例"><a href="#（3）程序举例" class="headerlink" title="（3）程序举例"></a>（3）程序举例</h3><p>计算1+。。。+100的值</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184446431.png" alt="image-20210303184446431"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184544016.png" alt="image-20210303184544016"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184631102.png" alt="image-20210303184631102"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184717250.png" alt="image-20210303184717250"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184734878.png" alt="image-20210303184734878"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184947480.png" alt="image-20210303184947480"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185058367.png" alt="image-20210303185058367"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185154032.png" alt="image-20210303185154032"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185234962.png" alt="image-20210303185234962"></p><h2 id="4for语句循环结构"><a href="#4for语句循环结构" class="headerlink" title="4for语句循环结构"></a>4for语句循环结构</h2><h3 id="（1）for循环一般形式"><a href="#（1）for循环一般形式" class="headerlink" title="（1）for循环一般形式"></a>（1）for循环一般形式</h3><p>for(表达式1：表达式2：表达式3)</p><h2 id="5嵌套循环"><a href="#5嵌套循环" class="headerlink" title="5嵌套循环"></a>5嵌套循环</h2><p><strong>重点算法：判断素数（质数）</strong></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222626730.png" alt="image-20210303222626730"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222726775.png" alt="image-20210303222726775"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222741403.png" alt="image-20210303222741403"></p><h2 id="6break和continue"><a href="#6break和continue" class="headerlink" title="6break和continue"></a>6break和continue</h2><p>break跳出switch.循环向下继续运行</p><p>continue结束本次循环 继续下次循环</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222855849.png" alt="image-20210303222855849"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222917811.png" alt="image-20210303222917811"></p><h1 id="第六章-字符型数据"><a href="#第六章-字符型数据" class="headerlink" title="第六章 字符型数据"></a>第六章 字符型数据</h1><p>大纲分析</p><p>大纲中只规定了 字符串与字符数组</p><p>但本章涉及一下内容：</p><p>1字符常量，字符串常量</p><p>2字符变量的定义及使用</p><p>3字符型与整型数据的换算关系</p><p>4转义字符</p><p>5字符的输入与输出</p><h2 id="1什么是ASCII码"><a href="#1什么是ASCII码" class="headerlink" title="1什么是ASCII码"></a>1什么是ASCII码</h2><p>由于计算机只识别二进制，字符转换成固定数字存储。形成一张字符与数字的对照表格。</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223624766.png" alt="image-20210303223624766"></p><p> <img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223709749.png" alt="image-20210303223709749"></p><h2 id="2什么是字符常量"><a href="#2什么是字符常量" class="headerlink" title="2什么是字符常量"></a>2什么是字符常量</h2><p>​        单引号括起来，中间只有一个字符”a”,’abc’都是不对的</p><h2 id="3什么是转义字符常量"><a href="#3什么是转义字符常量" class="headerlink" title="3什么是转义字符常量"></a>3什么是转义字符常量</h2><p>单引号括起来，中间由反斜杠开头后跟一个特定字符。</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223957570.png" alt="image-20210303223957570"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -计算机 </tag>
            
            <tag> -二级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言笔记</title>
      <link href="2021/03/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-类型"><a href="#1-类型" class="headerlink" title="1.类型"></a>1.类型</h1><p>​    （1）整型int</p><p>​    （2）字符型char</p><p>​    （3）实型（浮点型）</p><p>​                单精度实型float</p><p>​                    双精度实型double</p><p>精确到第几位？</p><p>例如%。3f，就是小数点后保留三位</p><p>​        （4）unsigned int ——无符号整型</p><h1 id="2-输入与输出-scanf-printf"><a href="#2-输入与输出-scanf-printf" class="headerlink" title="2.输入与输出  scanf printf"></a>2.输入与输出  scanf printf</h1><p>每一个scanf函数调用都紧跟在一个printf函数调用的后面，这样做可以提示用户何时输入，以及输入什么。</p><h2 id="（1）输入函数scanf"><a href="#（1）输入函数scanf" class="headerlink" title="（1）输入函数scanf"></a>（1）输入函数scanf</h2><p>​                            例：num1把那个值放在那个地址处</p><p>清空输入缓冲区</p><p>如果在scanf(“%d,%d,%d”,&amp;a,&amp;b,&amp;c)</p><p>这双引号里面有逗号，那么在控制台之内输入的时候就要以逗号隔开</p><p>双引号中间的叫做格式化字符串，&amp;叫做取地址符。</p><h2 id="（2）输出函数printf"><a href="#（2）输出函数printf" class="headerlink" title="（2）输出函数printf"></a>（2）输出函数printf</h2><p>printf(“”,)格式化字符串  输出列表</p><h3 id="1-使用Printf函数输出八进制和十六进制数"><a href="#1-使用Printf函数输出八进制和十六进制数" class="headerlink" title="1.使用Printf函数输出八进制和十六进制数"></a>1.使用Printf函数输出八进制和十六进制数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换符号“%o”、“%X”</span><br></pre></td></tr></table></figure><h3 id="2-域宽"><a href="#2-域宽" class="headerlink" title="2.域宽"></a>2.域宽</h3><p>指的是存放输出数据的宽度</p><h1 id="3-Main函数"><a href="#3-Main函数" class="headerlink" title="3.Main函数"></a>3.Main函数</h1><p>(1)主函数程序的如空有且只有一个</p><p>（2）int main (mian前面的int表示main函数调用返回一个整型值)</p><p>（3）void main 已经过时</p><p>（4）main放在哪里都行，都先执行他</p><h1 id="4-打印的类型"><a href="#4-打印的类型" class="headerlink" title="4.打印的类型"></a>4.打印的类型</h1><h2 id="（1）-d"><a href="#（1）-d" class="headerlink" title="（1）%d"></a>（1）%d</h2><p>（十进制有符号整数）</p><p>例如%-6d——输出的整型占6个字符宽</p><p>-号为左对齐符号，默认为向右对齐</p><p>%u 十进制无符号整数<br>%f 浮点数<br>%s 字符串</p><p>%c 单个字符<br>%p 指针的值<br>%e 指数形式的浮点数<br>%x, %X 无符号以十六进制表示的整数<br>%0 无符号以八进制表示的整数<br>%g 自动选择合适的表示法</p><h1 id="5-计算所占字节数量"><a href="#5-计算所占字节数量" class="headerlink" title="5.计算所占字节数量"></a>5.计算所占字节数量</h1><p>计算元素个数</p><p>sizeof(arr)/sizeof(arr[0])</p><p>sizeof</p><h1 id="6-计算机中的单位"><a href="#6-计算机中的单位" class="headerlink" title="6.计算机中的单位"></a>6.计算机中的单位</h1><p>(1) bit 比特位</p><p>(2) byte字节</p><p>(3) kb</p><p>(4) mb</p><p>(5) gb</p><p>(6) tb</p><p>(7) pb</p><h1 id="7-变量"><a href="#7-变量" class="headerlink" title="7.变量"></a>7.变量</h1><p>（1）定义变量的类型：类型 变量名 赋值</p><p>（2）{}大括号</p><p>（3）定义在{}之外的叫做全局变量</p><p>  (4)全局变量和局部变量可以同时存在，并且局部变量优先</p><p>（5）局部变量和全局变量的名字最好不要一样，容易产生bug</p><p>  (6)局部变量只能在他所在的那个局部使用</p><p>（7）c语言语法规定，变量要定义在当前代码块的前面</p><h1 id="8-常量"><a href="#8-常量" class="headerlink" title="8.常量"></a>8.常量</h1><h2 id="（1）字面常量"><a href="#（1）字面常量" class="headerlink" title="（1）字面常量"></a>（1）字面常量</h2><p>3： 100： 3.14：</p><h2 id="（2）const修饰的常变量"><a href="#（2）const修饰的常变量" class="headerlink" title="（2）const修饰的常变量"></a>（2）const修饰的常变量</h2><p>​         （const常属性）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">4</span>; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//n是变量 但是又有常属性,所以我们称n是常变量</span></span><br></pre></td></tr></table></figure><h2 id="3-define定义的标识符常量"><a href="#3-define定义的标识符常量" class="headerlink" title="(3)#define定义的标识符常量"></a>(3)#define定义的标识符常量</h2><h2 id="（4）枚举常量"><a href="#（4）枚举常量" class="headerlink" title="（4）枚举常量"></a>（4）枚举常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举---一一列举</span></span><br><span class="line"><span class="comment">//性别：男 女 保密</span></span><br><span class="line"><span class="comment">//三原色：红黄蓝</span></span><br></pre></td></tr></table></figure><p>枚举关键字—enum</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">        <span class="comment">//这三个叫做枚举常量</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FEMALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SECRET);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-字符串"><a href="#9-字符串" class="headerlink" title="9.字符串"></a>9.字符串</h1><p>例子：名字 身份证号…</p><p>==不能用来比较两个字符串是否相等，应该用一个库函数-strcmp</p><p>（1）就是双引号引出的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="string">&quot;hellow sb&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>;<span class="comment">//空字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)字符串的结束标志是一个\0的转义字符，在计算字符串长度的时候\0是结束标志，不算作字符串的内容 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据在计算机存储的时候，存储的是2进制</span></span><br><span class="line">    <span class="comment">//#av$</span></span><br><span class="line">    <span class="comment">//a - 97 </span></span><br><span class="line">    <span class="comment">//A -65</span></span><br><span class="line">    <span class="comment">//  </span></span><br><span class="line">    <span class="comment">//ascii 编码</span></span><br><span class="line">    <span class="comment">//ascii 码值</span></span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">&quot;ABC&quot;</span> ； <span class="comment">//数组</span></span><br><span class="line">     <span class="comment">//&quot;ABC&quot; -- &#x27;A&#x27; &#x27;B&#x27; &#x27;C&#x27; &#x27;\0&#x27; -- &#x27;\0&#x27;</span></span><br><span class="line">       <span class="comment">//字符串的结束标志</span></span><br><span class="line">     <span class="keyword">char</span> arr2[] = &#123;<span class="string">&#x27;A&#x27;</span> ,<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="comment">//&#x27;\0&#x27; - 0</span></span><br><span class="line">    <span class="comment">//&#x27;A&#x27; - 97</span></span><br><span class="line">    <span class="comment">// &#x27;A&#x27; &#x27;B&#x27; &#x27;C&#x27;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-计算字符串长度"><a href="#10-计算字符串长度" class="headerlink" title="10.计算字符串长度"></a>10.计算字符串长度</h1><p>strlen()</p><p>计算字符串长度时\0是结尾的标志，不算做字符数量</p><p><strong>只有从前往后数的时候碰到\0才会停止</strong></p><h1 id="11-转义字符"><a href="#11-转义字符" class="headerlink" title="11.转义字符"></a>11.转义字符</h1><p>（转变原来的意思）</p><p>​        (1).\n 换行</p><p>​        (2).\t 水平制表符</p><p>​                    (类似于Tab)</p><p>​        （3）.? </p><p>​                    （在连续书写多个问号的时候，防止他们被解析成三字母词）</p><p>​                        (在c语言早期的时候有个东西叫做三字母词—？？+)</p><p>​        （4）.+任意带有转义字符的字母，使其不被解析为转义字符</p><p>​        （5）\转义任意，例：’/‘  转义两个单引号中后面的那个，使其打印出来的就是一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main（）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;c:\test\32\test.c));</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">                         //此输出结果为13</span></span><br></pre></td></tr></table></figure><p>（6）\ddd   ddd表示一道三个八进制数字</p><p>例子：上框中 32作为8进制代表的那个十进制数字，作为ascii码值，对应的字符</p><p>​       32=====》10进制 26======》作为ASCII码值代表的数</p><p>（7）\xdd   dd表示2个16进制的数字</p><h1 id="12-库函数"><a href="#12-库函数" class="headerlink" title="12.库函数"></a>12.库函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)printf</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//(2)字符串操作函数</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//(3)引入数学公式</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//(4)引入system</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h1 id="13-注释"><a href="#13-注释" class="headerlink" title="13.注释"></a>13.注释</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(从c++引进的)</span></span><br><span class="line"><span class="comment">/*  */</span>  (C原本的注释，开始 只要在碰到*/就会停止)</span><br></pre></td></tr></table></figure><h1 id="14-if-while语句"><a href="#14-if-while语句" class="headerlink" title="14. if   while语句"></a>14. if   while语句</h1><h1 id="15-函数举例"><a href="#15-函数举例" class="headerlink" title="15.函数举例"></a>15.函数举例</h1><p>例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>；</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">sum = Add(a, b) </span><br><span class="line">    <span class="comment">//f(x) = 2*x+1</span></span><br><span class="line">    <span class="comment">//f(x,y) = x+y</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x+y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">int</span> num2 = <span class="number">20</span> ;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"> <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"> sum = Add(num1,num2)</span><br><span class="line"> sum = Add(a,b) </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;SUM = %d\n&quot;</span> , sum)</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-自定义函数"><a href="#16-自定义函数" class="headerlink" title="16.自定义函数"></a>16.自定义函数</h1><h1 id="17-数组"><a href="#17-数组" class="headerlink" title="17.数组"></a>17.数组</h1><p><strong>一组相同元素的集合</strong></p><p>数组的大小要拿常量来指定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line">   <span class="comment">// int b = 2;</span></span><br><span class="line">    <span class="comment">//int c = 3;</span></span><br><span class="line">    <span class="comment">//int 4 = 4;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">//定义一个存放10个整数数字的数组</span></span><br><span class="line">    <span class="comment">//char ch[20];</span></span><br><span class="line">   <span class="comment">// float arr2[5];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>(1)下标    </p><p>语法规定 数组的下标从0开始</p><p><img src="https://i.loli.net/2020/11/29/2CmWdisDt1Hxe6p.png" alt="image-20201121115222649"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[下标]);</span><br><span class="line"><span class="comment">//直接访问对应数组的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//这里的int指的是数组中各个元素的类型，并不是数组的类型，</span></span><br><span class="line"><span class="comment">//数组的类型较为复杂</span></span><br><span class="line"><span class="comment">//求数组中的元素个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])); </span><br></pre></td></tr></table></figure><h1 id="18-操作符"><a href="#18-操作符" class="headerlink" title="18.操作符"></a>18.操作符</h1><h2 id="（1）算数操作符"><a href="#（1）算数操作符" class="headerlink" title="（1）算数操作符"></a>（1）算数操作符</h2><h2 id="（2）移位操作符"><a href="#（2）移位操作符" class="headerlink" title="（2）移位操作符"></a>（2）移位操作符</h2><p>移的位是二进制位</p><p>左移&lt;&lt;                 右移&gt;&gt; </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型1站四个字节 ——32个bit位</span></span><br><span class="line">    <span class="comment">//000000000000000000000000000000001</span></span><br><span class="line">    <span class="comment">//四个字节放的就是这个二进制序列 </span></span><br><span class="line">    <span class="comment">//左边丢弃右边补零</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/H9MjELVF7pdbe13.png" alt="image-20201121154224594"></p><h2 id="（3）位操作符"><a href="#（3）位操作符" class="headerlink" title="（3）位操作符"></a>（3）位操作符</h2><p>这个位还是二进制位</p><p>&amp;按位与</p><p>|按位或</p><p>^按位异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位与</span></span><br><span class="line"><span class="comment">//--对应的二进制要与（并且）一下 </span></span><br><span class="line"><span class="comment">//c语言中0为假，非0就是真</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>; <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a&amp;b; <span class="comment">//001  </span></span><br><span class="line">    <span class="comment">//只有两个都为1按位与出来才是1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为 <span class="comment">//1(1)  (换为十进制)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;  <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a|b; <span class="comment">//111</span></span><br><span class="line">    <span class="comment">//只要有一个不是0按位或出来就是1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为<span class="comment">//7</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位异或</span></span><br><span class="line"><span class="comment">//计算规律 对应的二进制位相同则为0</span></span><br><span class="line"><span class="comment">//         对应的二进制位相异则为1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;  <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a|b; <span class="comment">//110</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="（4）赋值操作符"><a href="#（4）赋值操作符" class="headerlink" title="（4）赋值操作符"></a>（4）赋值操作符</h2><p>​      [1]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    a = <span class="number">20</span>;<span class="comment">//赋值 // ==判断相等</span></span><br><span class="line"> <span class="comment">//a = a+10;  (给a加10在赋给a)等价于 </span></span><br><span class="line">    <span class="comment">//a += 10;</span></span><br><span class="line">    例子</span><br><span class="line">      <span class="comment">//a = a - 20;</span></span><br><span class="line">        a -= <span class="number">20</span> ；</span><br><span class="line">      <span class="comment">//a = a &amp; 2;</span></span><br><span class="line">        a &amp;= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//符合赋值符</span></span><br><span class="line">    <span class="comment">//+= -= *= ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（5）单目操作符"><a href="#（5）单目操作符" class="headerlink" title="（5）单目操作符"></a>（5）单目操作符</h2><pre><code>  双目操作符</code></pre><p>​    三目操作符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a  = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    a + b;<span class="comment">//+双目操作符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    ！---逻辑反操作</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//在c语言中我们表示真假</span></span><br><span class="line">    <span class="comment">//0 表示假 一切非0 表示真 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>!a )</span><br><span class="line">        <span class="comment">//为真 固定输出为一个数字1</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    sizeof 计算的是变量/类型所占空间的大小</p><p>单位是字节</p><p><img src="https://i.loli.net/2020/11/29/yxUpEYLumiVh4HN.png" alt="image-20201121162503188"></p><p>sizeof  计算int不可省略括号 计算a可以省略括号</p><p>~对一个数的二进制进行按位取反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;<span class="comment">//四个字节 32bit</span></span><br><span class="line">    <span class="keyword">int</span> b = ~a;</span><br><span class="line">    <span class="comment">//按位（二进制位）取反</span></span><br><span class="line">    <span class="comment">//1010  变成</span></span><br><span class="line">    <span class="comment">//0101 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原码 反码 补码</span></span><br><span class="line"><span class="comment">//负数在内存中存储的时候，存储的是二进制的补码</span></span><br><span class="line"><span class="comment">//使用的打印的是这个数的原码</span></span><br><span class="line"><span class="comment">//先补码-1得到反码 ，反码按位取反变成原码</span></span><br></pre></td></tr></table></figure><p>– ++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-- ++ （--++的值都是1 ）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = a++;<span class="comment">//后置++,先使用,再++</span></span><br><span class="line">    <span class="comment">// int b = ++a;前置++,先++，再使用</span></span><br><span class="line">    <span class="comment">//后置--  先使用 再--</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n b = %d\n&quot;</span>, a ,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(类型)---强制类型转换 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = (<span class="keyword">int</span>) <span class="number">3.14</span>;<span class="comment">//我要把3.14强制转换 3.14是double类型的</span></span><br><span class="line">    <span class="comment">//这里让他强制转化为int型的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（6）关系操作符"><a href="#（6）关系操作符" class="headerlink" title="（6）关系操作符"></a>（6）关系操作符</h2><p>比较大小 看关系是什么  </p><p>大于等于&gt;=</p><p>不等于！=</p><h2 id="（7）逻辑操作符"><a href="#（7）逻辑操作符" class="headerlink" title="（7）逻辑操作符"></a>（7）逻辑操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&amp;&amp;逻辑与 必须两个都是非0的 一0一非0输出也为0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//真 -非0</span></span><br><span class="line">    <span class="comment">//假 - 0</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a&amp;&amp;b;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;c = &amp;d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//||逻辑或 a和b里有一个为真就行  </span></span><br><span class="line"><span class="comment">//他俩都为假的时候才为假 都是真的那都是真的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c =  a||b;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（8）条件操作符（三目操作符）"><a href="#（8）条件操作符（三目操作符）" class="headerlink" title="（8）条件操作符（三目操作符）"></a>（8）条件操作符（三目操作符）</h2><p>比较抽象</p><p>exp1? exp2 : exp3;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    exp1? exp2 : exp3;</span></span><br><span class="line"><span class="meta">#inculde <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span>  max = <span class="number">0</span>;<span class="comment">//存储</span></span><br><span class="line">   </span><br><span class="line">    max = (a &gt; b ? a : b )</span><br><span class="line">        <span class="comment">//如果a&gt;b这个表达式的结果为真</span></span><br><span class="line">   <span class="comment">//则max 为a  不管如何max都放的是ab的等较大值</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        max = a ;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        max = b ;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（9）逗号表达式"><a href="#（9）逗号表达式" class="headerlink" title="（9）逗号表达式"></a>（9）逗号表达式</h2><p>epx1,exp2,exp3….expn</p><p>用逗号隔开表达式</p><h2 id="（10）下标引用操作符"><a href="#（10）下标引用操作符" class="headerlink" title="（10）下标引用操作符"></a>（10）下标引用操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//数组中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    arr[<span class="number">4</span>] ;<span class="comment">//[]下标引用操作符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（11）函数调用操作符"><a href="#（11）函数调用操作符" class="headerlink" title="（11）函数调用操作符"></a>（11）函数调用操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z =<span class="number">0</span>;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> sum =  ADD(a,b); <span class="comment">//()-函数调用操作符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="（12）解引用操作符"><a href="#（12）解引用操作符" class="headerlink" title="（12）解引用操作符"></a>（12）解引用操作符</h1><p>（13）</p><p>（14）</p><h1 id="19-复制基础框架"><a href="#19-复制基础框架" class="headerlink" title="19.复制基础框架"></a>19.复制基础框架</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="20-综合练习"><a href="#20-综合练习" class="headerlink" title="20.综合练习"></a>20.综合练习</h1><h2 id="（1）求两个数的较大值"><a href="#（1）求两个数的较大值" class="headerlink" title="（1）求两个数的较大值"></a>（1）求两个数的较大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-定义一个函数来求两个数的较大值"><a href="#2-定义一个函数来求两个数的较大值" class="headerlink" title="(2)定义一个函数来求两个数的较大值"></a>(2)定义一个函数来求两个数的较大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//接收a b</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="comment">//大括号为函数体</span></span><br><span class="line">    <span class="keyword">if</span> ( x &gt; y )</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    max = Max(a,b);</span><br><span class="line">    <span class="comment">//定义一个名为Max的函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="21-原码、-补码、反码"><a href="#21-原码、-补码、反码" class="headerlink" title="21.     原码、  补码、反码"></a>21.     原码、  补码、反码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">只要是整数 内存中存储的都是二机制的补码</span><br><span class="line">    对于<span class="comment">//正数来说，他的原码补码反码相同</span></span><br><span class="line">   <span class="comment">//负数 存的是补码</span></span><br><span class="line">    原码是直接按照正方写出的二进制数列</span><br><span class="line">    反码从原码的符号位不变其他位取反得到</span><br><span class="line">    补码 反码+<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2020/11/29/sPKAugpDYBOeoQc.png" alt="image-20201122213736103"></h1><h1 id="22-常见关键字"><a href="#22-常见关键字" class="headerlink" title="22.常见关键字"></a>22.常见关键字</h1><p>关键字不能与变量名冲突</p><p>关键字不能自己创建</p><p>关键字不能做变量名</p><h2 id="（1）static"><a href="#（1）static" class="headerlink" title="（1）static"></a>（1）static</h2><p>static可以修饰局部变量</p><p>可以修饰全局变量</p><p>可以修饰函数</p><p>-2<img src="https://i.loli.net/2020/11/29/h6HuSskTFBWyRZI.png" alt="image-20201122214135006"></p><p><img src="C:/Users/xuanxuan/Desktop/C笔记.assets/image-20201130164931937.png" alt="image-20201130164931937"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量-自动变量（省略auto）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//register </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// register int a =10;</span></span><br><span class="line">    <span class="comment">//建议把a定义成寄存器变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">int</span> 定义的变量是有符号的</span><br><span class="line">        (<span class="keyword">signed</span>) <span class="keyword">int</span> ;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    无符号为没有正负</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//struce -结构体关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="keyword">int</span> main</span><br><span class="line">           <span class="comment">//typedef-类型定义-类型重定义</span></span><br><span class="line">     <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u_int</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static-用来修饰局部变量</span></span><br><span class="line"><span class="comment">//修饰局部变量时局部变量的生命周期变长</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//a为一个静态的局部变量</span></span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出这个函数a不销毁了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/qgJ91dckfthulMo.png" alt="image-20201123092942576"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰全局变量</span></span><br><span class="line"><span class="comment">//改变了变量的作用域 </span></span><br><span class="line"><span class="comment">//让静态的全局变量只能在自己所在的原文件内部使用</span></span><br><span class="line"><span class="comment">//出了原文件就无法使用了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//extern -声明外部符号的</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> g_val ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰函数也是改变了函数的作用域</span></span><br><span class="line"><span class="comment">//这种说法不准确</span></span><br><span class="line"><span class="comment">//正确说法是</span></span><br><span class="line"><span class="comment">//static修饰函数 改变了函数的链接属性</span></span><br><span class="line"><span class="comment">//外部链接属性==&gt;内部链接属性</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//在外部 static  int Add(int x, int  y)</span></span><br><span class="line"><span class="comment">//        z = x + y;</span></span><br><span class="line"><span class="comment">//     return z;</span></span><br><span class="line">声明外部函数</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="23-define定义常量和宏"><a href="#23-define定义常量和宏" class="headerlink" title="23.#define定义常量和宏"></a>23.#define定义常量和宏</h1><p>预处理指令，不是关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define定义的标识符常量</span></span><br><span class="line"><span class="comment">//#define MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define可以定义宏-带参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y)</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//宏的定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(X,Y) X&gt;Y?X:Y</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int a = MAX；</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//函数</span></span><br><span class="line">    <span class="keyword">int</span> max = Max(a,b);</span><br><span class="line">    pritnf(<span class="string">&quot;max =%d\n&quot;</span>,max);</span><br><span class="line">    <span class="comment">//宏的方式</span></span><br><span class="line">    max = MAX(a,b);</span><br><span class="line">    <span class="comment">//max = (a&gt;b?a:b);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="24-指针"><a href="#24-指针" class="headerlink" title="24.指针"></a>24.指针</h1><p>指针——是个变量 用来存放地址</p><p>每个小格子的编号——地址</p><p>（1）如何产生地址</p><p>​        32位 ——有三十二跟地址线/数据线</p><p>​        正负电10之分</p><p>​    电信号转化为为数字信号</p><p>%p用来打印地址 </p><p>​           </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//给a申请4个字节</span></span><br><span class="line">    <span class="comment">//只要是个值就可以存起来</span></span><br><span class="line">     <span class="keyword">int</span>* p = &amp;a;</span><br><span class="line">    <span class="comment">//p现在是一个指针变量 </span></span><br><span class="line">    <span class="comment">//p的类型是int*</span></span><br><span class="line">    <span class="comment">//p里面存的是a的地址</span></span><br><span class="line">    <span class="comment">//有一种变量是用来存放地址的——指针变量</span></span><br><span class="line">    <span class="comment">//&amp;a;//取地址</span></span><br><span class="line">  <span class="comment">//  printf(&quot;%p\n&quot;,&amp;a);</span></span><br><span class="line"> <span class="comment">//  printf(&quot;%p\n,p&quot;);</span></span><br><span class="line">    <span class="comment">//*p,这颗*就是解引用操作符/间接访问操作符</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = dp\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;创建变量a a的地址中放了<span class="number">10</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;a; 创建p变量存a的地址</span><br><span class="line">*p = <span class="number">20</span>;对p里面存的地址进行操作，通过p找到a</span><br><span class="line">    *p就是a,把a的<span class="number">10</span>改成了<span class="number">20</span></span><br></pre></td></tr></table></figure><p>​               </p><p>例子</p><p>//地址就是二进制序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span>*pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">        <span class="comment">//打印字符%c</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>​                                                </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针大小32位平台4个字节，64 位平台8个字节</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&quot;w&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>*pc = &amp;ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pc));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="25-结构体"><a href="#25-结构体" class="headerlink" title="25.结构体"></a>25.结构体</h1><p>如何描述复杂对向——结构体</p><p>自己创造出来的一种类型</p><p>struct——结构体关键字</p><p>定义===》初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//改名字的库函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数的类型</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//c语言程序设计</span></span><br><span class="line">    <span class="keyword">short</span> price;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//分号结束类型定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//利用结构体类型创建一个该类型的结构体变量出来</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;c语言程序设计&quot;</span>，<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span>*<span class="title">pb</span> =</span> &amp;b1;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用pb打印一下书名和价格</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pb-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pb-&gt;price);</span><br><span class="line">    <span class="comment">//.操作符应用于结构体变.成员</span></span><br><span class="line">   <span class="comment">//-&gt;结构体指针 -&gt;成员</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*intf(&quot;%s\n&quot;,(*pb).name);</span></span><br><span class="line"><span class="comment">printf(&quot;%s\n&quot;,(*pb).price);*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">// printf(&quot;书名：%s\n&quot;,b1.name);</span></span><br><span class="line">    <span class="comment">//printf(&quot;价格：%d\n&quot;,b1.price);</span></span><br><span class="line">    b1.price = <span class="number">15</span>;<span class="comment">//改变价格 price为变量</span></span><br><span class="line">    <span class="comment">//name不可这样改</span></span><br><span class="line">    <span class="comment">//strcpy字符串拷贝 库函数</span></span><br><span class="line">    <span class="comment">//改名字 stycpy关于字符串操作</span></span><br><span class="line">    stycpy(b1.name,<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;修改后的价格：%d\n&quot;</span>,b1.price);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="26-分支语句和循环语句"><a href="#26-分支语句和循环语句" class="headerlink" title="26.分支语句和循环语句"></a>26.分支语句和循环语句</h1><p>结构 </p><p>顺序结构 选择结构 循环结构</p><p>什么是语句：用分号隔开的就是，有一个分号算一个，直写一个分号也算一条语句——空语句，</p><p>一对大括号就是一个代码块</p><p>注意if和else的匹配</p><p>else和离他最近的if相匹配</p><h2 id="（1）分支语句（选择结构）"><a href="#（1）分支语句（选择结构）" class="headerlink" title="（1）分支语句（选择结构）"></a>（1）分支语句（选择结构）</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>1.后面加大括号{}可以输入多条语句，否则只能输入一跳语句</p><p>2.if语句中0表示假，非0表示真</p><p>3.if语句是一种分支语句可以实现单分支，也可以实现多分支</p><p> 4.else与他最近的（未匹配的if）相配对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单分支if</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if else</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        print(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">18</span> &amp;&amp;age&lt;<span class="number">28</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">28</span> &amp;&amp;age&lt;<span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">50</span> &amp;&amp;age&lt;<span class="number">90</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>)；</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(age&gt;=<span class="number">18</span> &amp;&amp;age&lt;<span class="number">28</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">28</span> &amp;&amp;age&lt;<span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">50</span> &amp;&amp;age&lt;<span class="number">90</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同上</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =赋值 ==判断相等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">5</span> == num) <span class="comment">//这样写 出现错误可以立即显示 便于发现与改正</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sb\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">判断一个数是否为奇数 输入<span class="number">1</span><span class="number">-100</span>之间的奇数</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="comment">//我的错误示范</span></span><br><span class="line"><span class="comment">/* int main</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a = 0;</span></span><br><span class="line"><span class="comment">    printf(&quot;请输入一个数字&quot;);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d\n&quot;,&amp;);</span></span><br><span class="line"><span class="comment">    if(a%2 == 0)</span></span><br><span class="line"><span class="comment">        printf(&quot;不是&quot;);</span></span><br><span class="line"><span class="comment">   else</span></span><br><span class="line"><span class="comment">        printf(&quot;是&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> !=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>分支语句 </p><p>switch（整型表达式）</p><p>搭配break实现分支</p><p>产生的结果必须为整型</p><p>case整型常量表达式 case后面必需为整型常量表达式，</p><p>不要求顺序</p><p>default字句可以放在任意位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//case入口 braek跳出语句</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line"><span class="keyword">switch</span> (day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期天\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/V9THD48ldSszfQb.png" alt="image-20201123211047909"></p><p>相同的case没必要每个后面都加上case,合到一起即可</p><p>switch语句中可以出现if</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果输入了1~7以外的数</span></span><br><span class="line"><span class="comment">//顺序没有严格的措施</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"> pritnf(<span class="string">&quot;输入错误\n&quot;</span>)；</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">m++;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m = %d\n, n = %d\n&quot;</span>, m,  n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5,3</span></span><br></pre></td></tr></table></figure><h2 id="（2）循环语句"><a href="#（2）循环语句" class="headerlink" title="（2）循环语句"></a>（2）循环语句</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>条件表达式的执行次数总是比循环体的执行次数多一次</p><h3 id="将大写字母转换为小写字母"><a href="#将大写字母转换为小写字母" class="headerlink" title="将大写字母转换为小写字母"></a>将大写字母转换为小写字母</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in ch = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch +<span class="number">32</span>);</span><br><span class="line">        getchar();<span class="comment">//清理\n</span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h3><p>在循环语句中只要遇到break，就停止后期所有的循环，直接终止循环。所以:while中的break是用于永久终止循环的。</p><h3 id="continue："><a href="#continue：" class="headerlink" title="continue："></a>continue：</h3><p>是用于终止本次循环的，也就是本次循环中continue后边的代码不会再执行，而是直接跳转到while语句的判断部分。进行下一循环的入口判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件为真就执行 循环执行 直至为假</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="comment">//break;</span></span><br><span class="line">            <span class="comment">//1234</span></span><br><span class="line">       <span class="comment">//达到满足条件循环停止</span></span><br><span class="line">            <span class="comment">//continue;</span></span><br><span class="line">            <span class="comment">//1234 </span></span><br><span class="line">        <span class="comment">//回到while 陷入死循环</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getchar-putchar"><a href="#getchar-putchar" class="headerlink" title="getchar putchar"></a>getchar putchar</h3><p>可以接受一个键盘的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//getchar遇到 CTRL+Z停止</span></span><br><span class="line">    <span class="comment">//EOF文件结束标志</span></span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret =<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//接收</span></span><br><span class="line">    <span class="keyword">char</span> password [<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密码：&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">    <span class="comment">//输入密码 并存放在password数组中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认Y/N：&gt;&quot;</span>);</span><br><span class="line">    ret = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;放弃确认\n&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for（一小部分文件丢失——暂未补充）"><a href="#for（一小部分文件丢失——暂未补充）" class="headerlink" title="for（一小部分文件丢失——暂未补充）"></a>for（一小部分文件丢失——暂未补充）</h2><p>语法for（exp1；exp2；exp3）</p><p>​                循环语句</p><p>exp1为初始化部分，用于初始化循环变量</p><p>exp2为条件判断部分，判断条件是否终止</p><p>exp3为循环调整，</p><p>把while循环中的三个部分放到了一起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-语句的循环控制变量"><a href="#for-语句的循环控制变量" class="headerlink" title="for 语句的循环控制变量"></a>for 语句的循环控制变量</h3><p>(1)不可以在for循环体内修改循环变量，防止for循环失去控制，陷入死循环</p><p><img src="https://i.loli.net/2020/11/29/fVl9D6ogEyKJscb.png" alt="image-20201126201152688"></p><p>（2）建议for语句的循环控制变量的取值采用“前闭后开区间”写法</p><p>for循环的初始化判断调整都是可以省略的</p><p>for(;;) 但是for循环的判断条件被省略的话，判断条件就恒为真，陷入死循环</p><p>如果不熟练，建议不要随便省略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;HEHE&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span>  i = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//输出运行结果为十个hehe</span></span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://i.loli.net/2020/11/29/sKzcgl35FmDwC9v.png" alt="image-20201126172057875"></p><h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><p>do语句</p><p>循环语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do语句的特点：</p><p>循环至少执行一次，使用的场景有限，所以不是经常使用</p><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>c语言的goto语句在哪都可以使用；理论上goto语句手机没有必要的</p><p>最常见的用法就是终止程序中某些深层嵌套的结构处理过程，例如一次跳出两层或多层循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    again:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello sb\n&quot;</span>)；</span><br><span class="line">                <span class="comment">//goto放哪里就跳到哪里</span></span><br><span class="line">            <span class="keyword">goto</span> again;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(disater)</span><br><span class="line">                        <span class="keyword">goto</span> errot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    error:</span><br><span class="line">        <span class="keyword">if</span>(disater)</span><br><span class="line">                <span class="comment">//处理错误情况 ，跳出循环，省去了使用break的麻烦</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="27-获取-显示字符"><a href="#27-获取-显示字符" class="headerlink" title="27.获取/显示字符"></a>27.获取/显示字符</h1><h2 id="缓冲区-输入的东西会先被存放在缓冲区"><a href="#缓冲区-输入的东西会先被存放在缓冲区" class="headerlink" title="缓冲区:输入的东西会先被存放在缓冲区"></a>缓冲区:输入的东西会先被存放在缓冲区</h2><p>输入缓冲区在键盘和getchar中间</p><h2 id="（1）getchar"><a href="#（1）getchar" class="headerlink" title="（1）getchar"></a>（1）getchar</h2><p>在这里</p><p>在代码运行窗口输入的回车也会被当做字符而被获取</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里输入一个1 结果：c1= 1 ,c2 = ,（\n）回车（换行符）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1,c2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:\n&quot;</span>);</span><br><span class="line">    c1 =  getchar();</span><br><span class="line">    c2 =  getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 = %c.c2 = %c\n&quot;</span>，c1,c2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-putchar"><a href="#2-putchar" class="headerlink" title="(2)putchar"></a>(2)putchar</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(ch = (getchar)) ! = EOF)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">             <span class="keyword">continue</span>;</span><br><span class="line">         <span class="built_in">putchar</span>(ch);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="28-scanf与scanf-s"><a href="#28-scanf与scanf-s" class="headerlink" title="28.scanf与scanf_s"></a>28.scanf与scanf_s</h1><p>scanf_s是scanf的安全版本</p><h1 id="29-综合练习（2）"><a href="#29-综合练习（2）" class="headerlink" title="29.综合练习（2）"></a>29.综合练习（2）</h1><h2 id="1-计算n的阶乘"><a href="#1-计算n的阶乘" class="headerlink" title="1.计算n的阶乘"></a>1.计算n的阶乘</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不考虑溢出的情况</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-计算1-10的阶乘"><a href="#2-计算1-10的阶乘" class="headerlink" title="2.计算1~10的阶乘"></a>2.计算1~10的阶乘</h2><p>在1题的基础上，在外面再套一个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入10：&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">for</span>(n =<span class="number">1</span> ;n&lt;=<span class="number">10</span>;n++)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * i;</span><br><span class="line">    &#125;</span><br><span class="line">       sum = sum + ret;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-在一个有序数组在这中查找具体的某个数字n"><a href="#3-在一个有序数组在这中查找具体的某个数字n" class="headerlink" title="3.在一个有序数组在这中查找具体的某个数字n"></a>3.在一个有序数组在这中查找具体的某个数字n</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//写一个代码，在arr数组中找到7</span></span><br><span class="line">    <span class="keyword">int</span>  i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;sz;i++);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是:%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == sz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若有n个元素，最坏的情况要找n次，</p><p>或者先找中间元素，逐渐缩小查找范围</p><h2 id="4-编写代码掩饰多个字符从两端移动，向中间汇聚。"><a href="#4-编写代码掩饰多个字符从两端移动，向中间汇聚。" class="headerlink" title="4.编写代码掩饰多个字符从两端移动，向中间汇聚。"></a>4.编写代码掩饰多个字符从两端移动，向中间汇聚。</h2><h2 id="5-编写模拟登陆场景"><a href="#5-编写模拟登陆场景" class="headerlink" title="5.编写模拟登陆场景"></a>5.编写模拟登陆场景</h2><p>并且只能登陆三次，只允许输入三次密码，如果密码正确则提示登录成功，如果三次均输入错误，则退出程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-写三个数让他从大到小输出"><a href="#6-写三个数让他从大到小输出" class="headerlink" title="6.写三个数让他从大到小输出"></a>6.写三个数让他从大到小输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; 请输入三个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="comment">//算法实现 </span></span><br><span class="line">    <span class="comment">//a中放最大值 b次之 C中放最小值</span></span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//临时变量 防止在将a的值赋给b时，a的值丢失</span></span><br><span class="line">        <span class="keyword">int</span> tmp = a; </span><br><span class="line">        a = b;</span><br><span class="line">        b = tem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a;</span><br><span class="line">        a = c ;</span><br><span class="line">        c = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.打印1~100所有3的倍数 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-给定两个数求最大公约数"><a href="#8-给定两个数求最大公约数" class="headerlink" title="8.给定两个数求最大公约数"></a>8.给定两个数求最大公约数</h2><p>辗转相除法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,r,m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个大于零的整数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (r = m%n)</span><br><span class="line">&#123;</span><br><span class="line">m = n;</span><br><span class="line">n = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-打印1000-2000的闰年"><a href="#9-打印1000-2000的闰年" class="headerlink" title="9.打印1000~2000的闰年"></a>9.打印1000~2000的闰年</h2><p>1判断闰年的方法，能被4整除且不能被100整除</p><p>2能被400整除是闰年</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> year = <span class="number">1000</span>; year &lt;= <span class="number">2000</span>; year++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/xuanxuan/Desktop/2020.12.2.assets/image-20201203160113405.png" alt="image-20201203160113405"></p><h2 id="10-打印100-200的所有素数"><a href="#10-打印100-200的所有素数" class="headerlink" title="10.打印100~200的所有素数"></a>10.打印100~200的所有素数</h2><p>​        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//试除法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义整型并初始化</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//理解</span></span><br><span class="line">        <span class="comment">//让i从2开始</span></span><br><span class="line">        <span class="comment">//num开始被i除一直除到num-1</span></span><br><span class="line">        <span class="comment">//如果其中有num被i整除了，循环就终止，break</span></span><br><span class="line">        <span class="comment">//因为素数是除了1和他本身之外不能被其他数所整除</span></span><br><span class="line">        <span class="comment">//在这里只要i和Num不相等，num被其他说所整除，说明，num不是个属于素数，什么也不输出，1是默认的，可以将任意的num整除，在这里i从2开始，所以是素数的数只能被其本身所整除，即i = num,</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">100</span>; num &lt;= <span class="number">200</span>; num++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//i &lt;num</span></span><br><span class="line">            <span class="comment">//筛选——输出</span></span><br><span class="line">            <span class="comment">//有其他可以将num整除的数也将终止循环</span></span><br><span class="line"><span class="keyword">for</span> (  i = <span class="number">2</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num%i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//跳出来</span></span><br><span class="line">            <span class="comment">//就是i把num-1的数字都试过了，都不能将num整除</span></span><br><span class="line">            <span class="comment">//那么就是剩下i = num的情况了，此时这个数肯定为素数</span></span><br><span class="line">            <span class="comment">// i  =num</span></span><br><span class="line"><span class="keyword">if</span> (num == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一共有%d个质数\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个数可以写成a*b的形式，例如；c = a*b</span></span><br><span class="line"><span class="comment">//那么a和b中的一个数肯定小于等于开平方c</span></span><br><span class="line"><span class="comment">//sqrt——开平方的数学库函数—#include&lt;math.h&gt;</span></span><br><span class="line"><span class="comment">//方法2</span></span><br></pre></td></tr></table></figure><h2 id="11-求十个数的最大值"><a href="#11-求十个数的最大值" class="headerlink" title="11.求十个数的最大值"></a>11.求十个数的最大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;- &lt; sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = arr[i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span></span><br><span class="line">ma*</span><br><span class="line">           <span class="number">.0</span></span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-求1-。。。。1-10的和"><a href="#12-求1-。。。。1-10的和" class="headerlink" title="12.求1+。。。。1/10的和"></a>12.求1+。。。。1/10的和</h2><h2 id="13-乘法口诀标的打印"><a href="#13-乘法口诀标的打印" class="headerlink" title="13.乘法口诀标的打印"></a>13.乘法口诀标的打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在屏幕上输出乘法口诀表</span></span><br><span class="line"><span class="comment">//分析：9行，多上行行号就是多少，先确定行，再确定列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//行</span></span><br><span class="line"><span class="comment">//确定打印9行</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)<span class="comment">//循环-行数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每行打印的东西</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//%2d-打印两位 如果没有两位就用空格补齐</span></span><br><span class="line">            <span class="comment">//%-2d  向左对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d * %d = %-2d&quot;</span>i, j, i*j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-二分查找"><a href="#14-二分查找" class="headerlink" title="14.二分查找"></a>14.二分查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-猜数字游戏"><a href="#15-猜数字游戏" class="headerlink" title="15.猜数字游戏"></a>15.猜数字游戏</h2><p>1程序运行 电脑随机生成一个数字 猜大猜小有提示 </p><p>2菜单 循环运行</p><p>3时间戳：当前计算机的时间减去计算机的起始时间，1970年0时0分0秒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>(stdlib.h)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-关机程序（goto语句）"><a href="#16-关机程序（goto语句）" class="headerlink" title="16.关机程序（goto语句）"></a>16.关机程序（goto语句）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//在一分钟内关机</span></span><br><span class="line">    <span class="comment">//shoutdown -s -t 60</span></span><br><span class="line">    <span class="comment">//system执行系统命令的</span></span><br><span class="line">    system(<span class="string">&quot;shutdown -s -t 60&quot;</span>);</span><br><span class="line">again:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请注意。你的电脑在1分钟之内关机，如果输入我是sb，就取消关机\n请输入&gt;:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,input);</span><br><span class="line">    <span class="keyword">if</span>(stramp(input,<span class="string">&quot;我是sb&quot;</span>) == <span class="number">0</span> )<span class="comment">//比较两个字符串-strcmp</span></span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;shutdown -a&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-水仙花数字"><a href="#17-水仙花数字" class="headerlink" title="17.水仙花数字"></a>17.水仙花数字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么是水仙花数字——三位上的数字的立方和等于这个数字</span></span><br><span class="line"><span class="comment">//步骤；寻找100~999之间的数字，分解整数，并且验证每个数的平方，最后输出是水仙花数字的数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num, bai, shi, ge;<span class="comment">//定义这个数字和他的百位，十位，个位，为整形</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;水仙花数有：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (num = <span class="number">100</span>; num &lt; <span class="number">1000</span>; num++)<span class="comment">//定义数的区间——保证为三位数</span></span><br><span class="line">&#123;</span><br><span class="line">bai = num / <span class="number">100</span>;<span class="comment">//求出百位上的数</span></span><br><span class="line">shi = (num - bai * <span class="number">100</span>) / <span class="number">10</span>;<span class="comment">//求出十位上面的数</span></span><br><span class="line">ge = num % <span class="number">10</span>;<span class="comment">//求模——余数</span></span><br><span class="line"><span class="comment">//验证个十百位上的立方和是否等于这个数</span></span><br><span class="line"><span class="keyword">if</span> (num == bai*bai*bai +shi*shi*shi+ge*ge*ge)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="30-函数"><a href="#30-函数" class="headerlink" title="30.函数"></a>30.函数</h1><h2 id="1-函数是什么"><a href="#1-函数是什么" class="headerlink" title="1.函数是什么"></a>1.函数是什么</h2><p>函数是程序中的某一部分，负责执行某项特定任务，相对于其他代码，具备相对的独立性。</p><p>一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏，这些代码通常被集成为软件库。</p><p>在C语言中函数分为库函数和自定义函数</p><h2 id="2-库函数"><a href="#2-库函数" class="headerlink" title="2.库函数"></a>2.库函数</h2><p>C语言本身提供的函数叫做库函数</p><p>常用的c语言库函数有</p><ul><li><p>IO函数</p></li><li><p>字符串操作函数</p></li><li><p>内存操作函数</p></li><li><p>时间/日期函数</p></li><li><p>数学函数</p></li><li><p>其他库函数</p><p>例子</p><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcpy</span></span><br><span class="line"><span class="comment">//源头要是比目的地字符串长</span></span><br><span class="line"><span class="comment">//必然会溢出</span></span><br><span class="line"><span class="comment">//必需保证源头数据比目的地数据短</span></span><br><span class="line"><span class="comment">//或者目的地的空间足够大</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//\0是字符串的结束标志</span></span><br><span class="line"><span class="keyword">int</span> arr1[] = <span class="string">&quot;sb&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">20</span>] = <span class="string">&quot;%%%%%%&quot;</span>;</span><br><span class="line"><span class="comment">//目标地址 来源地址 、</span></span><br><span class="line"><span class="comment">//目的地的内容会被覆盖</span></span><br><span class="line"><span class="built_in">strcpy</span>(arr2, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="comment">//将arr中的前五个字符替换成*</span></span><br><span class="line">memset(arr,&#x27; *&#x27; , 5);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//***** world</span></span><br></pre></td></tr></table></figure><h2 id="3-自定义函数"><a href="#3-自定义函数" class="headerlink" title="3.自定义函数"></a>3.自定义函数</h2><p>函数的基本组成：函数名 函数参数 返回类型 函数体</p><h3 id="1-定义一个函数求两个数的最大值"><a href="#1-定义一个函数求两个数的最大值" class="headerlink" title="(1)定义一个函数求两个数的最大值"></a>(1)定义一个函数求两个数的最大值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义函数</span></span><br><span class="line">get_max(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y )</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//函数的使用</span></span><br><span class="line">    <span class="comment">//a传给x,b传给y</span></span><br><span class="line">    <span class="comment">//传过去什么就用什么接收</span></span><br><span class="line">    <span class="keyword">int</span> max = get_max(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-写一个函数可以交换连个整型变量的内容"><a href="#2-写一个函数可以交换连个整型变量的内容" class="headerlink" title="(2)写一个函数可以交换连个整型变量的内容"></a>(2)写一个函数可以交换连个整型变量的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误示范——在主函数中实现两个整型变量的交换</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义函数但是失败了的示范</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="comment">//前面加上void意思是此函数没有返回值</span></span><br><span class="line"><span class="comment">//什么类型就用什么类型接收</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时变量用于交换</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = x;</span><br><span class="line">x = y;</span><br><span class="line">y = c;</span><br><span class="line"><span class="comment">//此时执行失败，在这个定义函数的区块中，交换是成功了，但是x和a，y和b</span></span><br><span class="line"><span class="comment">//两组之间没有联系</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//函数的使用</span></span><br><span class="line">exchange = (a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确示范</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里引入指针的概念</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pa = &amp;a;<span class="comment">//pa的类型就是int* ,指针变量</span></span><br><span class="line"><span class="comment">//pa里面存的是a的地址</span></span><br><span class="line"><span class="comment">//加个*意思是解引用操作</span></span><br><span class="line">*pa;<span class="comment">//对pa进行解引用操作的意思是，通过pa里面存的这个地址，</span></span><br><span class="line"><span class="comment">//找到它所指向的内容，那这个*pa就是a，</span></span><br><span class="line"><span class="comment">//如果给 20</span></span><br><span class="line">*pa = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//就借助这个指针变量把a的值改成了20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//也就是说，如果要改变a的值，不用a亲自动手，指针变量也可以修改</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面出错的函数示范加上上面引入的指针概念，即可完成此代码的修改</span></span><br><span class="line"><span class="comment">//因为上面出错的原因是因为a与x，b与y，两对字母之间没有直接的关联，导致数据无法传递过去</span></span><br><span class="line">思路：将a和b的地址传过去，因为通过地址就可以找到代码</span><br><span class="line">    将地址传过去，就要用指针来接收</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="comment">//传过来地址，要用指针来接收</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>* pa,<span class="keyword">int</span>* pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = *pa;</span><br><span class="line">    <span class="comment">//将a备份到c中</span></span><br><span class="line">    <span class="comment">//然后改变a</span></span><br><span class="line">    *pa = *pb;</span><br><span class="line">    *pb = c;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    exchange(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-函数参数"><a href="#4-函数参数" class="headerlink" title="4.函数参数"></a>4.函数参数</h2><h3 id="实际参数（实参）"><a href="#实际参数（实参）" class="headerlink" title="实际参数（实参）"></a>实际参数（实参）</h3><p>真实传递给函数的参数</p><p>实参可以是：常量、变量、表达式、函数等。无论实参是何种类型的量，在进行函数调用时，他们都必须拥有确定的值（能够算出确切的值），以便把这些值传送给形参。</p><h3 id="形式参数（形参）"><a href="#形式参数（形参）" class="headerlink" title="形式参数（形参）"></a>形式参数（形参）</h3><p>一般情况下不存在</p><p>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的工程中才实例化（分配内存单元），所以叫形式参数。形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效。就是就收函数的x和y只在此函数中有效。</p><p>当实参传给形参的时候，形参其实是实参的一份临时拷贝，形参和实参之间没有联系，这时候，对形参的修改是不会改变形参的，例如上面失败的交换两个数值。</p><p>结论：形参实例化之后其实相当于实参的一份临时拷贝</p><h2 id="5-函数调用"><a href="#5-函数调用" class="headerlink" title="5.函数调用"></a>5.函数调用</h2><h3 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h3><p>函数的 形参和实参分别占有不同的内存块，对形参的修改不会影响实参</p><h3 id="传址调用"><a href="#传址调用" class="headerlink" title="传址调用"></a>传址调用</h3><p>传址调用是把函数外部创建变量的内地址传递给函数参数的一种调用方式。</p><p>这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量。</p><h3 id="什么时候用什么"><a href="#什么时候用什么" class="headerlink" title="什么时候用什么"></a>什么时候用什么</h3><p>如果只需要传递个值不用作出改变——传值</p><p>要改变函数外部的某些变量——传址</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><h4 id="（1）写一个函数输出100-200之间所有的质数"><a href="#（1）写一个函数输出100-200之间所有的质数" class="headerlink" title="（1）写一个函数输出100~200之间所有的质数"></a>（1）写一个函数输出100~200之间所有的质数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出100到200之间的质数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//是素数返回1，不是素数返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//可以优化一下J&lt;=sqrt(n)</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n%j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">            <span class="comment">//不能太着急，应让其检验完毕</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//0判断I是否为质数</span></span><br><span class="line"><span class="keyword">if</span> (is_prime(i) == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-写一个函数打印1000-2000之间的闰年"><a href="#2-写一个函数打印1000-2000之间的闰年" class="headerlink" title="(2)写一个函数打印1000~2000之间的闰年"></a>(2)写一个函数打印1000~2000之间的闰年</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个函数输出1000~2000之间的闰年</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//返回的值是什么就在函数定义前加入什么</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_runyear</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (year = <span class="number">1000</span>; year &lt; <span class="number">2000</span>; year++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不要忘了下面调用函数中（）中的内容，判断什么要写好，要不代码无法运行</span></span><br><span class="line"><span class="keyword">if</span> (is_runyear(year) == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数在设计的时候，功能要单一，要干净</span></span><br></pre></td></tr></table></figure><h4 id="3-二分查找（折半查找）"><a href="#3-二分查找（折半查找）" class="headerlink" title="(3)二分查找（折半查找）"></a>(3)二分查找（折半查找）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line">   <span class="comment">//在一个有序数组中查找具体的某个数</span></span><br><span class="line"><span class="comment">//如果找到了返回，这个数的下标，找不到返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如我要在这个数组中找到7</span></span><br><span class="line"><span class="comment">//首先找到这组被查找元素的中间的元素</span></span><br><span class="line"><span class="comment">//假如说发现中间元素5要比我要找的数要小</span></span><br><span class="line"><span class="comment">//说明我要找的数在5的右边，这样我的范围就缩小了一半</span></span><br><span class="line"><span class="comment">//查找了一次范围就缩小了一半，这样的速度是比较快的</span></span><br><span class="line"><span class="comment">//这就叫二分查找(折半查找)</span></span><br><span class="line"><span class="comment">//那么怎么找到中间元素的下标呢</span></span><br><span class="line"><span class="comment">//原来的数组是1 2 3 4 5 6 7 8 9 10 </span></span><br><span class="line"><span class="comment">//他们的下标是0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">//左下标为0，右下标为9</span></span><br><span class="line"><span class="comment">//给定完这组元素的下标，就可以通过左右元素的下标来确定中间元素的下标</span></span><br><span class="line"><span class="comment">//就是这组被查找元素的左下标是0，右下标是9</span></span><br><span class="line"><span class="comment">//0和9的平均值是4，下标4锁定的元素是5，就可以认为5就是这组元素的中间元素了</span></span><br><span class="line"><span class="comment">//5这个元素比我要找的7要小</span></span><br><span class="line"><span class="comment">//说明我要被查找的元素范围就变成了6到10</span></span><br><span class="line"><span class="comment">//新的范围，左下标是5，右下标是9</span></span><br><span class="line"><span class="comment">//左右下标又可以求出一个平均值是7，又找到一个对应的元素是8</span></span><br><span class="line"><span class="comment">//所以这一组查找范围的中间元素是8</span></span><br><span class="line"><span class="comment">//用8再跟我要找的元素比一下，比我找的元素要大</span></span><br><span class="line"><span class="comment">//说明我要查找的元素在8的左边</span></span><br><span class="line"><span class="comment">//这时候要查找的范围被再次的缩小成了6到7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本思想，当我确定了被查找范围时候，要确定他的左下标和右下标，然后求出下标的平均值，</span></span><br><span class="line"><span class="comment">//找到中间元素，将中间元素和我要找的元素比一下，如果比我找的元素大，说明我要找的元素在他的左边，</span></span><br><span class="line"><span class="comment">//如果比我要找的元素小，说明我要找的元素在他的右边，</span></span><br><span class="line"><span class="comment">//这样确定出新的范围，出现新的左右下标。</span></span><br><span class="line"><span class="comment">//一直找到左右下标无法确定新的范围，他们之间没有元素可以被查找的时候，结束，说明没有找到</span></span><br><span class="line"><span class="comment">//如果在某一次查找的时候，找到了，下标相等了，说明找到了，把下标给过来</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//算法实现</span></span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;<span class="comment">//左下标</span></span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span> ;<span class="comment">//右下标</span></span><br><span class="line"><span class="comment">//放到循环中</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)<span class="comment">//这样才说明中间是有元素可以被查找的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;<span class="comment">//中间元素的下标</span></span><br><span class="line"><span class="comment">//拿到这个mid——锁定个元素</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)<span class="comment">//如果中间元素比我要找的k要小，</span></span><br><span class="line"><span class="comment">//被查找范围的右下标不用变，左下标变成mid+！</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找不到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//返回去了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行发现找不到结果——代码出现了问题</span></span><br><span class="line"><span class="comment">//自己找问题的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分位置添加注释后</span></span><br><span class="line"> <span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"><span class="comment">//实际上这地方传递过来的数组arr是首元素地址</span></span></span><br><span class="line"><span class="function"><span class="comment">//本质上这里的arr是个指针，因为指针才可以接收地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//算法实现</span></span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 4/4=1  无法得到元素个数</span></span><br><span class="line"><span class="comment">//sz出现了问题</span></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;<span class="comment">//左下标</span></span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span>;<span class="comment">//右下标</span></span><br><span class="line"><span class="comment">//放到循环中</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)<span class="comment">//这样才说明中间是有元素可以被查找的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;<span class="comment">//中间元素的下标</span></span><br><span class="line"><span class="comment">//拿到这个mid——锁定个元素</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)<span class="comment">//如果中间元素比我要找的k要小，</span></span><br><span class="line"><span class="comment">//被查找范围的右下标不用变，左下标变成mid+！</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找不到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//返回去了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//只要把数组传参传过去</span></span><br><span class="line"><span class="comment">//在内部是不能再上面的方式求元素个数了</span></span><br><span class="line"><span class="comment">//数组是一块连续的空间，他里面可以放很多个元素</span></span><br><span class="line"><span class="comment">//数组在传参的时候</span></span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k);<span class="comment">//在这里仅仅传的是数组第一个元素的地址，不是所有元素</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然传进去不行，那就在外面算，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改版(注释已经删除)(只有修改后的注释)</span></span><br><span class="line"><span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//将多传递过来的参数sz接收</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k,<span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span> ;</span><br><span class="line">    <span class="comment">//进入到这个循环中就是一次二分查找</span></span><br><span class="line">    <span class="comment">//在这里要进行很多次</span></span><br><span class="line">    <span class="comment">//每一次二分查找的第一步是找被查找范围的中间元素的下标</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        <span class="comment">//等于号不能丢</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//将计算元素个个数</span></span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k,sz);<span class="comment">//将sz也传过去</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1"><a href="#（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1" class="headerlink" title="（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1"></a>（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次调用一次函数，num的值就会增加1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这个时候的*p就是num</span></span><br><span class="line"><span class="comment">//*p++;这样写是错误的</span></span><br><span class="line">    <span class="comment">//这里++的优先级要高一些</span></span><br><span class="line">    <span class="comment">//目的是让*p  ++</span></span><br><span class="line">    <span class="comment">//应该写成</span></span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从外面操作——传址</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//1</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//2</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//3</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数的嵌套调用和链式访问"><a href="#6-函数的嵌套调用和链式访问" class="headerlink" title="6.函数的嵌套调用和链式访问"></a>6.函数的嵌套调用和链式访问</h2><h3 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h3><p>函数和函数之间是可以有机的组合在一起的</p><h3 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h3><p>把一个函数的返回值作为另外一个函数的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//求字符串的长度</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line">len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="comment">//输出 3 </span></span><br><span class="line"><span class="comment">//一句话搞定</span></span><br><span class="line"><span class="comment">//这就是链式访问，像一个链条一样将函数有机的串在了一起</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"><span class="comment">//输出还是3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>下面这串代码会输出什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我以为就是输出43</span></span><br><span class="line"><span class="comment">//补充printf(&quot;&quot;,)这里面的内容分别是——格式化字符串——输出列表</span></span><br><span class="line"><span class="comment">//pirntf返回值是打印在屏幕上的字符数 </span></span><br><span class="line"><span class="comment">//但是答案却是4321</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf的返回值是打印在屏幕上字符的个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">43</span>)));</span><br><span class="line"><span class="comment">//先打印 43 ——打印了两个字符——返回值是2——打印2-打印了1个字符——返回值1</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43)));</span></span><br><span class="line"><span class="comment">//首先printf(&quot;%d&quot;, printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43)))中最里面的printf开始打印</span></span><br><span class="line"><span class="comment">//输出43——打印了两个是字符———那么他的返回值就是2</span></span><br><span class="line"><span class="comment">//此时式子变成printf(&quot;%d&quot;, printf(&quot;%d&quot;, 2))</span></span><br><span class="line"><span class="comment">//输出2——打印了一个字符——返回值是1</span></span><br><span class="line"><span class="comment">//式子变成printf(&quot;%d&quot;, 1)</span></span><br><span class="line"><span class="comment">//打印1——over</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-函数的声明和定义"><a href="#7-函数的声明和定义" class="headerlink" title="7.函数的声明和定义"></a>7.函数的声明和定义</h2><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p>1.告诉编译器有一个函数叫什么，参数是什么，返回类型是什么，但是具体是不是存在，无关紧要。</p><p>2.函数的声明一般出现在函数的使用之前。要满足先声明后使用。</p><p>3.函数的声明一般要放在头文件中的。</p><p>当函数定义放到主函数后面的话，代码无法运行报错</p><p>这里就用到了函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="comment">//在这个函数声明中的x和y是可以省略掉的，因为我们根本就不回去用他</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//函调用</span></span><br><span class="line">sum = Add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时候把函数定义放到主函数的下面</span></span><br><span class="line"><span class="comment">//程序会报错——“Add未定义”</span></span><br><span class="line"><span class="comment">//虽然定义了但是程序并不知道</span></span><br><span class="line"><span class="comment">//这里就需要在主函数前面进行一个声明——函数声明</span></span><br><span class="line">Add(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> z = x + y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样写是比较啰嗦的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数声明正确的用法"><a href="#函数声明正确的用法" class="headerlink" title="函数声明正确的用法"></a>函数声明正确的用法</h4><p>创建三个文件add.h   add.c   test.c</p><p>自己写的头文件用双引号引</p><p>#include  “ “   </p><p>在这里add.h和add.c共同构成一个加法模块</p><p>补充：在#include&lt;stdio.h&gt;中</p><p>当程序运行到这行是</p><p>程序会把相关有用的全部拷贝过来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">在add.h(头文件)文件中</span><br><span class="line">    <span class="comment">//写函数声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ADD_H</span></span><br><span class="line">    <span class="comment">//如果没有定义过后面那个符号</span></span><br><span class="line">    <span class="comment">//那就先定义一下define</span></span><br><span class="line">    <span class="comment">//如果定义过了，就为假</span></span><br><span class="line">    <span class="comment">//下面的代码就不要了</span></span><br><span class="line">    <span class="comment">//防止用一个头文件被引用多次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ADD_H</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">在add.C文件中</span><br><span class="line">    <span class="comment">//写函数的定义</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z；</span><br><span class="line">&#125;</span><br><span class="line">在test.c文件中</span><br><span class="line">    <span class="comment">//直接进行用这个上面定义的加法函数</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;add.h&quot;</span></span></span><br><span class="line">    <span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum  =  Add(a,b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//为什么要这么弄呢？</span></span><br><span class="line"><span class="comment">//如果吧所有的代码函数都放到同一个test.c文件中</span></span><br><span class="line"><span class="comment">//项目组十个人分工，布置任务</span></span><br><span class="line"><span class="comment">//没法同时都在一个test.c文件中工作，</span></span><br><span class="line"><span class="comment">//这样分开工作，最后include引用,组合在一起</span></span><br><span class="line"><span class="comment">//功能复杂——分模块写</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>函数的定义是指函数的具体实现，交代函数的功能实现。</p><h2 id="8-函数递归"><a href="#8-函数递归" class="headerlink" title="8.函数递归"></a>8.函数递归</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>递归必须要有结束条件，否则程序将崩溃</p><p>递归函数条件终止后就会逐层返回</p><p>。</p><h3 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h3><p>一个函数自己调用自己。把大事化小</p><p>详解：</p><p>程序调用自身的编程技巧成为递归。递归作为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序，就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的主要思考方式在于：把大事化小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//史上最简单的递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//死循环的打印sbsb</span></span><br><span class="line"><span class="comment">//走着走着挂了 </span></span><br><span class="line"><span class="comment">//递归常见的错误——栈溢出</span></span><br><span class="line"><span class="comment">//什么是栈溢出——</span></span><br><span class="line"><span class="comment">//内存划分——栈区-堆区-静态区</span></span><br><span class="line"><span class="comment">//对应   放置-栈区-局部变量-函数形参</span></span><br><span class="line"><span class="comment">//堆区-动态开辟的内存  malloc calloc</span></span><br><span class="line"> <span class="comment">//静态区-全局变量-Staic修饰的变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sbsb\n&quot;</span>);</span><br><span class="line">main();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stack overflow——栈溢出</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>接收一个整型值（无符号），按照顺序打印它的每一位，例如：输入：1234，输出1 2 3 4 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(n / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先将输出的123传到n这里</span></span><br><span class="line"><span class="comment">//程序运行到if这里，进行判断,123&gt;9条件成立，进行下一步,进入if</span></span><br><span class="line"><span class="comment">//接着将123/10 = 12余的3丢掉</span></span><br><span class="line"><span class="comment">//函数接着调用自己</span></span><br><span class="line"><span class="comment">//12&gt;9条件成立，继续进行下一步，进入if</span></span><br><span class="line"><span class="comment">//再将12/10 = 1 余的2丢掉</span></span><br><span class="line"><span class="comment">//函数再次调用自己</span></span><br><span class="line"><span class="comment">//此时1&gt;9条件不成立，进行到printf处，1%10 = 0余1，将1输出</span></span><br><span class="line"><span class="comment">//到现在，递归函数的条件已经终止(不成立)，开始进行逐层返回</span></span><br><span class="line"><span class="comment">//梳理一下层数</span></span><br><span class="line"><span class="comment">//1层 输入 123，</span></span><br><span class="line"><span class="comment">//2层 输入 12</span></span><br><span class="line"><span class="comment">//3层 输入 1</span></span><br><span class="line"><span class="comment">//4层 条件不成立 输出1</span></span><br><span class="line"><span class="comment">//由2层开始逐层向上返回</span></span><br><span class="line"><span class="comment">//2层 12%10 = 1余数 2，将2输出</span></span><br><span class="line"><span class="comment">//1层 123%10 = 12余数3，将3输出</span></span><br><span class="line"><span class="comment">//最后得出结果1 2 3 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">print(num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归的两个必要条件"><a href="#递归的两个必要条件" class="headerlink" title="递归的两个必要条件"></a>递归的两个必要条件</h3><p>1存在限制条件，当满足这个限制条件的时候，递归便不再继续。</p><p>2每次递归调用之后越来越接近这个限制条件。    </p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>编写代码，求字符串长度</p><p>strlen——求字符串长度</p><h4 id="（1）不用函数的"><a href="#（1）不用函数的" class="headerlink" title="（1）不用函数的"></a>（1）不用函数的</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);<span class="comment">//求字符串长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用函数的（有临时变量——计数器）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里面模拟实现了一个strlen函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//传过来的是首元素的地址——char*-指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span><span class="comment">//求出的是长度——返回值是整型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//计算字符串的长度，count——计数器</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//不等于\0进入到循环之内</span></span><br><span class="line"><span class="comment">//即没有到字符串的结束位置</span></span><br><span class="line"><span class="comment">//当到\0处时，条件为假，调到return处</span></span><br><span class="line"><span class="keyword">while</span> (*str !=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//str里面存的是地址，他+1就是 看下一位是什么</span></span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建了一个数组，在这个数组里面放了，b i  t还有一个/0</span></span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = my_strlen(arr);<span class="comment">//arr数组传承那——传过去的不是整个数组，而是第一个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len = %d\n&quot;</span>, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无计数器的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无计数器</span></span><br><span class="line"><span class="comment">//无计数器的计算字符串的位数</span></span><br><span class="line"><span class="comment">//大事化小——看第一位是不是\0</span></span><br><span class="line"><span class="comment">//终止条件，</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//bit\0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + my_strlen(str + <span class="number">1</span>); </span><br><span class="line"><span class="comment">//调整bit的所对应的位数 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归-与迭代"><a href="#递归-与迭代" class="headerlink" title="递归 与迭代"></a>递归 与迭代</h3><p>迭代——类似于循环</p><h4 id="练习——求n的阶乘（不考虑溢出）"><a href="#练习——求n的阶乘（不考虑溢出）" class="headerlink" title="练习——求n的阶乘（不考虑溢出）"></a>练习——求n的阶乘（不考虑溢出）</h4><p>​        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算n的阶乘——使用函数</span></span><br><span class="line"><span class="comment">//jiecheng这个函数没用递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ji = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= z; i++)</span><br><span class="line">&#123;</span><br><span class="line">ji = ji * i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ji;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng2</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (z &lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> z * jiecheng2(z - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">ret = jiecheng2(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;上面这个数的阶乘是：%d&quot;</span>,ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求第n的斐波那契数（不考虑溢出）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求第n个斐波那契数</span></span><br><span class="line"><span class="comment">//斐波那契数列就是前两个数等于第三个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (z &lt;= <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> fbn(z - <span class="number">1</span>) + fbn(z - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="comment">//TDD——测试驱动开发，先想函数如何实现，然后再进行编写</span></span><br><span class="line">ret = fbn(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第这个的斐波那数是%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是当输入50，想求第50个斐波那系数的时候，需要很长时间才能算出来，</span></span><br><span class="line"><span class="comment">//效率比较低，因为要求第50个斐波那系数，</span></span><br><span class="line"><span class="comment">//就要知道第48和第49个，要求他们两个，也同样要往前面推，求出两个，</span></span><br><span class="line"><span class="comment">//这都不是现成的，都需要机器先运算</span></span><br><span class="line"><span class="comment">//一层层的往下面拨，需要的数据太多了，2的次方数</span></span><br><span class="line"><span class="comment">//并且在这其中有很多的重复数据</span></span><br><span class="line"><span class="comment">//在此加入一个全局变量count来计算第三个斐波那系数被计算了多少次</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">加入全局变量count来计算<span class="number">3</span>被计算了几次</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">3</span>)<span class="comment">//测试第三个斐波那系数被计算了多少次</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fbn(z - <span class="number">1</span>) + fbn(z - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ret = fbn(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第这个的斐波那数是%d\n&quot;</span>, ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第三个斐波那数被计算了——%d次\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">上面递归的方法进行了太多的重复计算</span><br><span class="line">这个用循环的方法</span><br><span class="line"><span class="comment">//解释</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13 21 43 55 </span></span><br><span class="line"><span class="comment">//为了避免计算重复的是</span></span><br><span class="line"><span class="comment">//假设把第一个数的值赋给a,第二个数的值赋给b,</span></span><br><span class="line"><span class="comment">//将a+b的值赋给c</span></span><br><span class="line"><span class="comment">//循环往复</span></span><br><span class="line"><span class="comment">//其中前两个一加赋给第三个</span></span><br><span class="line"><span class="comment">//计算斐波那契数是从第三个开始</span></span><br><span class="line"><span class="comment">//创建循环的条件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//这是前两个斐波那契数</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算斐波那契数从第三个数开始</span></span><br><span class="line"><span class="keyword">while</span> (z &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = a + b;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">z--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">ret = fbn(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个斐波那契数%d&quot;</span>, n,ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="什么时候用递归什么时候用循环"><a href="#什么时候用递归什么时候用循环" class="headerlink" title="什么时候用递归什么时候用循环"></a>什么时候用递归什么时候用循环</h4><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>当递归加上限制条件的时候，还是会栈溢出（stack overflow）</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跑一会儿程序就会奔溃</span></span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    test(n+<span class="number">1</span>)</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test(<span class="number">1</span>)；</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归的经典案例"><a href="#递归的经典案例" class="headerlink" title="递归的经典案例"></a>递归的经典案例</h4><p>1汉诺塔问题</p><p>2青蛙跳台阶问题</p><p>n个台阶，一次可以跳1个或者2个，请问有多少种跳法</p><p>《剑指offer》</p><h1 id="31-数组"><a href="#31-数组" class="headerlink" title="31.数组"></a>31.数组</h1><h2 id="1-一维数组的创建和初始化"><a href="#1-一维数组的创建和初始化" class="headerlink" title="1.一维数组的创建和初始化"></a>1.一维数组的创建和初始化</h2><h3 id="数组的创建："><a href="#数组的创建：" class="headerlink" title="数组的创建："></a>数组的创建：</h3><p>数组是一组相同类型元素的集合，数组的创建方式</p><p>数组类型type_t </p><p>数组名称arr_name</p><p>const_n是一个常量表达式，用来指定数组的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个数组用来存放10个整型</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> arr2[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//char ch[n];——这样写不可以，数组的大小一定要用常量</span></span><br><span class="line"><span class="keyword">float</span> arr3[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> arr4[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>数组的初始化是指：在数组创建的同时给数组的内容一些合理初始值（初始化）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//——这种叫不完全初始化，前三个是123，剩下的元素默认初始化为0</span></span><br><span class="line">    <span class="comment">//字符数组</span></span><br><span class="line">char arr2[5] =&#123;&#x27;a&#x27;,&#x27;b（98）&#x27;&#125;;//初始化同样不完全，其中当把b替换成98时， 输出也是b，因为b的ascii码值就是98 </span><br><span class="line">    <span class="keyword">char</span> arr3[<span class="number">5</span>] = <span class="string">&quot;ab&quot;</span>；</span><br><span class="line">    <span class="keyword">char</span> arr4[] = <span class="string">&quot;abcdef&quot;</span>；<span class="comment">//不指定大小，进行初始化，他会根据初始化的内容，来确定数组几个元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr4));<span class="comment">//7</span></span><br><span class="line">    <span class="comment">//sizeof——计算arr4所占空间的大小——放了abcdef\0这七个元素</span></span><br><span class="line">    pritnf(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr4));<span class="comment">//6</span></span><br><span class="line">    <span class="comment">//strlen——求字符串长度，\0之前的字符个数，\0停止，\0不计数</span></span><br><span class="line">    <span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line">   补充知识</span><br><span class="line">      <span class="built_in">strlen</span>和<span class="keyword">sizeof</span>没有什么关联</span><br><span class="line">       <span class="built_in">strlen</span>是求字符串长度的，想让他终止就得碰到\<span class="number">0</span>,没有\o，计算出的值就是个随机值-只能针对字符串求长度——库函数-要引头文件</span><br><span class="line">       <span class="keyword">sizeof</span>计算变量、数组、类型的大小、-单位是字节、——操作符</span><br><span class="line">  <span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line">       <span class="comment">//完全初始化就是规定了数组中有几个元素，后面就初始化几个元素</span></span><br><span class="line">       <span class="comment">//数组在创建的时候如果不想指定</span></span><br><span class="line"><span class="keyword">float</span> arr3[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> arr4[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h2><p>对于数组的使用我们之介绍了一个操作符：[]    ,下标引用操作符，它其实就是数组访问的操作符，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;abcdefe&quot;</span>;<span class="comment">//这里面放了[a] [b][c][d][e][f][\0]</span></span><br><span class="line"><span class="comment">/*printf(&quot;%c\n&quot;, arr[3]);*/</span><span class="comment">//输出字符串中的第三个字符</span></span><br><span class="line"><span class="comment">//这里的[]就是下标引用操作符</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        <span class="comment">//下面这个同上</span></span><br><span class="line">   <span class="comment">// for(i = 0; i &lt;(int)strlen(arr);i++)</span></span><br><span class="line">       <span class="comment">//for(i = 0; i&lt; lenli++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, arr[i]);<span class="comment">//输出abcdef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; sz ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,sz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>数组其实是用下标来访问的，下标是从0开始的。</p><p>数组的大小可以通过计算来得到。</p><h2 id="3-一维数组在内存中的存储"><a href="#3-一维数组在内存中的存储" class="headerlink" title="3.一维数组在内存中的存储"></a>3.一维数组在内存中的存储</h2><p>一维数组在内存中的排布</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出此一维数组在内存中的排布情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n&quot;</span>, i, &amp;arr[i]);</span><br><span class="line"><span class="comment">//在内存中连续开辟空间来存放1~10</span></span><br><span class="line"><span class="comment">//数组在内存中是连续存放的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组在内存中是连续存放的</p><h2 id="4-二维数组的创建和初始化"><a href="#4-二维数组的创建和初始化" class="headerlink" title="4.二维数组的创建和初始化"></a>4.二维数组的创建和初始化</h2><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组的创建</span><br><span class="line">    <span class="comment">//3行4列的二维数组</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//3行5列</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line"><span class="comment">//2行4列</span></span><br><span class="line"><span class="keyword">double</span> arr[<span class="number">2</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里创建一个3行4列的二维数组</span></span><br><span class="line"><span class="comment">//在第一行存放123没有初始化的位置放置0</span></span><br><span class="line"><span class="comment">//在第二行放置45，没有初始化的位置放置0</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维数组要明确几行几列，列不能省略，行可以省略</span><br></pre></td></tr></table></figure><h2 id="5-二维数组的使用"><a href="#5-二维数组的使用" class="headerlink" title="5.二维数组的使用"></a>5.二维数组的使用</h2><h2 id="6-二维数组在内存中的存储"><a href="#6-二维数组在内存中的存储" class="headerlink" title="6.二维数组在内存中的存储"></a>6.二维数组在内存中的存储</h2><p>5和6放到一起说了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">二维数组的使用也是通过下标的方式</span><br><span class="line"> 不管行还是列下标都是从<span class="number">0</span>开始</span><br><span class="line">     大致内容跟上跟一维数组一样</span><br><span class="line">    <span class="comment">//随之元素下标的增长，元素的地址也在有规律的增长，由此可以得出结论，数组再内存中是有连续存放的。</span></span><br><span class="line">    二维数组在内存中也是连续存放的，像一维数组一样</span><br><span class="line">    假想中是分行和列的，其实并不分，连续一条直线存放</span><br><span class="line">    把二维数组拆成几个一维数组</span><br><span class="line">    <span class="comment">//二维数组</span></span><br><span class="line">    arr[<span class="number">0</span>][j]</span><br><span class="line">    arr[<span class="number">1</span>][j]</span><br><span class="line">    arr[<span class="number">2</span>][j]</span><br><span class="line">    就可以想象成三个一维数组并排放置</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][j]);  <span class="comment">//打印此二维数组的所有元素</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d] = %p\n&quot;</span>, i, j, &amp;arr[i][j]);<span class="comment">//打印二维数组中各个元素的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组作为函数参数"><a href="#7-数组作为函数参数" class="headerlink" title="7.数组作为函数参数"></a>7.数组作为函数参数</h2><p>冒泡排序——将一个整型数组进行排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//确定冒泡的趟数</span></span><br><span class="line"><span class="comment">//这里从下面传上来的数组只是数组中首元素的地址0</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);//假设10个元素</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确定每趟中多少对比较</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//动态的</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//打印数组的每个元素</span></span><br><span class="line"><span class="comment">//对arr数组进行冒泡排序</span></span><br><span class="line"><span class="comment">//10个元素需要进行9趟冒泡排序</span></span><br><span class="line"><span class="comment">//在外面算好元素个数然后传过去</span></span><br><span class="line">maopao(arr,sz);<span class="comment">//调用冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (i; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若改为已经排好顺序的数组，代码依然会老老实实的进行冒泡排序</span></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//假设这一趟要排序的数据已经有序</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                flag  =  <span class="number">0</span> ; <span class="comment">//本趟排序的数据其实并不完全有序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">maopao(arr,sz);</span><br><span class="line"><span class="keyword">for</span> (i; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//break只能用于循环或者if语句</span></span><br></pre></td></tr></table></figure><p>数组名是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印的值是一样的但是意义是不一样的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]); </span><br><span class="line"><span class="comment">//前面两个代表的首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr);<span class="comment">//整个数组的地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line">pritnf(<span class="string">&quot;%p\n&quot;</span>, &amp;arr</span><br></pre></td></tr></table></figure><p>补充：<br>1sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组。</p><p>2……数组名，取出的是数组的地址。&amp;数组名，数组名表示整个数组。</p><p>除了12的两种情况之外，所有的数组名都表示数组首元素的地址。</p><h2 id="8-数组的应用实例1：三子棋"><a href="#8-数组的应用实例1：三子棋" class="headerlink" title="8.数组的应用实例1：三子棋"></a>8.数组的应用实例1：三子棋</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-数组的应用实例2：扫雷游戏"><a href="#9-数组的应用实例2：扫雷游戏" class="headerlink" title="9.数组的应用实例2：扫雷游戏"></a>9.数组的应用实例2：扫雷游戏</h2><h1 id="32-操作符"><a href="#32-操作符" class="headerlink" title="32.操作符"></a>32.操作符</h1><p>操作符和表达式</p><h2 id="1各种操作符的介绍"><a href="#1各种操作符的介绍" class="headerlink" title="1各种操作符的介绍"></a>1各种操作符的介绍</h2><p>分类</p><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * /</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    / </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意其中取模操作符%的两边都要是整数</span></span><br><span class="line"><span class="comment">//int a = 5 / 2; //商2余1  输出为2</span></span><br><span class="line"><span class="comment">//int a = 5 % 2;  // 输出余数1</span></span><br><span class="line"><span class="keyword">double</span> a = <span class="number">5</span> / <span class="number">2.0</span>;<span class="comment">//浮点型-让分子或分母任意一个为小数</span></span><br><span class="line"><span class="comment">//输出就是2.500000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %f\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p>只能作用与整数</p><p>对于位移操作符，不要移动负数位数的，例如&lt;&lt;-1，这是标准未定义的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a = 16;</span></span><br><span class="line"><span class="comment">//16用二进制表示1000</span></span><br><span class="line"><span class="comment">//16存在a中，a为整型，整型在内存中占4个字节，32个比特位</span></span><br><span class="line"><span class="comment">//这个32个比特位位</span></span><br><span class="line"><span class="comment">//这个空间就是单独创建出来给a的</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010000</span></span><br><span class="line"><span class="comment">//拿着整个二进制数列往右边移动，</span></span><br><span class="line"><span class="comment">//来检测一下这里是算数 右移还是逻辑右移</span></span><br><span class="line"><span class="comment">//如果是正数的话，右移不管是逻辑右移还是算数右移左边数都是补0</span></span><br><span class="line"><span class="comment">//所以要用一个负数来测一下</span></span><br><span class="line"><span class="comment">//来一个-1</span></span><br><span class="line"><span class="comment">//*******补充-原码就是这个数用二进制表示的形式</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &gt;&gt; <span class="number">1</span>;<span class="comment">//移动的是二进制位</span></span><br><span class="line"><span class="comment">//把b打印出来看看</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);  <span class="comment">//打印出-1，说明当前的编译器采用的是算数移位</span></span><br><span class="line"><span class="comment">//右移通常见到的都是算数右移</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//正数的二进制表示有，原码，补码，反码 </span></span><br><span class="line"><span class="comment">//存到内存中的是补码</span></span><br><span class="line"><span class="comment">//例如：-1怎么写出他的原、凡、补。</span></span><br><span class="line"><span class="comment">//因为他是负数，所以最高位先写1，1表示负数的意思</span></span><br><span class="line"><span class="comment">//最高位表示符号位</span></span><br><span class="line"><span class="comment">//10000000000000000000000000000001----原码</span></span><br><span class="line"><span class="comment">//前面的1表示负数的意思，后面的1表示十进制的一个数字是1，</span></span><br><span class="line"><span class="comment">//他们两个组合起来就是-1</span></span><br><span class="line"><span class="comment">//反码</span></span><br><span class="line"><span class="comment">//符号位不变，其他位按位取反、</span></span><br><span class="line"><span class="comment">//11111111111111111111111111111110---反码</span></span><br><span class="line"><span class="comment">//补码就是反码+1</span></span><br><span class="line"><span class="comment">//11111111111111111111111111111111--补码</span></span><br><span class="line"><span class="comment">//16进制f换成二进制是1111</span></span><br><span class="line"><span class="comment">//1111 第一个1是2的3次方是 8</span></span><br><span class="line"><span class="comment">//第二个1是4，第三个是2，第四个是1</span></span><br><span class="line"><span class="comment">//8421 = 15</span></span><br><span class="line"><span class="comment">//****************************</span></span><br><span class="line"><span class="comment">//当对补码进行移位-算数移位</span></span><br><span class="line"><span class="comment">//右移补充个1，虽然我丢了个1，又补充了个1，内容还是全1</span></span><br><span class="line"><span class="comment">//是全1，就是-1的补码，打印的就是-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &gt;&gt;右移操作符</span></span><br><span class="line"><span class="comment">//1算数右移 右边丢弃，左边补原符号位</span></span><br><span class="line"><span class="comment">//见到的基本上都是算术右移</span></span><br><span class="line"><span class="comment">//2逻辑右移 右边丢弃，左边补0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//整数的二进制表示有：原码 反码 补码</span></span><br><span class="line"><span class="comment">//存储到内存的是补码</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//5的二进制表示是101</span></span><br><span class="line"><span class="comment">//0000000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//经过向左移动左边补0后，当前的数字从5变成了10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>只能作用到整数上去</p><p>注意：他们的操作符数必须是整数</p><p>&amp;-按位与</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&amp;-按位与-按二进制位与</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//整型占32个比特位</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">//有一个为0就是0，两个都是1 才是1 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>|-按位或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000111</span></span><br><span class="line"><span class="comment">//有一个为1就是1，两个都是1 也是1 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>^-按位异或-按二进制位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&amp;-按位与-按二进制位与</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000110</span></span><br><span class="line">    <span class="comment">//对应的二进制如果相同为0，相异为1</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一道变态的面试题目</p><h4 id="不创建临时变量-第三个变量-实现两个数的交换"><a href="#不创建临时变量-第三个变量-实现两个数的交换" class="headerlink" title="不创建临时变量(第三个变量)实现两个数的交换"></a>不创建临时变量(第三个变量)实现两个数的交换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不创建临时变量(第三个变量)实现两个数的交换</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">先来一个创建临时变量的</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;<span class="comment">//创建c为临时变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line">c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">加减法</span><br><span class="line">    <span class="comment">//缺陷</span></span><br><span class="line">    <span class="comment">//当他们特别大的时候,没有超过最大值，但是加在一起的时候超过，必然就会有一些二进位丢失，就还原不出来了，缺陷——可能会溢出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">按位异或</span><br><span class="line">    <span class="comment">//执行效率不高，可读性比较差</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//整型在内存中战32个比特位</span></span><br><span class="line"><span class="comment">//ab分别用二进制表示</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100</span></span><br><span class="line"><span class="comment">//进行三次按位异或——相同为0，相异为1</span></span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">//00000000000000000000000000011110——这个所表示的数是30</span></span><br><span class="line"><span class="comment">//即现在的a变成了30</span></span><br><span class="line"><span class="comment">//*******现在要进行按位异或的ab分别是</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011110</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100</span></span><br><span class="line">b = a ^ b;</span><br><span class="line"><span class="comment">//得到</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010——这个所表示的数是10</span></span><br><span class="line"><span class="comment">//即现在的b变成了10</span></span><br><span class="line"><span class="comment">//*******现在要进行按位异或的ab分别是</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011110</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010</span></span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">//得到</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100——这个所表示的数是20</span></span><br><span class="line"><span class="comment">//即现在的a变成了20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码实现求一个整数存储在内存中的二进制中1的个数"><a href="#编写代码实现求一个整数存储在内存中的二进制中1的个数" class="headerlink" title="编写代码实现求一个整数存储在内存中的二进制中1的个数"></a>编写代码实现求一个整数存储在内存中的二进制中1的个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="comment">//统计Num的补码中有几个1 </span></span><br><span class="line"><span class="keyword">while</span>(num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">num = num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码存在问题，算负数的时候</span></span><br></pre></td></tr></table></figure><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><p>赋值操作符是一个很棒的操作符，你可以让他得到一个你之前不满意的值，也就是说你可以给自己重新赋值，</p><p>当一个变量已经有值了，但是你不满意这个值，就给他新一个值，（变量在开始创建的时叫做初始化，当变量已经有一个值得时候，再给他赋值）</p><p>可以连续进行赋值，但是不推荐。</p><p>连续赋值例子：x = a = b,将b赋给a，再将a赋给x,这样的写法不太容易读懂</p><p>而这样写会更加爽朗：a = b;  x = a;并且容易调试</p><p>容易混淆：一个=是赋值操作符，两个==这个是判断是否相等</p><h4 id="复合赋值符"><a href="#复合赋值符" class="headerlink" title="复合赋值符"></a>复合赋值符</h4><p>a = a +2;</p><p>a += 2;这个就是复合赋值符</p><p>a = a &gt;&gt; 1 ;</p><p>a &gt;&gt;= 1</p><p>a = a ^1</p><p>a ^= 1</p><h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><p>意思就是只有一个操作数</p><p>例如： a + b中的+，它两边有两个操作数，所以他就叫双目操作符</p><p>有哪些单目操作符</p><p>! 逻辑反操作——真变成假假变成真</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,!a);逻辑反操作，此时为假 输出为<span class="number">0</span></span><br><span class="line">    <span class="comment">//一般放在if语句中来使用，要根据实际的场景来进行使用</span></span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>+正值——正号一般都省略掉了</p><p>&amp;取地址——一般都和指针配合使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个东西与下面的解引用操作符是一对，通常会出现在一起</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//&amp;取地址操作符</span></span><br><span class="line"><span class="keyword">int</span>* p = &amp;a;<span class="comment">//p称为指针变量,int*是p的类型</span></span><br><span class="line"><span class="comment">//*p 解引用操作符</span></span><br><span class="line">*p</span><br><span class="line">    <span class="comment">//通过p里面所存的这个值，来找到它所指向的对象，*p就是它所指向的那个对象a，因为p是指向a的,p里面存了a的地址，所以p是指向a的，现在*p就是a，</span></span><br><span class="line">    <span class="comment">//现在我这样</span></span><br><span class="line">    *p = <span class="number">20</span>;<span class="comment">//现在a的值变成20了 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>*解引用操作符（间接访问操作符）</p><p>sizeof操作数的类型长度（以字节为单位）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;   <span class="comment">//4</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;r&#x27;</span>;  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">char</span>* p = &amp;c;  <span class="comment">//  指针的大小要不是4个字节，要不就是8个字节，与你电脑系统格式32位 还是64位有关，</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 他是一个数组，里面有十个整型元素，一个整型元素占四个字节，10个整型这里就是      40个字节</span></span><br><span class="line"><span class="comment">//对于数组来说，去掉数组名，剩下的就是他的类型，例如 int crr[40],它叫做crr，去掉他的名字，剩下int[40],这就是他的类型</span></span><br><span class="line">************</span><br><span class="line">    <span class="comment">//可以通过名称来计算大小，也可以通过类型来计算大小 </span></span><br><span class="line">    注意：当<span class="keyword">sizeof</span>后面是类型的时候是不可以省略括号的，当后面是名字的时候是可以省略括号的 </span><br><span class="line"><span class="comment">//下面sizeof计算的是变量所占内存空间的大小，变量包含数组，单位是字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(输入你要计算的东西));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例题：下面这个代码输出的两个值分别是什么</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s = a + <span class="number">5</span>));<span class="comment">//无论a是什么，现在放到了s的=后面，就要按着s的规矩来，一个四个字节的a放到s这里来，也只能存两个字节，因为s为短整型，只有两个字节。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s);<span class="comment">//这个地方输出0，并不意味着这个地方就放不下15，而是因为，sizeof这个操作符放的这个表达式是不会真实计算的，也就是说a+5仅仅是个摆设放在上面中s=的后面，</span></span><br><span class="line">    <span class="comment">//给我们的感觉是要把一个整型元素放在一个短整型元素中去，这个地方发生截断，但其实这个地方并不会发生截断，sizeof括号中放的这个表达式是不参与直接运算的，s的并没有发生变化，所以s还是0，输出0。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 0 和 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>~按位取反</p><p>这个位是第二进制位</p><p>对有所有位按位取反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//a在内存中的二进制位是</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000000  补码</span></span><br><span class="line">    <span class="comment">//按位取反得到</span></span><br><span class="line">    原码取反加一能得到补码</span><br><span class="line">        补码减一取反能得到原码</span><br><span class="line">    <span class="comment">//11111111111111111111111111111111  补码 </span></span><br><span class="line">    <span class="comment">//11111111111111111111111111111110  反码</span></span><br><span class="line">    <span class="comment">//10000000000000000000000000000001  原码  第一个为符号位</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,~a);   <span class="comment">//打印出来-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（类型）——强制类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = (<span class="keyword">int</span>)<span class="number">3.15</span>;</span><br><span class="line">pinrtf(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20201228160445425.png" alt="image-20201228160445425"></p><p>40 10 4 4    </p><h3 id="关系操作符-1"><a href="#关系操作符-1" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>比较大小  &gt; &gt;=  &lt; &lt;=  !=  ==</p><p>区别 = 和==</p><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><h4 id="amp-amp-逻辑与"><a href="#amp-amp-逻辑与" class="headerlink" title="&amp;&amp;逻辑与"></a>&amp;&amp;逻辑与</h4><p>逻辑与还具有短路的功能，当式子左边算出为假，那么后面的式子不管什么都不再计算，（后面的不会执行）</p><p>其中一个为假， 结果就为假，</p><p>两个都为真，结果 为真</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a  = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b  = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c  = a &amp;&amp; b:</span><br><span class="line">    <span class="comment">//1为真 0为假 a和b有一个为假 就为假</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="||逻辑或"></a>||逻辑或</h4><p>一个为真或起来就真，</p><p>两个同时为假才为假。</p><p>例题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d d = %d &quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20201228161519161.png" alt="image-20201228161519161"></p><p>结果：1 2 3 4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上个式子a的值改成1</span></span><br><span class="line">结果为 <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">改成逻辑或</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, a =<span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ || ++b || d++;</span><br><span class="line">    <span class="comment">//只要开始为真，整体就为真，后面的不进行运算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d d = %d &quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件操作符（三目操作符）"><a href="#条件操作符（三目操作符）" class="headerlink" title="条件操作符（三目操作符）"></a>条件操作符（三目操作符）</h3><p>exp1 ? exp2 ：exp3</p><p> 如果表示式1的结果为真，表达式2要算，表达式2的结果整个表达式的结果，</p><p>如果表达式1的结果为假，表达式3要算，表达式3的结果是整个表达式的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果要实现下面这个代码，转成条件表达式是什么样？</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">5</span>)</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">b = <span class="number">-3</span>; </span><br><span class="line"><span class="comment">//****************************************************</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">b = (a &gt; <span class="number">5</span> ? <span class="number">3</span> : <span class="number">-3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：使用条件表达式得到两个的数较大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个数：\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">c = (a &gt; b ? a : b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;较大的数为：%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><p>exp1, exp2, exp3, …expN</p><p>逗号表达式，就是用逗号隔开多个表达式。</p><p>逗号表达式，从左向右依次执行。整个表达式的结果是最后一个表达式的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = (a &gt;b ,a = b+<span class="number">10</span>,a，b = a +<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a &gt; b这个表达式不产生结果  a不产生结果</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>( a = b +<span class="number">1</span>,c=  a /<span class="number">2</span>, d &gt; <span class="number">0</span> );</span><br><span class="line"><span class="comment">//真正起到判断作用的是最后一个d&gt;0,d大于0，条件为真，反之条件为假</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">3</span></span><br><span class="line">a = get_val();</span><br><span class="line">count_val(a);</span><br><span class="line"><span class="keyword">while</span> (a &gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里面上面的代码重复出现了两次，比较啰嗦</span></span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">    a = get_val();</span><br><span class="line">    count_val(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果使用逗号表达式，则为</span></span><br><span class="line"><span class="comment">//逻辑一模一样，重复的代码只出现了一次，使代码更加简洁，但有的时候可能不太容易理解。</span></span><br><span class="line"><span class="keyword">while</span>(a = get_val(),count_val(a),a &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下标引用、函数调用和结构成员"><a href="#下标引用、函数调用和结构成员" class="headerlink" title="下标引用、函数调用和结构成员"></a>下标引用、函数调用和结构成员</h3><p>1.[]下标引用操作符</p><p>操作数:一个数组名+一个索引值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr [<span class="number">10</span>];<span class="comment">//创建数组</span></span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">10</span>;<span class="comment">//实用下标引用操作符</span></span><br><span class="line">[]的两个操作符是arr和<span class="number">9</span>,一个是数组名，一个是索引值</span><br></pre></td></tr></table></figure><p>2.（）函数调用操作符 接收一个或多个操作数： 第一个操作数是函数名吗，剩余的操作数就是传递给函数的参数。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//这里的括号是我们定义函数时候的语法规则</span></span><br><span class="line"><span class="comment">//并不是函数调用操作符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max</span> <span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;y ?x &gt;:y;</span><br><span class="line">    <span class="comment">//这里用了一个三目操作符，复习一下</span></span><br><span class="line">    <span class="comment">//开始是条件，如果x &gt; y成立就返回x,不成立就返回y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> max = get_max(a , b );</span><br><span class="line">    <span class="comment">//调用函数的上面这个()，就是函数调用操作符，</span></span><br><span class="line">    <span class="comment">//函数调用操作符的操作数是多少呢？</span></span><br><span class="line"><span class="comment">//函数名get_max就是操作数，a,b这两个参数也是操作数，</span></span><br><span class="line">    <span class="comment">//这里一共有3个函数操作数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数调用操作符最少有<span class="number">1</span>个，当一个参数都没有时,就是函数名</span><br></pre></td></tr></table></figure><p>3.访问一个结构的成员</p><p>.结构体.成员名</p><p>结构体指针-&gt;成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何描述一个学生来引出概念</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//学生</span></span><br><span class="line"><span class="comment">//用结构体来描述一个学生</span></span><br><span class="line"><span class="comment">//&#123;&#125;里面</span></span><br><span class="line"><span class="comment">//*******************************************</span></span><br><span class="line">    创建了一个结构体类型，类型名字是下面那个</span><br><span class="line">    <span class="comment">//*********************************************</span></span><br><span class="line">    这里创建好了一个结构体类型，就相当于在盖房子的时候，设计好了图纸，</span><br><span class="line">    图纸画好了只是将房子的大致样子给描述了出来，但是房子还没有盖，</span><br><span class="line">    买完材料，照着图纸盖</span><br><span class="line">    <span class="comment">//*********************************************</span></span><br><span class="line">    向内存申请区域来存放我们相关的信息，</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义了一个结构体<span class="title">stu</span></span></span><br><span class="line"><span class="class">    //<span class="keyword">struct</span> <span class="title">stu</span>是一种学生类型  </span></span><br><span class="line"><span class="class">    //<span class="title">int</span> <span class="title">float</span>是一种类型，</span></span><br><span class="line"><span class="class">    //这里的<span class="keyword">struct</span> <span class="title">stu</span>也是一种类型</span></span><br><span class="line"><span class="class">    //类型是用来创建变量的</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//在这里面放的是描述学生的一些相关属性</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>]; </span><br><span class="line">    age;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//类型是用来创建变量的</span></span><br><span class="line">    <span class="keyword">int</span>  a ;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">   <span class="comment">//类似于数组</span></span><br><span class="line">    **************************</span><br><span class="line">        <span class="comment">//使用结构体类型，创建了一个结构体变量</span></span><br><span class="line">        <span class="comment">//即创建了一个学生对象s1，并初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span> =</span> &#123; <span class="string">&quot;SB&quot;</span>，<span class="number">18</span>,<span class="number">30061128</span>&#125;;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.id);</span><br><span class="line">    <span class="comment">//. 操作符用来访问结构体成员</span></span><br><span class="line">    <span class="comment">//结构体变量.成员名</span></span><br><span class="line">    *******************************************************</span><br><span class="line">    <span class="comment">//在内存中开辟了空间，开辟了空间就有起始地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span>* <span class="title">ps</span> =</span> &amp;s1;<span class="comment">//取出s1的地址，存放到ps中,ps就是指针变量</span></span><br><span class="line">如何靠拿到的ps来打印sb的信息呢</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(*ps).name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*ps).age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(*ps).id);</span><br><span class="line">    <span class="comment">//****************************************************</span></span><br><span class="line">    精简的方式</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ps-&gt;name);<span class="comment">//意思同上//这样写更加直观一些</span></span><br><span class="line">    <span class="comment">//结构体指针-&gt;成员名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学操作符——为了求一个表达式的结果——表达式求值</p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p>表达式求值的顺序一部分是由操作符的优先级和结合性决定。</p><p>同样，有些表达式的操作数在求值的过程中可能需要转化为其他类型。</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>就是偷偷的进行类型转换</p><p>c的整型算数运算总是至少以缺省整型类型的精度来进行的，</p><h4 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升"></a>整型提升</h4><p>为了提升这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型,这种转换称为整型提升。</p><p>什么时候用到整型提升——可能小于int长度的整型值。</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">char</span> a,b,c;</span><br><span class="line">a = b + c ;</span><br><span class="line"><span class="comment">//b和C的值被提升为普通整型，然后再执行加法运算</span></span><br><span class="line"><span class="comment">//加法运算完成之后，结果将被截断，然后再存储于a中</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  a = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//3是一个整数，整型在二级制中占32个比特位</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000011</span></span><br><span class="line">    <span class="comment">//整数的原码补码反码相同</span></span><br><span class="line">    <span class="comment">//char是字符型变量，存放字符型变量</span></span><br><span class="line">    <span class="comment">//将3放到a里面切，a是一个字节，只能占8个比特位</span></span><br><span class="line">    <span class="comment">//这时候就会发生截断</span></span><br><span class="line">    <span class="comment">//调最小最低位字节的内容 </span></span><br><span class="line">    <span class="comment">//00000011</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">127</span>;</span><br><span class="line">    <span class="comment">//在二进制中表示为</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000111111</span></span><br><span class="line">    <span class="comment">//同上a</span></span><br><span class="line">    <span class="comment">//这里的b真正存的是</span></span><br><span class="line">    <span class="comment">//01111111</span></span><br><span class="line">    <span class="keyword">char</span> c = a + b;</span><br><span class="line">    <span class="comment">//a和b如何相加</span></span><br><span class="line">    <span class="comment">//为了提升计算的精度，就要进行整型提升</span></span><br><span class="line">    <span class="comment">//先把它补充成一个整型在二进制中存的位数</span></span><br><span class="line">    <span class="comment">//即32个比特，没有的位置补0</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000011</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000111111</span></span><br><span class="line">    <span class="comment">//够2就进1</span></span><br><span class="line">    <span class="comment">//结果为</span></span><br><span class="line">    <span class="comment">//00000000000000000000000001000010</span></span><br><span class="line">    <span class="comment">//求完这个结果还要把这个结果放到c里面去，</span></span><br><span class="line">    <span class="comment">//C是一个char类型,只能存8个比特位，继续进行截断，拿到他的8个比特位</span></span><br><span class="line">    <span class="comment">//得到</span></span><br><span class="line">    <span class="comment">//10000010</span></span><br><span class="line">    <span class="comment">//下面要进行打印，打印的类型仍然是个整型</span></span><br><span class="line">    <span class="comment">//这里还要进行整型提升</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>，c);</span><br><span class="line">    <span class="comment">//输出结果为-126，这是为什么呢？</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原码取反加1到得到反码</span></span><br></pre></td></tr></table></figure><p>如何进行整型提升呢？</p><p>整型提升是按照变量的数据类型的符号位来提升的</p><p>首先看变量是什么类型的（是否为有符号数），高位为该变量的符号位，按照高位提升、 补充，补充成32位（整型），无符号直接前面 补0就行了， </p><hr><p>整型提升的意义：<br>    表达式的整型运算要在CPU的相应运算器件内执行，CPU内整型运算器（ALU）的操作数的字节长度一般就是int的字节长度，同时也是CPU的通用寄存器的长度。</p><p>因此，即使两个char类型相同，在cpu执行时实际上也要先转化为 CPU 内整型操作数的标准长度。</p><p>通用cpu是难以直接实现两个8比特字节 直接相加运算（虽然机器指令中可能有这种字节相加指令）。所以，表达式中各种长度长度可能小于int长度的整型值，都必须先转换为int或unsign int，然后才能送入cpu去执行运算。</p><p>说白了，整型提升就是把其他类型的变量，转化为整型，然后再在程序中计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例题</span></span><br><span class="line"><span class="comment">//下面这个代码的输出结果是什么？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(c));<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(+c));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(!c));<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//上面这个代码中,c只要参与运算，就会发生整型提升，表达式c+，就会发生提升，所以sizeof(+c)是4个字节，表达式-c也会发生整型提升，所以sizeof(-c)是4个字节，但是sizeof(c)就是一个字节。</span></span><br><span class="line">    ***********************************************</span><br><span class="line">    <span class="comment">//前面加入的这几个符号是什么意思?</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h4><p>如果某个操作符的各个操作符属于不同的类型，那么除非一个操作数转换为另一个操作数的类型，否则操作就无法进行。下面的层次体系称为寻常算数转换。</p><p>下面的操作符从上往下所占空间越来越小</p><p>long double</p><p>double</p><p>float</p><p>unsigned long int</p><p>long int </p><p>unsigned int </p><p>int </p><p>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换为另一个操作数的类型后执行运算。</p><p>就是，假如说我们从上面随便取两个类型的变量来运算，就要先把小的变量转化为那个较大类型的变量来进行运算。</p><p>警告，但是算数转换要合理，要不然会有一些潜在的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> num = f;</span><br><span class="line"><span class="comment">//隐式转换，会有精度丢失</span></span><br></pre></td></tr></table></figure><h3 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h3><p>复杂的表达式的求值有三个影响的因素</p><p>1操作符的优先级</p><p>2操作符的结核性</p><p>3是否控制求值顺序</p><p>两个相邻的操作符限制性哪个？取决有他们的优先级。如果两者的优先级相同，取决于他们的结核性。</p><p>操作符的优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = b + a * <span class="number">3</span>;<span class="comment">//*优先级较高，先进行乘再进行加，</span></span><br><span class="line">    <span class="comment">//当相邻的操作符不相同的时候，他们就有自己的优先级</span></span><br><span class="line">    <span class="comment">//优先级高的先算，优先级低的后算</span></span><br><span class="line">    <span class="comment">//若两个操作符相同，那么应该先计算哪个呢？</span></span><br><span class="line">    <span class="comment">//这时候就引出我们要说的结核性</span></span><br><span class="line">    <span class="comment">//从哪边向哪边进行结合，</span></span><br><span class="line">    <span class="comment">//除了优先级和结核性</span></span><br><span class="line">    <span class="comment">//还要看——是否控制求值顺序</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先级较高，先进行乘再进行加，<br>当相邻的操作符不相同的时候，他们就有自己的优先级<br>优先级高的先算，优先级低的后算<br>若两个操作符相同，那么应该先计算哪个呢？<br>这时候就引出我们要说的结核性<br>从哪边向哪边进行结合，<br>除了优先级和结核性<br>还要看——是否控制求值顺序</p><p>不同的求值顺序，得到的值有可能不一样，</p><p>计算路径无法确定——有问题表达式</p><p>写代码要写不会出现计算路径问题的表达式</p><p>别让求值顺序影响代码的运行，这样的代码不好进行运算，容易出现问题。</p><p>在调用函数的时候，加入运算符，不知道先调用哪个函数了</p><p>无法说明通过这个符号，哪个函数先进行调用。</p><h1 id="33指针（初阶）"><a href="#33指针（初阶）" class="headerlink" title="33指针（初阶）"></a>33指针（初阶）</h1><h2 id="1指针是什么"><a href="#1指针是什么" class="headerlink" title="1指针是什么"></a>1指针是什么</h2><p>利用地址的这个值，直接找到所需的变量单元，地址指向该变量单元，因此，将地址形象化的称为指针，意思是通过它能找到以他为地址的内存单元。</p><p>要讲清楚指针，首先要先了解一下内存。</p><p>内存是一块大大的空间，为了更好的使用内存，我们把内存划分为一块一块的小格子，之后再给每个格子编上号。</p><p>一个内存单元的大小最好是一个字节。</p><p>通过地址就可以找到一个内存单元。</p><p>就是说，一个东西存着另一个东西的地址，通过这个地址可以直接找到对应的那个东西的数值，这个东西就是指针。</p><p>地址指向该变量单元，将他形象的成为指针。</p><p>用来存放地址的变量——指针变量</p><p>指针就是地址，地址就是指针。</p><p>指针就是一个变量，这个变量中存的是地址，也就是说指针就是地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//在内存中开辟一块空间</span></span><br><span class="line">    <span class="keyword">int</span> p = &amp;a;<span class="comment">//这里我们对变量a，取出他的地址，再将a的地址存放到变量p中，p就是一个指针变量。 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>32位平台指针大小是4，</p><h2 id="2指针和指针类型"><a href="#2指针和指针类型" class="headerlink" title="2指针和指针类型"></a>2指针和指针类型</h2><p>1指针类型决定了指针进行解引用操作的时候，能够访问空间的大小。</p><p>这就使我们未来在给指针进行赋值的时候要选择一个合适(合理)的大小。</p><p>2指针类型决定了：指针走一步走多远（指针的步长）</p><p>总结：指针类型决定了指针向前或者向后走一步有多大（距离-字节）</p><p>（指针的类型决定了，对指针解引用的时候有多大的权限（能够操作几个字节），比如char<em>的指针解引用就只能访问一个字节，而int</em> *的指针解引用就能访问4个字节。）</p><hr><p>指针加减整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line">    <span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line">    <span class="keyword">char</span>* pc = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果是什么呢？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210125144919989.png" alt="image-20210125144919989"></p><p>由此可看到，不同类型的指针，所存的地址是一样的。但是在加减整数的时候，同加减一个数，得到的结果是不一样的。</p><p>结论：</p><p>​        指针类型决定了，指针+1向后面跳了几个字节。</p><p>​        即上面的结论——指针的类型决定了指针的步长。就是在加减整数的时候跳多少字节 。不同的类型跳的字节数不同。</p><p>​        是什么类型加1 就跳过一个什么，例如是整型类型，加一就跳过一个整型，一个整型占4个字节，所以这时候的步长就是4，跳过了4个字节。加一个字符就跳过1个字节。</p><p>​    指针的类型决定了指针向前或向后走一步的有多长（距离）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组中的全部元素，都改成1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> * p = arr;<span class="comment">//数组名首元素地址</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p + <span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果将上面的p指针类型改成char*</span></span><br><span class="line"><span class="comment">//最后的结果不同，因为不同类型的指针大小不同</span></span><br><span class="line">********************</span><br><span class="line">    根据你的需求，将地址交给一个合理的指针</span><br></pre></td></tr></table></figure><h2 id="3野指针"><a href="#3野指针" class="headerlink" title="3野指针"></a>3野指针</h2><p>野指针就是指针指向的位置是不可知的——随机的，不正确的，没有明确限制的</p><p>局部变量不初始化，默认是随机值</p><p>在内存中随便找了一个位置放了这个随机值的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a ;<span class="comment">//局部变量不初始化，默认是随机值</span></span><br><span class="line">    <span class="keyword">int</span> *p ;<span class="comment">//局部的指针变量，就被初始化随机值。</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一个指针越出了，他所能管理的范围后，他就被成为野指针——指针越界访问</span><br><span class="line">    如下：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">12</span> : i++)</span><br><span class="line">&#123;</span><br><span class="line">p++:</span><br><span class="line">&#125;</span><br><span class="line">retunr <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">指针指向的那块内存空间释放了——(涉及到动态内存开辟)——延迟的问题</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">// a 为 局部变量，出这个变量就不存在了，这块内存空间就还给了操作系统</span></span><br><span class="line">     </span><br><span class="line"> <span class="keyword">return</span> &amp;a;</span><br><span class="line">    <span class="comment">//这里返回的是a在内存中的地址，让下面的int*p来进行接收，但是这里的a是局部变量。</span></span><br><span class="line">    <span class="comment">//返回的是局部变量的地址，除了这个局部变量所在的大括号，他所占的这个4个字节就还给内存空间了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = test();</span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何规避野指针</p><h4 id="1指针初始化"><a href="#1指针初始化" class="headerlink" title="1指针初始化"></a>1指针初始化</h4><p>当未初始化的指针变量进行解引用操作的时候，就是在内存中随便找了个地方，就把地址存到这里了。</p><p>初始化，然后再解引用</p><h4 id="2小心指针越界（指针越界访问）"><a href="#2小心指针越界（指针越界访问）" class="headerlink" title="2小心指针越界（指针越界访问）"></a>2小心指针越界（指针越界访问）</h4><h4 id="3指针指向空间释放，即设置NULL"><a href="#3指针指向空间释放，即设置NULL" class="headerlink" title="3指针指向空间释放，即设置NULL"></a>3指针指向空间释放，即设置NULL</h4><p>（这里在动态访问的时候会详解）</p><p>NULL是用来初始化指针的，给指针赋值。（int* p = NULL;）空指针</p><p>当指针不用的时候，把他设置为空指针，无法访问他的空间，不能用。（在调试程序窗口验证）</p><h4 id="4指针使用之前检查有效性"><a href="#4指针使用之前检查有效性" class="headerlink" title="4指针使用之前检查有效性"></a>4指针使用之前检查有效性</h4><h2 id="4指针运算"><a href="#4指针运算" class="headerlink" title="4指针运算"></a>4指针运算</h2><h4 id="指针加减整数"><a href="#指针加减整数" class="headerlink" title="指针加减整数"></a>指针加减整数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">int</span> *p = arr;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt;sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>.*p);</span><br><span class="line">        p = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针-指针"></a>指针-指针</h4><p>就是地址-地址</p><p>得到的其实是中间的元素个数</p><p>相反如果小地址减去大地址，得到的数就是负数。</p><p>不同类型的指针无法相减</p><p>这两个指针指向的同一块空间</p><p>不可预知的，我们也无法知道他的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#inlcude&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int arr[10]&#x3D;&#123;1,2,3,4,5,6,7,,9,10&#125;;</span><br><span class="line">&amp;arr[9] - &amp;arr[0];</span><br><span class="line">printf</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210205164103822.png" alt="image-20210205164103822"></p><p>C语言标准规定-允许像数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针比较。</p><p>再进行一次理解：（重复了）</p><p>就是允许和该指针和该数组最后一个元素后面的那个内存位置的指针进行比较，不能喝第一个前面那个指针内存地址进行比较。</p><p>指针的关系运算</p><p>&amp;数组名-数组名不是首元素的地址-数组名表示整个数组-数组名-取出的是整个数组的地址（整个数组的地址）</p><p>sizeof（arr）-sizeof（数组名）此时此刻的数组名，表示的是整个数组，计算的是整个数组的大小，单位是字节。</p><p>除了上面这两个情况——其他位置的数组名代表的都是首元素地址</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210205171046592.png" alt="image-20210205171046592"></p><h2 id="5指针和数组"><a href="#5指针和数组" class="headerlink" title="5指针和数组"></a>5指针和数组</h2><p>数组可以通过指针来进行访问，但是数组和指针不是一回事，数组可以存放多个相同类型的数组，指针可以存放地址，数组首元素的地址，或者说存放数组任意位置的地址。</p><p>他们不是一回事，但是他们两个之间有联系。</p><h2 id="6二级指针"><a href="#6二级指针" class="headerlink" title="6二级指针"></a>6二级指针</h2><p>平时我们写的指针都是一级指针，那么什么是二级指针呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line"><span class="keyword">int</span>** = ppa = &amp;pa;<span class="comment">//ppa就是二级指针</span></span><br><span class="line"><span class="comment">//3,4,5,6......同理</span></span><br><span class="line"><span class="keyword">int</span> ** 第一颗星表示他说指向的对象是个指针</span><br><span class="line">    第二表示ppa是个指针</span><br></pre></td></tr></table></figure><h2 id="7指针数组"><a href="#7指针数组" class="headerlink" title="7指针数组"></a>7指针数组</h2><p>指针数组——本质是个数组——是存放指针的数组gg</p><p>数组指针——本质是个指针</p><p>字符数组——存放字符，整型数组——存放整型</p><p>同理：指针数组——存放指针</p><p>arr[数组个数] = {  内容 }</p><p>到此为止c语言指针初级到此结束</p><h1 id="34实用调试技巧"><a href="#34实用调试技巧" class="headerlink" title="34实用调试技巧"></a>34实用调试技巧</h1><h2 id="1什么是bug"><a href="#1什么是bug" class="headerlink" title="1什么是bug"></a>1什么是bug</h2><p>导致计算机不能正常工作的东西叫做Bug</p><p>解决bug——调试</p><p>历史上的第一个bug——臭虫死在了晶体管上面，导致了该计算机无法正常工作</p><h2 id="2调试是什么，有多么重要"><a href="#2调试是什么，有多么重要" class="headerlink" title="2调试是什么，有多么重要"></a>2调试是什么，有多么重要</h2><p>像现实中做了坏事的心理，顺利而下就是犯罪，逆流而上就是真相。</p><p>一个优秀的程序员，是一位优秀的侦探。</p><p>猜测代码哪里出错了，但是不知道哪里真正的出错了，这样是不行的。</p><h2 id="3debug和release的介绍"><a href="#3debug和release的介绍" class="headerlink" title="3debug和release的介绍"></a>3debug和release的介绍</h2><p>二者都会产生一个可执行程序</p><p>二者的功能可能会有所不同</p><p>debug通常称为调试版本，他包含调试信息，并且不做任何优化，便于程序员调试程序。所以文件要较大一点。</p><p>release称为发布版本，它往往是进行了各种优化，使的程序在代码大小和运行速度上都是最优的，以便用户很好的使用，无法进行调试，所以文件要较小一点，</p><h2 id="4调试的基本步骤："><a href="#4调试的基本步骤：" class="headerlink" title="4调试的基本步骤："></a>4调试的基本步骤：</h2><p>1发现程序错误的存在</p><p>2以隔离、消除等方式对错误进行定位</p><p>3确定错误产生的原因</p><p>5提出纠正错误的解决办法</p><p>6对程序错误予以改正，重新测试</p><p>7测试完成，解决错误7</p><hr><p>1程序员写程序（发现错误代价最小）——交给——2软件测试人员——交给——3用户（可以反馈问题，代价比较大，给用户带来损失）</p><hr><h2 id="5windows环境调试介绍"><a href="#5windows环境调试介绍" class="headerlink" title="5windows环境调试介绍"></a>5windows环境调试介绍</h2><p>vs快捷键</p><p>f5——启动调试，和f9配合使用，单独使用不好用，快速跳到问题可能出现的地方。跳到执行逻辑的下一个断点</p><p>f9——设置（切换）断点，在按就消失了，断点——代码执行到断点处就停止下来</p><p>f10——逐过程</p><p>f11——每次都执行一个语句，但是这个快捷键可以使我们的执行逻辑进入到函数内部（这是最常用的）</p><p>shilt+f11——从函数内部跳出来</p><p>Shift+f5——停止调试</p><p>调试的时候程序当前的信息，自动窗口——打开后，将程序执行至此，显示离得较近的变量，让你来观察，去掉此时此刻不想观察的信息</p><h2 id="6调试实例"><a href="#6调试实例" class="headerlink" title="6调试实例"></a>6调试实例</h2><h2 id="7如何写出好（易于调试）的代码"><a href="#7如何写出好（易于调试）的代码" class="headerlink" title="7如何写出好（易于调试）的代码"></a>7如何写出好（易于调试）的代码</h2><h2 id="8编程常见的错误"><a href="#8编程常见的错误" class="headerlink" title="8编程常见的错误"></a>8编程常见的错误</h2><h1 id="35结构体"><a href="#35结构体" class="headerlink" title="35结构体"></a>35结构体</h1><h2 id="1结构体类型的声明"><a href="#1结构体类型的声明" class="headerlink" title="1结构体类型的声明"></a>1结构体类型的声明</h2><p>什么是结构（结构体）</p><p>结构是一些值的集合，这些值称为成员变量，结构的每个成员可以是不同类型的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//描述一个学生的一些数据信息</span></span><br><span class="line"><span class="comment">//名字</span></span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line"><span class="comment">//电话</span></span><br><span class="line"><span class="comment">//性别</span></span><br><span class="line"> <span class="keyword">typedef</span>(给这个类型重新起个名字)<span class="class"><span class="keyword">struct</span> <span class="title">stu</span>  //<span class="keyword">struct</span>是结构体关键字   这里的<span class="title">stu</span>叫做结构体标签  <span class="title">Struct</span> <span class="title">stu</span>是我们创建的结构体类型</span></span><br><span class="line"><span class="class">    //创建类型的时候没有占用内存空间</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员变量 member -list</span></span><br><span class="line">    <span class="keyword">char</span>  name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> age ;</span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> sexp[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;s1,s2,s3;<span class="comment">//这里的分号不能少，结构体声明是一条语句</span></span><br><span class="line"><span class="comment">//这里的s1s2s3是三个全局的结构体变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>(给这个类型重新起个名字)<span class="class"><span class="keyword">struct</span> <span class="title">stu</span>  //<span class="keyword">struct</span>是结构体关键字   这里的<span class="title">stu</span>叫做结构体标签  <span class="title">Struct</span> <span class="title">stu</span>是我们创建的结构体类型</span></span><br><span class="line"><span class="class">    //创建类型的时候没有占用内存空间</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员变量 member -list</span></span><br><span class="line">    <span class="keyword">char</span>  name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> age ;</span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> sexp[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;STU;<span class="comment">//现在就可以用STU创建临时变量 ，这个STU是类型，上面的s是变量 ，现在这个STU就可以单独使用了</span></span><br><span class="line"><span class="keyword">int</span> mian</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span><span class="comment">//这个s是局部的结构体变量</span></span><br><span class="line">    <span class="comment">//当你拿这个结构体类型创建一个叫做s的变量，这里就占用了内存空间</span></span><br><span class="line">    <span class="comment">//就像盖房子，光有了图纸，没有具体的房子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构成员的类型：结构的成员可以是标量、数组、指针、甚至是其他结构体。</p><h2 id="2结构体初始化和定义"><a href="#2结构体初始化和定义" class="headerlink" title="2结构体初始化和定义"></a>2结构体初始化和定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在创建结构体变量的时候给他一个值，就是结构体初始化，同其他变量的初始化</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu s1 = &#123; <span class="string">&quot;张3&quot;</span> , <span class="number">20</span> , <span class="string">&quot;1231564215&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;；<span class="comment">//局部变量，这个结构体类似于Python的字典</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">c</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> c; </span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> b ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>]</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> <span class="title">c</span> ;</span></span><br><span class="line"><span class="keyword">char</span> *pc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体里面放置结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> <span class="title">T</span> =</span> &#123;<span class="string">&quot;HEHE&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;HELOW WORLD&quot;</span>,<span class="string">&quot;3.14&quot;</span>,ARR&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,t.ch);</span><br><span class="line">    <span class="comment">//这里通过.来进行层级区分</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3结构体成员访问"><a href="#3结构体成员访问" class="headerlink" title="3结构体成员访问"></a>3结构体成员访问</h2><p>结构体.成员 进行访问</p><h2 id="4结构体传参"><a href="#4结构体传参" class="headerlink" title="4结构体传参"></a>4结构体传参</h2><p>函数也可以调用</p><p>–&gt;箭头</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210206141542207.png" alt="image-20210206141542207"></p><p>打印结构体数据，在这里封装一个函数</p><p>print1和Print2哪个更好？</p><p>print1要再内存中再进行一份临时拷贝的形参，无论是速度还是性能都要逊于Print2,</p><p>而Pirnt2无论结构体多大最多8个字节（地址），所以Print2的系统开销更小一些。</p><p>综上所述，print2更好</p><hr><p>用更加正规的话说——函数传参的时候，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销会比较大，所以导致性能的下降。</p><p>函数传参的时候的压栈是什么呢？</p><p>内存在系统中是一块大的空间，里面分为几个空间。</p><p>栈区，堆区，静态区（学习计算机语言的时候所讲的）</p><p>栈区——局部变量、函数的形式参数、函数调用也开辟空间</p><p>堆区——动态内存分配、malloc/free、realloc、calloc、</p><p>静态区——全局变量、静态变量</p><p>每一次函数调用都要开辟空间</p><hr><p>涉及到数据结构的东西：</p><p>——————线性数据结构</p><p>顺序表——在内存中连续出现</p><p>链表——拿一条链子将多个数据串连起来</p><p>栈——顶上进顶上出，</p><p>队列</p><p>结论：结构体传参的时候，要传结构体的地址。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="36数据的存储"><a href="#36数据的存储" class="headerlink" title="36数据的存储"></a>36数据的存储</h1><p>就像是初级阶段类型的深入讲解</p><h2 id="1数据类型详细介绍"><a href="#1数据类型详细介绍" class="headerlink" title="1数据类型详细介绍"></a>1数据类型详细介绍</h2><p>c语言的类型分为两类</p><p>1内置类型：语言本身具有的类型</p><p>char </p><p>short</p><p>long</p><p>int </p><p>2自定义类型（构造类型）：</p><hr><p>类型的意义：</p><p>1使用这个类型开辟内存空间的大小（大小决定了使用范围）</p><p>2如何看待内存空间的视角（放置的东西不同，存进去的东西也不同）</p><hr><p>  整型家族</p><p>char</p><p>​    unsign char（无符号）  </p><p>​    signed  char (有符号)</p><p>剩下的同上Char分为有无符号</p><p>short</p><p>int</p><p>long</p><hr><p>浮点型家族</p><p>float单精度浮点型</p><p>double双精度浮点型</p><hr><p>构造类型（自定义类型）</p><p>数组类型</p><p>结构体类型Struct</p><p>枚举类型enum</p><p>联合类型union</p><hr><p>指针类型</p><p>创建的大小都是4个字节，统一的</p><p>目的是为了存放地址</p><p>int *p</p><p>char *</p><p>float *<br>viod *——无具体类型的指针——空指针</p><hr><p>空类型 ——void</p><p>当你写函数的时候，你不想调用他，void 函数()</p><p>通常应用于函数的返回类型，函数的参数，指针类型</p><p>如果你明确想不用这个函数传参</p><p>就在函数后面的参数部分写一个void</p><h2 id="2整型在内存中的存储：原码、反码、补码"><a href="#2整型在内存中的存储：原码、反码、补码" class="headerlink" title="2整型在内存中的存储：原码、反码、补码"></a>2整型在内存中的存储：原码、反码、补码</h2><p>变量的创建是要在内存中开辟空间的。空间的大小是根据不同的类型而决定的。</p><p>下面我们将要了解到数据在开辟内存空间中到底是如何存储的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反码、补码、原码的概念</p><p>计算机中有符号数（指的是整型有符号数字）有三种表示方法，即原码、补码、反码</p><p>三种表示方法均有符号位和数值位两部分，符号位都是用0表示正，用1表示负，而数值为三种表示方法各不相同。</p><p>（无符号数也可以说有着三种表示形式，只不过这三种表示在表示数字的时候是相同的）</p><p>（有符号数又分为正负数，其中的正数他的原凡补码也都是相同的，负数的原反补才是不相同的）</p><hr><p>原码：直接将二级制按照正负数的形式翻译成二进制就可以。</p><p>反码：将原码的符号位不变，其他位一次按位取反就可以得到了。</p><p>补码：反码+1得到补码</p><hr><p>对于整型来说：数据存放在内存中其实存放的就是二进制序列的补码</p><p>补码的出现让计算机中的加法减法按照统一的方法处理。</p><hr><p>复习：</p><p>整数分为有符号数和无符号数</p><p>有符号数-正数-原反补相同</p><p>​                -负数原反补不同-都要进行计算</p><p>无符号数-不区分正负-原反补相同</p><hr><h2 id="3大小端字节序介绍及判断"><a href="#3大小端字节序介绍及判断" class="headerlink" title="3大小端字节序介绍及判断"></a>3大小端字节序介绍及判断</h2><p>十六进制的数字在内存中是倒着存储的，这里引入大小端的概念</p><p>什么是大端小端？<br>大端 （存储）模式 ，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中</p><p>小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位，保存在内存的高地址中。</p><p>大端字节序存储模式</p><p>小端字节序存储模式</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计一个小程序判断当前机器的字节序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//写一段代码告诉我们当前机器的字节序是什么</span></span><br><span class="line"><span class="comment">//拿出四个字节中的第一个内容是什么</span></span><br><span class="line"><span class="comment">//假设a里面的是20</span></span><br><span class="line"><span class="comment">//推测如果是小端和大端分别是什么</span></span><br><span class="line"><span class="comment">//拿出的第一个字节是什么 14 or 00 ?</span></span><br><span class="line"><span class="comment">//所以说这四个字节我们就看第一个字节是什么</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//那么如何拿到第一个字节的内容呢?</span></span><br><span class="line"><span class="comment">//这里提到，指针的类型规定了，指针解引用操作一下能访问几个字节</span></span><br><span class="line"><span class="comment">//Char类型的指针解引用向后就访问一个字节的内容，拿到这一个字节的内容再判断它是什么</span></span><br><span class="line"><span class="keyword">char</span>* p = ( <span class="keyword">char</span>* ) &amp;a;</span><br><span class="line"><span class="comment">//强制类型转换，a的地址取出来，值不变，类型变成char*,放到p里面去</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数的作用很干净</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_sys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span>* p = (<span class="keyword">char</span>*)&amp;a;</span><br><span class="line"><span class="keyword">if</span> (*p == <span class="number">1</span>)</span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">char</span>*)&amp;a;</span><br><span class="line"><span class="comment">//直接对char*的地址进行解引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//写一段代码告诉我们当前机器的字节序是什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复习：指针类型的意义？</p><p>1指针类型决定了，指针解引用操作能访问几个字节</p><p>2指针类型决定了指针加1，或者减1操作时到底加的是几个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）以下代码输出什么？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span> b = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d , c= %d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输出结果为a = -1 , b = -1 , c= 255</span></span><br><span class="line"><span class="comment">//为什么会有一个255呢?</span></span><br><span class="line"><span class="comment">//默认有符号位的所以前两个一样</span></span><br><span class="line"><span class="comment">//-1的补码全是1</span></span><br><span class="line"><span class="comment">//char类型 8个比特位</span></span><br><span class="line"><span class="comment">//11111111</span></span><br><span class="line"><span class="comment">//打印出整型来，这里涉及到整型提升</span></span><br><span class="line"><span class="comment">//unsigned char无符号数整型提升</span></span><br><span class="line"><span class="comment">//高位补0</span></span><br><span class="line"><span class="comment">//高位是0——是正数</span></span><br><span class="line"><span class="comment">//正数的原凡补码相同——再将二进制转换为十进制的数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码输出什么？  (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">-128</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//%u表示数据按十进制无符号数字</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//10000000  二进制序列表示</span></span><br><span class="line"><span class="comment">//00000000000000000000000010000000 原</span></span><br><span class="line"><span class="comment">//11111111111111111111111101111111 反</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000000 补</span></span><br><span class="line"><span class="comment">//存到a里面，8哥比特位</span></span><br><span class="line"><span class="comment">//1000000</span></span><br><span class="line"><span class="comment">//打印整数-整型提升</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000000</span></span><br><span class="line"><span class="comment">//无符号 原补反相同</span></span><br><span class="line"><span class="comment">//得到结果数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char-signed char </p><p>​       -unsigned char 1个字节 8个比特位</p><p>有符号的char的范围是 -128————127</p><p>无符号的char的范围是0 - 255</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">按照补码的形式进行运算，最后格式化成为有符号整数</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">-20</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>，i + j);</span><br><span class="line"><span class="comment">//结果是  -10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">9</span> ;  i &gt;= <span class="number">0</span> ; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果：死循环</span></span><br><span class="line">当<span class="number">-1</span>被认为成无符号数的时候，他就是无穷大的</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">-1</span> -i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>.<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是：255</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span> ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是：死循环(永远成立)</span></span><br></pre></td></tr></table></figure><hr><h2 id="4浮点型在内存中的存储解析"><a href="#4浮点型在内存中的存储解析" class="headerlink" title="4浮点型在内存中的存储解析"></a>4浮点型在内存中的存储解析</h2><p>（本片段模糊）</p><p>常见的浮点数：3.14159 1E10 </p><p>浮点数家族包括：float double long double 类型。浮点数的表示范围：floar.h中定义浮点数存储;</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210228112527344.png" alt="image-20210228112527344"></p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210228120100068.png" alt="image-20210228120100068"></p><p>当你要存储一个二进制序列的时候，先把他用二进制表示</p><p>IEEE754规定：对于32位的浮点数，最高的1位是符号位s，接着的8位是质数E，剩下的23位为有效数字M</p><p><strong>E全为0</strong></p><p>这时，浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示-+0,以及接近于0的很小的数字。</p><p><strong>E全为0</strong></p><p>这时，如果有有效数字M全为0，表示-+无穷大（正负取决于符号位s）</p><h1 id="37指针（详解）"><a href="#37指针（详解）" class="headerlink" title="37指针（详解）"></a>37指针（详解）</h1><p>指针的进阶</p><p> 指针知识回顾</p><p>1指针就是个变量，用来存放地址，地址唯一标识一块内存空间</p><p>2指针的大小是固定的4/8个字节（32位平台/64位平台）</p><p>3指针是有类型，指针的类型决定了指针的+-整数的步长，指针解引用操作时候的权限</p><p>4指针的运算</p><p>由此我们进入指针的进阶</p><h2 id="1字符指针"><a href="#1字符指针" class="headerlink" title="1字符指针"></a>1字符指针</h2><p>在指针的类型中，我们知道有一种指针类型为字符指针char*                   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *pc = arr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出都是abcdef</span></span><br></pre></td></tr></table></figure><p>​                                      </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">    <span class="comment">//输出abcdef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//什么意思 abcdef是一个常量字符串，其实就是把a的地址赋给了p</span></span><br></pre></td></tr></table></figure><p>​                  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr2[] = <span class="string">&quot;acbdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* p2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>( arr1 = arr2 )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：haha</span></span><br><span class="line">arr1 <span class="number">2</span> 是两个不同的数组，数组名是首元素的地址，这两个地址在内存不同的空间</span><br></pre></td></tr></table></figure><h2 id="2指针数组"><a href="#2指针数组" class="headerlink" title="2指针数组"></a>2指针数组</h2><p>指针数组其实是数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么数组就存放什么</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//整型数组</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//字符数组</span></span><br><span class="line">    <span class="keyword">int</span>* parr[<span class="number">4</span>];<span class="comment">//存放整型指针的数组  - 指针数组</span></span><br><span class="line">    <span class="keyword">char</span>* pch[<span class="number">5</span>] ; <span class="comment">//存放字符型指针的数组 - 指针数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line">int c &#x3D; 30;</span><br><span class="line">int d &#x3D; 40;</span><br><span class="line">int* arr[4] &#x3D; &#123;&amp;a,&amp;b,&amp;c,&amp;d&#125;;</span><br><span class="line">for(i &#x3D; 0 ; i &lt; 4 ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"> printf(&quot;%d&quot;，*(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;结果输出为10 20 30 40 </span><br></pre></td></tr></table></figure><h2 id="3指针数组"><a href="#3指针数组" class="headerlink" title="3指针数组"></a>3指针数组</h2><h2 id="4数组传参和指针传参"><a href="#4数组传参和指针传参" class="headerlink" title="4数组传参和指针传参"></a>4数组传参和指针传参</h2><h2 id="5函数指针"><a href="#5函数指针" class="headerlink" title="5函数指针"></a>5函数指针</h2><h2 id="6函数指针数组"><a href="#6函数指针数组" class="headerlink" title="6函数指针数组"></a>6函数指针数组</h2><h2 id="7指向函数指针数组的指针"><a href="#7指向函数指针数组的指针" class="headerlink" title="7指向函数指针数组的指针"></a>7指向函数指针数组的指针</h2><h2 id="8回调函数"><a href="#8回调函数" class="headerlink" title="8回调函数"></a>8回调函数</h2><h2 id="9函数和数组面试题的解析"><a href="#9函数和数组面试题的解析" class="headerlink" title="9函数和数组面试题的解析"></a>9函数和数组面试题的解析</h2>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C语言 </tag>
            
            <tag> -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制之间的转换</title>
      <link href="2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><p>0123456789</p><p>这是我们最了解的进制，数学里面都是通用十进制进行计算的</p><p>进位规则：满十进一</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>01</p><p>进位规则：逢二进一</p><p>借位规则：借1当2</p><p>计算机中的二进制是一个非常微小的开关</p><p>开表示1，关表示0</p><h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><p>RGB</p><p>表示0-9 A-F(10-15)</p><p>例题引入：（1）10进制的16用十六进制怎么表示——10</p><p>（2）十六进制的19再进上去1位——1a</p><p>进制规则：满16进1</p><h1 id="进制转换方法"><a href="#进制转换方法" class="headerlink" title="进制转换方法"></a>进制转换方法</h1><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>二进制B，十进制D，十六进制H</p><p>（1）二进制转换为10进制</p><p>111000——从右以0开始，各位分别乘以2的几次方</p><p>（2）十进制转换为二进制（用1和0表示这个数）</p><p>整除法，除以2，从下到上写出来</p><p>验证参考（1）</p><p>（3）十六进制转换为十进制</p><p>B3H——3*16º+12x16</p><p>​    (4)十进制转换为十六进制</p><p>除16，；例如10余2,结果就是A2</p><p>（5）二进制转换为16进制</p><p>例如：11001011，从最后以为开始4个为一组分别变成两个十进制数，然后再将连个十进制的数变成16进制算完加个H，</p><p>不够就在前面舔0凑四位数（直接变成10进制数）</p><p>（6）十六进制转换为二进制</p><p>例如：A1H</p><p>分别拆开来 </p><p>A-10-1010</p><p>1-0001</p><p>得到10100001B</p><p>推荐视频</p><p><a href="https://www.bilibili.com/video/BV1As411673Q?from=search&amp;seid=8951961097421715023">https://www.bilibili.com/video/BV1As411673Q?from=search&amp;seid=8951961097421715023</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -计算机 </tag>
            
            <tag> -进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog_重建</title>
      <link href="2021/03/08/blog-%E9%87%8D%E5%BB%BA/"/>
      <url>2021/03/08/blog-%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>​        到了今天，第二次重建的差不多了，我才发现，上一次的三个文章被我误删了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
            <tag> -经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
