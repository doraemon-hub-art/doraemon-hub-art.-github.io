<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://doraemon2.xyz/atom.xml" rel="self"/>
  
  <link href="http://doraemon2.xyz/"/>
  <updated>2021-10-15T15:13:06.869Z</updated>
  <id>http://doraemon2.xyz/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【栈】实现表达式求值</title>
    <link href="http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-10-15T15:03:52.000Z</published>
    <updated>2021-10-15T15:13:06.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【栈】实现表达式求值"><a href="#【栈】实现表达式求值" class="headerlink" title="【栈】实现表达式求值"></a>【栈】实现表达式求值</h1><h2 id="思路-amp-amp-理解-amp-amp-注意"><a href="#思路-amp-amp-理解-amp-amp-注意" class="headerlink" title="思路 &amp;&amp; 理解 &amp;&amp; 注意"></a>思路 &amp;&amp; 理解 &amp;&amp; 注意</h2><blockquote><p>给定一串表达式，字符串类型，依次遍历从头开始遍历每一个位置的内容。</p><p>第一个数字，第一个运算符先直接往栈里面push(两个不同的栈)<br>接着走，遇到数push进来，接着走，遇到运算符，和前面那个已经push进栈的运算符进行优先级比较，如果当前运算符优先级大，那就接着push进来，反之，pop出栈，运算前面的式子之和(之后判断运算符栈中是否还有内容，并且当前运算符的优先级是否小于等于已有的运算符，小于等于就接着运算前面的表达式，完成push当前运算符，反之继续往下遍历push…pop…),直到最后一个元素。</p><p>注意;</p><p>一直发生变化的是rdata-右操作数,所以每次压完运算符找新的右操作数都会将他置空，准备重新赋值。</p><p>没有添加括号优先级运算。</p></blockquote><h2 id="expression-h"><a href="#expression-h" class="headerlink" title="expression.h"></a>expression.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Postion</span>//地图中点的坐标,这个栈中存的元素就是点的坐标</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _x;</span><br><span class="line"><span class="keyword">int</span> _y;</span><br><span class="line">&#125;Postion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;</span><br><span class="line">DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S, DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶元素         </span></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意何时自增何时不自增</span></span><br><span class="line"><span class="keyword">return</span> S.top - <span class="number">1</span>;<span class="comment">//返回栈顶元素的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] S.base;</span><br><span class="line">S.top = S.base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="experssion-cpp"><a href="#experssion-cpp" class="headerlink" title="experssion.cpp"></a>experssion.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;expression.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较 lhs 的优先级是否高于 rhs，rhs 表示栈顶的符号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLarger</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;lhs, <span class="keyword">const</span> <span class="keyword">int</span> &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rhs == <span class="string">&#x27;+&#x27;</span> || rhs == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (lhs == <span class="string">&#x27;*&#x27;</span> || lhs == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算左右操作数+运算符 (对运算符求值)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">result = left + right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">result = left - right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">result = left * right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">result = left / right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算主体</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack data_stack;<span class="comment">//操作数堆栈</span></span><br><span class="line">Stack opt_stack;<span class="comment">//运算符堆栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">0</span>;<span class="comment">//0接收左操作数，1接收操作符，2,接收右操作数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左右操作数</span></span><br><span class="line"><span class="comment">//一直在发生变化的是右操作符</span></span><br><span class="line"><span class="keyword">int</span> ldata = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rdata = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> last_opt = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化堆栈</span></span><br><span class="line">initStack(data_stack);</span><br><span class="line">initStack(opt_stack);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第一个开始遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isspace</span>(input[i]))<span class="comment">//跳过空白符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不是空白，第一次到这里，默认是status = 0是左操作数</span></span><br><span class="line"><span class="keyword">switch</span> (status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//isdigit-判断是否是十进制数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//得到做操作数左操作数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左操作数是如何得到的</span></span><br><span class="line"><span class="comment">遍历字符串，第一个得到的肯定是左操作数，但我们不知道它是几位数。默认ldata为0</span></span><br><span class="line"><span class="comment">其实就是——这个数是几位，这个if()条件就能进来几次</span></span><br><span class="line"><span class="comment">累加在ldata中，得到左操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(input[i]))</span><br><span class="line">&#123;</span><br><span class="line">ldata *= <span class="number">10</span>;</span><br><span class="line">ldata += input[i] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//求出该位上这个数是几</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么时候执行到这里？</span></span><br><span class="line"><span class="comment">//第一个数字得到之后，也就是得到了ldata之后</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">pushStack(data_stack, ldata);<span class="comment">//左操作数进栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在input[i]的位置是运算符</span></span><br><span class="line"><span class="comment">//因为结束case结束之后，出来for循环还得++，这样就错过这个运算符了</span></span><br><span class="line"><span class="comment">//为了保证到case 1的语句中此时的input[i]是运算符，所以要字先--</span></span><br><span class="line">i--;</span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span>;<span class="comment">//操作数确定了，下一个就该运算符了。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//遇到操作符</span></span><br><span class="line"><span class="keyword">if</span> (input[i] == <span class="string">&#x27;+&#x27;</span> || input[i] == <span class="string">&#x27;-&#x27;</span> || input[i] == <span class="string">&#x27;*&#x27;</span> || input[i] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(opt_stack))<span class="comment">//第一个运算符暂时不做任何处理，先入栈保存</span></span><br><span class="line">&#123;</span><br><span class="line">pushStack(opt_stack, input[i]);<span class="comment">//第一个操作符进栈</span></span><br><span class="line"><span class="comment">//运算符进栈存的是对应符号的ASCII码</span></span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//状态标记为2 下一个为右操作数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//不是第一个运算符，那么就将这个与之前的做优先级比较，如果这个优先级高，那就先算这个</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前运算符高于前一个运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前input[i]运算符  栈里面的存的第一个运算符</span></span><br><span class="line"><span class="keyword">if</span> (isLarger(input[i], *getTop(opt_stack)))<span class="comment">//如果当前运算符的优先级高于前一个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//压进栈</span></span><br><span class="line">pushStack(opt_stack, input[i]);<span class="comment">//操作符入栈</span></span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//下一个是右操作数</span></span><br><span class="line">rdata = <span class="number">0</span>;<span class="comment">//将右操作数置空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//当前运算符的优先级小于(等于)前一个(栈顶)运算符。则计算前一个运算符的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//拿到操作符 和 前面两个左右操作数</span></span><br><span class="line"><span class="comment">//先取到右边的，在取左边的(倒着拿出来)</span></span><br><span class="line"><span class="comment">//运算的时候注意参数传递顺序</span></span><br><span class="line">popStack(data_stack, right);</span><br><span class="line">popStack(data_stack, left);</span><br><span class="line">popStack(opt_stack, opt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = operate(left, right, opt);</span><br><span class="line">pushStack(data_stack, result);<span class="comment">//得到一部分的结果压进栈</span></span><br><span class="line">&#125; <span class="keyword">while</span> (!isEmpty(opt_stack) &amp;&amp; !isLarger(input[i],*getTop(opt_stack)));<span class="comment">//自动再往前判断，是否可以对前面的表达式进行运算</span></span><br><span class="line"><span class="comment">//运算符栈不为空 并且当前运算符优先级小于等于栈顶运算符(前面的)那么就能一并进行运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将当前input[i]运算符压入栈</span></span><br><span class="line">pushStack(opt_stack, input[i]);</span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//去右操作数</span></span><br><span class="line">rdata = <span class="number">0</span>;<span class="comment">//置空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (input[i] == <span class="string">&#x27;=&#x27;</span>)<span class="comment">//到达结尾</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">popStack(data_stack, rdata);</span><br><span class="line">popStack(data_stack, ldata);</span><br><span class="line">popStack(opt_stack, opt);</span><br><span class="line"></span><br><span class="line">result = operate(ldata, rdata, opt);</span><br><span class="line">pushStack(data_stack, result);</span><br><span class="line">&#125; <span class="keyword">while</span> (!isEmpty(opt_stack));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回得到最后结果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;运算符输入错误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//右操作数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(input[i]))<span class="comment">//同上求左操作数，求出rdata右操作数</span></span><br><span class="line">&#123;</span><br><span class="line">rdata *= <span class="number">10</span>;</span><br><span class="line">rdata += input[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pushStack(data_stack, rdata);<span class="comment">//右操作数入栈</span></span><br><span class="line">i--;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;12+3*6/3+4*5=&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calculate(str) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//38</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【栈】实现表达式求值&quot;&gt;&lt;a href=&quot;#【栈】实现表达式求值&quot; class=&quot;headerlink&quot; title=&quot;【栈】实现表达式求值&quot;&gt;&lt;/a&gt;【栈】实现表达式求值&lt;/h1&gt;&lt;h2 id=&quot;思路-amp-amp-理解-amp-amp-注意&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://doraemon2.xyz/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【栈】实现迷宫求解</title>
    <link href="http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3/"/>
    <id>http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3/</id>
    <published>2021-10-15T06:58:35.000Z</published>
    <updated>2021-10-15T07:40:23.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迷宫求解"><a href="#迷宫求解" class="headerlink" title="迷宫求解"></a>迷宫求解</h1><p>从入口进入开始， 向不同方向试探，走到死胡同就退回。</p><blockquote><p>找迷宫通路需要使用回溯法，找迷宫通路是对回溯法的一个很好的应用，实现回溯的过程用到数据结构—<strong>栈</strong>！</p></blockquote><blockquote><p>回溯法：</p><p>​        对一个包括有很多个结点，每个结点有若干个搜索分支的问题，把原问题分解为若干个子问题求解的 算法；当搜索到某个结点发现无法再继续搜索下去时，就让搜索过程回溯(回退)到该节点的前一个结点，继续 搜索该节点外的其他尚未搜索的分支；如果发现该结点无法再搜索下去，就让搜索过程回溯到这个结点的前一 结点继续这样的搜索过程；这样的搜索过程一直进行到搜索到问题的解或者搜索完了全部可搜索分支没有解存 在为止</p></blockquote><h2 id="思路-amp-解释"><a href="#思路-amp-解释" class="headerlink" title="思路&amp;解释"></a>思路&amp;解释</h2><blockquote><p>二维数组作为地图。</p><p>一开始确定一个入口——需要判定入口是否合法。</p><p>先将入口位置坐标压入栈，只要栈中不为空，那么每次判断移动方向前都要判断当前位置是不是出口。然后由此坐标开始向四周判断，判断哪有路可以走，是路就开始移动(cur-当前位置),压进栈……,走到死胡同，说明四周都不能走了，开始边popStack边向四周判断，不放过来时路上的任何一个遗漏的可能出口路径，反之，找到出口直接return true。如果该迷宫没有出口，结果栈中的元素将被全部pop出来，栈空，return false;</p><p>相关细节如下代码所示</p></blockquote><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/images/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.assets/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.gif" alt="迷宫求解"></p><blockquote><p>实际探索路径中，有的”胡同没去探索”。</p></blockquote><h2 id="maze-h"><a href="#maze-h" class="headerlink" title="maze.h"></a>maze.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Postion</span>//地图中点的坐标,这个栈中存的元素就是点的坐标</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _x;</span><br><span class="line"><span class="keyword">int</span> _y;</span><br><span class="line">&#125;Postion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Postion DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;</span><br><span class="line">DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S,DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶元素         </span></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意何时自增何时不自增</span></span><br><span class="line"><span class="keyword">return</span> S.top<span class="number">-1</span>;<span class="comment">//返回栈顶元素的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] S.base;</span><br><span class="line">S.top = S.base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maze-cpp"><a href="#maze-cpp" class="headerlink" title="maze.cpp"></a>maze.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;maze.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW  6<span class="comment">//行</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL  6<span class="comment">//列</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Maze</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL];</span><br><span class="line">&#125;Maze;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据给出给出的地图数据初始化结构体地图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initMaze</span><span class="params">(Maze&amp; m, <span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line">m.<span class="built_in">map</span>[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印迷宫(地图)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMaze</span><span class="params">(Maze&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m.<span class="built_in">map</span>[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是有效的入口</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidEnter</span><span class="params">(Maze* m,Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);<span class="comment">//断言-里面的表达式为0直接终止程序,注意里面的内容是什么</span></span><br><span class="line"><span class="comment">//只要入口在四个边界上就是合法的,并且是1(道路)</span></span><br><span class="line"><span class="keyword">if</span> (((enter._x == <span class="number">0</span> || enter._x == ROW - <span class="number">1</span>) || (enter._y == <span class="number">0</span> || enter._y == COL - <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否是出口</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isVaildExit</span><span class="params">(Maze* m, Postion cur, Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);</span><br><span class="line"><span class="comment">//该结点不能是入口点，除了入口点，在边界上就是合法出口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((cur._x != enter._x || cur._y != enter._y) &amp;&amp; ((cur._x == <span class="number">0</span> || cur._x == ROW - <span class="number">1</span>) || (cur._y == <span class="number">0</span> || cur._y == COL - <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前结点的下一个结点是否能走通-是不是可以走的点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNextPass</span><span class="params">(Maze* m, Postion cur, Postion next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);</span><br><span class="line"><span class="comment">//判断next是不是cur的下一个结点</span></span><br><span class="line"><span class="comment">//同一行相邻或者同一列相邻</span></span><br><span class="line"><span class="keyword">if</span> (((next._x == cur._x) &amp;&amp; ((next._y == cur._y + <span class="number">1</span>) || (next._y == cur._y - <span class="number">1</span>)))</span><br><span class="line">|| ((next._y == cur._y) &amp;&amp; ((next._x = cur._x + <span class="number">1</span>) || (next._x = cur._x - <span class="number">1</span>))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确实是cur的下一个结点(相邻的 )</span></span><br><span class="line"><span class="comment">//判断这个点是不是在迷宫里</span></span><br><span class="line"><span class="comment">//合法坐标并且那个位置的值是1</span></span><br><span class="line"><span class="keyword">if</span> (((next._x &gt;= <span class="number">0</span> &amp;&amp; next._x &lt; ROW) &amp;&amp; (next._y &gt;= <span class="number">0</span> &amp;&amp; next._y &lt; COL)) </span><br><span class="line">&amp;&amp; (m-&gt;<span class="built_in">map</span>[next._x][next._y] == <span class="number">1</span>))</span><br><span class="line"><span class="comment">//最后的参数==1，不仅仅是看是否是可以走的位置(道路是1)，</span></span><br><span class="line"><span class="comment">//同时有了这个我们就不用倒着往往前走了(不走重复的路)，不是有效的结点不只是墙(0)</span></span><br><span class="line"><span class="comment">//走过的也不是有效结点，直接pop出栈，通过出栈来往前回退</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找迷宫通路</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PassMaze</span><span class="params">(Maze* m, Postion enter, Stack&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m &amp;&amp; isValidEnter(m, enter));</span><br><span class="line"></span><br><span class="line">Postion cur = enter;<span class="comment">//cur存储当前结点</span></span><br><span class="line">Postion next;<span class="comment">//下一个结点，从入口开始出发向四周移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先将入口压入栈中</span></span><br><span class="line">pushStack(s, cur);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[cur._x][cur._y] = <span class="number">2</span>;<span class="comment">//将入口值改为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环求解-当栈中还有路径时</span></span><br><span class="line"><span class="keyword">while</span> (!isEmpty(s))</span><br><span class="line">&#123;</span><br><span class="line">cur = *getTop(s);<span class="comment">//取到栈顶元素</span></span><br><span class="line"><span class="comment">//判断当前位置是否是出口</span></span><br><span class="line"><span class="keyword">if</span> (isVaildExit(m, cur, enter))<span class="comment">//注意参数传递顺序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//是出口直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不是出口继续在周围判断</span></span><br><span class="line"><span class="comment">//把cur当前刚才那个位置拿过来向四周判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先向左判断</span></span><br><span class="line">next = cur;</span><br><span class="line">next._y = cur._y - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m,cur,next))<span class="comment">//如果下一个结点走得通</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//走得通就走到那个位置-压进栈</span></span><br><span class="line">pushStack(s, next);</span><br><span class="line"><span class="comment">//走过的位置-标记</span></span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//之后</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走不通向另一个方向判断</span></span><br><span class="line"><span class="comment">//向右走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._y = cur._y + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._x = cur._x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向上走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._x = cur._x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//走到这里说明此结点的四个方向都走不通</span></span><br><span class="line"><span class="comment">//进行回溯</span></span><br><span class="line">Postion tmp;<span class="comment">//没用 临时接收</span></span><br><span class="line">popStack(s, tmp);<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//0-墙 1-路</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL] = &#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maze m;<span class="comment">//创建一个迷宫(地图)</span></span><br><span class="line">initMaze(m, <span class="built_in">map</span>);<span class="comment">//初始化迷宫</span></span><br><span class="line">printMaze(m);<span class="comment">//打印迷宫</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;_______&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迷宫入口</span></span><br><span class="line">Postion enter;</span><br><span class="line">enter._x = <span class="number">0</span>;</span><br><span class="line">enter._y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line">Stack s;<span class="comment">//用于保存走过的轨迹，便于回溯</span></span><br><span class="line">initStack(s);<span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = PassMaze(&amp;m, enter, s);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有解&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无解&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">printMaze(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/images/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.assets/image-20211015144121027.png" alt="image-20211015144121027"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>1.指针自增情况</p><p>2.参数传递顺序</p><p>3.F5是个好东西</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迷宫求解&quot;&gt;&lt;a href=&quot;#迷宫求解&quot; class=&quot;headerlink&quot; title=&quot;迷宫求解&quot;&gt;&lt;/a&gt;迷宫求解&lt;/h1&gt;&lt;p&gt;从入口进入开始， 向不同方向试探，走到死胡同就退回。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;找迷宫通路需要使用回溯法，找迷</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://doraemon2.xyz/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(18)【中等】删除链表的倒数第 N 个结点(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/13/LeetCode%E5%88%B7%E9%A2%98(18)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/13/LeetCode%E5%88%B7%E9%A2%98(18)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9(C++)/</id>
    <published>2021-10-13T13:28:33.000Z</published>
    <updated>2021-10-13T13:35:28.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h1><p><img src="https://img-blog.csdnimg.cn/cccef7ef54064a88b4cdce113fb09158.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>题目——[链接](<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode） (leetcode-cn.com)</a>)</p><h2 id="遍历统计方法"><a href="#遍历统计方法" class="headerlink" title="遍历统计方法"></a>遍历统计方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)<span class="comment">//空的直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count =  <span class="number">0</span>;<span class="comment">//统计个数</span></span><br><span class="line">        ListNode* tempnode = head;</span><br><span class="line">        ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">         <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tempnode)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempnode = head;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//一共就一个，也一并算到删除第一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//删除第一个结点之后的结点</span></span><br><span class="line">        <span class="comment">//循环拿到要删除结点的前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(prev != count -n)</span><br><span class="line">        &#123;</span><br><span class="line">            prev++;</span><br><span class="line">            <span class="comment">//此时已经到了要删除结点的前一个结点，break</span></span><br><span class="line">            <span class="keyword">if</span>(prev == count-n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有一个元素 or 删除第一个结点的时候得单独讨论,此方法不适用，越界了</span></span><br><span class="line">        <span class="comment">//由此可以理解为什么有的方法用了哨兵结点了，这样可以删除头结点</span></span><br><span class="line">        temp =tempnode-&gt;next;</span><br><span class="line">        tempnode-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="哨兵结点"><a href="#哨兵结点" class="headerlink" title="哨兵结点"></a>哨兵结点</h2><p>在上面方法的基础上加入一个哨兵结点。</p><p>哨兵结点的next指向head。</p><p>(LeetCode中的head都是带数据的)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)<span class="comment">//空的直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count =  <span class="number">0</span>;<span class="comment">//统计个数</span></span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">-1</span>;</span><br><span class="line">        ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* tempHead = <span class="keyword">new</span> ListNode;</span><br><span class="line">        ListNode* tempnode = head;</span><br><span class="line"></span><br><span class="line">        tempHead-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(tempnode)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempnode = tempHead;</span><br><span class="line">        <span class="keyword">while</span>(prev !=count-n)</span><br><span class="line">        &#123;</span><br><span class="line">            prev++;</span><br><span class="line">            <span class="keyword">if</span>(prev == count-n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempnode =tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp = tempnode-&gt;next;</span><br><span class="line">        tempnode-&gt;next=  temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span>   temp;</span><br><span class="line">        <span class="keyword">return</span> tempHead-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快慢指针-哨兵结点"><a href="#快慢指针-哨兵结点" class="headerlink" title="快慢指针+哨兵结点"></a>快慢指针+哨兵结点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//快慢指针都先指向新的头结点</span></span><br><span class="line">    <span class="comment">//快指针比慢指针先走n步</span></span><br><span class="line">    <span class="comment">//然后同时出发</span></span><br><span class="line">    <span class="comment">//当fast走到最后一个结点时，此时slow的下一个结点就是要删除的结点</span></span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* tempHead = <span class="keyword">new</span> ListNode;</span><br><span class="line">    ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    ListNode* slow = tempHead;</span><br><span class="line">    ListNode* fast =tempHead;</span><br><span class="line">    tempHead -&gt;next = head;</span><br><span class="line">    <span class="keyword">while</span>(count != n)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">while</span>(fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next;  </span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = slow-&gt;next;</span><br><span class="line">    slow-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>   temp;</span><br><span class="line">    <span class="keyword">return</span> tempHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;19-删除链表的倒数第-N-个结点&quot;&gt;&lt;a href=&quot;#19-删除链表的倒数第-N-个结点&quot; class=&quot;headerlink&quot; title=&quot;19. 删除链表的倒数第 N 个结点&quot;&gt;&lt;/a&gt;19. 删除链表的倒数第 N 个结点&lt;/h1&gt;&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-指针" scheme="http://doraemon2.xyz/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】堆(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/13/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/13/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++)/</id>
    <published>2021-10-13T03:10:03.000Z</published>
    <updated>2021-10-13T03:12:26.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012141012636.png" alt="image-20211012141012636"></p><blockquote><p>最大堆:最上面的结点数值最大</p><p>特点:<br>1.每个结点最多可以有两个结点</p><p>2.根结点的键值是所有结点中最大的，每个结点的值都比孩子的值大。</p><p>3.除了<strong>根节点</strong>没有兄弟结点，<strong>最后一个</strong>左子结点可以没有兄弟结点，其他结点必须有兄弟结点。(有这个限制，下面的求子结点和父结点的公式才能成立。)</p></blockquote><blockquote><p>最小堆:最上面的结点数值最小….其他同最大堆</p></blockquote><hr><p><strong>堆是最有个性的树，用数组表示的树。</strong></p><hr><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012142229662.png" alt="image-20211012142229662"></p><hr><h2 id="在数组中快速创建堆"><a href="#在数组中快速创建堆" class="headerlink" title="在数组中快速创建堆"></a>在数组中快速创建堆</h2><p>左图——》右图</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012143038239.png" alt="image-20211012143038239"></p><blockquote><p>1.找到最后一个结点的父结点，(该父结点)与其子结点进行比较大小，若某个子结点大于父结点，则与该父结点交换位置。(就是从最后一个非叶子结点开始进行调整，(向下调整就是找到该父结结点的子结点，进行调整。))</p><p>2.再移动到前一个父结点，进行上述操作。</p><p>3……    </p></blockquote><hr><p>补充:static修饰的全局函数</p><blockquote><p>一个普通的全局的静态函数。. 这样的static函数与普通函数的区别是：用static修饰的函数，限定在本源码文件中，不能被本源码文件以外的代码文件调用。</p></blockquote><p>链接——<a href="https://www.cnblogs.com/muyi23333/articles/13533016.html#:~:text=static%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9A%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%EF%BC%8C%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E6%9C%89%E4%B8%A4%E7%A7%8D%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%85%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9D%A5%E5%88%86%E7%B1%BB%EF%BC%9A.%20%E5%A6%82%E6%9E%9C%E8%BF%99%E4%B8%AA%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%B1%BB%E9%87%8C%EF%BC%8C%E9%82%A3%E4%B9%88%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%EF%BC%9B%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9C%A8%E4%BA%8E%EF%BC%9A%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%8D%E4%BC%9A%E8%AE%BF%E9%97%AE%E6%88%96%E8%80%85%E4%BF%AE%E6%94%B9%E4%BB%BB%E4%BD%95%E5%AF%B9%E8%B1%A1%EF%BC%88%E9%9D%9Estatic%EF%BC%89%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E3%80%82.%20%E5%85%B6%E5%AE%9E%E5%BE%88%E5%A5%BD%E7%90%86%E8%A7%A3%EF%BC%8C%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98,%28%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%29%E5%B1%9E%E4%BA%8E%E7%B1%BB%E6%9C%AC%E8%BA%AB%EF%BC%8C%E5%9C%A8%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E4%BC%9A%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E7%9B%B4%E6%8E%A5%E5%8E%BB%E8%AE%BF%E9%97%AE%EF%BC%9B%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%EF%BC%88%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%EF%BC%89%E5%B1%9E%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%AA%E6%9C%89%E5%9C%A8%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%EF%BC%88%E5%88%9B%E5%BB%BA%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%EF%BC%89%E6%97%B6%E6%89%8D%E4%BC%9A%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%89%E5%8E%BB%E8%AE%BF%E9%97%AE%E3%80%82.%20%E5%A6%82%E6%9E%9C%E5%AE%83%E4%B8%8D%E6%98%AF%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%B1%BB%E4%B8%AD%EF%BC%8C%E9%82%A3%E4%B9%88%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E5%85%A8%E5%B1%80%E7%9A%84%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E3%80%82.%20%E8%BF%99%E6%A0%B7%E7%9A%84static%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%EF%BC%9A%E7%94%A8static%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E9%99%90%E5%AE%9A%E5%9C%A8%E6%9C%AC%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%A2%AB%E6%9C%AC%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E4%BB%A5%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8%E3%80%82.">链接</a></p><hr><h2 id="相关接口实现"><a href="#相关接口实现" class="headerlink" title="相关接口实现"></a>相关接口实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span>* arr;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line">&#125;Heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(Heap&amp; hp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span>* orginal, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> capacity = DEFAULT_CAPCITY &gt; size ? DEFAULT_CAPCITY : size;</span><br><span class="line">hp.arr = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line"><span class="keyword">if</span> (!hp.arr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">hp.capacity = capacity;</span><br><span class="line">hp.size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果存在原始数据则构建堆</span></span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//方式1：直接全部拿过来</span></span><br><span class="line"><span class="comment">/*_memccpy(hp.arr, orginal, size, size * sizeof(int));</span></span><br><span class="line"><span class="comment">hp.size = size;</span></span><br><span class="line"><span class="comment">buildHeap(hp);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：一个一个插入 ，插一次排一次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">insertHeap(hp, orginal[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ((hp.size - <span class="number">1</span>)<span class="number">-1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">adjustDown(hp, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下调整——根据已经有的数据内容进行调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(Heap&amp; hp,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = hp.arr[index];<span class="comment">//当前父节点的值</span></span><br><span class="line"><span class="keyword">int</span> parent = <span class="number">0</span>;<span class="comment">//索引</span></span><br><span class="line"><span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调整是一个循环的过程，整个向下</span></span><br><span class="line"><span class="comment">//能够进入循环的条件，它得有左子结点。</span></span><br><span class="line"><span class="keyword">for</span> (parent = index; (parent * <span class="number">2</span> + <span class="number">1</span>) &lt; hp.size; parent = child)<span class="comment">//for循环的最后一个参数，定位新的父结点索引</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从最后一个父结点开始，父结点肯定有左孩子</span></span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取两个子结点中较大的一个</span></span><br><span class="line"><span class="keyword">if</span> (((child + <span class="number">1</span>) &lt; hp.size) &amp;&amp; hp.arr[child] &lt; hp.arr[child + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">child++;<span class="comment">//如果右边的孩子大，那就拿到右边孩子的下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将子结点与父结点进行对比</span></span><br><span class="line"><span class="keyword">if</span> (cur &gt;= hp.arr[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//如果在高层，此时父结点大于子结点就break,因为是从底层上来的，比父结点都大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hp.arr[parent] = hp.arr[child];</span><br><span class="line">hp.arr[child] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向上调整——对新插入的元素进行调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustUp</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = hp.arr[index];<span class="comment">//要插入的结点</span></span><br><span class="line"><span class="keyword">int</span> parent = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; hp.arr[parent])</span><br><span class="line">&#123;</span><br><span class="line">hp.arr[index] = hp.arr[parent];</span><br><span class="line">hp.arr[parent] = temp;</span><br><span class="line">index = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果已经小于等于父亲的值了</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入新的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hp.size == hp.capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = hp.size;<span class="comment">//保存新加入元素的位置，因为size要++</span></span><br><span class="line">hp.arr[hp.size++] = val;</span><br><span class="line">adjustUp(hp,index);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出堆中元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeap</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = hp.size;</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = front; j &lt; back; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hp.arr[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">num -= row;<span class="comment">//输出完本行还剩的元素个数</span></span><br><span class="line"><span class="comment">//如果减去本行输出的个数小于0</span></span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">row *= <span class="number">2</span>;<span class="comment">//下一行要输出的元素个数</span></span><br><span class="line"></span><br><span class="line">front = back;<span class="comment">//定位下一行的起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num - row &lt;= <span class="number">0</span>)<span class="comment">//如果当前的元素个数不够输出下一行的，直接定位下一行的back位置</span></span><br><span class="line">&#123;</span><br><span class="line">back = hp.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// 够则——手动定位结尾位置</span></span><br><span class="line">&#123;</span><br><span class="line">back += row;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出堆顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popTop</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hp.arr[<span class="number">0</span>] = hp.arr[hp.size - <span class="number">1</span>];</span><br><span class="line">hp.size--;</span><br><span class="line">buildHeap(hp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构建堆 and  向下调整的图解</strong></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012163121314.png" alt="image-20211012163121314"></p><hr><p>补充——<a href="https://blog.csdn.net/qq_51604330/article/details/120730051">打印输出</a></p><hr><p> 堆插入元素按升序(降序)排序的效率时很高的，因为只需要和父亲比较。父亲的父亲……</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="构建优先队列"><a href="#构建优先队列" class="headerlink" title="构建优先队列"></a>构建优先队列</h3><blockquote><p>操作系统内核作业调度是优先队列的一个应用实例，它根据优先级的高低而不是先到先服务的方式来进行调度；</p></blockquote><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211013092337526.png" alt="image-20211013092337526"></p><blockquote><p>如果最小键值元素拥有最高的优先级，那么这种优先队列叫作<strong>升序优先队列</strong>（即总是先删除最小 的元素），类似的，如果最大键值元素拥有最高的优先级，那么这种优先队列叫作<strong>降序优先队列</strong> （即总是先删除最大的元素）；由于这两种类型是完全对称的，所以只需要关注其中一种。</p></blockquote><hr><p><strong>核心实现同上建最大堆</strong>，就是把其中的数据换成了Task(任务，里面包括优先级，等其他属性)，根据优先级的大小，来创建堆。</p><hr><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote><p>堆排序(Heapsort)是指利用堆这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特 点快速定位指定索引的元素。</p><p>选择排序工作原理:第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置， 然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p></blockquote><hr><p>类似于上面构建最大堆时的弹出堆顶元素。只是不将最后一个元素删除(不size–)，而是不断的将建好的大堆堆顶元素放到最后。</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(<span class="keyword">int</span>* ary, <span class="keyword">int</span> index, <span class="keyword">int</span> tatal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = ary[index];</span><br><span class="line"><span class="keyword">int</span> parent = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (parent = index; (parent * <span class="number">2</span> + <span class="number">1</span>) &lt; tatal; parent = child)</span><br><span class="line">&#123;</span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (((child + <span class="number">1</span>) &lt; tatal) &amp;&amp; (ary[child] &lt; ary[child + <span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cur &gt;= ary[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ary[parent] = ary[child];</span><br><span class="line">ary[child] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* ary,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tempS = size;</span><br><span class="line">    <span class="comment">//先用这个数组键一个堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (size - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">adjustDown(ary, i, tempS);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//必须要先建好一个堆</span></span><br><span class="line">    <span class="comment">//因为这样将堆顶元素和堆尾元素交换之后，除了堆顶新换过来了元素，“仍”是一个最大(小)堆，因为比较就要和父节点比。</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = tempS - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (;back &gt; <span class="number">0</span>; back--)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> tempChange = ary[front];</span><br><span class="line">ary[front] = ary[back];</span><br><span class="line">ary[back] = tempChange;</span><br><span class="line">adjustDown(ary, front, --tempS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arraY[] = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(arraY) / <span class="keyword">sizeof</span>(arraY[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HeapSort(arraY, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arraY[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-堆" scheme="http://doraemon2.xyz/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>按照二叉树每行的个数打印数组</title>
    <link href="http://doraemon2.xyz/2021/10/12/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84/"/>
    <id>http://doraemon2.xyz/2021/10/12/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84/</id>
    <published>2021-10-12T11:17:40.000Z</published>
    <updated>2021-10-12T11:21:24.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210530121020635.gif" alt="在这里插入图片描述"></p><blockquote><p>这个b玩意儿耗了我2个小时，怎么tm就写不出来呢。</p><p>可能是吃的太饱了吧。</p><p>越写不出来一定要越冷静下来。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = hp.size;</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = front; j &lt; back; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hp.arr[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num -= row;<span class="comment">//输出完本行还剩的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果减去本行输出的个数小于0</span></span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">row *= <span class="number">2</span>;<span class="comment">//下一行要输出的元素个数</span></span><br><span class="line"></span><br><span class="line">front = back;<span class="comment">//定位下一行的起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num - row &lt;= <span class="number">0</span>)<span class="comment">//如果当前的元素个数不够输出下一行的，直接定位下一行的back位置</span></span><br><span class="line">&#123;</span><br><span class="line">back = hp.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// 够则——手动定位结尾位置</span></span><br><span class="line">&#123;</span><br><span class="line">back += row;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.assets/image-20211012192048031.png" alt="image-20211012192048031"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210530121020635.gif&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个b玩意儿耗了我2个小时，怎么tm就写不出来呢。&lt;/p&gt;
&lt;p&gt;可能是吃的太</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-二叉树" scheme="http://doraemon2.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="-堆" scheme="http://doraemon2.xyz/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】队列(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%98%9F%E5%88%97(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%98%9F%E5%88%97(C++)/</id>
    <published>2021-10-11T11:34:30.000Z</published>
    <updated>2021-10-11T11:46:33.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种受限的线性表，它允许在一段进行删除操作，在另一端进行插入操作。</p><p>可以用数组实现，也可以用链表实现。</p><h2 id="数组实现-顺序存储"><a href="#数组实现-顺序存储" class="headerlink" title="数组实现(顺序存储)"></a>数组实现(顺序存储)</h2><p>设立一个队头指针front,一个队尾指针rear，分别指向队头元素和队尾元素，rear-front为元素个数。</p><p>(数组实现中，其实就是下标。)</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType <span class="built_in">queue</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)<span class="comment">//如果传递进来的是个空指针的话</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;rear == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;rear == SQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(SeqQueue* SQ,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;rear] = data;</span><br><span class="line">SQ-&gt;rear++;<span class="comment">//队尾指针后移,插入之后rear&quot;指向&quot;当前位置的下一个位置。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = SQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (i &lt; SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; SQ-&gt;<span class="built_in">queue</span>[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队-从表头开始删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//就是删除第一个元素</span></span><br><span class="line"><span class="keyword">if</span> (!SQ || isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = SQ-&gt;front; i &lt; SQ-&gt;rear; i++)</span><br><span class="line">&#123;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[i] = SQ-&gt;<span class="built_in">queue</span>[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;rear--;</span><br><span class="line"><span class="comment">//直接对front进行操作的话空间会越来越小</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列首元素</span></span><br><span class="line"><span class="function">DataType <span class="title">getFront</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">destoryQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度-元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getElemsNum</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SQ-&gt;rear-SQ-&gt;front;<span class="comment">//返回SQ-&gt;rear也一样，数组下标从0开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表实现-链式存储"><a href="#链表实现-链式存储" class="headerlink" title="链表实现(链式存储)"></a>链表实现(链式存储)</h2><p>为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点。</p><p>就是简化了单链表，加了些条件限制(一边进，一边出。) </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;Qnode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Qnode* QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组实现的队列rear指向的是最后一个的下一个，而用链表实现的队列rear指向的是最后一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//队列的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">QueuePtr front;<span class="comment">//队头指针</span></span><br><span class="line">QueuePtr rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;length = <span class="number">0</span>;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = <span class="literal">NULL</span>;<span class="comment">//把队头和队尾指针同时置空</span></span><br><span class="line"><span class="comment">//初始化的置空可以想象成是有个“头结点”,判断队列中是否有元素就看front是否指向的是NULL</span></span><br><span class="line"><span class="comment">//其实就是有个头结点，开始就已经new出来了</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (LQ-&gt;length == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队-从尾部</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(LinkQueue* LQ, DataType num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* node = <span class="keyword">new</span> Qnode;</span><br><span class="line">node-&gt;data = num;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;rear-&gt;next = node;</span><br><span class="line">LQ-&gt;rear = node;<span class="comment">//定位到新的末尾结点</span></span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队-从头部</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = LQ-&gt;front;</span><br><span class="line">LQ-&gt;front = LQ-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">LQ-&gt;length--;</span><br><span class="line"><span class="comment">//如果出了这个元素后为空，需要将rear也置空</span></span><br><span class="line"><span class="keyword">if</span> (!LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = LQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clearQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = LQ-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> LQ-&gt;front;</span><br><span class="line">LQ-&gt;front = tempnode;</span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">LQ-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列的首元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getFront</span><span class="params">(LinkQueue* LQ, DataType* recv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!recv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">*recv = LQ-&gt;front-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNums</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> LQ-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="线程池中的任务队列"><a href="#线程池中的任务队列" class="headerlink" title="线程池中的任务队列"></a>线程池中的任务队列</h3><p><strong>线程池</strong>——由一个任务队列和一组处理队列的线程组成。一旦工作进程需要处理某个可能“阻塞”的 操作，不用自己操作，将其作为一个任务放到线程池的队列，接着会被某个空闲线程提取处理。</p><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011090328793.png" alt="image-20211011090328793"></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>与数组实现队列中，出队方式相关，直接移动front(假溢出)，front前的元素全部抛弃，认为是空，下次直接覆盖上去。</p><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011092439002.png" alt="image-20211011092439002"></p><p><strong>判断是否满了</strong>,rear+1是否等于front</p><blockquote><p>用模运算来循环</p></blockquote><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011092958249.png" alt="image-20211011092958249"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType <span class="built_in">queue</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;<span class="comment">//rear一直在追front</span></span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((SQ-&gt;rear + <span class="number">1</span>) % MAX_SIZE == SQ-&gt;front)<span class="comment">//因为rear要指向front前的一个空的位置，所以真正只可以push进MAX_SIZE-1个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;front == SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(SeqQueue* SQ, DataType m_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ || isFull(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;rear] = m_data;</span><br><span class="line"><span class="comment">//移动队尾指针</span></span><br><span class="line">SQ-&gt;rear = (SQ-&gt;rear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ || isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队首指针后移</span></span><br><span class="line">SQ-&gt;front = (SQ-&gt;front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="comment">//从第一个位置之后，rear都指向一个空的位置</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">printQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = SQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (index != SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; SQ-&gt;<span class="built_in">queue</span>[index] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">index = (index + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getElemsNum</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (SQ-&gt;rear - SQ-&gt;front + MAX_SIZE) % MAX_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>它的入队顺序没有变化，但是出队的顺序是根据优先级的高低来决定的，优先级高的先出。</p><blockquote><p>还是要对比顺序存储和链式存储rear指向位置。</p><p>顺序存储rear指向最后一个的下一个位置</p><p>链式存储rear指向最后一个</p></blockquote> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>//结点结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> priority;<span class="comment">//优先级</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Qnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>//队列结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">Qnode* front;</span><br><span class="line">Qnode* rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>)<span class="comment">//空的，返回真，不空返回假，if(isEmprt(Q) != NULL)就是： 真的就直接return </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;length == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(Queue* Q, DataType _data, <span class="keyword">int</span> _priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* _node = <span class="keyword">new</span> Qnode;</span><br><span class="line">_node-&gt;priority = _priority;</span><br><span class="line">_node-&gt;data = _data;</span><br><span class="line">_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空队列</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = _node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;rear-&gt;next = _node;</span><br><span class="line">Q-&gt;rear = _node;<span class="comment">//定位到新的结尾</span></span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队列——按照优先级</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q || isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* recvPrev = <span class="literal">NULL</span>;<span class="comment">//存储要删除结点的前一个结点</span></span><br><span class="line">Qnode* start = <span class="literal">NULL</span>;</span><br><span class="line">Qnode* startNext = <span class="literal">NULL</span>;</span><br><span class="line">Qnode* deleteTmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">start = Q-&gt;front;</span><br><span class="line">startNext = start-&gt;next;</span><br><span class="line"></span><br><span class="line">recvPrev = start;<span class="comment">//默认要删除的是第二个,所以存的是第一个结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况1，当前队列中就一个结点</span></span><br><span class="line"><span class="keyword">if</span> (!startNext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> start;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常情况,完整的遍历一遍</span></span><br><span class="line"><span class="keyword">while</span> (startNext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (startNext-&gt;priority &gt; start-&gt;priority)</span><br><span class="line">&#123;</span><br><span class="line">recvPrev = start;</span><br><span class="line">&#125;</span><br><span class="line">start = startNext;</span><br><span class="line">startNext = startNext-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况2，第一个结点是优先级最高的</span></span><br><span class="line"><span class="comment">//这样得到的recvPrev是第一个结点了，也有可能是为了删除第二个结点</span></span><br><span class="line"><span class="comment">//所以要进行一下验证,验证是否要删除的是第一个结点</span></span><br><span class="line">Qnode* difFandS = <span class="literal">NULL</span>;</span><br><span class="line">difFandS = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (recvPrev-&gt;priority &gt; difFandS-&gt;priority)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果第一个结点的优先级大于第二个结点</span></span><br><span class="line"><span class="keyword">delete</span> recvPrev;</span><br><span class="line">Q-&gt;front = difFandS;</span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出来后recvPrev就是要删除结点的前一个结点</span></span><br><span class="line">deleteTmp = recvPrev-&gt;next;</span><br><span class="line">recvPrev-&gt;next = deleteTmp-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> deleteTmp;</span><br><span class="line"></span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">printQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//补充提示注意:根据具体的返回内容来书写判断语句条件</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))<span class="comment">//空的，返回真，不空返回假，if(isEmprt(Q))就是： 返回了真的就直接return </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空的，别打印了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = Q-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; tempnode-&gt;priority &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空整个队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clearQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (Q-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> Q-&gt;front;</span><br><span class="line">Q-&gt;front = tempnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态顺序队列"><a href="#动态顺序队列" class="headerlink" title="动态顺序队列"></a>动态顺序队列</h3><p>使用链式存储(链表)实现的队列即为动态顺序队列，前面已经实现过，不再重复。</p><h3 id="高并发WEB服务器队列的应用"><a href="#高并发WEB服务器队列的应用" class="headerlink" title="高并发WEB服务器队列的应用"></a>高并发WEB服务器队列的应用</h3><blockquote><p>在高并发 HTTP 反向代理服务器 Nginx 中，存在着一个跟性能息息相关的模块 ——文件缓存。 </p><p>经常访问到的文件会被 Nginx 从磁盘缓存到内存，这样可以极大的提高 Nginx 的并发能力，不过因为 内存的限制，</p><p>当缓存的文件数达到一定程度的时候就会采取淘汰机制，</p><p>优先淘汰进入时间比较久或是最近访问很少(LRU)的队列文件。 </p></blockquote><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011183523476.png" alt="image-20211011183523476"></p><p><strong>具体实现方案：</strong> </p><blockquote><p>使用双向循环队列保存缓存的文件节点，这样可以实现多种淘汰策略： </p><p>比如：如果采用淘汰进入时间比较久的策略，就可以使用队列的特性，先进先出 </p><p>如果要采用按照 LRU(进入时间 or  最近访问较少)，就遍历链表，找到节点删除。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;队列是一种受限的线性表，它允许在一段进行删除操作，在另一端进行插入操作。&lt;/p&gt;
&lt;p&gt;可以用数组实现，也可以用链表实现。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-队列" scheme="http://doraemon2.xyz/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装MySQL</title>
    <link href="http://doraemon2.xyz/2021/10/10/Windows%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://doraemon2.xyz/2021/10/10/Windows%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-10-10T12:06:26.000Z</published>
    <updated>2021-10-13T11:59:56.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows下安装MySql"><a href="#Windows下安装MySql" class="headerlink" title="Windows下安装MySql"></a>Windows下安装MySql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>下载链接</strong>——<a href="https://dev.mysql.com/downloads/installer/">链接</a></p><p><strong>选择第二个下载</strong></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190007070.png" alt="image-20211010190007070"></p><p>点击图片左下角的蓝字直接进行下载。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190059716.png" alt="image-20211010190059716"></p><p>下载完成，点击安装。</p><p>选择第一个，点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190524873.png" alt="image-20211010190524873"></p><p>点击Execulte</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190621387.png" alt="image-20211010190621387"></p><p>等待…然后点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193243997.png" alt="image-20211010193243997"></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193302838.png" alt="image-20211010193302838"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193408919.png" alt="image-20211010193408919"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193425871.png" alt="image-20211010193425871"></p><p>选择第一个，然后点next。</p><p>设置完密码，点击add user。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193734629.png" alt="image-20211010193734629"></p><p>设置完成后，点击ok。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193848843.png" alt="image-20211010193848843"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193925604.png" alt="image-20211010193925604"></p><p>默认，点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194029475.png" alt="image-20211010194029475"></p><p>点击Execute。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194105930.png" alt="image-20211010194105930"></p><p>点击Finish。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194211792.png" alt="image-20211010194211792"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194305757.png" alt="image-20211010194305757"></p><p>点击Finish。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194337661.png" alt="image-20211010194337661"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194404243.png" alt="image-20211010194404243"></p><p>输入密码点击check测试。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194425657.png" alt="image-20211010194425657"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194456386.png" alt="image-20211010194456386"></p><p>点击Execute</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194529263.png" alt="image-20211010194529263"></p><p>点击Finish,再点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194603450.png" alt="image-20211010194603450"></p><p>再次Finish。</p><p>弹出窗口。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194740186.png" alt="image-20211010194740186"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><strong>方式一</strong></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010195034032.png" alt="image-20211010195034032"></p><p><strong>方式二</strong></p><p>管理员方式打开命令行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">停止</span><br><span class="line">net stop MySQL80</span><br><span class="line">开启</span><br><span class="line">net start MySQL80 </span><br><span class="line">命令行直接链接服务器</span><br><span class="line">mysql -hlocalhost -uroot -p密码</span><br></pre></td></tr></table></figure><h2 id="配置相关环境变量"><a href="#配置相关环境变量" class="headerlink" title="配置相关环境变量"></a>配置相关环境变量</h2><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010200033556.png" alt="image-20211010200033556"></p><p>点编辑。</p><p>C:\Program Files\MySQL\MySQL Server 8.0\bin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows下安装MySql&quot;&gt;&lt;a href=&quot;#Windows下安装MySql&quot; class=&quot;headerlink&quot; title=&quot;Windows下安装MySql&quot;&gt;&lt;/a&gt;Windows下安装MySql&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://doraemon2.xyz/categories/MySQL/"/>
    
    
    <category term="-MySQL" scheme="http://doraemon2.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(17)【中等】两数相加(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/10/LeetCode%E5%88%B7%E9%A2%98(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://doraemon2.xyz/2021/10/10/LeetCode%E5%88%B7%E9%A2%98(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-10-10T03:45:24.000Z</published>
    <updated>2021-10-10T04:00:41.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98-(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.assets/image-20211010112458353.png" alt="image-20211010112458353"></p><p>题目——<a href="https://leetcode-cn.com/problems/add-two-numbers/">链接</a></p><p><strong>这题将两个val分开加到sum中更方便</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从前往后遍历链表，对应的结点乘以10的n次方</span></span><br><span class="line"><span class="comment">            越高位越往后存，所以用尾插           </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//其中一个为空直接返回另一个</span></span><br><span class="line">        <span class="keyword">if</span>(!l1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!l2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化一个头结点(不存数据，最后将这个结点去掉了(return它的next))</span></span><br><span class="line">        ListNode* sumNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">        sumNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//用于尾插链接,保存定位当前链表的最后一个结点</span></span><br><span class="line">        ListNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">//负责进一</span></span><br><span class="line">        <span class="comment">//循环进入条件，如果1个不为空或者有1可进</span></span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || n == <span class="number">1</span>)</span><br><span class="line">        &#123;     </span><br><span class="line">            <span class="comment">//为每一位相加的结果创建新结点</span></span><br><span class="line">            ListNode* addNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果l1和l2一样长，但是最后两个数相加能进一</span></span><br><span class="line">            <span class="keyword">if</span>(!l1 &amp;&amp; !l2)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = n;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果l2已经到头，但是l2没有</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!l2)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = l1-&gt;val+n;</span><br><span class="line">                <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">1</span>;</span><br><span class="line">                    addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果l1已经到头，但是l2没有</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!l1)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = l2-&gt;val+n;</span><br><span class="line">                <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">1</span>;</span><br><span class="line">                    addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//两个都不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                   addNode-&gt;val = l1-&gt;val + l2-&gt;val + n;</span><br><span class="line">                   n  =  <span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       n = <span class="number">1</span>;</span><br><span class="line">                       addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;          </span><br><span class="line">            <span class="comment">//根据题目结果来看，最后的和是通过尾插法插入到sumNode中的</span></span><br><span class="line">            <span class="comment">//如果是第一次插入</span></span><br><span class="line">            <span class="keyword">if</span>(!sumNode-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                sumNode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="comment">//用于保存当前最后一个结点</span></span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//用于保存之前头结点后面的结点</span></span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断条件，什么时候可以往后指</span></span><br><span class="line">            <span class="keyword">if</span>(l1)</span><br><span class="line">            &#123;</span><br><span class="line">                   l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2)</span><br><span class="line">            &#123;</span><br><span class="line">                   l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去掉第一个结点(直接返回sumNode-&gt;Next从第二个开始有数据的结点开始返回好像也行)</span></span><br><span class="line">        <span class="comment">// ListNode* deleHead = sumNode-&gt;next;</span></span><br><span class="line">        <span class="comment">// sumNode-&gt;val = sumNode-&gt;next-&gt;val;</span></span><br><span class="line">        <span class="comment">// sumNode-&gt;next = sumNode-&gt;next-&gt;next;</span></span><br><span class="line">        <span class="comment">// delete deleHead;</span></span><br><span class="line">        <span class="keyword">return</span> sumNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-两数相加&quot;&gt;&lt;a href=&quot;#2-两数相加&quot; class=&quot;headerlink&quot; title=&quot;2.两数相加&quot;&gt;&lt;/a&gt;2.两数相加&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/LeetCode%E5%88%B7%E9%A2%98-(17)%E3%8</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(16)【简单】移除链表元素&amp;&amp;回文链表&amp;&amp;删除链表中的结点</title>
    <link href="http://doraemon2.xyz/2021/10/09/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&amp;&amp;%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&amp;&amp;%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>http://doraemon2.xyz/2021/10/09/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&amp;&amp;%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&amp;&amp;%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</id>
    <published>2021-10-09T13:15:11.000Z</published>
    <updated>2021-10-15T02:26:27.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h1><p>链接——<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211008202714495.png" alt="image-20211008202714495"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置一个新的头结点指向head——就能解决</span></span><br><span class="line">        ListNode* Newhead = <span class="keyword">new</span> ListNode;</span><br><span class="line">        Newhead-&gt;next = head;</span><br><span class="line">        ListNode* tempnode = Newhead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tempnode-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tempnode-&gt;next-&gt;val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* recv = tempnode-&gt;next;</span><br><span class="line">                tempnode-&gt;next= tempnode-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> recv;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tempnode = tempnode-&gt;next;</span><br><span class="line">            &#125;              </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* temp = Newhead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> Newhead;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234.回文链表"></a>234.回文链表</h1><p>题目——<a href="https://leetcode-cn.com/problems/palindrome-linked-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211006155828562.png" alt="image-20211006155828562"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用容器装，然后从头到后遍历比较</span></span><br><span class="line">        <span class="comment">//注意容器存储类型,存val内存开销会小一点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ListV;</span><br><span class="line">        <span class="keyword">while</span>(head)</span><br><span class="line">        &#123;</span><br><span class="line">            ListV.push_back(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j= ListV.size()<span class="number">-1</span>;i&lt;j;i++,j--)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(ListV[i]!= ListV[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="237-删除链表中的结点"><a href="#237-删除链表中的结点" class="headerlink" title="237.删除链表中的结点"></a>237.删除链表中的结点</h1><p>题目——<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211009205928937.png" alt="image-20211009205928937"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将变成后面的结点，然后将后面的结点删除防止内存泄漏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">     ListNode* tempnode = node-&gt;next;</span><br><span class="line">     node-&gt;val = tempnode-&gt;val;</span><br><span class="line">     node-&gt;next = tempnode-&gt;next;</span><br><span class="line">     <span class="keyword">delete</span> tempnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;203-移除链表元素&quot;&gt;&lt;a href=&quot;#203-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;203.移除链表元素&quot;&gt;&lt;/a&gt;203.移除链表元素&lt;/h1&gt;&lt;p&gt;链接——&lt;a href=&quot;https://leetcode-cn.com/p</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】链表(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++)/</id>
    <published>2021-10-09T12:50:46.000Z</published>
    <updated>2021-10-09T12:52:29.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是线性表的链式存储方式，逻辑上相邻的数据在计算机中的内存位置不必须相邻，给每一个元素 加一个指针域，指向下一个元素的位置。</p><p><strong>如下图所示</strong>:</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211004153758080.png" alt="image-20211004153758080"></p><p><strong>链表的核心要素</strong>：</p><ul><li>每个结点由数据域和指针域组成</li><li>指针域指向下一个结点的内存地址</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>链表的结点均单项指向下一个结点，形成一条单项访问的数据链。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211004154730170.png" alt="image-20211004154730170"></p><h3 id="相关接口实现"><a href="#相关接口实现" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode,LinkList;<span class="comment">//LinkList为头结点</span></span><br><span class="line"><span class="comment">//初始化就是初始化头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkList</span><span class="params">(LinkList*&amp; linklist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">linklist = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!linklist)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">linklist-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;next = L-&gt;next;<span class="comment">//头结点默认的next是NULL</span></span><br><span class="line">L-&gt;next = node;<span class="comment">//与头结点相连接</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkNode* tempnode = L;<span class="comment">//从头结点开始</span></span><br><span class="line"><span class="comment">//通过循环找到最后一个结点</span></span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next)<span class="comment">//直到循环到下一个结点为空，就进不去这个循环了，此时的tempnode就是最后一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意:如果只有一个头结点会直接到达这里。因为头结点的next指向空</span></span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定位置插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertLinkList</span><span class="params">(LinkList*&amp; L,<span class="keyword">int</span> index,DataType num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || index &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode* newnode = <span class="keyword">new</span> LinkNode;</span><br><span class="line">newnode-&gt;data = num;</span><br><span class="line">pushFront(L, newnode);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历寻找</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkList* p, * newNode;</span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; count &lt; index<span class="number">-1</span>)<span class="comment">//count&lt;index-1条件控制，最后执行完这段代码，count就是index前一个位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p最后就是要插入位置的前一个结点</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与新的结点链接</span></span><br><span class="line">newNode = <span class="keyword">new</span> LinkNode;<span class="comment">//生成新的结点</span></span><br><span class="line">newNode-&gt;data = num;</span><br><span class="line">newNode-&gt;next = p-&gt;next;  </span><br><span class="line">p-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问指定位置的元素 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> postion,<span class="keyword">int</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || postion &lt;= <span class="number">0</span> || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为什么这样写因为本链表头结点无数据</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (count &lt; postion  &amp;&amp; tempnode)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误的postion必定导致tempnode为null</span></span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = tempnode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找元素-按值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> e,<span class="keyword">int</span> &amp;index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (tempnode &amp;&amp; tempnode-&gt;data != e)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一遍下来没查到，tempnode为NULL</span></span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = count;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素-下标</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;                                                    </span><br><span class="line">LinkNode* tempnode = L;</span><br><span class="line"><span class="comment">//补充:也能再创建个接口来遍历链表统计结点数</span></span><br><span class="line"><span class="keyword">while</span> (tempnode &amp;&amp; count != index<span class="number">-1</span>)<span class="comment">//找到要删除结点的前一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode-&gt;next)<span class="comment">//找到的前一个结点是最后一个结点，说明index的下标过大，reture false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功找到</span></span><br><span class="line">LinkNode* removeNode = tempnode-&gt;next;</span><br><span class="line">tempnode-&gt;next = removeNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> removeNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">destoryList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">tempnode = L;<span class="comment">//不断的往下取都结点，依次释放。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出表中元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* p = <span class="literal">NULL</span>;<span class="comment">//用它拿到第一个结点</span></span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;<span class="comment">//访问下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>在单链表的基础上让最后一个结点指向第一个结点。</p><h3 id="相关接口实现-1"><a href="#相关接口实现-1" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode, LinkList;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inintLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next = L;</span><br><span class="line">L-&gt;data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L,LinkNode *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头结点的指针域指针指向自己的时候就是空的循环链表，本头结点不存数值</span></span><br><span class="line"><span class="keyword">if</span> (L == L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非空的循坏链表</span></span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next != L)<span class="comment">//找到最后一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;next = L;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode* tempnode = L-&gt;next;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = tempnode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkNode*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || L == L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode != L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>定一个数，从头开始依次报数，报道这个数的就delete,直到求出最后一个出局的编号是多少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//约瑟夫环问题</span></span><br><span class="line"><span class="comment">//注意i 和 j的作用  </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Joseph</span><span class="params">(LinkNode*&amp; L,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">LinkNode* p, * q;<span class="comment">//p负责向下指，q负责与临时保存要删除的结点，链接到后面的结点</span></span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!L || p-&gt;next == L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//定位要删除结点的位置</span></span><br><span class="line">    <span class="comment">//通过i和j的不断增加，来定位位置</span></span><br><span class="line">    <span class="comment">//j是不断叠加的</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//记录最后一个出圈者的编号</span></span><br><span class="line"><span class="comment">//该结点的值即为编号。</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//i为第一个要删除的结点位置</span></span><br><span class="line">i += val;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第i个结点，p指向该结点的上一个结点</span></span><br><span class="line">        <span class="comment">//能够进行这里，这个while循环的条件肯定是成立的</span></span><br><span class="line">        <span class="comment">//作用就是通过对j增加，然后与i进行比较。</span></span><br><span class="line"><span class="comment">//注意是从头开始，头结点不存数值</span></span><br><span class="line">        <span class="comment">//每次遍历都能遍历到头结点</span></span><br><span class="line">        <span class="comment">//如果头结点存数值的话，那j的条件就得修改</span></span><br><span class="line">        <span class="comment">//随便想了一下，应该是j &lt; i</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//这两个判断的位置要注意一下</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;next != L)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">times++;<span class="comment">//进行了几轮</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line">num = q-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新连接起来</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放被删除结点空间</span></span><br><span class="line">printList(L);</span><br><span class="line">&#125; <span class="keyword">while</span> (L-&gt;next != L);<span class="comment">//删到最后就剩自己指向自己了</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最后被删除的结点位置是第&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;个&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>在单链表的基础上添加一个指向前一个结点的指针。</p><h3 id="相关接口实现-2"><a href="#相关接口实现-2" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> dataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">dataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span>* <span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode,LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L,LinkNode*&amp; node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次进行尾插就直接来到这里</span></span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;prev = tempnode;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前插</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList* &amp;L, LinkNode* &amp;node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;prev = L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;prev = L;</span><br><span class="line">node-&gt;next = tempnode;</span><br><span class="line">tempnode-&gt;prev = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定位置插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertLinkList</span><span class="params">(LinkList*&amp; L,<span class="keyword">int</span> index,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count == index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode* newnode = <span class="keyword">new</span> LinkNode;</span><br><span class="line">newnode-&gt;data = num;</span><br><span class="line">LinkNode* tempnodeII = tempnode-&gt;prev;</span><br><span class="line">tempnodeII-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = tempnodeII;</span><br><span class="line">newnode-&gt;next = tempnode;</span><br><span class="line">tempnode-&gt;prev = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteLinkList</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="comment">//同在指定位置插入元素,先定位到这个结点</span></span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">tempnode-&gt;prev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode-&gt;prev-&gt;next = tempnode-&gt;next;</span><br><span class="line">tempnode-&gt;next-&gt;prev = tempnode-&gt;prev;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到某个位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index, <span class="keyword">int</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>  count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count == index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = tempnode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">destoryLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L;</span><br><span class="line"><span class="comment">//找到下一个，删除前一个、从前往后删</span></span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//L移动到真正的第一个结点</span></span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="comment">//删除他原来的</span></span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line"></span><br><span class="line">tempnode = L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="Linux内核共享双向链表"><a href="#Linux内核共享双向链表" class="headerlink" title="Linux内核共享双向链表"></a>Linux内核共享双向链表</h3><blockquote><p>在 linux 内核中，有大量的数据结构需要用到双向链表，例如进程、文件、模块、页面等。 </p><p>若采用双向链表的传统实现方式，需要为这些数据结构维护各自的链表，并且为每个链表都 </p><p>要设计插入、删除等操作函数。因为用来维持链表的 next 和 prev 指针指向对应类型的对 </p><p>象，因此一种数据结构的链表操作函数不能用于操作其它数据结构的链表。</p></blockquote><blockquote><p>有没有一种方式让多个链表共享同一套链表操作呢？</p></blockquote><p>——<strong>将结点中的指针域和数据域分离</strong>。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211009192009185.png" alt="image-20211009192009185"></p><p><strong>例如</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">prev</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">time_t</span> timeout;</span><br><span class="line">LinkNode node;<span class="comment">//挂件</span></span><br><span class="line">&#125;ConnTimeOut;</span><br></pre></td></tr></table></figure><p><strong>特殊访问</strong>：</p><p>——取到结构体中挂件的的偏移量，得到结构体的地址，然后进行访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ConnTimeOut* ct = <span class="keyword">new</span> ConnTimeOut;</span><br><span class="line">ct-&gt;fd = <span class="number">3</span>;</span><br><span class="line">LinkNode* p = &amp;(ct-&gt;node);</span><br><span class="line"><span class="keyword">int</span> offset = offsetof(ConnTimeOut, node);<span class="comment">//node成员在内存中距结构体起始位置16个字节</span></span><br><span class="line">ConnTimeOut* tmp = (ConnTimeOut*)((<span class="keyword">size_t</span>)p - offset);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;tmp-&gt;fd;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关接口示例</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkNode</span><span class="params">(LinkNode&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">L.next = <span class="literal">NULL</span>;</span><br><span class="line">L.prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ConnTimeOut* cL = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化一个空的双向链表</span></span><br><span class="line">cL = <span class="keyword">new</span> ConnTimeOut;</span><br><span class="line">cL-&gt;fd = <span class="number">-1</span>;</span><br><span class="line">initLinkNode(cL-&gt;node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>怎么个共享法呢?</p></blockquote><p><strong>重新解释</strong>：</p><p>将一个结点中的指针域剥离出来，创建一个新的结构体，来存放这个指针域，也就是说结构体嵌套。不同的结点(结构体数据内容不同，但是都有这个剥离出来的指针域。)，使用同一个接口进行操作，靠的就是他们中相同的”指针域”结构体，就是对这个结构体中的”指针域结构体”进行操作。</p><p><strong>例如</strong>：<br>不同的结构体，但是但是他们都有上面LinkNode node这个挂件，那么他们就共用同一个初始化指针指向的函数。</p><p>传递这个共有的内容给函数，这个函数对他们进行操作。</p><p>例如: 将结点链接起来。不同链表使用同一个函数进行插入操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;链表是线性表的链式存储方式，逻辑上相邻的数据在计算机中的内存位置不必须相邻，给每一个元素 加一个指针域，指向下一个元素的位置。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(15)【简单】删除链表中重复元素(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/05/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/05/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++)/</id>
    <published>2021-10-05T11:11:26.000Z</published>
    <updated>2021-10-05T11:41:57.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h1><hr><p>题目——<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++).assets/image-20211005184131269.png" alt="image-20211005184131269"></p><hr><h2 id="单指针法"><a href="#单指针法" class="headerlink" title="单指针法"></a>单指针法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个指针往后遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tempnode = head;<span class="comment">//这个头结点里面好像有元素</span></span><br><span class="line">        <span class="keyword">while</span>(tempnode-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tempnode-&gt;val == tempnode-&gt;next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                tempnode-&gt;next = tempnode-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tempnode = tempnode-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="双指针-前后指针法"><a href="#双指针-前后指针法" class="headerlink" title="双指针-前后指针法"></a>双指针-前后指针法</h2><p><strong>注意前后指针的链接</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* Prev = head;</span><br><span class="line">        ListNode* Next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(Next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Prev-&gt;val == Next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">              </span><br><span class="line">               Prev-&gt;next = Next-&gt;next;</span><br><span class="line">               Next = Next-&gt;next;               </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Prev= Next;</span><br><span class="line">                Next = Next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>感谢这位老哥的分享——<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/comments/40973">链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = deleteDuplicates(head-&gt;next);</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val == head-&gt;next-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>图解</strong>:</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++).assets/image-20211005183636285.png" alt="image-20211005183636285"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;83-删除排序链表中的重复元素&quot;&gt;&lt;a href=&quot;#83-删除排序链表中的重复元素&quot; class=&quot;headerlink&quot; title=&quot;83. 删除排序链表中的重复元素&quot;&gt;&lt;/a&gt;83. 删除排序链表中的重复元素&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;题目——&lt;a href</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】顺序表(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%A1%BA%E5%BA%8F%E8%A1%A8(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%A1%BA%E5%BA%8F%E8%A1%A8(C++)/</id>
    <published>2021-10-03T15:54:35.000Z</published>
    <updated>2021-10-03T16:03:26.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是简单的一种线性结构，逻辑上相邻的数据在计算机中内的存储位置也是相邻的，可以快速定位第几个元素，中间允许有空值，插入、删除时需要移动大量元素。</p><blockquote><p>顺序表的三个要素</p></blockquote><ul><li>用elems记录存储位置的基地址。</li><li>分配一段连续的存储空间size（可以存放的元素个数）。</li><li>用length记录实际的元素个数，即顺序表的长度（现在实际存放的元素个数）。</li></ul><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%91%E7%BA%BF%E6%80%A7%E8%A1%A8(C++).assets/image-20211002221204434.png" alt="image-20211002221204434"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemsType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemsType* elems;</span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//长度</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//容量</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initSqList</span><span class="params">(SqList &amp;sqlist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sqlist.elems = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!sqlist.elems)<span class="comment">//开辟失败直接返回</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sqlist.length = <span class="number">0</span>;</span><br><span class="line">sqlist.size = MAX_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印整个list</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSqList</span><span class="params">(SqList &amp;sqlist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sqlist.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sqlist.elems[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表增加元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addSqList</span><span class="params">(SqList&amp; sqlist,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sqlist.length == sqlist.size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sqlist.elems[sqlist.length] = e;</span><br><span class="line">sqlist.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定位置插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertSqList</span><span class="params">(SqList&amp; sqlist,<span class="keyword">int</span> index,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//合法性判断</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= sqlist.length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sqlist.length == sqlist.size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j= sqlist.length<span class="number">-1</span>; j &gt;= index; j--)</span><br><span class="line">&#123;</span><br><span class="line">sqlist.elems[j + <span class="number">1</span>] = sqlist.elems[j];</span><br><span class="line">&#125;</span><br><span class="line">sqlist.elems[index] = e;</span><br><span class="line">sqlist.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除指定位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteSqList</span><span class="params">(SqList&amp; sqlist, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= sqlist.length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == sqlist.length)</span><br><span class="line">&#123;</span><br><span class="line">sqlist.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = index; j &lt; sqlist.length; j++)</span><br><span class="line">&#123;</span><br><span class="line">sqlist.elems[j] = sqlist.elems[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">sqlist.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁整个表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destorySqList</span><span class="params">(SqList&amp; sqlist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sqlist.elems)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]sqlist.elems;</span><br><span class="line">&#125;</span><br><span class="line">sqlist.length = <span class="number">0</span>;</span><br><span class="line">sqlist.size = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><blockquote><p>高并发WEB服务器中顺序表的应用</p></blockquote><p>高性能的 web 服务器 Squid 每秒可处理上万并发的请求，从网络连接到服务器的客 户端与服务器端在交互时会保持一种会话（和电话通话的场景类似）。服务器端为了管 理好所有的客户端连接，给每个连接都编了一个唯一的整数编号，叫做文件句柄，简称 fd。</p><hr><p>为了防止某些恶意连接消耗系统资源，当某个客户端连接超时（在设定的一定时间内没有发送数据）时，服务器就需要关闭这些客户端的连接。</p><hr><blockquote><p>具体实现方案:</p></blockquote><p>1.当有新的请求连到服务器时，如果经过服务器频率限制模块判断，貌似恶意连 接，则使用顺序表来保存此连接的超时数据，超时值使用时间戳来表示,时间戳是指格林 威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒(相当于北京时间 1970 年 01 月 01 日 08 时 00 分 00 秒)起至现在的总秒数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">补充:</span><br><span class="line">求当前的时间戳</span><br><span class="line">    <span class="keyword">time_t</span> now;</span><br><span class="line">    time(&amp;now);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前时间戳:&quot;</span> &lt;&lt; now &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>其结构体定义如下： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line"><span class="keyword">int</span> fd; </span><br><span class="line"><span class="keyword">time_t</span> timeout; <span class="comment">// 使用超时时刻的时间戳表示</span></span><br><span class="line">&#125;ConnTimeout;</span><br></pre></td></tr></table></figure><p>2.服务器程序每隔一秒钟扫描一次所有的连接，检查是否超时，如果存在超时的 连接，就关闭连接，结束服务，同时将顺序表中的记录清除!</p><blockquote><p>大致实现过程(相关接口并未实现)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkTimeOut</span><span class="params">(TimeOutSqList&amp; <span class="built_in">list</span>,<span class="keyword">time_t</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> fd,i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;检查超时&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i  &lt; <span class="built_in">list</span>.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">list</span>.emels[i].timeout &gt; now)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//超时 清理</span></span><br><span class="line">        fd = <span class="built_in">list</span>.emels[i].fd;</span><br><span class="line">        <span class="comment">//关闭链接---模拟</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;关闭链接&quot;</span>&lt;&lt;ednl;</span><br><span class="line">listDelete(<span class="built_in">list</span>,i);<span class="comment">//注意顺序表会移动，注意漏删情况</span></span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> now,end;</span><br><span class="line">    <span class="keyword">time_t</span> last_timeout;<span class="comment">//每秒执行一次超时检测</span></span><br><span class="line">    TimeOutSqList <span class="built_in">list</span>;</span><br><span class="line">    </span><br><span class="line">    time(&amp;now);</span><br><span class="line">    end  = now+<span class="number">60</span>;<span class="comment">//就处理一分钟，60s后退出循环</span></span><br><span class="line">    </span><br><span class="line">    initList(<span class="built_in">list</span>);</span><br><span class="line">    <span class="comment">//通过频率限制模块通过判断分析，增加恶意连接到顺序表中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; <span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ConnectTimeOut e;</span><br><span class="line">        e.df = i;</span><br><span class="line">        e.timeout = now + i *<span class="number">2</span>;</span><br><span class="line">listAdd(<span class="built_in">list</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    listPrint(<span class="built_in">list</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//控制 1（几）秒钟做一次事情</span></span><br><span class="line">        <span class="keyword">if</span>(last_timeout + <span class="number">0.999</span> &lt; now)</span><br><span class="line">        &#123;</span><br><span class="line">            checkTimeOut(<span class="built_in">list</span>,now);</span><br><span class="line">            last_timeout = now;</span><br><span class="line">&#125;</span><br><span class="line">        Sleep(<span class="number">10</span>);</span><br><span class="line">        time(&amp;now);<span class="comment">//读取现在时间</span></span><br><span class="line">&#125;<span class="keyword">while</span>(end &gt; now);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(理解顺序表在这其中的作用即可。)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺序表&lt;/h1&gt;&lt;p&gt;顺序表是简单的一种线性结构，逻辑上相邻的数据在计算机中内的存储位置也是相邻的，可以快速定位第几个元素，中间允许有空值，插入、删除时需</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C&amp;C++结构体内存对齐</title>
    <link href="http://doraemon2.xyz/2021/10/02/C&amp;C++%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>http://doraemon2.xyz/2021/10/02/C&amp;C++%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</id>
    <published>2021-10-02T12:20:29.000Z</published>
    <updated>2021-10-03T11:08:01.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h1><p>先来看这几个结构体，并计算它们的大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">A</span> // 8</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> // 16</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">double</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> // 24</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> f;</span><br><span class="line"><span class="keyword">int</span> g;</span><br><span class="line"><span class="keyword">double</span> h;</span><br><span class="line"><span class="keyword">char</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输出的结果并非是实际成员占用的字节数，这就是结构体内存对齐。</p><h2 id="结构体内存对齐的原因"><a href="#结构体内存对齐的原因" class="headerlink" title="结构体内存对齐的原因"></a>结构体内存对齐的原因</h2><blockquote><p>1.平台原因(移植原因)</p></blockquote><p>不是所有硬件平台都能访问任意地址上的任意数据，某些硬件平台只能在某些特定地址处取某些特定的数据，否则就会抛出硬件异常。也就是说计算机在读取内存数据时，只能在规定的地址处读数据，而不是在内存中任意位置都会可以读取的。</p><blockquote><p>2.效率原因</p></blockquote><p>正是由于只能在特定的地址处读取数据，所以在访问一些数据时，对于访问未对齐的内存，处理器需要进行两次访问；而对于对齐的内存，只需要访问一次就可以，其实这是一种以空间换时间的做法，并且这种做法是值得的。</p><h2 id="结构体内存对齐规则"><a href="#结构体内存对齐规则" class="headerlink" title="结构体内存对齐规则"></a>结构体内存对齐规则</h2><ol><li><p>第一个成员在结构体变量偏移为0的地址处，也就是第一个成员必须从头开始。</p></li><li><p>其他成员变量要对齐到某个数字（对齐数）的整数倍地址处。对齐数为编译器默认的一个对齐数与该成员大小中的较小值。vs中默认值是8，Linux默认值为4,(可以通过#pragma pack (N)修改，使用#pragma pack(show)可以查看对齐值)，但修改时N的取值只能设置成1，2，4，8，16。</p><blockquote><p><strong>一句话</strong>，就是结构体成员的偏移量得是该成员类型大小的整数倍。</p><p>当结构体有多个类型的成员变量时，后面的成员会引起偏移量的变化(这个变化指的是与你预想的按顺序排布(不对齐)不同)，就是对齐。</p></blockquote></li><li><p><strong>结构体的总大小为最大对齐数的整数倍。</strong>(每个成员都有自己的对齐数)</p></li><li><p>如果嵌套结构体，嵌套的结构体对齐到自己的最大对齐数的整数倍，结构体的整体大小就是所有最大对齐数(包括嵌套结构体的对齐数)的整数倍。</p></li></ol><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/images/C&C++%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.assets/image-20211002201929193.png" alt="image-20211002201929193"></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">offsetof(结构体名字,要求偏移量的结构体变量名-)</span><br><span class="line">可以求出当前变量再结构体中的偏移量</span><br><span class="line">(结构体的的第一个成员在偏移量为<span class="number">0</span>的位置(用这个求该结构体的第一个成员得到的结果就是<span class="number">0</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;结构体内存对齐&quot;&gt;&lt;a href=&quot;#结构体内存对齐&quot; class=&quot;headerlink&quot; title=&quot;结构体内存对齐&quot;&gt;&lt;/a&gt;结构体内存对齐&lt;/h1&gt;&lt;p&gt;先来看这几个结构体，并计算它们的大小&lt;/p&gt;
&lt;figure class=&quot;highlight c+</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-内存" scheme="http://doraemon2.xyz/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>C++智能指针</title>
    <link href="http://doraemon2.xyz/2021/10/01/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://doraemon2.xyz/2021/10/01/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</id>
    <published>2021-10-01T13:39:09.000Z</published>
    <updated>2021-10-01T13:41:02.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-智能指针"><a href="#C-智能指针" class="headerlink" title="C++智能指针"></a>C++智能指针</h1><h2 id="为什么要使用智能指针？"><a href="#为什么要使用智能指针？" class="headerlink" title="为什么要使用智能指针？"></a>为什么要使用智能指针？</h2><p><strong>&lt;&lt;C++ Primer&gt;&gt; p400</strong></p><p>虽然使用动态内存有时是必要的，但众所周知，正确地管理动态内存是非常棘手的。</p><p>为了更容易(同时也更安全的)地使用动态内存，新的标准库提供了两种智能指针，来管理动态对象。智能指针的行为类似于常规指针，重要的区别是它负责<strong>自动释放所指向的对象</strong>。</p><p>shared_ptr允许多个指针指向同一个对象，unique_ptr是“独占”所指向的对象。标准库还定义了一个名为weak_ptr的伴随类，它是一种弱引用，指向shared_ptr所管理的对象。这三种类型都定义在memeory头文件中。</p><p><strong>原理:</strong><br>将我们分配的动态内存都交给有生命周期的对象来处理，当对象过期时，让它的析构函数删除指向的内存。</p><ul><li>C++98 提供了 auto_ptr模板的解决方案</li><li>C++11 增加了 unique_ptr、shared_ptr、weak_ptr</li></ul><p>(就是一个类模板，里面有析构函数，能够自动释放这个对象开辟的内存。)</p><h2 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h2><p>C++98的智能指针模板，其定义了管理指针的对象，可以将new获得(直接或间接获得)的地址赋值给这种对象。当对象过期时，其析构函数会用delete来释放内存。</p><hr><p>就是一个类模板，自动调用析构函数释放。</p><hr><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line">用法: <span class="built_in">auto_ptr</span>&lt;类型&gt;变量名(<span class="keyword">new</span> 类型)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Test is construct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Test()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Test is destruct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;Test&gt;test(<span class="keyword">new</span> Test());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test.get();<span class="comment">//得到new出来的指针，一般不会这么用</span></span><br><span class="line"><span class="comment">//get出来的指针不用手动清理掉指向的内存，new出来的那块儿内存还是归智能指针管理。</span></span><br><span class="line"></span><br><span class="line">test.release();<span class="comment">//取消智能指针对动态内存的托管,之前分配的内存需要手动释放。</span></span><br><span class="line"></span><br><span class="line">test.reset();<span class="comment">//重置指针托管的内存地址，如果地址不一样，原来的会被析构掉，</span></span><br><span class="line">例如:test.reset(<span class="keyword">new</span> Test());<span class="comment">//创建一个新的，代替原来的，并将原来的释放掉。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>补充</strong>——new 一个对象加不加括号-<a href="https://blog.csdn.net/weixin_40539125/article/details/83715393">链接</a></p><hr><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>1.尽可能不要将auto_ptr 变量定义为全局变量或指针,程序结束之后释放，没有意义。</p><p>2.不要定义指向智能指针的指针。不会自动释放指针的指针。</p><p>3.除非自己知道后果，不要把auto_ptr 智能指针赋值给同类型的另外一个智能指针,解释如下。</p><p>4.C++11 后auto_ptr 已经被“抛弃”，已使用<strong>unique_ptr</strong>替代！</p><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><h3 id="auto-ptr弊端"><a href="#auto-ptr弊端" class="headerlink" title="auto_ptr弊端"></a>auto_ptr弊端</h3><p>auto_ptr是用于C++11之前的智能指针。由于auto_ptr基于排他所有权模式，两个之怎不能指向同一个资源，复制或赋值都会改变资源的所有权。auto_ptr主要问题如下:</p><ul><li>复制和赋值会改变资源的所有权，不符合人的直觉。</li><li>在 STL 容器中使用auto_ptr存在重大风险，因为容器内的元素必需支持可复制（copy constructable）和可赋值（assignable）。</li><li>不支持对象数组的操作。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">弊端<span class="number">1.</span> <span class="built_in">auto_ptr</span> 被C++<span class="number">11</span> 抛弃的主要理由 p1= p2 ,复制或赋值都会改变资源的所有权</span><br><span class="line">    </span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt; p1(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;I &#x27;m martin.&quot;</span>));</span><br><span class="line"><span class="function"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;I &#x27;m rock.&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">p1 = p2;</span><br><span class="line"><span class="comment">//p1先释放自己的动态内存然后接收p2的，p2再将自己置空</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">智能指针的内存管理陷阱(不只是它的缺陷，<span class="built_in">unique_ptr</span>也有)</span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt;p2;</span><br><span class="line"><span class="built_in">string</span>* ptr = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;智能指针的内存管理陷阱&quot;</span>);</span><br><span class="line">p2.reset(str);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt;p1;</span><br><span class="line">p1.reset(str);</span><br><span class="line">&#125;<span class="comment">//访问越界</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">弊端<span class="number">2.</span>在 STL 容器中使用<span class="built_in">auto_ptr</span>存在重大风险</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt;&gt;va;</span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt;p1(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;我是p1&quot;</span>));</span><br><span class="line"><span class="built_in">auto_ptr</span>&lt;<span class="built_in">string</span>&gt;p2(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;我是p2&quot;</span>));</span><br><span class="line">va.push_back(<span class="built_in">std</span>::move p1);</span><br><span class="line">va.push_back(<span class="built_in">std</span>::move p2);</span><br><span class="line"><span class="comment">//风险来啦</span></span><br><span class="line">va[<span class="number">0</span>] = va[<span class="number">1</span>];<span class="comment">//效果同上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">弊端<span class="number">3.</span>不支持对象数组的内存管理</span><br><span class="line">    <span class="built_in">auto_ptr</span>&lt;<span class="keyword">int</span>[]&gt;ary(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]);<span class="comment">//不行</span></span><br></pre></td></tr></table></figure><p><strong>总上所述</strong>，C++11用了更严谨的unique_ptr取代了aoto_ptr;</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>基于排他所有权模式：两个指针不能指向同一个资源。</li><li>无法进行左值unique_ptr复制构造，也无法进行左值复制赋值操作，但允许临时右值赋值构造和赋值。std::move。把右值转换为左值。</li><li>保存指向某个对象的指针，当它本身离开作用域时会自动释放它指向的对象。</li><li>在容器中保存指针是安全的。不支持直接复制v[0] = v[1]不行。</li><li>支持对象数组的内存管理，自动调用delete释放。</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unique_ptr</span>&lt;T&gt; up ; <span class="comment">//空的unique_ptr，可以指向类型为T的对象</span></span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;T&gt; <span class="title">up</span><span class="params">(<span class="keyword">new</span> T())</span> </span>;<span class="comment">//定义unique_ptr,同时指向类型为T的对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;T[]&gt; up ; <span class="comment">//空的unique_ptr，可以指向类型为T的数组对象</span></span><br><span class="line">unique_ptr&lt;T[]&gt; up(new T[]) ;//定义unique_ptr,同时指向类型为T的数组对象</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;T,D&gt; up(); //空的unique_ptr，接受一个D类型的删除器D，使用D释放内存</span><br><span class="line">unique_ptr&lt;T,D&gt; up(new T()); //定义unique_ptr,同时指向类型为T的对象，接受一个D类型的删除器d，使用删除器d来释放内存</span><br></pre></td></tr></table></figure><h3 id="删除器"><a href="#删除器" class="headerlink" title="删除器"></a>删除器</h3><p><strong>利用一个仿函数实现一个删除器</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">DestructTest</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Test* pt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//删除前做了一些操作</span></span><br><span class="line">        pt-&gt;dosomething();</span><br><span class="line">        <span class="keyword">delete</span> pt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//使用自定义的删除器</span></span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;Test, DestructTest&gt;up(<span class="keyword">new</span> Test());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p><strong>(接管所有权)一定要使用移动语义</strong></p><p>(可以对比理解一下类中的深浅拷贝)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s2</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>))</span></span>;</span><br><span class="line">s1 = <span class="built_in">std</span>::move(s2);</span><br><span class="line"><span class="comment">//s1将自己的所指向的动态内存释放，然后接管s2所指向的动态内存，s2将自己置空。</span></span><br></pre></td></tr></table></figure><h3 id="主动释放对象"><a href="#主动释放对象" class="headerlink" title="主动释放对象"></a>主动释放对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_prt&lt;<span class="keyword">int</span>&gt; <span class="title">s3</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>))</span></span>;</span><br><span class="line"><span class="comment">//如果你想早点释放早点用这块内存，或者说某个分支...那么你就主动释放它。</span></span><br><span class="line"><span class="comment">//多数情况下没必要，都主动释放了，那么我们使用智能指针的意义在哪呢？</span></span><br><span class="line">s3 = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">or</span></span><br><span class="line">s3 = <span class="literal">nullptr</span>;</span><br><span class="line">   <span class="keyword">or</span> </span><br><span class="line">s3.reset();</span><br></pre></td></tr></table></figure><h3 id="放弃对象控制权"><a href="#放弃对象控制权" class="headerlink" title="放弃对象控制权"></a>放弃对象控制权</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3.release();<span class="comment">//放弃对象的控制权，返回指针，然后将s3重为空</span></span><br></pre></td></tr></table></figure><blockquote><p>**&lt;&lt;C++ Primer&gt;&gt;**p418</p><p>​    调用release会切断unique_prt和它原来管理对象间的联系。release返回的指针通常被用来初始化另一个智能指针或给另一个智能指针赋值。在本例中，管理内存的责任简单地从一个指针转给了另一个。但是如果我们不用另一个智能指针来保存release返回的指针，我们的程序就要负责资源的释放。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p2.release();<span class="comment">//错误,p2不会释放内存，而且我们丢失了指针。</span></span><br><span class="line"><span class="keyword">auto</span> p = p2.release();<span class="comment">//正确，记得delete p</span></span><br></pre></td></tr></table></figure><h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3.swap(s4);<span class="comment">//将智能指针s3和s4所管控的对象进行交换。</span></span><br></pre></td></tr></table></figure><h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s3.reset();<span class="comment">//参数可以为空、内置指针，先将up所指向的对象释放，然后重置up的值，将up指向新的玩意儿。放一个地址进去指向这个地址对应的东西。</span></span><br><span class="line"></span><br><span class="line">s3.reset(p);<span class="comment">//如果提供了内置指针q,令s3指向p, 注意p得是动态开辟的东西(返回的指针)。</span></span><br><span class="line"></span><br><span class="line">s3.reset(s2.release());<span class="comment">//将s2所指向内存的所有权交给了s3</span></span><br></pre></td></tr></table></figure><p>(指针指向的是变量，存的是该变量的地址。)</p><h2 id="share-ptr"><a href="#share-ptr" class="headerlink" title="share_ptr"></a>share_ptr</h2><p>熟悉了unique_ptr 后，其实我们发现unique_ptr 这种排他型的内存管理并不能适应所有情况，有很大的局限！如果需要多个指针变量共享怎么办？</p><p>如果有一种方式，可以记录引用特定内存对象的智能指针数量，当复制或拷贝时，引用计数加1，当智能指针析构时，引用计数减1，如果计数为零，代表已经没有指针指向这块内存，那么我们就释放它！这就是 shared_ptr 采用的策略！</p><p><img src="/images/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.assets/image-20211001185236448.png" alt="image-20211001185236448"></p><h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;T&gt; sp ; <span class="comment">//空的shared_ptr，可以指向类型为T的对象</span></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> T())</span> </span>;<span class="comment">//定义shared_ptr,同时指向类型为T的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;T[]&gt; sp2 ; <span class="comment">//空的shared_ptr，可以指向类型为T[的数组对象 C++17后支持</span></span><br><span class="line">shared_ptr&lt;T[]&gt; sp3(new T[]&#123;...&#125;) ;//指向类型为T的数组对象 C++17后支持</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">sp4</span><span class="params">(<span class="literal">NULL</span>, D())</span></span>; <span class="comment">//空的shared_ptr，接受一个D类型的删除器，使用D释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">sp5</span><span class="params">(<span class="keyword">new</span> T(), D())</span></span>; <span class="comment">//定义shared_ptr,指向类型为T的对象，接受一个D类型的删除器，使用D删除器来释放内存</span></span><br></pre></td></tr></table></figure><p><strong>数组对象的管理</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;Person[]&gt;sp1(<span class="keyword">new</span> Person[<span class="number">5</span>](<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>));</span><br><span class="line"><span class="comment">//创建对象数组并传递参数-顺序创建，反向析构</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>方式1</strong>：构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptrr&lt;<span class="keyword">int</span>&gt; <span class="title">up1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;  <span class="comment">//int(10) 的引用计数为1</span></span><br><span class="line"></span><br><span class="line"><span class="function">shared_ptrr&lt;<span class="keyword">int</span>&gt; <span class="title">up2</span><span class="params">(up1)</span></span>;  <span class="comment">//使用智能指针up1构造up2, 此时int(10) 引用计数为2</span></span><br></pre></td></tr></table></figure><p><strong>方式2</strong>:使用make_shared初始化对象，<strong>分配内存效率更高</strong></p><p>make_shared函数的主要功能是在动态内存中分配一个对象并初始化它，返回指向此对象的shared_ptr;</p><p>(make_shared不算引用计数)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用法:</span><br><span class="line">make_shared&lt;类型&gt;(构造类型对象需要的参数列表); </span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p4 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>); <span class="comment">//多个参数以逗号&#x27;,&#x27;隔开，最多接受十个</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="built_in">string</span>&gt; p4 = make_shared&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;字符串&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptrr&lt;<span class="keyword">int</span>&gt; <span class="title">up1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;  <span class="comment">//int(10) 的引用计数为1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">up2</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">11</span>))</span></span>;   <span class="comment">//int(11) 的引用计数为1</span></span><br><span class="line"></span><br><span class="line">up1 = up2;<span class="comment">//int(10) 的引用计数减1,计数归零内存释放，up2共享int(11)给up1, int(11)的引用计数为2</span></span><br></pre></td></tr></table></figure><h3 id="主动释放对象-1"><a href="#主动释放对象-1" class="headerlink" title="主动释放对象"></a>主动释放对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shared_prt&lt;<span class="keyword">int</span>&gt;up(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>));</span><br><span class="line">up = <span class="literal">nullptr</span>;<span class="comment">//int(10)的引用计数-1，计数归零内存释放。</span></span><br><span class="line"><span class="keyword">or</span> </span><br><span class="line">up = <span class="literal">NULL</span>;<span class="comment">//作用同上</span></span><br></pre></td></tr></table></figure><h3 id="重置-1"><a href="#重置-1" class="headerlink" title="重置"></a>重置</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">up.reset();    <span class="comment">//将up重置为空指针，所管理对象引用计数 减1</span></span><br><span class="line"></span><br><span class="line">up.reset(p1);   <span class="comment">//将up重置为p1（的值）,up 管控的对象计数减1，p接管对p1指针的管控</span></span><br><span class="line"></span><br><span class="line">up.reset(p1,d);  <span class="comment">//将up重置为p1(的值),up管控的对象计数减1并使用d作为删除器</span></span><br></pre></td></tr></table></figure><h3 id="交换-1"><a href="#交换-1" class="headerlink" title="交换"></a>交换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::swap(p1,p2); <span class="comment">//交换p1 和p2 管理的对象，原对象的引用计数不变</span></span><br><span class="line">p1.swap(p2);    <span class="comment">//同上</span></span><br></pre></td></tr></table></figure><h3 id="使用陷阱"><a href="#使用陷阱" class="headerlink" title="使用陷阱"></a>使用陷阱</h3><p>shared_ptr作为被管控的对象的成员时，小心因循环引用造成无法释放资源。</p><p><img src="/images/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.assets/image-20211001210015451.png" alt="image-20211001210015451"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Boy()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;boy construct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Boy()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;boy destruct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_girl_friend</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;Girl&gt;&amp; g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">girl_friend = g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Girl&gt;girl_friend;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Girl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;girl construct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Girl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;girl destruct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_boy_friend</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;Boy&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boy_friend = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Boy&gt;boy_friend;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use_trap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Girl&gt;sp_girl(<span class="keyword">new</span> Girl());</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Boy&gt;sp_boy(<span class="keyword">new</span> Boy());</span><br><span class="line"></span><br><span class="line">sp_girl-&gt;set_boy_friend(sp_boy);</span><br><span class="line">sp_boy-&gt;set_girl_friend(sp_girl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象引用计数都为2</span></span><br><span class="line">  <span class="comment">//定义的指针和类中私有属性中的指针，都指向new出来的这个对象</span></span><br><span class="line">    <span class="comment">//boy-firend sp_boy girl-firend sp_girl</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sp_girl.use_count() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sp_boy.use_count() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">use_trap();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>断开其中的一条链接之后，两个指针即可正常的释放</strong></p><p><img src="/images/C++%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.assets/image-20211001210420124.png" alt="image-20211001210420124"></p><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><p>为了解决shared_ptr交叉循环引用无法释放的问题。</p><hr><p> weak_ptr 设计的目的是为配合 shared_ptr 而引入的一种智能指针来协助 shared_ptr 工作, 它只可以从一个 shared_ptr 或另一个 weak_ptr 对象构造, 它的构造和析构不会引起引用记数的增加或减少.  <strong>同时weak_ptr 没有重载*和-&gt;但可以使用 lock 获得一个可用的 shared_ptr 对象。</strong></p><hr><p>为了解决上面shared_ptr所出现的问题。提出weak_ptr,不影响引用计数。</p><hr><p>在必要的时候可以转换成shared_ptr</p><p>.lock();</p><p>完美解决。</p><p>类中弱指针，用shared指针构造weak指针，用的时候，将weak指针转成shared指针来调用成员函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Boy()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;boy construct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Boy()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;boy destruct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_girl_friend</span><span class="params">(weak_ptr&lt;Girl&gt;&amp; g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">girl_friend = g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">weak_ptr&lt;Girl&gt;girl_friend;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Girl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;girl construct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Girl()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;girl destruct&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_boy_friend</span><span class="params">(weak_ptr&lt;Boy&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">boy_friend = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">weak_ptr&lt;Boy&gt;boy_friend;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use_trap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Girl&gt;sp_girl(<span class="keyword">new</span> Girl());</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Boy&gt;sp_boy(<span class="keyword">new</span> Boy());</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;Girl&gt;w_girl(sp_girl);</span><br><span class="line">weak_ptr&lt;Boy&gt;w_boy(sp_boy);</span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Girl&gt;sp_girl2 = w_girl.lock();</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Boy&gt;sp_boy2 = w_boy.lock();</span><br><span class="line"></span><br><span class="line">sp_girl2-&gt;set_boy_friend(w_boy);</span><br><span class="line">sp_boy2-&gt;set_girl_friend(w_girl); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">use_trap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="智能指针注意要点"><a href="#智能指针注意要点" class="headerlink" title="智能指针注意要点"></a>智能指针注意要点</h2><ol><li>不要把一个原生指针给多个智能指针管理</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *x = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">up1</span><span class="params">(x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">up2</span><span class="params">(x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//警告! 以上代码使up1 up2指向同一个内存,非常危险或以下形式：up1.reset(x);up2.reset(x);</span></span><br></pre></td></tr></table></figure><ol start="2"><li>记得使用u.release()的返回值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在调用u.release()时是不会释放u所指的内存的，这时返回值就是对这块内存的唯一索引，如果没有使用这个返回值释放内存或是保存起来，这块内存就泄漏了</span><br></pre></td></tr></table></figure><ol start="3"><li>禁止delete 智能指针get 函数返回的指针</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果我们主动释放掉get 函数获得的指针，那么智能 指针内部的指针就变成野指针了，析构时造成重复释放，带来严重后果!</span><br></pre></td></tr></table></figure><ol start="4"><li>禁止用任何类型智能指针get 函数返回的指针去初始化另外一个智能指针！</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">一个典型的错误用法</span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sp4</span><span class="params">(sp1.get())</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-智能指针&quot;&gt;&lt;a href=&quot;#C-智能指针&quot; class=&quot;headerlink&quot; title=&quot;C++智能指针&quot;&gt;&lt;/a&gt;C++智能指针&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用智能指针？&quot;&gt;&lt;a href=&quot;#为什么要使用智能指针？&quot; class=&quot;head</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
    <category term="-指针" scheme="http://doraemon2.xyz/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C++explicit关键字、类型转换、左右值</title>
    <link href="http://doraemon2.xyz/2021/10/01/C++%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86&amp;C++11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://doraemon2.xyz/2021/10/01/C++%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86&amp;C++11%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-10-01T02:59:25.000Z</published>
    <updated>2021-10-03T11:06:34.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-补充知识-amp-C-11及其特性"><a href="#C-补充知识-amp-C-11及其特性" class="headerlink" title="C++补充知识&amp;C++11及其特性"></a>C++补充知识&amp;C++11及其特性</h1><p><img src="/images/C++%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86&C++11%E6%96%B0%E7%89%B9%E6%80%A7.assets/image-20210930092847356.png" alt="image-20210930092847356"></p><h2 id="explicit关键字"><a href="#explicit关键字" class="headerlink" title="explicit关键字"></a>explicit关键字</h2><p>加在类构造函数前表明该构造函数是显式的，并非隐式的，不能进行隐式类型转换！</p><p>类构造函数默认情况下声明为隐式。</p><p><strong>给构造函数加上关键字explicit使得该类创建对象必须显式调用构造。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">student <span class="title">xiaohua</span><span class="params">(<span class="number">18</span>)</span></span>;<span class="comment">//显式构造</span></span><br><span class="line">student xiaoming = <span class="number">18</span>;<span class="comment">//隐式构造</span></span><br><span class="line"><span class="function">student <span class="title">xiaoli</span><span class="params">(<span class="string">&quot;小李&quot;</span>，<span class="number">18</span>)</span></span>;<span class="comment">//显式构造</span></span><br><span class="line">student xiaomei = (<span class="string">&quot;小美&quot;</span>，<span class="number">18</span>);<span class="comment">//隐式构造-C++11之前编译不能过</span></span><br><span class="line"><span class="comment">//初始化参数列表C++11新增</span></span><br></pre></td></tr></table></figure><p>看到=要想是赋值呢，还是隐式构造呢。</p><h2 id="左值和右值的概念"><a href="#左值和右值的概念" class="headerlink" title="左值和右值的概念"></a>左值和右值的概念</h2><p><img src="/images/C++%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86&C++11%E6%96%B0%E7%89%B9%E6%80%A7.assets/image-20210930122633001.png" alt="image-20210930122633001"></p><p> 按字面意思，通俗的说，以赋值运算符=为界，左边的就是左值，右边的就是右值。</p><p>左值(lvalue)——代表一个在内存中占有确定位置的对象(就是有一个地址)。</p><p>右值(rvalue)——通过排他性来定义，每个表达式不是左值就是右值，rvalue是不在内存中占有确定位置的表达式，而是在<strong>存在寄存器</strong>中。</p><p>所有的左值(无论是数组，函数或不完全类型)都可以转化成右值。</p><h2 id="函数返回值当引用"><a href="#函数返回值当引用" class="headerlink" title="函数返回值当引用"></a>函数返回值当引用</h2><p>C++使用引用时的难点</p><ol><li><p>当函数返回值为引用时</p><p>若返回栈变量，不能称为其他引用的初始值，不能作为左值使用。</p><p>(函数在栈上开辟空间存放形参和局部变量，这个变量所在内存空格占的位置不是固定的，再有一个函数压进栈来，原来的局部变量所在内存被覆盖。(变量和其对应的地址对不上了,该变量指向的那个地址所存的内容被覆盖了)-个人理解)</p></li><li><p>若返回静态变量或全局变量</p><p>可以成为其他引用的初始值。</p><p>即可作为右值使用，也可以作为左值使用。</p></li><li><p>返回形参当引用</p><p>（注:C++链式编程中，经常用到引用， 例如运输符重载）</p></li></ol><h2 id="Array容器"><a href="#Array容器" class="headerlink" title="Array容器"></a>Array容器</h2><p>详见-<a href="https://blog.csdn.net/qq_51604330/article/details/120545493?spm=1001.2014.3001.5501">C++SLT容器</a>中。</p><p>(取容器中元素的地址貌似是没有意义的，除非他里面的内容不在改变，因为有的容器中元素发生变化后，里面的容器元素是会发生移动的。)</p><p>其中，有意思的是empty()接口永远false，因为在构造的时候要指定数量。</p><p><img src="/images/C++%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86&C++11%E6%96%B0%E7%89%B9%E6%80%A7.assets/image-20210930180201082.png" alt="image-20210930180201082"></p><h2 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C++类型转换"></a>C++类型转换</h2><p><strong>C语言风格</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = PI;<span class="comment">//隐式类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)PI;<span class="comment">//显式类型转换</span></span><br><span class="line"><span class="keyword">int</span>* addr = (<span class="keyword">int</span>*)<span class="number">0x888888</span>;<span class="comment">//强制类型转换，整数直接指针</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>C++类型转换操作符</strong></p><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>静态类型转换,同时做检查给予提示。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(PI);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//父子类之间的类型转换</span></span><br><span class="line">Dog* dog = <span class="keyword">new</span> Dog;</span><br><span class="line"><span class="comment">//子类指针转型到父类指针</span></span><br><span class="line">Animal* animal = <span class="keyword">static_cast</span>&lt;Animal*&gt;(dog);</span><br><span class="line"><span class="comment">//父类指针转型到子类指针</span></span><br><span class="line">Dog* dog2 = <span class="keyword">static_cast</span>&lt;Dog*&gt;(animal);</span><br><span class="line">Dog dog2;</span><br><span class="line"><span class="comment">//子类引用转型到父类引用</span></span><br><span class="line">Animal&amp; animal2 = <span class="keyword">static_cast</span>&lt;Animal&amp;&gt;(dog2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本类型转换</span></span><br><span class="line"><span class="keyword">int</span> kk = <span class="number">234</span>;</span><br><span class="line"><span class="keyword">char</span> cc = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(kk);<span class="comment">//都是模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把空指针转换成目标类型的空指针</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(<span class="literal">NULL</span>);</span><br><span class="line">Dog* dp = <span class="keyword">static_cast</span>&lt;Dog*&gt;(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把任何类型的表达式转化成void类型</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">void</span>* vp = <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(p);</span><br><span class="line">vp = p;<span class="comment">//效果相同 </span></span><br></pre></td></tr></table></figure><p>主要用法：</p><ul><li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。<strong>上行指针或引用(派生类到基类)转换安全，下行不安全</strong></li><li>用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性也要开发人员来保证。</li><li>把空指针转换成目标类型的空指针。</li><li>把任何类型的表达式转换成void类型。</li></ul><p>(写了会提醒编译器检查，提醒其他程序员要注意。)</p><p>(没事别转。)</p><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>(可以用于强制类型转换)</p><p>重新解释类型不同类型间的互转，数值与指针间的互转。</p><p>用法： TYPE  b <strong>=</strong> reinterpret_cast  &lt; TYPE&gt; (a)</p><p><strong>TYPE</strong>必须是一个指针、引用、算术类型、函数指针.</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>*&gt;(<span class="number">0x999999</span>);<span class="comment">//整型转指针</span></span><br><span class="line"><span class="keyword">int</span>* val = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(p);<span class="comment">//指针转整型</span></span><br><span class="line"></span><br><span class="line">Dog  dog1;</span><br><span class="line">Animal* a1 = &amp;dog1;</span><br><span class="line"></span><br><span class="line">Animal&amp; a2 = dog1;</span><br><span class="line">Dog&amp; dog3 = <span class="keyword">reinterpret_cast</span>&lt;Dog&amp;&gt;(a2);<span class="comment">//引用强转用法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：滥用 reinterpret_cast 运算符可能很容易带来风险。 除非所需转换本身是<strong>低级别</strong>的，否则应使用其他强制转换运算符之一。(低级别:在内存没啥差别)</p><p>与static_cast相加可替换掉C风格的类型转换。</p><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p>动态类型转换</p><p>将一个<strong>基类对象指针</strong>cast到继承类指针，dynamic_cast 会根据基类指针是否真正指向继承类指针来做相应处理。失败返回null，成功返回正常cast后的对象指针。</p><p>( 看该父类是否真正指向该子类(因为有多个子类。))</p><p>(子类* xx = dynamic_cast&lt;子类*&gt;(父类xx);</p><p>将一个<strong>基类对象引用</strong>cast 继承类对象，dynamic_cast 会根据基类对象是否真正属于继承类来做相应处理。<strong>失败抛出异常bad_cast。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">animalPlay</span><span class="params">(Animal* animal)</span> </span>&#123;</span><br><span class="line">animal-&gt;cry();</span><br><span class="line"></span><br><span class="line">Dog* pDog = <span class="keyword">dynamic_cast</span>&lt;Dog*&gt;(animal);</span><br><span class="line"><span class="keyword">if</span> (pDog) &#123;</span><br><span class="line">pDog-&gt;play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//pDog == NULL</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不是狗，别骗我！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat* pCat = <span class="keyword">dynamic_cast</span>&lt;Cat*&gt;(animal);</span><br><span class="line"><span class="keyword">if</span> (pCat) &#123;</span><br><span class="line">pCat-&gt;play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//pDog == NULL</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不是猫，别骗我！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">animalPlay</span><span class="params">(Animal&amp; animal)</span> </span>&#123;</span><br><span class="line">animal.cry();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Dog&amp; pDog = <span class="keyword">dynamic_cast</span>&lt;Dog&amp;&gt;(animal);</span><br><span class="line">pDog.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">std</span>::bad_cast bc) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不是狗，那应该是猫&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Cat&amp; pCat = <span class="keyword">dynamic_cast</span>&lt;Cat&amp;&gt;(animal);</span><br><span class="line">pCat.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">std</span>::bad_cast bc) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不是猫，那应该是上面的狗&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:    dynamic_cast在将父类cast到子类时，父类必须要有虚函数一起玩。</p><h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>去掉const属性，仅针对于指针和引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//对指针去掉const 重新赋值</span></span><br><span class="line">    <span class="keyword">char</span>* p1 = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接去掉const修改</span></span><br><span class="line">    <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(P)[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量字符串不行，考虑内存范围。</p><p>在去掉常量限定符之前，保证指针所指向的内存可被修改，不能修改则会引起异常。</p><h3 id="类型转换使用建议"><a href="#类型转换使用建议" class="headerlink" title="类型转换使用建议"></a>类型转换使用建议</h3><ol><li><p>static_cast静态类型转换，编译的时c++编译器会做编译时的类型检查；隐式转换；基本类型转换，父子类之间合理转换</p></li><li><p>若不同类型之间，进行强制类型转换，用reinterpret_cast&lt;&gt;() 进行重新解释。</p><p><strong>建议</strong>:</p></li></ol><p>C语言中  能隐式类型转换的，在c++中可用 static_cast&lt;&gt;()进行类型转换。因C++编译器在编译检查一般都能通过；C语言中不能隐式类型转换的，在c++中可以用 reinterpret_cast&lt;&gt;() 进行<strong>强制</strong>类型解释**。</p><p><strong>总结</strong>：static_cast&lt;&gt;()和reinterpret_cast&lt;&gt;() 基本上把C语言中的 强制类型转换给覆盖，注意reinterpret_cast&lt;&gt;()很难保证移植性。</p><p>3.dynamic_cast&lt;&gt;()，动态类型转换，安全的虚基类和子类之间转换；运行时类型检查</p><p>4.const_cast&lt;&gt;()，去除变量的只读属性    </p><hr><p>程序员必须清楚的知道: 要转的变量，类型转换前是什么类型，类型转换后是什么类型，转换后有什么后果。</p><p><strong>一般情况下，不建议进行类型转换；避免进行类型转换。</strong></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-补充知识-amp-C-11及其特性&quot;&gt;&lt;a href=&quot;#C-补充知识-amp-C-11及其特性&quot; class=&quot;headerlink&quot; title=&quot;C++补充知识&amp;amp;C++11及其特性&quot;&gt;&lt;/a&gt;C++补充知识&amp;amp;C++11及其特性&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>C++使用内置容器实现自定义容器</title>
    <link href="http://doraemon2.xyz/2021/09/30/C++%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8/"/>
    <id>http://doraemon2.xyz/2021/09/30/C++%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8/</id>
    <published>2021-09-30T00:56:24.000Z</published>
    <updated>2021-09-30T01:06:29.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySet容器实现"><a href="#MySet容器实现" class="headerlink" title="MySet容器实现"></a>MySet容器实现</h1><p><strong>MySet .hpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _myset</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _myset</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//基于set容器来实现MySet自定义容器</span></span><br><span class="line"><span class="comment">//参数1为 里面存的数据类型    参数2 用哪种容器来实现，并且默认为set容器</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 注:</span></span><br><span class="line"><span class="comment">在模板(template)中使用一个嵌套从属类型名称, 需要在前一个位置, 添加关键字。</span></span><br><span class="line"><span class="comment">就是在这个容器中使用另一个容器，当用类名调用的时候要加上前缀typename</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">ty</span>,<span class="keyword">class</span> _<span class="title">container</span> =</span> <span class="built_in">set</span>&lt;_ty&gt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySet</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名——便于书写</span></span><br><span class="line"><span class="keyword">typedef</span> MySet&lt;_ty, _container&gt; _MySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用基于的容器来初始化咱们这个MySet容器</span></span><br><span class="line">MySet() :c()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~MySet()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数-根据传进来的MySet容器</span></span><br><span class="line">MySet(<span class="keyword">const</span>  _MySet&amp; _Right) :c(_Right.c)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数-根据传进来的容器种类</span></span><br><span class="line">MySet(<span class="keyword">const</span> _container* _Left) :c(_Left)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">_MySet&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> _MySet&amp; _Right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;c = _Right.c;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//返回引用-内容-所以要*this指针得到内容并返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入元素-调用set容器-用返回值判断是否插入成功</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> _ty&amp; _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">typename</span> _container::iterator, <span class="keyword">bool</span>&gt;ret = c.insert(_Val);</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; _Val &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; _Val &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查容器是否为空-直接调用set容器接口</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除操作-直接调用set容器接口来判断</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> _ty&amp; _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c.erase(_Val) &gt; <span class="number">0</span>)<span class="comment">//存在并删除成功返回删除元素的个数，反之返回0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前容器长度-直接调用set容器接口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到当前容器的最大值-因为是有以set容器实现的，第一个是最小的，最后一个是最大的</span></span><br><span class="line"><span class="comment">//返回对组的用处在这里体现了，对组中可以存一个值+一个bool，来判断是否成功。</span></span><br><span class="line">pair&lt;_ty, bool&gt; GetMax()const</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;_ty, <span class="keyword">bool</span>&gt;ret;</span><br><span class="line"><span class="keyword">typename</span> _container::iterator max = c.end();</span><br><span class="line"><span class="comment">//先判断容器中是否有东西</span></span><br><span class="line"><span class="keyword">if</span> (c.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret.first = *(--max);</span><br><span class="line">ret.second = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret.second = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//得到最小值</span></span><br><span class="line"><span class="comment">//核心容器的::value_type 和_ty-传进来的数据类型相同</span></span><br><span class="line">pair&lt;_ty, bool&gt; GetMin()const</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;_ty, <span class="keyword">bool</span>&gt;ret;</span><br><span class="line"><span class="keyword">typename</span> _container::iterator min = c.begin();</span><br><span class="line"><span class="comment">//判断是否存在</span></span><br><span class="line"><span class="keyword">if</span> (min != c.end())</span><br><span class="line">&#123;</span><br><span class="line">ret.first = *c.begin();</span><br><span class="line">ret.second = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret.second = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">typename</span> _container::iterator it = c.begin(); it != c.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">//基于哪种容器实现</span></span><br><span class="line">_container c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;MySet.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MySet&lt;<span class="keyword">int</span>&gt;ms1;</span><br><span class="line">ms1.insert(<span class="number">5</span>);</span><br><span class="line">ms1.insert(<span class="number">15</span>);</span><br><span class="line">ms1.insert(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt;ret = ms1.GetMax();</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;找到了，最大值是:&quot;</span> &lt;&lt; ret.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找不到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt;ret2 = ms1.GetMin();</span><br><span class="line"><span class="keyword">if</span> (ret2.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了，最小值是:&quot;</span> &lt;&lt; ret2.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找不到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ms1.print();</span><br><span class="line"></span><br><span class="line">MySet&lt;<span class="keyword">int</span>&gt;ms2(ms1);</span><br><span class="line">ms2.print();</span><br><span class="line"></span><br><span class="line">ms2.erase(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">MySet&lt;<span class="keyword">int</span>&gt;ms3;</span><br><span class="line">ms3 = ms2;</span><br><span class="line">ms3.print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SizeFilter容器实现"><a href="#SizeFilter容器实现" class="headerlink" title="SizeFilter容器实现"></a>SizeFilter容器实现</h1><p><strong>SizeFilter.hpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SIZEFILTER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SIZEFILTER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ty</span>,<span class="keyword">class</span> _<span class="title">Container</span> =</span> <span class="built_in">set</span>&lt;_Ty&gt;&gt;<span class="comment">//第二个模板参数是默用set容器来实现这个新容器的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sizeFilter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> sizeFilter&lt;_Ty, _Container&gt; _Myt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在模板(template)中使用一个嵌套从属类型名称, 需要在前一个位置, 添加关键字。</span></span><br><span class="line"><span class="comment">就是在这个容器中使用另一个容器，当前类容器时模板，要加上前缀typename</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用核心容器中的类型(用set容器中的size_type 来当我们这个新容器的size_type)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Container::size_type size_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Container::value_type value_type; </span><br><span class="line">sizeFilter() :c()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//默认构造函数。初始化内置容器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sizeFilter(<span class="keyword">const</span> _Myt&amp; _Right) :c(_Right.c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//构造函数，通过指定特定的sizeFilter容器构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sizeFilter(<span class="keyword">const</span> _Container&amp; _Cont) :c(_Cont)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//构造函数，通过指定特定的容器构造</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">_Myt&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> _Myt&amp; _Right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用sizefilter给另一个sizefilter赋值</span></span><br><span class="line">c = _Right.c;</span><br><span class="line"><span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//用核心容器的功能</span></span><br><span class="line"><span class="keyword">return</span> c.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> value_type&amp; _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Container::iterator ci = c.insert(c.begin(), _Val);</span><br><span class="line"><span class="keyword">if</span> (ci != c.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入:&quot;</span> &lt;&lt; _Val &lt;&lt; <span class="string">&quot;成功&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入:&quot;</span> &lt;&lt; _Val &lt;&lt; <span class="string">&quot;失败&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> value_type&amp; _Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c.erase(_Val) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set容器自动排序,默认升序排列，第一个为min,最后一个为max</span></span><br><span class="line">std::pair&lt;value_type, bool&gt; getMin()//获取最小值</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">pair</span>&lt;value_type, <span class="keyword">bool</span>&gt; ret;</span><br><span class="line"><span class="keyword">typename</span> _Container::iterator min = c.begin();</span><br><span class="line"><span class="keyword">if</span> (min != c.end())<span class="comment">//存在最小值</span></span><br><span class="line">&#123;</span><br><span class="line">ret.first = *min;</span><br><span class="line">ret.second = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">ret.second = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;value_type, bool&gt; getMax()//获取最大值</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">pair</span>&lt;value_type, <span class="keyword">bool</span>&gt;ret;</span><br><span class="line"><span class="keyword">typename</span> _Container::iterator max = c.end();</span><br><span class="line"><span class="keyword">if</span> (c.size() &gt; <span class="number">0</span>)<span class="comment">//只要容器不是空的，里面就能取到最大值</span></span><br><span class="line">&#123;</span><br><span class="line">ret.first = *(--max);</span><br><span class="line">ret.second = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">ret.second = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">_Container c;<span class="comment">//基于哪个容器实现的，这个c就是什么类型的容器</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;SizeFilter.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sizeFilter&lt;<span class="keyword">int</span>&gt; sf;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">sf.insert(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;sizeFilter&lt;<span class="keyword">int</span>&gt;::value_type, <span class="keyword">bool</span>&gt;ret = sf.getMax();</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;最大值是:&quot;</span> &lt;&lt;ret.first&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//看迭代器里面是什么内容来决定操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;sizeFilter&lt;<span class="keyword">int</span>&gt;::value_type, <span class="keyword">bool</span>&gt;ret2 = sf.getMin();</span><br><span class="line"><span class="keyword">if</span> (ret2.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最小值是:&quot;</span> &lt;&lt; ret.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySet容器实现&quot;&gt;&lt;a href=&quot;#MySet容器实现&quot; class=&quot;headerlink&quot; title=&quot;MySet容器实现&quot;&gt;&lt;/a&gt;MySet容器实现&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;MySet .hpp&lt;/strong&gt;&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-STL" scheme="http://doraemon2.xyz/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++STL容器知识点小结</title>
    <link href="http://doraemon2.xyz/2021/09/29/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/29/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/</id>
    <published>2021-09-29T02:16:05.000Z</published>
    <updated>2021-09-29T11:26:09.293Z</updated>
    
    <content type="html"><![CDATA[<p>STL标准模板库</p><p>STL主要分为分为三类：</p><ul><li>algorithm（算法） -  对数据进行处理（解决问题) 步骤的有限集合</li><li>container（容器） -  用来管理一组数据元素</li><li> Iterator (迭代器） -  可遍历STL容器内全部或部分元素”的对象</li></ul><p>容器和算法通过迭代器可以进行无缝地连接。在STL中几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。</p><p>STL 最早源于惠普实验室，早于C++存在，但是C++引入STL概念后，STL就成为C++的一部分，因为它被内建在你的编译器之内，不需要另行安装。</p><p>STL被组织为下面的13个头文件:</p><table><thead><tr><th>&lt; algorithm &gt;</th><th>&lt; memory &gt;</th></tr></thead><tbody><tr><td>&lt; deque &gt;</td><td>&lt; numeric &gt;</td></tr><tr><td>&lt; functional &gt;</td><td>&lt; queue &gt;</td></tr><tr><td>&lt; iterator &gt;</td><td>&lt; set &gt;</td></tr><tr><td>&lt; vector &gt;</td><td>&lt; stack &gt;</td></tr><tr><td>&lt; list &gt;</td><td>&lt; utility &gt;</td></tr><tr><td>&lt; map &gt;</td><td></td></tr></tbody></table><hr><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>在实际的开发过程中，数据结构本身的重要性完全不逊于算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。</p><p>经典的数据结构数量有限，但是在项目实战中，我们常常重复着一些为了存放不同数据类型而实现顺序表、链表等结构而重复编写的代码，这些代码都十分相似，只是为了适应不同数据类型的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模板，STL容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，避免重复编码。</p><p>容器部分主要有由&lt; vector &gt;,&lt; list &gt;,&lt; deque &gt;,&lt; set &gt;,&lt; map &gt;,&lt; stack &gt; 和&lt; queue &gt;组成。</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210927103557400.png" alt="image-20210927103557400"></p><p><strong>容器的访问方式:</strong><br>下标访问、迭代器访问(iterator)</p><p><strong>容器的存储将原来的数据拷贝一份(存放指针即可解决这个问题)。</strong>给这个类定义一个拷贝构造函数，看是否调用即可验证。</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector是一个将元素置于动态数组中加以管理的容器。</p><p>vector可以随机存取元素，支持索引值直接存取， 用[]操作符或at()方法对元素进行操作。</p><p>vector尾部添加或移除元素非常快速。但是在中部或头部插入元素或移除元素<strong>比较费时</strong>。</p><p><strong>容量capacity要比真是的数据个数size大1。</strong></p><hr><p>当使用vector的默认构造函数(vector&lt; int &gt;v1)，不能直接通过下标访问，空间还没开辟。</p><h4 id="vector带参构造函数"><a href="#vector带参构造函数" class="headerlink" title="vector带参构造函数"></a>vector带参构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt;v2(存储元素个数，默认存储元素的数值);</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2(<span class="number">10</span>);</span><br><span class="line">构造时就分配空间，同时插入默认元素<span class="number">0</span></span><br><span class="line">指定容器中存储的元素个之后，此时该<span class="built_in">vector</span>的容量和大小相等。</span><br><span class="line">(用默认<span class="built_in">vector</span>的默认构造函数之后再往里面push_back的话，<span class="built_in">vector</span>会自动开辟空间<span class="number">4</span>个<span class="number">4</span>个的扩容。)</span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3(v2);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(v3.begin.() + x,v3.end());</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> test[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(test, test + <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2.assign(<span class="number">2</span>,<span class="number">888</span>);<span class="comment">//改变vector中的元素个数和元素值</span></span><br><span class="line">v2.assign(v3.begin(),v3.end());<span class="comment">//使用迭代器赋值</span></span><br><span class="line">v2.assign(test,test+<span class="number">3</span>);<span class="comment">//使用指针赋值 </span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = v3;<span class="comment">//调用赋值运算</span></span><br></pre></td></tr></table></figure><h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><p>vector会自动扩充存储大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v2.resize(<span class="number">4</span>);<span class="comment">//重新调整v2容器大小，多余的被抹除。不够的以0填充。</span></span><br><span class="line"></span><br><span class="line">v2.resize(<span class="number">18</span>,<span class="number">666</span>);<span class="comment">//扩充v2大小，以666填充</span></span><br><span class="line"></span><br><span class="line">如果原来大小就是这么大，则不会发生变化。</span><br></pre></td></tr></table></figure><h4 id="尾部的添加和删除"><a href="#尾部的添加和删除" class="headerlink" title="尾部的添加和删除"></a>尾部的添加和删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">v2.pop_back();</span><br></pre></td></tr></table></figure><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下标访问</span><br><span class="line">    v2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">at</span><br><span class="line">    v2.at(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">接口返回引用</span><br><span class="line">    v2.front();<span class="comment">//取到第一个元素</span></span><br><span class="line">v2.end();<span class="comment">//取到最后一个元素</span></span><br></pre></td></tr></table></figure><h4 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入单个元素</span></span><br><span class="line">v2.insert(迭代器,插入的数值);</span><br><span class="line"><span class="comment">//插入多个元素</span></span><br><span class="line">v2.insert(v2.begin(),<span class="number">3</span>,<span class="number">888</span>);<span class="comment">//在开始的位置插入三个888</span></span><br><span class="line">v2.insert(v2.begin(),v3.begin(),v3.end());<span class="comment">//将v3的内容从v2开始插入进去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入单个元素的时候返回值是一个迭代器</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把整个vector干掉</span></span><br><span class="line">v2.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//干掉的单个元素</span></span><br><span class="line">v2.erase(v2.begin()+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//干掉多个元素</span></span><br><span class="line">v2.erase(v2.begin(),b2.begin()+<span class="number">1</span>);<span class="comment">//不包括结尾，“左闭右开”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除单个元素返回值也是个迭代器</span></span><br></pre></td></tr></table></figure><hr><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque是“double-ended queue”的缩写，和vector一样都是STL的容器，唯一不同的是：</p><p><strong>deque是双端数组，而vector是单端的。</strong></p><p><strong>Deque 特点</strong>：</p><ul><li> deque在接口上和vector非常相似，在许多操作的地方可以直接替换。</li><li>deque可以随机存取元素（支持索引值直接存取，用[]操作符或at()方法）</li><li>deque头部和尾部添加或移除元素都非常快速, 但是在中部安插元素或移除元素比较费时。</li></ul><p>使用时，包含头文件：#include &lt; deque &gt;  </p><p>(deque使用多个数组实现)</p><p><strong>对比</strong>：</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210927155900584.png" alt="image-20210927155900584"></p><p>多数操作同vector</p><p><strong>deuqe可以快速在头部和尾部进行添加或者移除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.push_back(element);<span class="comment">//容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.push_front(element);<span class="comment">//容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.pop_back();        <span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.pop_front();    <span class="comment">//删除容器第一个数据</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的数据存取"><a href="#deque的数据存取" class="headerlink" title="deque的数据存取"></a>deque的数据存取</h4><ol><li><p>使用下标操作 deqIntA[0] = 100;</p></li><li><p>使用at 方法 如: deqIntA.at(2) = 100;</p></li><li><p>接口返回的引用 deqIntA.front() 和 deqIntA.back()  </p><p>注意：  第一和第二种方式必须注意越界</p></li></ol><hr><p><strong>end()返回的是一个指向最后一个元素之后位置的迭代器，就类似于字符串结束符。</strong></p><hr><h4 id="deque与迭代器"><a href="#deque与迭代器" class="headerlink" title="deque与迭代器"></a>deque与迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.begin();  <span class="comment">//返回容器中第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.end();  <span class="comment">//返回容器中最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.rbegin();  <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.rend();  <span class="comment">//返回容器中倒数最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.cbegin();  <span class="comment">//返回容器中第一个元素的常量迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.cend();  <span class="comment">//返回容器中最后一个元素之后的常量迭代器。</span></span><br></pre></td></tr></table></figure><hr><p>常量迭代器只能访问呢元素，不能修改元素。</p><hr><h4 id="deque的赋值"><a href="#deque的赋值" class="headerlink" title="deque的赋值"></a>deque的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.assign(beg,end);    <span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。注意该区间是左闭右开的区间。</span></span><br><span class="line"><span class="built_in">deque</span>.assign(n,elem);  <span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line"><span class="built_in">deque</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);<span class="comment">//重载等号操作符 </span></span><br><span class="line"><span class="built_in">deque</span>.swap(deq);  <span class="comment">// 将deque与本身的元素互换</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的大小"><a href="#deque的大小" class="headerlink" title="deque的大小"></a>deque的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.resize(num);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.resize(num, elem);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的插入"><a href="#deque的插入" class="headerlink" title="deque的插入"></a>deque的插入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.insert(pos,elem);  <span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.insert(pos,n,elem);  <span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.insert(pos,beg,end);  <span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值</span></span><br></pre></td></tr></table></figure><h4 id="deque的删除"><a href="#deque的删除" class="headerlink" title="deque的删除"></a>deque的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.clear();   <span class="comment">//移除容器的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.erase(beg,end); <span class="comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.erase(pos);   <span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br></pre></td></tr></table></figure><p><strong>注意迭代器遍历删除</strong></p><p>删除一个元素该位置的元素是会前移的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = deqIntA.begin(); it!=deqIntA.end();)&#123;</span><br><span class="line"><span class="keyword">if</span>(*it == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//接收-返回指向下一个位置的迭代器</span></span><br><span class="line">it = deqIntA.erase(it);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>list是一个<strong>双向链表容器</strong>，可高效地进行插入删除元素。</p><p><strong>List 特点：</strong></p><ul><li> list不可以随机存取元素，所以不支持at.(position)函数与[]操作符。可以对其迭代器执行++，但是不能这样操作迭代器：it+3。</li></ul><p>  <strong>即：</strong>list的迭代器不能加数字，但可以通过多次自增达到效果。</p><ul><li>使用时包含 #include &lt; list &gt;   </li></ul><h4 id="list对象的默认构造"><a href="#list对象的默认构造" class="headerlink" title="list对象的默认构造"></a>list对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>同样采用模板类实现,对象的默认构造形式：<span class="built_in">list</span>&lt;T&gt; listT;  如：</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lstInt;       <span class="comment">//定义一个存放int的list容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt; lstFloat;     <span class="comment">//定义一个存放float的list容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; lstString;    <span class="comment">//定义一个存放string的list容器。</span></span><br></pre></td></tr></table></figure><p>注意：尖括号内还可以设置指针类型或自定义类型。</p><hr><p>vector的内存空间是预先分配的。</p><p>list不存在capacity方法，所以它并没有提前分配空间。</p><hr><h4 id="list对象的带参数构造"><a href="#list对象的带参数构造" class="headerlink" title="list对象的带参数构造"></a>list对象的带参数构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：<span class="built_in">list</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line">方式二：<span class="built_in">list</span>(n,elem);    <span class="comment">//构造函数将n个elem拷贝给本身。</span></span><br><span class="line"></span><br><span class="line">方式三：<span class="built_in">list</span>(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst); <span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h4 id="list头尾的添加移除操作"><a href="#list头尾的添加移除操作" class="headerlink" title="list头尾的添加移除操作"></a>list头尾的添加移除操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.push_back(elem);  <span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop_back();      <span class="comment">//删除容器中最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.push_front(elem);   <span class="comment">//在容器开头插入一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop_front();      <span class="comment">//从容器开头移除第一个元素</span></span><br></pre></td></tr></table></figure><h4 id="list的数据存取"><a href="#list的数据存取" class="headerlink" title="list的数据存取"></a>list的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.front();   <span class="comment">//返回第一个元素。</span></span><br><span class="line"><span class="built_in">list</span>.back();  <span class="comment">//返回最后一个元素。</span></span><br></pre></td></tr></table></figure><h4 id="list与迭代器"><a href="#list与迭代器" class="headerlink" title="list与迭代器"></a>list与迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.begin();     <span class="comment">//返回容器中第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.end();      <span class="comment">//返回容器中最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.rbegin();     <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.rend();     <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.cbegin();  <span class="comment">//返回容器中第一个元素的常量迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.cend();  <span class="comment">//返回容器中最后一个元素之后的常量迭代器。</span></span><br></pre></td></tr></table></figure><h4 id="list的赋值"><a href="#list的赋值" class="headerlink" title="list的赋值"></a>list的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.assign(beg,end);   <span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.assign(n,elem);  <span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst);<span class="comment">//重载等号操作符。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.swap(lst);  <span class="comment">// 将lst与本身的元素互换。</span></span><br></pre></td></tr></table></figure><h4 id="list的大小"><a href="#list的大小" class="headerlink" title="list的大小"></a>list的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ist.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.resize(num);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.resize(num, elem);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><h4 id="list的插入"><a href="#list的插入" class="headerlink" title="list的插入"></a>list的插入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.insert(pos,elem);  <span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(pos,n,elem);  <span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(pos,beg,end);  <span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br></pre></td></tr></table></figure><h4 id="list的删除"><a href="#list的删除" class="headerlink" title="list的删除"></a>list的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.clear();<span class="comment">//移除容器的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.erase(beg,end);  <span class="comment">//**删除****[beg,end)**区间的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.erase(pos);   <span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line">lst.remove(elem);  <span class="comment">//删除容器中所有与elem值匹配的元素。</span></span><br></pre></td></tr></table></figure><p><strong>vector和deque中没有remove操作</strong></p><h4 id="list的反序排列"><a href="#list的反序排列" class="headerlink" title="list的反序排列"></a>list的反序排列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l <span class="built_in">list</span>.reverse();   <span class="comment">//反转链表，比如list包含1, 2, 3, 4, 5五个元素，运行此方法后，list就包含5, 4, 3, 2, 1元素。</span></span><br></pre></td></tr></table></figure><h3 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set/multiset"></a>set/multiset</h3><h4 id="set-multiset容器概念"><a href="#set-multiset容器概念" class="headerlink" title="set/multiset容器概念"></a>set/multiset容器概念</h4><p>set和multiset是一个<strong>集合</strong>容器，其中set所包含的元素是唯一的，集合中的元素按一定的顺序排列。set采用<strong>红黑树</strong>变体的数据结构实现，红黑树属于平衡二叉树。在插入操作和删除操作上比vector快。在n个数中查找目标数的效率是 log2 n 。</p><hr><p>C++11新特性:变参模板、完美转发和empalce——<a href="https://blog.csdn.net/qq_51604330/article/details/120517535?spm=1001.2014.3001.5501">C++11新特性:变参模板、完美转发和emplace</a></p><hr><h4 id="红黑树定义"><a href="#红黑树定义" class="headerlink" title="红黑树定义"></a>红黑树定义</h4><p>是每个节点都带有颜色属性（颜色为红色或黑色）的自平衡二叉查找树，满足下列性质：</p><ol><li>节点是红色或黑色</li><li>根节点是黑色</li><li>所有叶子节点都是黑色节点(NULL)</li><li>每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ol><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210928091221639.png" alt="image-20210928091221639"></p><h4 id="set-和-multiset-特点"><a href="#set-和-multiset-特点" class="headerlink" title="set 和 multiset 特点"></a>set 和 multiset 特点</h4><ol><li>set中元素插入过程是按排序规则插入(自动排序)，所以<strong>不能指定插入位置</strong>。</li><li>set不可以直接存取元素。（不可以使用at.(pos)与[]操作符）。</li><li>multiset与set的区别：set支持唯一键值，每个元素值只能出现一次；而multiset中<strong>同一值可以出现多次</strong>。</li><li>不可以直接修改set或multiset容器中的元素值，因为该类容器是自动排序的。<strong>如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素。</strong></li></ol><p>头文件 #include &lt; set &gt;  </p><h4 id="set-multiset对象的默认构造"><a href="#set-multiset对象的默认构造" class="headerlink" title="set/multiset对象的默认构造"></a>set/multiset对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; setInt;        <span class="comment">//一个存放int的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span>&gt; setFloat;      <span class="comment">//一个存放float的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; setString;     <span class="comment">//一个存放string的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; mulsetInt;       <span class="comment">//一个存放int的multi set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">float</span>&gt; multisetFloat;    <span class="comment">//一个存放float的multi set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="built_in">string</span>&gt; multisetString;   <span class="comment">//一个存放string的multi set容器。</span></span><br></pre></td></tr></table></figure><h4 id="set-multiset-对象的带参构造函数"><a href="#set-multiset-对象的带参构造函数" class="headerlink" title="set/multiset 对象的带参构造函数"></a>set/multiset 对象的带参构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;s); <span class="comment">//拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>(<span class="keyword">const</span> <span class="built_in">multiset</span> &amp;s); <span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h4 id="set对象的拷贝构造与赋值"><a href="#set对象的拷贝构造与赋值" class="headerlink" title="set对象的拷贝构造与赋值"></a>set对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);    <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);<span class="comment">//重载等号操作符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.swap(st);  <span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><hr><p>仿函数(函数对象)——<a href="https://blog.csdn.net/qq_51604330/article/details/120533423">C++仿函数(函数对象)</a>（STL重点）</p><hr><h4 id="set的插入和pair的用法"><a href="#set的插入和pair的用法" class="headerlink" title="set的插入和pair的用法"></a>set的插入和pair的用法</h4><p>pair表示一个<strong>对组</strong>，它将两个值视为一个单元，把两个值捆绑在一起。</p><p>pair&lt;T1,T2&gt;用来存放的两个值的类型，可以不一样，也可以一样，如T1为int，T2为float。T1,T2也可以是自定义类。</p><p>pair.first是pair里面的第一个值，是T1类型。</p><p>pair.second是pair里面的第二个值，是T2类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>容器的insert的返回值是一个对组</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span> &gt;ret = s1.insert(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*(ret.first)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ret.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">first返回插入元素的迭代器,*它得到的就是这个数值</span><br></pre></td></tr></table></figure><h4 id="set与迭代器"><a href="#set与迭代器" class="headerlink" title="set与迭代器"></a><strong>set与迭代器</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.insert(elem);   <span class="comment">//在容器中插入元素。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.begin();     <span class="comment">//返回容器中第一个数据的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.end();      <span class="comment">//返回容器中最后一个数据之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.rbegin();     <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.rend();     <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br></pre></td></tr></table></figure><p>注意循环遍历删除的时候it++的位置。</p><h4 id="set-multiset的大小"><a href="#set-multiset的大小" class="headerlink" title="set/multiset的大小"></a>set/multiset的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.size();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.empty();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><p>注意事项： 它们没有resize 方法</p><h4 id="set-multiset的删除"><a href="#set-multiset的删除" class="headerlink" title="set/multiset的删除"></a>set/multiset的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.clear(); <span class="comment">//清除所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(pos);   <span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(beg,end); <span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(elem);   <span class="comment">//删除容器中值为elem的元素,返回删除元素的数量</span></span><br></pre></td></tr></table></figure><p><strong>删除区间内的某个或某些元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">setInt是用<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;声明的容器，假设它内部现已包含按顺序的<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>元素。</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator itBegin=setInt.begin();</span><br><span class="line"></span><br><span class="line">++ itBegin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator itEnd=setInt.begin();</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">setInt.erase(itBegin,itEnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时容器setInt包含按顺序的1, 4, 5, 6四个元素。</span></span><br></pre></td></tr></table></figure><p><strong>删除容器中第一个元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.erase(setInt.begin());</span><br></pre></td></tr></table></figure><p><strong>删除容器中值为x的元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.erase(<span class="number">5</span>); </span><br></pre></td></tr></table></figure><p><strong>删除setInt的所有元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.clear();<span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure><h4 id="set-multiset的查找"><a href="#set-multiset的查找" class="headerlink" title="set/multiset的查找"></a>set/multiset的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.find(elem);  <span class="comment">//查找elem元素，返回指向elem元素的迭代器。</span></span><br><span class="line"><span class="comment">//find是否查找到元素，可以通过返回的迭代器和容器的end()方法进行比较。end()就相当于字符串结束符，返回最后一个元素后面位置的迭代器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.count(elem);  <span class="comment">//返回容器中值为elem的元素个数。对set来说，要么是0，要么是1。对multiset来说，值可能大于1。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.lower_bound(elem);  <span class="comment">//返回第一个&gt;=elem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.upper_bound(elem);  <span class="comment">//  返回第一个&gt;elem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.equal_range(elem);<span class="comment">//返回multiset容器中与elem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。这个函数返回两个迭代器，而这两个迭代器被封装在pair中。</span></span><br><span class="line"> <span class="comment">//例如 1 2 3 3 3 4 返回的是[3,6);</span></span><br></pre></td></tr></table></figure><h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h3><p>map是标准的<strong>关联式</strong>容器，一个map里存储的元素是一个键值对序列，叫做(key,value)键值对。它提供基于key快速检索数据的能力。</p><ol><li><p>map中<strong>key值是唯一的</strong>。集合中的元素按一定的顺序排列。元素插入过程是按排序规则插入，所以不能指定插入位置。</p></li><li><p>map底层的具体实现是采用红黑树变体的平衡二叉树的数据结构。在插入操作、删除和检索操作上比vector快很多。</p></li><li><p>map可以直接存取key所对应的value，支持[]操作符，如map[key]=value。</p><p>#include <map></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(<span class="number">18</span>,<span class="string">&quot;xiaohua&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>multimap与map的区别</strong></p><p>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符。</p><h4 id="map-multimap对象的默认构造"><a href="#map-multimap对象的默认构造" class="headerlink" title="map/multimap对象的默认构造"></a>map/multimap对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>/<span class="built_in">multimap</span>采用模板类实现，对象的默认构造形式：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;T1,T2&gt; mapTT; </span><br><span class="line"></span><br><span class="line"><span class="built_in">multimap</span>&lt;T1,T2&gt;  multimapTT;  </span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; mapA;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">float</span>&gt; mapB;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中T1,T2还可以用各种指针类型或自定义类型</span></span><br></pre></td></tr></table></figure><h4 id="map和multimap对象的带参数构造"><a href="#map和multimap对象的带参数构造" class="headerlink" title="map和multimap对象的带参数构造"></a>map和multimap对象的带参数构造</h4><p>方式一：map(beg,end);   //将[beg, end)区间中的元素拷贝给本身。</p><p>方式二：map(const map &amp;mapObject); //拷贝构造函数。</p><h4 id="map的插入与迭代器"><a href="#map的插入与迭代器" class="headerlink" title="map的插入与迭代器"></a>map的插入与迭代器</h4><p>map.insert(…);   //往容器插入元素，返回pair&lt;iterator,bool&gt;</p><p><strong>map中插入元素的四种方式</strong>：</p><p>假设  map&lt;int, string&gt; mapStu;</p><p>方式一、通过pair的方式插入对象</p><p>mapStu.insert(  pair&lt;int,string&gt;(1,”张三”)  );</p><p><strong>例如:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;王小花&quot;</span>));</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::iterator,<span class="keyword">bool</span>&gt;ret = m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;李小花&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (ret.second == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功啦&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二、通过pair的方式插入对象</p><p>mapStu.inset(make_pair(2, “李四”));</p><p>方式三、通过value_type的方式插入对象</p><p>mapStu.insert(  map&lt;int,string&gt;::value_type(3,”王五”)  );</p><p>方式四、通过数组的方式插入值</p><p>如果键值对已经存在则覆盖原值。</p><p>mapStu[4] = “赵六”;</p><p>mapStu[4] = “赵四”;覆盖赵六</p><p>mapStu[5] = “小七”；</p><p>(没有数值默认初始化)    </p><p><strong>注意：</strong> </p><p> 前三种方法，采用的是insert()方法，该方法<strong>返回值为pair&lt;iterator,bool&gt;</strong></p><p>此三种方式插入重复的键值会插入均会失败。 </p><p> 第四种方法非常直观，但碰到相同的键时会进行覆盖操作。比如插入key 为4的键值时，先在mapStu中查找主键为4的项，若不存在，则将一个键为4，值为默认初始化值的对组插入到mapStu中，然后再将值修改成“赵六”。若发现已存在4这个键，则修改这个键对应的value。</p><p>string strName = mapStu[8];  //取值操作或插入操作</p><p>l只有当mapStu存在8这个键时才是正确的取操作，否则会自动插入一个实例，键为8，值为默认构造时的初始化值。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.begin();  <span class="comment">//返回容器中第一个数据的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.end();  <span class="comment">//返回容器中最后一个数据之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.rbegin();  <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.rend();  <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br></pre></td></tr></table></figure><h4 id="map-multimap-排序"><a href="#map-multimap-排序" class="headerlink" title="map/multimap 排序"></a>map/multimap 排序</h4><p><strong>参数</strong></p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210928201038963.png" alt="image-20210928201038963"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;T1,T2,less&lt;T1&gt; &gt;  mapA;  <span class="comment">//该容器是按键的升序方式排列元素。未指定函数对象，默认采用less&lt;T1&gt;函数对象。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;T1,T2,greater&lt;T1&gt;&gt; mapB;  <span class="comment">//该容器是按键的降序方式排列元素。</span></span><br><span class="line"></span><br><span class="line">less&lt;T1&gt;与greater&lt;T1&gt;  可以替换成其它的函数对象functor。</span><br><span class="line"></span><br><span class="line">可编写自定义函数对象以进行自定义类型的比较，使用方法与<span class="built_in">set</span>构造时所用的函数对象一样。</span><br></pre></td></tr></table></figure><h4 id="map对象的拷贝构造与赋值"><a href="#map对象的拷贝构造与赋值" class="headerlink" title="map对象的拷贝构造与赋值"></a>map对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(<span class="keyword">const</span> <span class="built_in">map</span> &amp;mp);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">map</span> &amp;mp);<span class="comment">//重载等号操作符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.swap(mp);<span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><h4 id="map的大小"><a href="#map的大小" class="headerlink" title="map的大小"></a>map的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.size();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.empty();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h4 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.clear();<span class="comment">//删除所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(pos);<span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(beg,end);<span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(key);   <span class="comment">//删除容器中key为key的对组,返回删除的对组个数，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(key_type *first, key_type *last)  <span class="comment">//删除数组指定的半闭半开的区间中 特定的key对应的所有队组</span></span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">int</span> range[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="map-multimap的查找"><a href="#map-multimap的查找" class="headerlink" title="map/multimap的查找"></a>map/multimap的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.find(key);  查找键key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回<span class="built_in">map</span>.end();</span><br><span class="line"><span class="comment">//因为multimap中可以存在重复的键值，所以用循环迭代器查找的时候，可以输入具有相同键值的元素。</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;sb&quot;</span>));</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator it = m1.find(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">if</span> (it != m1.end())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="comment">//这个比count控制循环更灵活实用性更强</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.count(key);  <span class="comment">//返回容器中键值为key的对组个数。对map来说，要么是0，要么是1;对multimap来说，值&gt;=0。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.lower_bound(keyElem);  <span class="comment">//返回第一个key&gt;=keyElem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.upper_bound(keyElem);  <span class="comment">//  返回第一个key&gt;keyElem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.equal_range(keyElem);<span class="comment">//返回容器中key与keyElem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。（multimap重复元素）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">最后一个的代码示例</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mul1;</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;甲&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">2</span>, <span class="string">&quot;乙&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">2</span>, <span class="string">&quot;丙&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&quot;丁&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">4</span>, <span class="string">&quot;卯&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是两个玩意，所以要对组接收</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator,<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator&gt; RecvPari = mul1.equal_range(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (RecvPari.first != mul1.end())<span class="comment">//就相当于对组与对组对比</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注意对应map的元素存放在对组中</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*RecvPari.first).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (RecvPari.second != mul1.end())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//存放value在该对组的第二位</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*RecvPari.second).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出乙和丁</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><h4 id="queue简介"><a href="#queue简介" class="headerlink" title="queue简介"></a>queue简介</h4><ol><li>queue是队列容器，是一种“先进先出”的容器。</li><li>默认情况下<strong>queue是利用deque容器</strong>实现的一种容器。</li><li>它只允许在队列的前端（front）进行删除操作，而在队列的后端（back）进行插入操作</li><li>#include <queue>  </li></ol><p>默认用deque容器实现</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210929092413249.png" alt="image-20210929092413249"></p><p>可以显式指定类型来控制用什么容器实现</p><p>例如:（注意作为内置容器的容器是否与queue兼容）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><h4 id="queue对象的默认构造"><a href="#queue对象的默认构造" class="headerlink" title="queue对象的默认构造"></a>queue对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>采用模板类实现，<span class="built_in">queue</span>对象的默认构造形式：<span class="built_in">queue</span>&lt;T&gt; queT; 如：</span><br><span class="line"> </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; queueInt;       <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">float</span>&gt; queueFloat;   <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; queueString;   <span class="comment">//一个存放string的queue容器。</span></span><br><span class="line"></span><br><span class="line">...  </span><br><span class="line">注意： 尖括号内还可以设置指针类型或自定义类型。</span><br></pre></td></tr></table></figure><h4 id="queue-对象的带参构造"><a href="#queue-对象的带参构造" class="headerlink" title="queue 对象的带参构造"></a>queue 对象的带参构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; queueList; <span class="comment">//内部使用list 来存储队列元素的queue 容器.</span></span><br><span class="line"></span><br><span class="line">错误: <span class="built_in">queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; queueList; <span class="comment">//内部不能使用vector来存储队列元素</span></span><br></pre></td></tr></table></figure><h4 id="queue的push-与pop-方法"><a href="#queue的push-与pop-方法" class="headerlink" title="queue的push()与pop()方法"></a>queue的push()与pop()方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(elem);  <span class="comment">//往队尾添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.pop();    <span class="comment">//从队头处移除队首元素</span></span><br></pre></td></tr></table></figure><h4 id="queue对象的拷贝构造与赋值"><a href="#queue对象的拷贝构造与赋值" class="headerlink" title="queue对象的拷贝构造与赋值"></a>queue对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h4 id="queue的数据存取"><a href="#queue的数据存取" class="headerlink" title="queue的数据存取"></a>queue的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.back();  <span class="comment">//返回最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.front();  <span class="comment">//返回第一个元素</span></span><br><span class="line"></span><br><span class="line">可以通过这两个接口修改容器对应内容，因为返回的是引用</span><br><span class="line"> </span><br><span class="line">存放自定义对象的时候考虑<span class="built_in">queue</span>.emplace</span><br></pre></td></tr></table></figure><h4 id="queue的大小"><a href="#queue的大小" class="headerlink" title="queue的大小"></a>queue的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.empty();  <span class="comment">//判断队列是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.size();    <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h4 id="优先级队列priority-queue"><a href="#优先级队列priority-queue" class="headerlink" title="优先级队列priority_queue"></a>优先级队列priority_queue</h4><p><strong>优先队列</strong>： 它的入队顺序没有变化，但是出队的顺序是根据优先级的高低来决定的。<strong>优先级高的优先出队。</strong></p><p><strong>默认值越大优先级越大。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">priority_queue</span>(<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;);<span class="comment">//值越小优先级越大</span></span><br><span class="line"><span class="built_in">priority_queue</span>(<span class="keyword">int</span>,<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;);<span class="comment">//值越小优先级越大</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>stack是堆栈容器，是一种”先进后出的容器”。</p><p>默认基于deque容器实现的容器。</p><p>(如果用vector实现，在前面删除元素涉及到元素的移动，效率不如deque，一般情况下不建议使用vector。)</p><h4 id="stack对象的默认构造"><a href="#stack对象的默认构造" class="headerlink" title="stack对象的默认构造"></a>stack对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>采用模板类实现， <span class="built_in">stack</span>对象的默认构造形式： <span class="built_in">stack</span> &lt;T&gt; stkT;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stkInt;       <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">float</span>&gt; stkFloat;   <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; stkString;   <span class="comment">//一个存放string的stack容器。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br></pre></td></tr></table></figure><h4 id="stack的push-与pop-方法"><a href="#stack的push-与pop-方法" class="headerlink" title="stack的push()与pop()方法"></a>stack的push()与pop()方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(elem);  <span class="comment">//往栈头添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>.pop();     <span class="comment">//从栈头移除第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例:</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkInt;  </span><br><span class="line">stkInt.push(<span class="number">1</span>);</span><br><span class="line">stkInt.push(<span class="number">2</span>);</span><br><span class="line">stkInt.pop();  </span><br><span class="line">stkInt.push(<span class="number">3</span>);</span><br><span class="line">此时stkInt存放的元素是<span class="number">1</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="stack对象的拷贝构造与赋值"><a href="#stack对象的拷贝构造与赋值" class="headerlink" title="stack对象的拷贝构造与赋值"></a>stack对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h4 id="stack的数据存取"><a href="#stack的数据存取" class="headerlink" title="stack的数据存取"></a>stack的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top(); <span class="comment">//返回最后一个压入栈元素</span></span><br><span class="line"><span class="comment">//返回的是引用可以修改值</span></span><br></pre></td></tr></table></figure><h4 id="stack的大小"><a href="#stack的大小" class="headerlink" title="stack的大小"></a>stack的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>.size();    <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>C++11新增</p><h4 id="array容器概念"><a href="#array容器概念" class="headerlink" title="array容器概念"></a>array容器概念</h4><p>array是将元素置于一个固定数组中加以管理的容器。</p><p>array可以随机存取元素,支持索引值直接存取，用[]操作符或at()方法对元素进行操作，也可以使用迭代器访问</p><p>不支持动态的新增删除操作</p><p>array可以完全替代C语言中的数组，使操作数组元素更加安全！</p><h4 id="array对象的构造"><a href="#array对象的构造" class="headerlink" title="array对象的构造"></a>array对象的构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>采用模板类实现，<span class="built_in">array</span>对象的默认构造形式(涉及非类型参数-数值类模板)</span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;T，10&gt;  arrT;  <span class="comment">//10 为数值型模板参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1;   <span class="comment">//一个存放int的array容器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">float</span>, 6&gt; a2;  <span class="comment">//一个存放float的array容器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;student, 6&gt; a3; <span class="comment">//一个存放student的array容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;; <span class="comment">//定义时同时初始化</span></span><br></pre></td></tr></table></figure><h4 id="array的赋值"><a href="#array的赋值" class="headerlink" title="array的赋值"></a>array的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a2.assign(<span class="number">0</span>);<span class="comment">//改变原来array中的所有元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a2 ;</span><br></pre></td></tr></table></figure><h4 id="array的大小"><a href="#array的大小" class="headerlink" title="array的大小"></a>array的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>.max_size(); <span class="comment">//返回容器中最大的元素个数，与size 等同</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h4 id="array的数据存取"><a href="#array的数据存取" class="headerlink" title="array的数据存取"></a>array的数据存取</h4><ol><li>使用下标操作 a1[0] = 100;</li><li>使用at 方法 如: a1.at(2) = 100;</li><li> 接口返回的引用 a2.front() 和 a2.back()</li><li>返回内建数组的指针 a1.data()  </li></ol><p><strong>注意：  第一和第二种方式必须注意越界</strong></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><strong>注意：</strong>任何时候在模板(template)中使用一个嵌套从属类型名称, 需要在前一个位置, 添加关键字。</p><p>(写模板的时候注意)</p><p>例如:</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210929112319934.png" alt="image-20210929112319934"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span> <span class="built_in">list</span>&lt;T&gt;::const_iterator citor;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;STL标准模板库&lt;/p&gt;
&lt;p&gt;STL主要分为分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;algorithm（算法） -  对数据进行处理（解决问题) 步骤的有限集合&lt;/li&gt;
&lt;li&gt;container（容器） -  用来管理一组数据元素&lt;/li&gt;
&lt;li&gt; Iterator </summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
    <category term="-STL" scheme="http://doraemon2.xyz/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++仿函数(函数对象)</title>
    <link href="http://doraemon2.xyz/2021/09/28/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1)/"/>
    <id>http://doraemon2.xyz/2021/09/28/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1)/</id>
    <published>2021-09-28T08:43:10.000Z</published>
    <updated>2021-09-28T09:07:29.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仿函数-函数对象"><a href="#仿函数-函数对象" class="headerlink" title="仿函数(函数对象)"></a>仿函数(函数对象)</h1><p>研究set/multiset容器的排序原理。</p><p>当我们构造一个存放int类型的set容器时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br></pre></td></tr></table></figure><p>系统会自动帮我们设定并调用一个函数，自动调用头文件functional中的仿函数(一个类中重载了()实现了对比的操作，从而完成了排序)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>,less&lt;<span class="keyword">int</span>&gt;&gt; s1;</span><br></pre></td></tr></table></figure><p>less函数对象实现比较，为排序提供依据。（升序）<br>greater（降序）</p><p><strong>functional中，如图</strong></p><p><img src="/images/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1).assets/image-20210928153035870.png" alt="image-20210928153035870"></p><p><strong>手动实现:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> _age):age(_age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Student&amp; right) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &lt; right.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> Student&amp; right) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &gt; right.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Student() &#123; &#125; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Student,greater&lt;Student&gt;&gt; setStu;</span><br><span class="line">setStu.insert(<span class="number">19</span>);</span><br><span class="line">setStu.insert(<span class="number">20</span>);</span><br><span class="line">setStu.insert(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Student&gt;::iterator it = setStu.begin(); it != setStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;getAge()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类将()运算符重载为成员函数，这个类就称为函数对象类，这个类的对象就是函数对象。函数对象是一个对象，但是使用的形式看起来像函数调用，实际上也执行了函数调用，因而得名。——<a href="http://c.biancheng.net/view/354.html">C++函数对象详解 </a></p><p><strong>实现自己的less(greater)达到效果：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuncStudent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Student&amp; left, <span class="keyword">const</span> Student&amp; right)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> left.getAge() &gt; right.getAge();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Student,FuncStudent&gt; setStu;</span><br><span class="line"><span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">setStu.insert(s1);</span><br><span class="line">setStu.insert(s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Student,FuncStudent&gt;::iterator it = setStu.begin(); it != setStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;getAge()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仿函数(函数对象)概念</strong></p><ol><li>尽管函数指针被广泛用于实现函数回调，但C++还提供了一个重要的实现回调函数的方法，那就是函数对象。回调函数解释——<a href="https://cloud.tencent.com/developer/article/1373683#:~:text=%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1,%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BC%95%E7%94%A8%E3%80%82">回调函数</a></li><li>functor，翻译成函数对象，伪函数，它是是重载了“()”操作符的普通类对象。从语法上讲，它与普通函数行为类似。</li><li>functional头文件中包含的 greater&lt;&gt;与less&lt;&gt;就是函数对象。</li></ol><p><strong>set/setmulti容器就是调用函数对象的operator()方法去比较两个值的大小，从而实现的排序。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;仿函数-函数对象&quot;&gt;&lt;a href=&quot;#仿函数-函数对象&quot; class=&quot;headerlink&quot; title=&quot;仿函数(函数对象)&quot;&gt;&lt;/a&gt;仿函数(函数对象)&lt;/h1&gt;&lt;p&gt;研究set/multiset容器的排序原理。&lt;/p&gt;
&lt;p&gt;当我们构造一个存放int类型</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++:explicit关键字、左右值、类型转换</title>
    <link href="http://doraemon2.xyz/2021/09/27/C++11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace/"/>
    <id>http://doraemon2.xyz/2021/09/27/C++11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace/</id>
    <published>2021-09-27T13:06:35.000Z</published>
    <updated>2021-10-03T10:53:49.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11新特性：变参模板、完美转发和emplace"><a href="#C-11新特性：变参模板、完美转发和emplace" class="headerlink" title="C++11新特性：变参模板、完美转发和emplace"></a>C++11新特性：变参模板、完美转发和emplace</h1><p>使得 emplace 可以接受任意参数，这样就可以适用于任意对象的构建。</p><hr><p><strong>《C++Primer》</strong>:<br>新标准引入了三个是新成员——emplace、emplace_front和emplace_back,这些操作构造而不是拷贝元素。这些操作分别对应着，insert、push_front、push_back，允许我们将元素放置在容器头部、一个指定位置之前或容器尾部。</p><p>当我们调用push或insert成员函数时，我们将元素类型的对象传递给它们，这些对象被拷贝到容器中。而当我们调用一个emplace成员函数时，则是将参数传递给元素类型的构造函数。emplace成员使用这些参数在容器管理的内存空间中直接构造元素。</p><hr><p><strong>问题代码如下</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> age, <span class="keyword">const</span> <span class="keyword">char</span>* name) :age(age), name(name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="keyword">const</span> Student&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">age = other.age;</span><br><span class="line">name = other.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; vectStu;</span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="comment">//1.先定义再插入</span></span><br><span class="line"><span class="comment">//Student s1(18, &quot;老王&quot;);</span></span><br><span class="line"><span class="comment">//这样插入实际上是vector拷贝了一份s1放到了它自己里面，所以会执行一个有参构造和一个拷贝构造</span></span><br><span class="line"><span class="comment">//vectStu.push_back(s1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入临时变量</span></span><br><span class="line">vectStu.push_back(Student(<span class="number">19</span>, <span class="string">&quot;老张&quot;</span>));<span class="comment">//效果同上</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将对应的学生对象直接放入容器中会调用拷贝构造函数，拷贝一份放入容器中，<strong>引起了性能问题</strong>。</p><p> <strong>用变参模板和完美转发来解决这个问题。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vectStu.emplace_back(<span class="number">20</span>, <span class="string">&quot;小花&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/C-11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace.assets/image-20210927200858360.png" alt="image-20210927200858360"></p><p>变参模板——就是()中的参数。与该类有参构造函数参数相同。</p><p>完美转法——用上面这个参数私底下去调用该类的构造函数，构造一个对象放入到容器中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vectStu.emplace_back();<span class="comment">//相当于push_back</span></span><br><span class="line">vectStu.emplace();<span class="comment">//相当于insert</span></span><br></pre></td></tr></table></figure><p>如果发现还会出现多次调用情况，那是因为先放入了一个元素，然后由于空间不够，又重新开辟了一块新的空间，并且将原来的数据拷贝了过来。</p><p>这就是为什么vector容器在中间插入、删除元素挺费时的原因。</p><p><strong>补充:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不同容器相关用法有所不同</span><br><span class="line">    类似于 <span class="built_in">deque</span> <span class="built_in">list</span>中</span><br><span class="line">    还可以这样用</span><br><span class="line">    emplace_front();</span><br><span class="line">...</span><br><span class="line">    直接用emplace()——相当于insert</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-11新特性：变参模板、完美转发和emplace&quot;&gt;&lt;a href=&quot;#C-11新特性：变参模板、完美转发和emplace&quot; class=&quot;headerlink&quot; title=&quot;C++11新特性：变参模板、完美转发和emplace&quot;&gt;&lt;/a&gt;C++11新特性：变</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>C++异常处理知识点总结</title>
    <link href="http://doraemon2.xyz/2021/09/26/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/26/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-26T13:10:08.000Z</published>
    <updated>2021-09-26T13:13:40.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-handling-mechanism"><a href="#Exception-handling-mechanism" class="headerlink" title="Exception handling mechanism"></a>Exception handling mechanism</h1><hr><p>就是它要这个类型数值，你给它一个不合格的，反馈给你看错误提示。</p><hr><p><strong>异常</strong>是一种程序控制机制，与函数机制互补。</p><p>函数是一种以栈结构展开的上下函数衔接的程序控制系统。</p><p>异常是另一种控制结构,它可以在出现“意外”时中断当前函数,并以某种机制（类型匹配）回馈给隔代的调用者相关的信息。</p><hr><p><strong>C++ Primer中关于异常的解释：(p172)</strong></p><hr><p><strong>异常是指存在于运行时的反常行为，这些行为超出了函数正常功能的范围。</strong></p><p>典型的异常包括失去数据库链接以及遇到意外输入等。</p><p>处理反常行为可能是纯设计所有系统中最难的一部分。</p><hr><h2 id="通过返回值实现异常处理机制"><a href="#通过返回值实现异常处理机制" class="headerlink" title="通过返回值实现异常处理机制"></a>通过返回值实现异常处理机制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现文件的二进制拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp1 = <span class="literal">NULL</span>, * fp2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rb 只读方式打开一个二进制文件，只允许读取数据</span></span><br><span class="line">fopen_s(&amp;fp1, src, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wb 以只写的方式打开或新建一个二进制文件，只允许写数据。</span></span><br><span class="line">fopen_s(&amp;fp2, dest, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> readlen, writelen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果读到数据，则大于0</span></span><br><span class="line"><span class="keyword">while</span> ((readlen = fread(buffer, <span class="number">1</span>, BUFSIZE, fp1)) &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">writelen = fwrite(buffer, <span class="number">1</span>, readlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (readlen != writelen) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = copyfile(<span class="string">&quot;dest.txt&quot;</span>, <span class="string">&quot;src.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (ret) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开源文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开目标文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;拷贝文件时失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出现未知的情况!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throw-amp-try-catch实现异常处理机制"><a href="#throw-amp-try-catch实现异常处理机制" class="headerlink" title="throw &amp; try-catch实现异常处理机制"></a>throw &amp; try-catch实现异常处理机制</h2><p>对上面的代码加以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo 15-15  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile2</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">char</span>* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp1 = <span class="literal">NULL</span>, * fp2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fopen_s(&amp;fp1, src, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fopen_s(&amp;fp2, dest, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> readlen, writelen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((readlen = fread(buffer, <span class="number">1</span>, BUFSIZE, fp1)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">writelen = fwrite(buffer, <span class="number">1</span>, readlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (readlen != writelen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> - <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile1</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> copyfile2(dest, src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line">ret = copyfile1(<span class="string">&quot;dest.txt&quot;</span>, <span class="string">&quot;src.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">int</span> error) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出现异常啦！%d\n&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">string</span>* error) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;捕捉到字符串异常：%s\n&quot;</span>, error-&gt;c_str());</span><br><span class="line"><span class="keyword">delete</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解释</strong>：<br><strong>thorw——抛出异常</strong>：<br>程序的异常检测部分使用throw表达式引发一个异常。throw表达式包括关键字throw和紧随其后的一个表达式，这个表达式的类型就是抛出的异常类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> 表达式;</span><br></pre></td></tr></table></figure><p><strong>try——捕捉异常</strong>:</p><p>try语句块一开始是关键字try,随后紧跟一个快，这个块就像大多数一样式花括号括起来的语句序列。</p><p>跟在try块之后的是一个或多个catch子句。</p><p>catch字句包括三个部分：关键字catch、括号内一个(可能是未命名的)对象的声明(称作异常声明——就是上面抛出来的异常类型)以及一个块。</p><p>从哪调用忘拿抛，try。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    xxx</span><br><span class="line">    这里写可能抛出异常的程序段。-出现异常直接进入到<span class="keyword">catch</span></span><br><span class="line">    xxx,如果上面的这条语句执行了异常，那么这行就不会被执行。 </span><br><span class="line">&#125;<span class="keyword">catch</span>(异常处理类型 xxx(可写可不写))&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(...)&#123;&#125; <span class="comment">//接受所有异常</span></span><br></pre></td></tr></table></figure><p>如果抛出的异常类型没有对应捕捉的方式，则会直接中断程序(调用abort)。</p><p>得到的异常可以不处理继续抛出去。<strong>即</strong>：处理不了的异常，我们可以在catch的最后一个分支，使用throw语法，继续向调用者throw。</p><h2 id="异常接口声明"><a href="#异常接口声明" class="headerlink" title="异常接口声明"></a>异常接口声明</h2><p>可以在函数声明中列出可能抛出的所有异常类型，加强程序的课读性。声明了这几种，那就只能抛出这几种。如果抛出没有声明的异常类型，程序有可能直接终止。</p><p><strong>如下所示：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span> <span class="params">(xxx,xxx)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">float</span>, <span class="built_in">string</span> *, <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><p>如果没有包含异常接口的声明，此函数可以抛出任何类型的异常。</p><p>如果一个函数不想抛出任何异常,用throw()来声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(xxx,xxx)</span> <span class="title">throw</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="异常类型和声明周期"><a href="#异常类型和声明周期" class="headerlink" title="异常类型和声明周期"></a>异常类型和声明周期</h2><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926171925746.png" alt="image-20210926171925746"></p><p>throw字符串类型char*,实际上抛出的是指针，而且前面修饰指针的const也要严格进行匹配。</p><p><strong>抛出类对象异常</strong>:<br>可以抛出一个匿名对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> classname();</span><br></pre></td></tr></table></figure><p>这里编译器指定给我们生成了一个匿名对象。</p><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926174726826.png" alt="image-20210926174726826"></p><p>所以我们可以直接抛出一个匿名的对象，并且用引用接收这个匿名对象。</p><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926175202336.png" alt="image-20210926175202336"></p><p><strong>抛出类异常类型最佳方式是抛出匿名对象，并用引用接收。</strong></p><p><strong>用指针接收记得释放掉。</strong></p><p><strong>注意：引用和普通的形参传值不能共存。</strong></p><h2 id="异常与继承"><a href="#异常与继承" class="headerlink" title="异常与继承"></a>异常与继承</h2><p>异常也是类，我们可以创建自己的异常类。</p><p><strong>案例解释：</strong></p><hr><p>案例：设计一个数组类容器 Vector，重载[]操作，数组初始化时，对数组的个数进行有效检查 </p><p>1） index&lt;0 抛出异常errNegativeException </p><p>2） index = 0 抛出异常 errZeroException</p><p>3）index&gt;1000抛出异常errTooBigException </p><p>4）index&lt;10 抛出异常errTooSmallException </p><p>5）errSizeException类是以上类的父类，实现有参数构造、并定义virtual void printError()输出错误。</p><hr><p><strong>代码实现</strong>：</p><p>Vector.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;err.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Vector(<span class="keyword">int</span> len = <span class="number">128</span>);</span><br><span class="line">Vector(<span class="keyword">const</span> Vector&amp; other);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)<span class="keyword">const</span>;</span><br><span class="line">Vector&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other);</span><br><span class="line">~Vector();</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Vector&amp; other);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>* m_base;</span><br><span class="line"><span class="keyword">int</span> m_len;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Vector::Vector(<span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">errNegativeException <span class="title">err</span><span class="params">(len)</span></span>;</span><br><span class="line"><span class="keyword">throw</span> &amp;err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">errZeroException err(len);</span><br><span class="line"><span class="keyword">throw</span> &amp;err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &gt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">errTooBigException  err(len);</span><br><span class="line"><span class="keyword">throw</span>&amp; err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">errTooSmallException err(len);</span><br><span class="line"><span class="keyword">throw</span>  &amp;err;</span><br><span class="line">&#125;</span><br><span class="line">m_len = len;</span><br><span class="line">m_base = <span class="keyword">new</span> <span class="keyword">int</span>[m_len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector::Vector(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">m_len = other.m_len;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_base = <span class="keyword">new</span> <span class="keyword">int</span>[m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_len; i++)</span><br><span class="line">&#123;</span><br><span class="line">m_base[i] = other.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector::~Vector()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Vector::GetLength</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; Vector::<span class="keyword">operator</span>[](<span class="keyword">int</span> index)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_base[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; other.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; other.m_base[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">os &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vector&amp; Vector::<span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_base;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_len = other.m_len;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_base = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_base[i] = other.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Vector <span class="title">v</span><span class="params">(<span class="number">1111</span>)</span></span>;</span><br><span class="line"><span class="comment">//上面没有问题才会执行到下面的这个for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多态实现父类指针指向子类对象</span></span><br><span class="line"><span class="keyword">catch</span> (errSizeException* err)</span><br><span class="line">&#123;</span><br><span class="line">err-&gt;printError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*catch (errNegativeException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errNegativeException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errZeroException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errZeroException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errTooBigException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errTooBigException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errTooSmallException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errTooSmallException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>err.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">1) index&lt;0 抛出异常errNegativeException</span></span><br><span class="line"><span class="comment">2）index = 0 抛出异常 errZeroException</span></span><br><span class="line"><span class="comment">3）index&gt;1000抛出异常errTooBigException</span></span><br><span class="line"><span class="comment">4）index&lt;10 抛出异常errTooSmallException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">errSizeException类是以上类的父类，实现有参数构造、并定义virtual void printError()输出错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errSizeException</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errSizeException(<span class="keyword">int</span> size):m_size(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errNegativeException</span>:</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errNegativeException(<span class="keyword">int</span> size):errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errNegativeException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errZeroException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errZeroException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errZeroException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errTooBigException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errTooBigException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errTooBigException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errTooSmallException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errTooSmallException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errTooSmallException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：重载下标引用操作符需要返回引用、这样才可修改内部数据。这样操作的才是那他的内部数据。</strong></p><hr><p><strong>补充:</strong><br>匿名对象不同于创建临时对象。</p><p><strong>typename()</strong>;——<strong>创建临时对象</strong>，它的生命到下一行就结束了。</p><hr><h2 id="异常处理的基本思想"><a href="#异常处理的基本思想" class="headerlink" title="异常处理的基本思想"></a>异常处理的基本思想</h2><p>C++的异常处理机制使得异常的<strong>引发</strong>和异常的<strong>处理</strong>不必在同一个函数中，这样底层的函数可以着重解决具体问题，而不必过多的考虑异常的处理。上层调用者可以再适当的位置设计<strong>对不同类型异常</strong>的处理。</p><p>异常是专门针对抽象编程中的一系列错误进行处理的，C++中不能借助函数机制实现异常，因为栈结构的本质是先进后出，依次访问，无法进行跳跃，但错误处理的特征却是遇到错误信息就想要转到若干级之上进行重新尝试。</p><p>(多级调用时可以直接<strong>越级提示</strong>)</p><h2 id="标准库异常"><a href="#标准库异常" class="headerlink" title="标准库异常"></a>标准库异常</h2><p> <img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/%E6%A0%87%E5%87%86%E5%BA%93%E5%BC%82%E5%B8%B8.png"></p><p><strong>代码示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> age )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">249</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> out_of_range(<span class="string">&quot;年龄过大&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">m_age = age;</span><br><span class="line">m_space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"><span class="keyword">int</span>* m_space;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Student* s = <span class="keyword">new</span> Student(<span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (out_of_range &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (bad_alloc&amp; e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Exception-handling-mechanism&quot;&gt;&lt;a href=&quot;#Exception-handling-mechanism&quot; class=&quot;headerlink&quot; title=&quot;Exception handling mechanism&quot;&gt;&lt;/a&gt;Ex</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
