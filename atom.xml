<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://doraemon2.xyz/atom.xml" rel="self"/>
  
  <link href="http://doraemon2.xyz/"/>
  <updated>2021-10-22T10:56:37.382Z</updated>
  <id>http://doraemon2.xyz/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【单链表】一元多项式求和(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/22/%E3%80%90%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%91%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%92%8C(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/22/%E3%80%90%E5%8D%95%E9%93%BE%E8%A1%A8%E3%80%91%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%92%8C(C++)/</id>
    <published>2021-10-22T10:53:49.000Z</published>
    <updated>2021-10-22T10:56:37.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要求-amp-amp-实现流程"><a href="#要求-amp-amp-实现流程" class="headerlink" title="要求&amp;&amp;实现流程"></a>要求&amp;&amp;实现流程</h1><p><img src="https://img-blog.csdnimg.cn/48da2cf0fa54459fbd0c22dfabf67cc0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/c92c9508032942d391b3dabd073c73cc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/30d5b1e8faa84e4984621d7438546260.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d8e23e4090ed4c20aa387b329215d24e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/60d224e997fa4a12a24ab1eddefc8c16.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> cofe;<span class="comment">//系数</span></span><br><span class="line"><span class="keyword">int</span>  <span class="built_in">exp</span>;<span class="comment">//次方</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkList,LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LinkList;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkPushBack</span><span class="params">(LinkList* L, <span class="keyword">int</span> _cofe, <span class="keyword">int</span> _exp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* node = <span class="keyword">new</span> LinkNode;</span><br><span class="line">node-&gt;cofe = _cofe;</span><br><span class="line">node-&gt;<span class="built_in">exp</span> = _exp;</span><br><span class="line"></span><br><span class="line">LinkNode* temp = L;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = node;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputPoly</span><span class="params">(LinkList* L1, LinkList* L2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//系数，次方</span></span><br><span class="line"><span class="keyword">int</span> l1cofe = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l2cofe = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l1exp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l2exp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//几项式</span></span><br><span class="line"><span class="keyword">int</span> l1num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l2num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个多项式有几项?&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l1num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l1num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;项的系数:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l1cofe;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot;项的次方:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l1exp;</span><br><span class="line">LinkPushBack(L1, l1cofe, l1exp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个多项式输入完毕!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二个多项式有几项?&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l2num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l2num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span>&lt;&lt; <span class="string">&quot;项的系数:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l2cofe;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot;项的次方:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l2exp;</span><br><span class="line">LinkPushBack(L2, l2cofe, l2exp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二个多项式输入完毕！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;多项式输入完毕!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多项式求和运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sumList</span><span class="params">(LinkList* L1, LinkList* L2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* p = L1-&gt;next;<span class="comment">//p为结果链表</span></span><br><span class="line">LinkNode* q = L2-&gt;next;</span><br><span class="line">LinkNode* pFront = L1;</span><br><span class="line">LinkNode* qFront = L2;</span><br><span class="line"><span class="comment">//cofe系数</span></span><br><span class="line"><span class="comment">//exp次方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q &amp;&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;<span class="built_in">exp</span> == q-&gt;<span class="built_in">exp</span>)<span class="comment">//是同类项，可以合并，结果合并到p中</span></span><br><span class="line">&#123;</span><br><span class="line">p-&gt;cofe += q-&gt;cofe;</span><br><span class="line">LinkNode* temp = <span class="keyword">new</span> LinkNode;</span><br><span class="line"><span class="comment">//删除q的结点</span></span><br><span class="line">temp = q;</span><br><span class="line">qFront-&gt;next = temp-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工作指针后移</span></span><br><span class="line">pFront = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">q = qFront-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span> &lt; q-&gt;<span class="built_in">exp</span>)<span class="comment">//结果链表对应次方比q链表对应结点次方小，结果链表中工作指针后移</span></span><br><span class="line">&#123;</span><br><span class="line">pFront = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;<span class="built_in">exp</span> &gt; q-&gt;<span class="built_in">exp</span>)<span class="comment">//结果链表对应次方比q链表对应结点次方大，q对应结点插过来。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将这个结点插入到结果结点中</span></span><br><span class="line"></span><br><span class="line">qFront-&gt;next = q-&gt;next;</span><br><span class="line">pFront-&gt;next = q;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line"></span><br><span class="line">q = qFront-&gt;next;<span class="comment">//重新回到对应链表</span></span><br><span class="line"><span class="comment">//结果链表的前指针后移</span></span><br><span class="line">pFront = pFront-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果多项式L2的长度大于L1的，此时结束时，L2还有没遍历到的结点，次方大于L1所有的结点，直接插入到结果链表(L1)尾部</span></span><br><span class="line"><span class="keyword">if</span> (q)<span class="comment">//加个判断条件防止，L1最后一个项，系数大于L2的，也进入下面这个循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (q)</span><br><span class="line">&#123;</span><br><span class="line">pFront-&gt;next = q;</span><br><span class="line">pFront = pFront-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pFront-&gt;next = <span class="literal">NULL</span>;<span class="comment">//链接完成后尾结点next域置空</span></span><br><span class="line">&#125;</span><br><span class="line">L2-&gt;next = <span class="literal">NULL</span>;<span class="comment">//到达这里，L2除了head结点之外，后面的就算有内容也不属于它了。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;相加结果为:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">L1 = L1-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (L1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; L1-&gt;cofe &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; L1-&gt;<span class="built_in">exp</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">L1 = L1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryLink</span><span class="params">(LinkNode*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* tempNode = L;</span><br><span class="line"><span class="keyword">while</span> (tempNode)</span><br><span class="line">&#123;</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tempNode;</span><br><span class="line">tempNode = L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList* L1;</span><br><span class="line">LinkList* L2;</span><br><span class="line">initLinkList(L1);</span><br><span class="line">initLinkList(L2);</span><br><span class="line"></span><br><span class="line">inputPoly(L1, L2);</span><br><span class="line">sumList(L1, L2) ;</span><br><span class="line"></span><br><span class="line">destoryLink(L1);</span><br><span class="line">destoryLink(L2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>：<br><img src="https://img-blog.csdnimg.cn/7fa18aa10d1f4428aeeab48bd5c7d85d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;要求-amp-amp-实现流程&quot;&gt;&lt;a href=&quot;#要求-amp-amp-实现流程&quot; class=&quot;headerlink&quot; title=&quot;要求&amp;amp;&amp;amp;实现流程&quot;&gt;&lt;/a&gt;要求&amp;amp;&amp;amp;实现流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【算法】分治算法(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/22/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95-C/"/>
    <id>http://doraemon2.xyz/2021/10/22/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95-C/</id>
    <published>2021-10-22T08:42:18.000Z</published>
    <updated>2021-10-22T08:49:28.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><blockquote><p>将一个规模为N的问题分解为k个较小的子问题，这些子问题遵循的处理方式就是互相独立且与原问题相同。</p></blockquote><p><strong>两部分组成</strong>：</p><ul><li>分(divide):递归解决较小的问题。</li><li>治(conquer):然后从子问题的解构建原问题的解。</li></ul><p><strong>三个步骤</strong>：</p><ol><li>分解(divide):将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。</li><li>解决(conquer):若干子问题规模较小而容易被解决则直接解决，否则递归解决各个子问题。</li><li>合并(Combine):将各个子问题的解合并为原问题的解。</li></ol><p><strong>递归实现二分查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现二分查找</span></span><br><span class="line"><span class="comment">//找到这个值最后一级一级的传递return回来</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">int</span> minSub,<span class="keyword">int</span> maxSub,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minSub &gt; maxSub)<span class="comment">//无解</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (minSub + maxSub) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (num == arr[mid])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num &lt; arr[mid])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为中间数据arr[mid]大于num,所以新的范围从minSub到mid-1</span></span><br><span class="line">        <span class="keyword">return</span> BinarySearch(arr, minSub, mid - <span class="number">1</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//num &gt; arr[mid]</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为num大于中间数据arr[mid],所以新的范围从mid+1到maxSub</span></span><br><span class="line">        <span class="keyword">return</span> BinarySearch(arr, mid + <span class="number">1</span>, maxSub, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">64</span> &#125;;</span><br><span class="line">    <span class="comment">//数组-起始位置(数组索引范围)-要查找的值</span></span><br><span class="line">    <span class="keyword">int</span> index = BinarySearch(arr,<span class="number">0</span>,<span class="number">8</span>,<span class="number">64</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; index &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分治算法&quot;&gt;&lt;a href=&quot;#分治算法&quot; class=&quot;headerlink&quot; title=&quot;分治算法&quot;&gt;&lt;/a&gt;分治算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将一个规模为N的问题分解为k个较小的子问题，这些子问题遵循的处理方式就是互相独立且与原问题相同。&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【图】最短路径算法</title>
    <link href="http://doraemon2.xyz/2021/10/21/%E3%80%90%E5%9B%BE%E3%80%91%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
    <id>http://doraemon2.xyz/2021/10/21/%E3%80%90%E5%9B%BE%E3%80%91%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-21T11:00:05.000Z</published>
    <updated>2021-10-21T11:13:46.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的最短算法"><a href="#图的最短算法" class="headerlink" title="图的最短算法"></a>图的最短算法</h1><blockquote><p>从起点开始访问所有路径，可以到达终点的有多条地址,其中路径权值最小的为最短路径。<br>最短路径算法有深度优先遍历、广度优先遍历、Bellman-Ford算法、弗洛伊德算法、SPFA(Shortest Path Faster Algorithm)算法和迪杰斯特拉算法等。</p></blockquote><p><strong>本代码使用深度优先遍历</strong></p><p><strong>主要实现思路</strong>：</p><blockquote><p>从起点开始，到达终点有多条分支，这些分支中又有多条分支…<br>选择其实一条分支，走到终点，再选择另一个分支(temp =  temp -&gt;next)走到终点，分支的分支……</p></blockquote><p><strong>大致流程</strong>:<br><img src="https://img-blog.csdnimg.cn/82539303749b450595dfa1447cc0eb20.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><strong>代码实现</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">邻接列表的大致排列类似于哈希表</span></span><br><span class="line"><span class="comment">自己定义出&quot;邻接桶&quot;的概念，类似于“哈希桶”</span></span><br><span class="line"><span class="comment">邻接桶中存着每个顶点</span></span><br><span class="line"><span class="comment">每个顶点的通过EdgeNode——边，来链接着顶点和顶点，</span></span><br><span class="line"><span class="comment">每个顶点都可以作为起始点，指向/被指向。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这个容器就是“邻接桶”</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**   *</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**   *</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**   *</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**   *</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**   *</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">*顶点*</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">**</span></span><br><span class="line"><span class="comment">************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max_Size 1024 </span></span><br><span class="line"><span class="keyword">bool</span> visited[Max_Size];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EdgeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> adjvex;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EdgeNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">VertexNode</span>//顶点结点，这个就是邻接桶</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;<span class="comment">//结点数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EdgeNode</span>* <span class="title">first</span>;</span><span class="comment">//指向邻接第一条边</span></span><br><span class="line">&#125;VertexNode, AdjList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">AdjListGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">AdjList* adjlist;</span><br><span class="line"><span class="keyword">int</span> vex;<span class="comment">//顶点数</span></span><br><span class="line"><span class="keyword">int</span> edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line">&#125;AdjListGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过顶点对应的字符来寻找顶点在图中的邻接点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Location</span><span class="params">(AdjListGraph&amp; G,<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vex; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.adjlist[i].data == c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initGraph</span><span class="params">(AdjListGraph&amp; G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G.adjlist = <span class="keyword">new</span> AdjList[Max_Size];<span class="comment">//左侧的邻接桶</span></span><br><span class="line">G.edge = <span class="number">0</span>;</span><br><span class="line">G.vex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Max_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line">visited[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createGraph</span><span class="params">(AdjListGraph&amp; G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入该图的顶点数以及边数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vex &gt;&gt; G.edge;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入顶点data&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vex; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.adjlist[i].data;<span class="comment">//输入顶点所存数据</span></span><br><span class="line">G.adjlist[i].first = <span class="literal">NULL</span>;<span class="comment">//边和边的关系，置空，先不与任何边相连。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//确定顶点与顶点之间的关系，两个顶点形成一条边，有几条边，就有几对i1 i2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;<span class="comment">//保存输入的顶点的字符</span></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">0</span>, i2 = <span class="number">0</span>;<span class="comment">//保存顶点在数组中的下标</span></span><br><span class="line"><span class="comment">//将i1和i2链接起来</span></span><br><span class="line"><span class="comment">//i1为起点。i2为终点。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存边的权重</span></span><br><span class="line"><span class="keyword">int</span> weight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入想关联边的顶点&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.edge; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; weight;<span class="comment">//以v1为起点，v2为终点的边，权重是weight</span></span><br><span class="line">i1 = Location(G, v1);</span><br><span class="line">i2 = Location(G, v2);</span><br><span class="line"><span class="comment">//说明存在</span></span><br><span class="line"><span class="keyword">if</span> (i1 != <span class="number">-1</span> &amp;&amp; i2 != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">EdgeNode* temp = <span class="keyword">new</span> EdgeNode;</span><br><span class="line">temp-&gt;adjvex = i2;</span><br><span class="line">temp-&gt;next = G.adjlist[i1].first;<span class="comment">//头插法-类似于hashtable中的插入数据</span></span><br><span class="line">temp-&gt;weight = weight;</span><br><span class="line">G.adjlist[i1].first = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的最短路径算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_weight = <span class="number">0x7FFFFFFF</span>;<span class="comment">//定义一个最大的方便与之比较。（INT_MAX）</span></span><br><span class="line"><span class="keyword">int</span> steps = <span class="number">0</span>;<span class="comment">//已走过的步数</span></span><br><span class="line"><span class="keyword">int</span> path[Max_Size ] = &#123; <span class="number">0</span> &#125;;<span class="comment">//保存走过的路径</span></span><br><span class="line"><span class="keyword">int</span> shortest_path[Max_Size] = &#123; <span class="number">0</span> &#125;;<span class="comment">//保存最短路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求图的最短路径——深度优先遍历（前提是连通图）</span></span><br><span class="line"><span class="comment">//                            起点   终点      已走过的权重和   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjListGraph&amp; G,<span class="keyword">int</span> start ,<span class="keyword">int</span> end,<span class="keyword">int</span> weights)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (start == end)<span class="comment">//已经找到终点了，不需要遍历了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; steps; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.adjlist[path[i]].data &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//path中存的是对应结点在邻接桶中的下标，通过这个下标就能找到对应的data,即可找到走过的路径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该路径对应的长度是:&quot;</span> &lt;&lt; weights &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输入对应的路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (min_weight &gt; weights)<span class="comment">//取到当前最小路径</span></span><br><span class="line">&#123;</span><br><span class="line">min_weight = weights;</span><br><span class="line"><span class="built_in">memcpy</span>(shortest_path, path, steps * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">visited[start] = <span class="number">1</span>;</span><br><span class="line">EdgeNode* temp = G.adjlist[start].first;<span class="comment">//指向第一条边</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (temp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> weight = temp-&gt;weight;</span><br><span class="line">cur = temp-&gt;adjvex;<span class="comment">//通过这条边的指向，指过来的这个顶点，在邻接桶中的下标</span></span><br><span class="line"><span class="keyword">if</span> (!visited[cur])</span><br><span class="line">&#123;</span><br><span class="line">visited[cur] = <span class="number">1</span>;<span class="comment">//标记已经访问</span></span><br><span class="line">path[steps++] = cur;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line">DFS(G, cur, end, weights+weight);</span><br><span class="line"></span><br><span class="line">visited[cur] = <span class="number">0</span>;<span class="comment">//前一步探索完成后，置空cur,（应该是有路线含有重复结点时起到作用）</span></span><br><span class="line">path[--steps] = <span class="number">0</span>;<span class="comment">//路径回退</span></span><br><span class="line">&#125;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AdjListGraph G;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">initGraph(G);</span><br><span class="line"><span class="comment">//创建图</span></span><br><span class="line">createGraph(G);</span><br><span class="line"><span class="comment">//深度优先-寻找最短路径</span></span><br><span class="line">DFS(G, Location(G, <span class="string">&#x27;A&#x27;</span>), Location(G, <span class="string">&#x27;D&#x27;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功得到最短路径为&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//最短路径</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;起点&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (shortest_path[i] &gt; <span class="number">0</span> &amp;&amp; i &lt; Max_Size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; G.adjlist[shortest_path[i]].data ;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输入示例</strong>：<br><img src="https://img-blog.csdnimg.cn/5279a8ca6ec44afaae5cc9121c692c9f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图的最短算法&quot;&gt;&lt;a href=&quot;#图的最短算法&quot; class=&quot;headerlink&quot; title=&quot;图的最短算法&quot;&gt;&lt;/a&gt;图的最短算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从起点开始访问所有路径，可以到达终点的有多条地址,其中路径权值最小的为最短路径。&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-图" scheme="http://doraemon2.xyz/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(19)【简单】二叉树的前&amp;&amp;中&amp;&amp;后序遍历(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/19/LeetCode%E5%88%B7%E9%A2%98(19)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D&amp;&amp;%E4%B8%AD&amp;&amp;%E5%90%8E%E9%81%8D%E5%8E%86(%E9%9D%9E%E9%80%92%E5%BD%92)(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/19/LeetCode%E5%88%B7%E9%A2%98(19)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D&amp;&amp;%E4%B8%AD&amp;&amp;%E5%90%8E%E9%81%8D%E5%8E%86(%E9%9D%9E%E9%80%92%E5%BD%92)(C++)/</id>
    <published>2021-10-19T14:06:22.000Z</published>
    <updated>2021-10-19T14:07:38.662Z</updated>
    
    <content type="html"><![CDATA[<p><strong>精华在于进栈和出栈的时机</strong></p><h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">题目</a></p><p><img src="https://img-blog.csdnimg.cn/9d297ef375fb4b468c58ad49d2bfae32.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>思路：<br>中序遍历的顺序是，左 - 根 - 右<br>创建一个栈来存储结点，创建一个vector来存储中序遍历的值<br>从根结点开始，只要该结点有左子树，就将该结点压进栈中。<br>直到root为空。<br>取出栈顶元素，栈顶元素出栈，将该结点值存进recv。<br>…<br>剩下的只可意会不可言传了，</p><p>感谢这位老哥分享——<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/zhan-c-by-li-kou-it-16d5/">链接</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//中序遍历顺序-左-中-右</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;recv;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; Tstack;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//当前结点不为空或当前栈不为空</span></span><br><span class="line">       <span class="keyword">while</span>(root || !Tstack.empty())</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">while</span>(root)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//只要当前结点不为空就往栈里面压</span></span><br><span class="line">               Tstack.push(root);</span><br><span class="line">               root = root-&gt;left;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//此时栈顶元素为根节点左侧树最左的左子树</span></span><br><span class="line">           <span class="comment">//取到该结点</span></span><br><span class="line">           root = Tstack.top();</span><br><span class="line">           Tstack.pop();</span><br><span class="line">           <span class="comment">//pop出栈，存进recv中</span></span><br><span class="line">           recv.push_back(root-&gt;val);</span><br><span class="line">           root = root-&gt;right;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> recv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144.二叉树的前序遍历"></a>144.二叉树的前序遍历</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">题目</a><br><img src="https://img-blog.csdnimg.cn/57f870c20620471f83d7e8b07ea2cd17.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>非递归</strong><br>感谢这位老哥分享——<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/shu-de-qian-xu-bian-li-fei-di-gui-fang-fa-zhan-by-/">链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;recv;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt;Tstack;</span><br><span class="line">    <span class="keyword">while</span>(root || !Tstack.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(root)</span><br><span class="line">        &#123;</span><br><span class="line">            recv.push_back(root-&gt;val);</span><br><span class="line">            Tstack.push(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = Tstack.top();</span><br><span class="line">        Tstack.pop();</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> recv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145.二叉树的后序遍历"></a>145.二叉树的后序遍历</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">题目</a><br><img src="https://img-blog.csdnimg.cn/e6e1e58b4d444317b4dc7673d573d24b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>一直往栈里面往左节点，压到左边最后一个做结点，往回pop,判断当前这个结点是否右结点，有右结点就输出，最后判断自己。</p><p>感谢这位老哥分享思路—<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/er-cha-shu-hou-xu-fei-di-gui-bian-li-liang-chong-z/">链接</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt;Tstack;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        TreeNode* prev = <span class="literal">nullptr</span>;<span class="comment">//记录cur上一个指向的结点，比cur走慢一步</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!Tstack.empty() || cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//只有cur不为空，就一直往里面压左节点</span></span><br><span class="line">            <span class="keyword">while</span>(cur) </span><br><span class="line">            &#123;</span><br><span class="line">                Tstack.push(cur);</span><br><span class="line">                cur =cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = Tstack.top();</span><br><span class="line">            <span class="comment">//如果当前结点没有右结点 ||  右结点已经访问过了</span></span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;right || prev == cur-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                Tstack.pop();</span><br><span class="line">                result.push_back(cur-&gt;val);</span><br><span class="line">                prev = cur;</span><br><span class="line">                <span class="comment">//要从栈里面往外面吐结点，所以要将cur置为null</span></span><br><span class="line">                cur = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>   result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大致流程感觉<br><img src="https://img-blog.csdnimg.cn/88d1252a9a964302bf56a25c8757cb2c.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/be98cf30ed3240ceabe2540a448efaff.gif#pic_center#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;精华在于进栈和出栈的时机&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;94-二叉树的中序遍历&quot;&gt;&lt;a href=&quot;#94-二叉树的中序遍历&quot; class=&quot;headerlink&quot; title=&quot;94.二叉树的中序遍历&quot;&gt;&lt;/a&gt;94.二叉树的中序遍历&lt;/h1&gt;</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
    <category term="-树" scheme="http://doraemon2.xyz/tags/%E6%A0%91/"/>
    
    <category term="-二叉树" scheme="http://doraemon2.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】哈希表(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/18/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%93%88%E5%B8%8C%E8%A1%A8(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/18/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%93%88%E5%B8%8C%E8%A1%A8(C++)/</id>
    <published>2021-10-18T13:16:34.000Z</published>
    <updated>2021-10-18T13:30:19.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>哈希表-散列表， 它是基于快速存储的角度设计的，也是一种典型的“空间换时间”的做法。</p><p>(键值(编号)就代表了这个数据。)</p><p><img src="https://img-blog.csdnimg.cn/d558087d4c0d4f9fb7bd9cd4e703a122.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="链式存储实现"><a href="#链式存储实现" class="headerlink" title="链式存储实现"></a>链式存储实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_SIZE 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>_<span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">void</span>* data;</span><br><span class="line">&#125;ListNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提高可读性和可维护性</span></span><br><span class="line"><span class="keyword">typedef</span> ListNode* List;</span><br><span class="line"><span class="keyword">typedef</span> ListNode* Element;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HashTable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> TableSize;<span class="comment">//哈希桶的大小</span></span><br><span class="line">List* ThisList;</span><br><span class="line">&#125;HashTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key,计算索引，定位Hash桶的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (key % TableSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化哈希表</span></span><br><span class="line"><span class="function">HashTable* <span class="title">initHash</span><span class="params">(<span class="keyword">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HashTable* hTable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (TableSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">TableSize = DEFAULT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line">hTable = <span class="keyword">new</span> HashTable;</span><br><span class="line">hTable-&gt;TableSize = TableSize;</span><br><span class="line">hTable-&gt;ThisList = <span class="keyword">new</span> List[TableSize];<span class="comment">//哈希桶</span></span><br><span class="line"><span class="keyword">if</span> (!hTable-&gt;ThisList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为Hash桶的对应指针数组初始化链表结点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TableSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">hTable-&gt;ThisList[i] = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (!hTable-&gt;ThisList[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(hTable-&gt;ThisList[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hTable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表中查找元素</span></span><br><span class="line"><span class="function">Element <span class="title">findHash</span><span class="params">(HashTable* hashtable, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line">Element e = <span class="literal">NULL</span>;</span><br><span class="line">i = Hash(key, hashtable-&gt;TableSize);</span><br><span class="line">L = hashtable-&gt;ThisList[i];</span><br><span class="line">e = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (e &amp;&amp; e-&gt;key != key)</span><br><span class="line">&#123;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertHash</span><span class="params">(HashTable* hashtable, <span class="keyword">int</span> key, <span class="keyword">void</span>* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Element e = <span class="literal">NULL</span>, tmp = <span class="literal">NULL</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line">e = findHash(hashtable, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!e) </span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (!tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">L = hashtable-&gt;ThisList[Hash(key, hashtable-&gt;TableSize)];<span class="comment">//前插法 </span></span><br><span class="line">tmp-&gt;data = value;</span><br><span class="line">tmp-&gt;key = key;</span><br><span class="line">tmp-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;这个键已经存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteHash</span><span class="params">(HashTable* hashtable, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Element e = <span class="literal">NULL</span>, last = <span class="literal">NULL</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = Hash(key, hashtable-&gt;TableSize);</span><br><span class="line">L = hashtable-&gt;ThisList[i];</span><br><span class="line">last = L;</span><br><span class="line">e = L-&gt;next;</span><br><span class="line"><span class="comment">//key是所对应数据的数字代号，这个每个元素是不同的，i是对应数据所在的hash桶，也就是key % tablesize,多个元素可以是同一个</span></span><br><span class="line"><span class="keyword">while</span> (e &amp;&amp; e-&gt;key != key)</span><br><span class="line">&#123;</span><br><span class="line">last = e;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (e)</span><br><span class="line">&#123;</span><br><span class="line">last-&gt;next = e-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该key不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到对应的ListNode提取元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">extract</span><span class="params">(Element e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  e ? e-&gt;data : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *elems1 =<span class="string">&quot;王小花&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> *elems2 =<span class="string">&quot;李小华&quot;</span>;</span><br><span class="line">  <span class="keyword">char</span> *elems3 =<span class="string">&quot;张富贵&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> HashTable* hashtable = <span class="literal">NULL</span>;</span><br><span class="line"> hashtable = initHash(<span class="number">31</span>);</span><br><span class="line"> insertHash(hashtable, <span class="number">1</span>, elems1);</span><br><span class="line"> insertHash(hashtable, <span class="number">2</span>, elems2);</span><br><span class="line"> insertHash(hashtable, <span class="number">3</span>, elems3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//查找方式1</span></span><br><span class="line"> Element findky = findHash(hashtable, <span class="number">2</span>);</span><br><span class="line"> <span class="keyword">if</span> (findky)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">const</span> <span class="keyword">char</span>*)findky-&gt;data &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//强转</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Not Find this Key!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找方式2</span></span><br><span class="line">Element e = findHash(hashtable, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">const</span> <span class="keyword">char</span>*)extract(e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Not Find this Key!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序存储实现"><a href="#顺序存储实现" class="headerlink" title="顺序存储实现"></a>顺序存储实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Hash_Size 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Hash_Bucket 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HashMem</span>//哈希表存储的数据类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">void</span>* data;</span><br><span class="line">&#125;HashMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">hash</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">HashMember Hash_Table[Hash_Bucket][Hash_Size];</span><br><span class="line"><span class="keyword">int</span> _HashSize;<span class="comment">//哈希桶的索引</span></span><br><span class="line">&#125;Hash_Table;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多个计数器不能指向同一个计数器变量，并且不能是局部变量，所以在这里创建一个全局的计数器变量数组</span></span><br><span class="line"><span class="keyword">int</span> CountArry[Hash_Bucket];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initHashtable</span><span class="params">(Hash_Table*hashtable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!hashtable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashtable-&gt;_HashSize = Hash_Bucket;<span class="comment">//哈希桶</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hashtable-&gt;Hash_Table)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为每个哈希桶在第[0]位置添加一个记录当前桶中元素个数的计数器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Hash_Bucket; i++)</span><br><span class="line">&#123;</span><br><span class="line">HashMember Count;</span><br><span class="line"><span class="keyword">int</span>* count = &amp;(CountArry[i]);</span><br><span class="line">Count.data = count;</span><br><span class="line">Count.key = -(i + <span class="number">1</span>);</span><br><span class="line">hashtable-&gt;Hash_Table[i][<span class="number">0</span>] = Count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算要存储元素的哈希桶索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> hash_bucket)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (key % Hash_Bucket);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findHashtable</span><span class="params">(Hash_Table* hashtable, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先找到对应的哈希桶</span></span><br><span class="line"><span class="keyword">int</span> index = Hash(key, Hash_Bucket);</span><br><span class="line"><span class="keyword">int</span> count = *((<span class="keyword">int</span>*)(hashtable-&gt;Hash_Table[index][<span class="number">0</span>].data));<span class="comment">//对应桶中的元素个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; count + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hashtable-&gt;Hash_Table[index][i].key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertHashtable</span><span class="params">(Hash_Table* hashtable, <span class="keyword">int</span> key, <span class="keyword">void</span>* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!hashtable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> index = Hash(key, hashtable-&gt;_HashSize);</span><br><span class="line"></span><br><span class="line">HashMember newHashMember;</span><br><span class="line">newHashMember.data = data;</span><br><span class="line">newHashMember.key = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isExistence = findHashtable(hashtable,key);<span class="comment">//先找一下，如果没有就往对应的哈希桶中塞。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isExistence)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到每个哈希桶的计数器，在当前计数器数量所指向的位置的下一个位置放入元素，然后自增计数器。</span></span><br><span class="line">hashtable-&gt;Hash_Table[index][*((<span class="keyword">int</span>*)(hashtable-&gt;Hash_Table[index][<span class="number">0</span>].data))+<span class="number">1</span>] = newHashMember;</span><br><span class="line">(*((<span class="keyword">int</span>*)(hashtable-&gt;Hash_Table[index][<span class="number">0</span>].data)))++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该key已经存在了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteHashtable</span><span class="params">(Hash_Table* hashtable,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!hashtable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (findHashtable(hashtable, key))<span class="comment">//找到了才能删除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到了，去那拿对应的哈希桶</span></span><br><span class="line"><span class="keyword">int</span> index = Hash(key, hashtable-&gt;_HashSize);</span><br><span class="line"><span class="comment">//拿到桶中的元素个数</span></span><br><span class="line"><span class="keyword">int</span> count = *((<span class="keyword">int</span>*)hashtable-&gt;Hash_Table[index][<span class="number">0</span>].data);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i; i &lt; count + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (hashtable-&gt;Hash_Table[index][i].key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时的i的位置就是对应key的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; count - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">hashtable-&gt;Hash_Table[index][j] = hashtable-&gt;Hash_Table[index][j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计数器--</span></span><br><span class="line">(*((<span class="keyword">int</span>*)hashtable-&gt;Hash_Table[index][<span class="number">0</span>].data))--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cleanHashtable</span><span class="params">(Hash_Table* hashtable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!hashtable)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将每个哈希桶的计数器置为0 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Hash_Bucket; i++)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="keyword">int</span>*)hashtable-&gt;Hash_Table[i][<span class="number">0</span>].data) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Hash_Table* hashtable = <span class="keyword">new</span> Hash_Table;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">initHashtable(hashtable);</span><br><span class="line"><span class="keyword">char</span> elem1[] = <span class="string">&quot;李小花&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elem2[] = <span class="string">&quot;赵铁柱&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elem3[] = <span class="string">&quot;张全蛋&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elem4[] = <span class="string">&quot;新二&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elem5[] = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">insertHashtable(hashtable, <span class="number">1</span>,elem1);</span><br><span class="line">insertHashtable(hashtable, <span class="number">2</span>,elem2);</span><br><span class="line">insertHashtable(hashtable, <span class="number">3</span>,elem3);</span><br><span class="line">insertHashtable(hashtable, <span class="number">4</span>,elem4);</span><br><span class="line">insertHashtable(hashtable, <span class="number">5</span>,elem5);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">bool</span> ret1 = deleteHashtable(hashtable, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">bool</span> ret = findHashtable(hashtable, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理</span></span><br><span class="line">cleanHashtable(hashtable);</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="keyword">delete</span> hashtable;</span><br><span class="line">hashtable = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="字串匹配"><a href="#字串匹配" class="headerlink" title="字串匹配"></a>字串匹配</h3><blockquote><p>给定几个字符串，判断一个字符串从第2位到第4位的的字符是否在这几个字符串中。</p></blockquote><blockquote><p>重点在于，这个哈希表的key和对应的value是同一个。</p><p>key是由value转化过去的。</p></blockquote><h4 id="hash-table-h"><a href="#hash-table-h" class="headerlink" title="hash_table.h"></a>hash_table.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUCKET_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> compare(a,b) strcmp((const char*)a,(const char*) b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> hash_func SDBMHash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>_<span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">void</span>* key;</span><br><span class="line"><span class="keyword">void</span>* data;</span><br><span class="line">&#125;ListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高可读性和可维护性</span></span><br><span class="line"><span class="keyword">typedef</span> ListNode* List;</span><br><span class="line"><span class="keyword">typedef</span> ListNode* Element;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">HashTable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> TableSize;<span class="comment">//哈希桶的大小</span></span><br><span class="line">List* ThisList;</span><br><span class="line">&#125;HashTable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串对应内容转化为整数类型的key(不改变原来内容)</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">SDBMHash</span><span class="params">(<span class="keyword">void</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>* str = (<span class="keyword">char</span>*)key;</span><br><span class="line"><span class="keyword">while</span> (*str)</span><br><span class="line">&#123;</span><br><span class="line">hash = (*str++) + (hash &lt;&lt; <span class="number">6</span>) + (hash &lt;&lt; <span class="number">16</span>) - hash;<span class="comment">//让映射到的整数尽可能均匀，不出现重叠。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (hash &amp; <span class="number">0x7FFFFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key,计算索引，定位Hash桶的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">void</span>* key, <span class="keyword">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hash_func(key) % TableSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化哈希表</span></span><br><span class="line"><span class="function">HashTable* <span class="title">initHash</span><span class="params">(<span class="keyword">int</span> TableSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HashTable* hTable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (TableSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">TableSize = BUCKET_SIZE;</span><br><span class="line">&#125;</span><br><span class="line">hTable = <span class="keyword">new</span> HashTable;</span><br><span class="line">hTable-&gt;TableSize = TableSize;</span><br><span class="line">hTable-&gt;ThisList = <span class="keyword">new</span> List[TableSize];<span class="comment">//哈希桶</span></span><br><span class="line"><span class="keyword">if</span> (!hTable-&gt;ThisList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为Hash桶的对应指针数组初始化链表结点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TableSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">hTable-&gt;ThisList[i] = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (!hTable-&gt;ThisList[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(hTable-&gt;ThisList[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hTable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表中查找元素</span></span><br><span class="line"><span class="function">Element <span class="title">findHash</span><span class="params">(HashTable* hashtable, <span class="keyword">void</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line">Element e = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">i = Hash(key, hashtable-&gt;TableSize);<span class="comment">//将这个字符串类型的key转化为哈希桶索引，找到该元素要放置的桶</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = hashtable-&gt;ThisList[i];<span class="comment">//对应的哈希桶</span></span><br><span class="line"></span><br><span class="line">e = L-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (e &amp;&amp; compare(e-&gt;key, key) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不要被类型限制了，本质上和key是int类型的哈希表是一样的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertHash</span><span class="params">(HashTable* hashtable, <span class="keyword">void</span>* key, <span class="keyword">void</span>* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Element e = <span class="literal">NULL</span>, tmp = <span class="literal">NULL</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line">e = findHash(hashtable, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!e)</span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (!tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//L为其对应位置的哈希桶</span></span><br><span class="line">        <span class="comment">//将新插入的结点与桶链接起来</span></span><br><span class="line">L = hashtable-&gt;ThisList[Hash(key, hashtable-&gt;TableSize)];<span class="comment">//前插法 </span></span><br><span class="line">tmp-&gt;data = value;</span><br><span class="line">tmp-&gt;key = key;</span><br><span class="line">tmp-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;这个键已经存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteHash</span><span class="params">(HashTable* hashtable, <span class="keyword">void</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Element e = <span class="literal">NULL</span>, last = <span class="literal">NULL</span>;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = Hash(key, hashtable-&gt;TableSize);<span class="comment">//找到对应的哈希桶,然后在对应的哈希桶里面一个一个地遍历</span></span><br><span class="line">L = hashtable-&gt;ThisList[i];</span><br><span class="line">last = L;</span><br><span class="line">e = L-&gt;next;</span><br><span class="line"><span class="comment">//key是所对应数据的数字代号，这个每个元素是不同的，i是对应数据所在的hash桶，也就是key % tablesize,多个元素可以是同一个</span></span><br><span class="line"><span class="keyword">while</span> (e &amp;&amp; !compare(e-&gt;key, key))</span><br><span class="line">&#123;</span><br><span class="line">last = e;</span><br><span class="line">e = e-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (e)</span><br><span class="line">&#123;</span><br><span class="line">last-&gt;next = e-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该key不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到对应的ListNode提取元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">extract</span><span class="params">(Element e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  e ? e-&gt;data : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryHash</span><span class="params">(HashTable* hashtable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List L = <span class="literal">NULL</span>;</span><br><span class="line">Element cur = <span class="literal">NULL</span>, next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashtable-&gt;TableSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">L = hashtable-&gt;ThisList[i];</span><br><span class="line">cur = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> cur;</span><br><span class="line">cur = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> (hashtable-&gt;ThisList);</span><br><span class="line"><span class="keyword">delete</span> (hashtable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="test-cpp"><a href="#test-cpp" class="headerlink" title="test.cpp"></a>test.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;hash_table.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> elems1[] = <span class="string">&quot;ADBB&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elems2[] = <span class="string">&quot;BDDC&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elems3[] = <span class="string">&quot;CDBC&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> elems4[] = <span class="string">&quot;BDBB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* tester = <span class="string">&quot;ABDBBAC&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> cur[<span class="number">5</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashTable* hashtable = <span class="literal">NULL</span>;</span><br><span class="line">hashtable = initHash(BUCKET_SIZE);</span><br><span class="line"></span><br><span class="line">insertHash(hashtable, elems1, elems1);</span><br><span class="line">insertHash(hashtable, elems2, elems2);</span><br><span class="line">insertHash(hashtable, elems3, elems2);</span><br><span class="line">insertHash(hashtable, elems4, elems4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将要进行检查的字符串的2-4个字符拿过来进行对比</span></span><br><span class="line">strncpy_s(cur, tester + <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">Element e = findHash(hashtable, cur);</span><br><span class="line"><span class="keyword">if</span> (e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">destoryHash(hashtable);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-hash" scheme="http://doraemon2.xyz/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】树——二叉搜索树(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/17/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E6%A0%91%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/17/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E6%A0%91%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91(C++)/</id>
    <published>2021-10-17T07:42:02.000Z</published>
    <updated>2021-10-17T07:45:57.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>树状图是一种数据结构，它是由 n(n&gt;=1）个有限结点组成一个具有层次关系的集合。把它叫做“树”是因 为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点： </p><p>每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除 了根结点外，每个子结点可以分为多个不相交的子树。</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016140251735.png" alt="image-20211016140251735"></p><p><img src="/images/%E6%A0%91.assets/image-20211016140326184.png" alt="image-20211016140326184"></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><blockquote><p>同线性表，一个没有限制条件的线性表就是一个数组，但是加以限制条件就得到了非常有用的栈、队列、优先队列等。</p></blockquote><p><strong>引出二叉树</strong></p><blockquote><p>树也是一样，一个没有限制的树由于太灵活，控制起来比较复杂。如果对普通的树加上一些人为的限制，比如 结点只允许有两个子结点，这就是二叉树。 </p><p>二叉树是一个每个结点最多只能有两个分支的树，左边的分支称之为左子树，右边的分支称之为右子树。</p></blockquote><p><strong>如下图所示</strong>：<br><img src="/images/%E6%A0%91.assets/image-20211016141218269.png" alt="image-20211016141218269"></p><blockquote><p>(1).在非空二叉树中，第 i-1 层的结点总数不超过 , i&gt;=1； </p><p>(2).深度为 h-1 的二叉树最多有 2的h次方个结点(h&gt;=1)，最少有 h 个结点； </p><p>(3).对于任意一棵二叉树，如果其叶结点数为 N0，而度数为 2 的结点总数为 N2，则 N0=N2+1；(叶子结点的个数=度为2的结点个数+1)</p></blockquote><h3 id="常见二叉树分类"><a href="#常见二叉树分类" class="headerlink" title="常见二叉树分类"></a>常见二叉树分类</h3><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><blockquote><p>(1)完全二叉树—— 若设二叉树的高度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层有叶 子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树（<strong>堆</strong>就是完全二叉树）</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016141924146.png" alt="image-20211016141924146"></p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><blockquote><p>(2)满二叉树——除了叶结点外每一个结点都有左右子结点且叶子结点都处在最底层的二叉树。</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016142212867.png" alt="image-20211016142212867"></p><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><blockquote><p>(3)平衡二叉树:又被称为 AVL 树，它是一颗空树或左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。（高度从0开始数）</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016142335022.png" alt="image-20211016142335022"></p><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><blockquote><p>(4)二叉搜索树——又称二叉查找树、二叉排序树（Binary Sort Tree）。它是一棵空树或是满足下列性质的二叉树： </p><p>1）若左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值； </p><p>2）若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值； </p><p>3）左、右子树也分别为二叉搜索树。 </p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016142653468.png" alt="image-20211016142653468"></p><p>(<strong>查找的效率非常高(类似于二分查找，每次对比几乎能去掉一半数据(理想情况下))</strong>)</p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><blockquote><p><strong>红黑树 —</strong> 是每个结点都带有颜色属性（颜色为红色或黑色）的平衡二叉查找树，满足下列性质： </p><p>1）结点是红色或黑色； </p><p>2）根结点是黑色； </p><p>3）所有叶子结点都是黑色； </p><p>4）每个红色结点必须有两个黑色的子结点。(从每个叶子到根的所有路径上不能有两个连续的红色结点。) </p><p>5）从任一结点到其每个叶子的所有简单路径都包含相同数目的黑色结点。</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016143507831.png" alt="image-20211016143507831"></p><h3 id="二叉树搜索树实现"><a href="#二叉树搜索树实现" class="headerlink" title="二叉树搜索树实现"></a>二叉树搜索树实现</h3><p>如果在一组有序的数组中插入一个数字，插入后仍保证这组数是有序的。</p><p>如果采用顺序表的形式，会涉及到大量数据的移动。</p><p>不移动大量数据可以用链表实现，但是寻找合适的位置还得遍历每个结点的data。如何高效的进行此操纵呢。</p><blockquote><p>那么我们可以用二叉树的形式，以数据集第一个元素为根节点，之后将比根节点小的元素放在左子树中，将比根节点大的元素放在右子树中，在左右子树中同样采取此规则。那么在查找 x 时，若 x 比根节点小可以排除右子树所有元素， 去左子树中查找（类似二分查找），这样查找的效率非常好，而且插入的时间复杂度为 O（h），h 为树的高度，较 O（n）来说效率提高不少。故二叉搜索树用作一些查找和插入使用频率比较高的场景。</p></blockquote><p><img src="/images/%E6%A0%91.assets/image-20211016145535608.png" alt="image-20211016145535608"></p><blockquote><p>二叉搜索树一般采用链式存储方式，每个结点包含两个指针域和一个数据域，存储结点信息。</p></blockquote><hr><p>(能不用递归的地方尽量不用递归，因为如果递归的层级太深的话，容易导致栈溢出。)</p><hr><p><strong>Mystack.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataTypeTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Tnode</span>//<span class="title">Tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Tnode</span>* <span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Tnode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">DataTypeTree data;</span><br><span class="line">&#125;BNode, BTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> BNode DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;</span><br><span class="line">DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S,DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top != S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] s.base;</span><br><span class="line">s.base = s.top = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>test.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mystack.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isLess(a,b) (a&lt;b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isEqual(a,b) (a== b)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef struct _Tnode</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//struct _Tnode* lchild;</span></span><br><span class="line"><span class="comment">//struct _Tnode* rchild;</span></span><br><span class="line"><span class="comment">//DataTypeTreeTree data;</span></span><br><span class="line"><span class="comment">//&#125;BNode,BTree;//放到Stack.h了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素-构建树</span></span><br><span class="line"><span class="comment">//为什么要传二级指针(指针引用)？因为根据大小排布，根节点是会发生变化的。</span></span><br><span class="line"><span class="comment">//传1级指针(引用)，修改对应东西里面的内容</span></span><br><span class="line"><span class="comment">//传2级指针(指针+ 引用)，修改这个东西</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertBtree</span><span class="params">(BTree*&amp; root, BNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* tmp = <span class="literal">NULL</span>;</span><br><span class="line">BNode* parent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//置空新结点的左右子树</span></span><br><span class="line">&#123;</span><br><span class="line">node-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root)<span class="comment">//存在根节点，那就准备对比大小为新的结点寻找合适的插入位置</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = root;<span class="comment">//拿到根结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果第一次构建树，没有根结点，那就创建一个</span></span><br><span class="line">&#123;</span><br><span class="line">root = node;</span><br><span class="line"><span class="keyword">return</span><span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (tmp)</span><br><span class="line">&#123;</span><br><span class="line">parent = tmp;<span class="comment">//保存一个父结点</span></span><br><span class="line"><span class="keyword">if</span> (isLess(node-&gt;data, tmp-&gt;data))<span class="comment">//如果当前插入结点数值小于父结点数值</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = tmp-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//大于等于</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = tmp-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isLess(node-&gt;data, parent-&gt;data))<span class="comment">//小于</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;lchild = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;rchild = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到当前结点中左子树中最大的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMax</span><span class="params">(BTree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一,使用递归</span></span><br><span class="line"><span class="comment">//只要当前结点有右子树就进去,直到没有右子树,当前结点的data就是最大的</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>findMax(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二，使用循环方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为传进来的不是二级指针，我们能对root的值进行成功修改</span></span><br><span class="line"><span class="comment">但是不能改变root指向的地址，也就是说root = root-&gt;rchild</span></span><br><span class="line"><span class="comment">没有改变原来传进来的root指向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">也就是说，指针存的是地址，要修改指针的地址，需要指针的指针。(传参时)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*while (root-&gt;rchild)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">root = root-&gt;rchild;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return root-&gt;data;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除结点</span></span><br><span class="line"><span class="comment">//将该值与root进行大小比较，小的就往左，大的就往右</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多种情况</span></span><br><span class="line"><span class="comment">1.要删除的结点为叶子结点，直接删除即可</span></span><br><span class="line"><span class="comment">2.要删除的结点存在左子结点不存在右子结点，用左子结点代替删除结点即可</span></span><br><span class="line"><span class="comment">3.要删除的结点存在右子结点，不存在左子结点，直接用右子结点代替删除结点即可</span></span><br><span class="line"><span class="comment">4.要删除的结点左右子树都有，则取左子树上最大结点或右子树上最小结点代替删除结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归不断的去找这个key值对应的结点</span></span><br><span class="line"><span class="comment">//成功找到，根据情况进行删除操作，然后逐层返回</span></span><br><span class="line"><span class="function">BTree* <span class="title">deleteNode</span><span class="params">(BTree* root, <span class="keyword">int</span> key, BNode*&amp; DeleteNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//为空</span></span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面这两个if确定key的位置，找到它这个结点</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;data &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;lchild = deleteNode(root-&gt;lchild, key, DeleteNode);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;data &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;rchild = deleteNode(root-&gt;rchild, key, DeleteNode);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到要删除的结点,存进DeleteNode（指针的引用  or  二级指针 可以改变地址）</span></span><br><span class="line">DeleteNode = root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成功找到，根据条件进行返回</span></span><br><span class="line"><span class="keyword">if</span> ((!root-&gt;lchild) &amp;&amp; (!root-&gt;rchild))<span class="comment">//要删除的结点为root结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((root-&gt;lchild) &amp;&amp; (!root-&gt;rchild))<span class="comment">//要删除的结点有左孩子，没有右孩子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((!root-&gt;lchild) &amp;&amp; (root-&gt;rchild))<span class="comment">//要删除的结点有右孩子，没有左孩子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要删除的结点左右孩子都有</span></span><br><span class="line"><span class="comment">//先找到当前要删除的结点左子树中最大的值(右子树最小的值同理)</span></span><br><span class="line"><span class="keyword">int</span> val = findMax(root-&gt;lchild);</span><br><span class="line">root-&gt;data = val;<span class="comment">//代替要删除的key值</span></span><br><span class="line"><span class="comment">//将找到的ket = val的那个结点删除</span></span><br><span class="line">root-&gt;lchild = deleteNode(root-&gt;lchild, val, DeleteNode);</span><br><span class="line"><span class="comment">//这里最后delete的那个结点就并不是和具有val值的那个结点，而是要删除结点中左子树中最大data的那个。</span></span><br><span class="line"><span class="comment">//将最大data覆盖上val值对应结点的那个data</span></span><br><span class="line"><span class="comment">//删除的方式不同是因为对应的父子结点情况不同</span></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历(中左右)——递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FrontPrint</span><span class="params">(BTree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//到哪个结点， 哪个结点就是中，因为都可以有自己的子结点</span></span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">FrontPrint(root-&gt;lchild);</span><br><span class="line">FrontPrint(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意返回调用的位置，从哪调用return回哪,多层中的语句执行结束也会返回到调用处</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历(左中右)——递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MidPrint</span><span class="params">(BTree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MidPrint(root-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">MidPrint(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历(左右中)——递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BehindPrint</span><span class="params">(BTree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">BehindPrint(root-&gt;lchild);</span><br><span class="line">BehindPrint(root-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归方式查找</span></span><br><span class="line"><span class="comment">//注意返回指针类型</span></span><br><span class="line"><span class="comment">//找到返回的就是指向那个结点的一个指针</span></span><br><span class="line"><span class="comment">//没找到返回的就是NULL</span></span><br><span class="line"><span class="function">BNode* <span class="title">Find1</span><span class="params">(BTree* root, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由此我们可以知道 || 运算符是从左往有进行执行的，左边一旦成立，那么根本就不看后面的运算结果</span></span><br><span class="line"><span class="comment">//这里的root为空，说明没查到，为空执行root-&gt;data越界访问，所以要把!root条件放到前面</span></span><br><span class="line"><span class="keyword">if</span> (!root || isEqual(root-&gt;data, key))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isLess(key, root-&gt;data))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Find1(root-&gt;lchild, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Find1(root-&gt;rchild, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归方式查找1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find2</span><span class="params">(BTree* root, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isLess(root-&gt;data, key))</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isLess(key, root-&gt;data))</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归方式查找2</span></span><br><span class="line"><span class="function">BNode* <span class="title">Find3</span><span class="params">(BTree* root, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (root &amp;&amp; !isEqual(root-&gt;data, key))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isLess(root-&gt;data, key))</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助栈实现前序遍历</span></span><br><span class="line"><span class="comment">//谁的优先级最低谁就先被压进栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFrontWithStack</span><span class="params">(BTree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode cur;</span><br><span class="line"><span class="keyword">if</span> (!root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack Tstack;</span><br><span class="line">initStack(Tstack);</span><br><span class="line">pushStack(Tstack, *root);</span><br><span class="line"><span class="keyword">while</span> (!isEmpty(Tstack))</span><br><span class="line">&#123;</span><br><span class="line">popStack(Tstack, cur);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cur.data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照中左右的顺序，右边的最后再打印，所以先把rchild压进栈</span></span><br><span class="line"><span class="keyword">if</span> (cur.rchild)</span><br><span class="line">&#123;</span><br><span class="line">pushStack(Tstack,*(cur.rchild));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur.lchild)</span><br><span class="line">&#123;</span><br><span class="line">pushStack(Tstack, *(cur.lchild));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">destoryStack(Tstack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>] = &#123; <span class="number">11</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">35</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">4</span>,<span class="number">15</span> &#125;;</span><br><span class="line"></span><br><span class="line">BTree* root = <span class="literal">NULL</span>;<span class="comment">//根结点</span></span><br><span class="line">BNode* node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">node = <span class="keyword">new</span> BNode;</span><br><span class="line">node-&gt;data = arr[i];</span><br><span class="line">insertBtree(root, node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BNode* DeleteNode = <span class="literal">NULL</span>;<span class="comment">//存储要删除结点</span></span><br><span class="line"></span><br><span class="line">FrontPrint(root);</span><br><span class="line"><span class="comment">//MidPrint(root);</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/*deleteNode(root, 18, DeleteNode);</span></span><br><span class="line"><span class="comment">if (DeleteNode)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;删除失败&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">delete DeleteNode;*/</span></span><br><span class="line"><span class="comment">//FrontPrint(root);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BNode* temp = NULL;</span></span><br><span class="line"><span class="comment">////temp = Find1(root, 11);</span></span><br><span class="line"><span class="comment">//temp = Find3(root, 11);</span></span><br><span class="line"><span class="comment">//if (!temp)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;没找到&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;找到了&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Find2(root, 35);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PrintFrontWithStack(root);</span><br><span class="line">BehindPrint(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><p>(未完待续……)</p><h4 id="红黑树-1"><a href="#红黑树-1" class="headerlink" title="红黑树"></a>红黑树</h4><p><a href="https://blog.csdn.net/qq_51604330/article/details/120811173">红黑树构建过程(略)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;blockquot</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://doraemon2.xyz/tags/%E6%A0%91/"/>
    
    <category term="-二叉树" scheme="http://doraemon2.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【树】红黑树构建过程(略)</title>
    <link href="http://doraemon2.xyz/2021/10/17/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5)/"/>
    <id>http://doraemon2.xyz/2021/10/17/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5)/</id>
    <published>2021-10-17T07:02:31.000Z</published>
    <updated>2021-10-17T07:04:19.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>是每个节点都带有颜色属性（颜色为红色或黑色）的自平衡二叉查找(搜索)树，满足下列性质： </p><p>1）节点是红色或黑色； </p><p>2）根节点是黑色； </p><p>3）所有叶子节点都是黑色节点(NULL)； </p><p>4）每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。) </p><p>5）从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点</p></blockquote><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017111903878.png" alt="image-20211017111903878"></p><p><strong>红黑树可以解决二叉树搜索树出现的长短腿情况</strong></p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017114705932.png" alt="image-20211017114705932"></p><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><blockquote><p>红黑树是一种自平衡二叉查找树，从上面红黑树的图可以看到，根结点右子树显然比左子树高，但左子树和右子树的黑结 点的层数是相等的，也即任意一个结点到到每个叶子结点的路径都包含数量相同的黑结点。所以我们叫红黑树这种平衡为黑色完美平衡。</p></blockquote><p>给定如下数组来构建红黑树</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017115438763.png" alt="image-20211017115438763"></p><p>1.使用第一个元素创建一个根结点(黑色)。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017115711055.png" alt="image-20211017115711055"></p><p>2.插入13，根据二叉搜索树规则，应该插入到左侧，此时插入红色结点不会破坏红黑树平衡，直接插入即可。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017120051611.png" alt="image-20211017120051611"></p><p>3.插入16，插入红色结点不会破坏平衡，直接插入。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017120221054.png" alt="image-20211017120221054"></p><p>4.插入11，此时插入红色结点会破坏平衡(<strong>红色结点下面必须是两个黑色结点</strong>)，但插入黑色结点也会破坏平衡(<strong>从任一结点到其每个叶子结点的所有简单路径都包含相同数量的黑色结点</strong>)，所以对此进行调整。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017120839100.png" alt="image-20211017120839100"></p><p>5.插入9，应该插入到11的下方，无论插入红色结点还是黑色结点都会破坏平衡，所以，进行调整。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017121236646.png" alt="image-20211017121236646"></p><p>6.插入7，应该到9的下方，插入红色结点或是黑色结点都会破坏平衡，进行调整。旋转处理。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017121454130.png" alt="image-20211017121454130"></p><p>7.插入5，应该插入到7的下方，此时插入红色结点或是黑色结点都会破坏平衡，进行调整。变色处理。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017121834784.png" alt="image-20211017121834784"></p><p>8.插入3，应该插入到5的下方，无论插入黑色结点还是红色结点都会破坏平衡。进行调整。对根节点进行右旋。</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E7%BA%A2%E9%BB%91%E6%A0%91%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B(%E7%95%A5).assets/image-20211017122849710.png" alt="image-20211017122849710"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;红黑树&quot;&gt;&lt;a href=&quot;#红黑树&quot; class=&quot;headerlink&quot; title=&quot;红黑树&quot;&gt;&lt;/a&gt;红黑树&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;b</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://doraemon2.xyz/tags/%E6%A0%91/"/>
    
    <category term="-红黑树" scheme="http://doraemon2.xyz/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>C语言风格字符串注意点</title>
    <link href="http://doraemon2.xyz/2021/10/16/C%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://doraemon2.xyz/2021/10/16/C%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    <published>2021-10-16T11:49:50.000Z</published>
    <updated>2021-10-16T11:52:25.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言风格字符串注意点"><a href="#C语言风格字符串注意点" class="headerlink" title="C语言风格字符串注意点"></a>C语言风格字符串注意点</h1><p><strong>注意</strong>：</p><ol><li>strlen()</li><li>sizeof()</li><li>/转义字符种类</li></ol><blockquote><p>这种写法编译器会自动在结尾填充\0</p><p>char a[] = “aaas3”;</p><p>这种写法需要手动填充\0,否则后面会输出多余的内容 char b[] = { ‘a’,’a’,’a’,’s’,’3’};</p><p>这种写法也要手动添加\0,否则后面会输出多余的内容</p><p>char c[6]; c[0] = ‘a’; c[1] = ‘a’; c[2] = ‘a’; c[3] = ‘s’; c[4] = ‘3’; c[5] = ‘\0’;</p><p>这种同第一种</p><p>const char* d = “aaas3”;</p><p>strlen遇到\0结束，不包括\0</p><p>char temp1[] = “abc\0abc”; strlen(temp1);//结果为3 sizeof(temp1);//结果为字符数组的大小，也就是8，默认会在结尾填充一个\0,所以指定字符数组存储元素的个数是你字符个数+1，否则就会报错，或者不指定，就像这样。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="keyword">char</span> temp2[] = <span class="string">&quot;AB\x78\\ab\023&quot;</span>;</span><br><span class="line"><span class="built_in">strlen</span>(temp2);<span class="comment">//7</span></span><br><span class="line"><span class="keyword">sizeof</span>(temp2);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">\<span class="number">023</span>表示一个八进制的数  </span><br><span class="line">\x78表示一个十六进制的数</span><br><span class="line">\\表示一个\</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言风格字符串注意点&quot;&gt;&lt;a href=&quot;#C语言风格字符串注意点&quot; class=&quot;headerlink&quot; title=&quot;C语言风格字符串注意点&quot;&gt;&lt;/a&gt;C语言风格字符串注意点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://doraemon2.xyz/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-字符串" scheme="http://doraemon2.xyz/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="-注意" scheme="http://doraemon2.xyz/tags/%E6%B3%A8%E6%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】栈(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/16/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E6%A0%88(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/16/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E6%A0%88(C++)/</id>
    <published>2021-10-16T01:13:29.000Z</published>
    <updated>2021-10-16T01:14:36.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>只能在一边进出，先进的后出。</p><p>进出的一端叫做栈顶，另一端叫做栈底。</p><p>栈可以使用顺序存储结构，也能使用链式存储结构。</p><hr><p><strong>注意</strong>：栈只能在一端进行操作，这是栈的关键特征，也就是说栈不允许在中间进行查找、插入、删除等操作，(但是在实际应用中我们可以打破它)。</p><p>这里掌握初始化、入栈、出栈、取栈顶元素操作即可。</p><h2 id="顺序存储结构实现栈"><a href="#顺序存储结构实现栈" class="headerlink" title="顺序存储结构实现栈"></a>顺序存储结构实现栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构有多重方式定义，不用局限于这一种</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例如:</span></span><br><span class="line"><span class="comment">定义两个int型，并且直接开辟好数组空间</span></span><br><span class="line"><span class="comment">定义一个指针，一个int top</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;<span class="comment">//栈顶指针</span></span><br><span class="line">DataType* base;<span class="comment">//栈底指针</span></span><br><span class="line"><span class="comment">//其实没有必要定义一个来标记元素的个数。</span></span><br><span class="line"><span class="comment">//两个指针指向同一个数组，他们两个相减得到是中间元素的个数。</span></span><br><span class="line"><span class="comment">//否则两个地址相减没有意义</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先用栈底指针来拿到这个刚开辟好空间的数组</span></span><br><span class="line">S.base = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_SIZE];<span class="comment">//指针来定位这个数组</span></span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈中还有空位置</span></span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈-栈顶元素出栈</span></span><br><span class="line"><span class="function">DataType <span class="title">popStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//不为空</span></span><br><span class="line"><span class="keyword">if</span> (S.top != S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *(--S .top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈顶元素         </span></span><br><span class="line"><span class="function">DataType <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *(S.top<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack S;</span><br><span class="line">initStack(S);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">m = n;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">pushStack(S, n);</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;____&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getTop(S) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;____&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; popStack(S) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span><span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入栈操作图示</strong>:</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E6%A0%88(C++).assets/image-20211014120918328.png" alt="image-20211014120918328"></p><h2 id="链接存储结构实现栈"><a href="#链接存储结构实现栈" class="headerlink" title="链接存储结构实现栈"></a>链接存储结构实现栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"><span class="comment">//最大存储数量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_SZIE 128</span></span><br><span class="line"><span class="comment">//结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Snode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Snode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Snode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈(头)结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">Snode* base;</span><br><span class="line">Snode* top;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S-&gt;base = S-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack* S, Snode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次插入元素</span></span><br><span class="line"><span class="keyword">if</span> (S-&gt;count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;base = S-&gt;top = node;</span><br><span class="line">S-&gt;top-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">S-&gt;top-&gt;next = node;</span><br><span class="line">S-&gt;top = node;</span><br><span class="line">S-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S || S-&gt;count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Snode* tempnode = S-&gt;base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next != S-&gt;top &amp;&amp; S-&gt;count != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;count == <span class="number">1</span>)<span class="comment">//如果栈中只剩下一个结点可以删除</span></span><br><span class="line">&#123;</span><br><span class="line">S-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在tempnode是top的前一个结点</span></span><br><span class="line"><span class="keyword">delete</span> S-&gt;top;</span><br><span class="line">S-&gt;top = tempnode;<span class="comment">//如果是最后一个结点的话base和top都被置空了</span></span><br><span class="line">S-&gt;top-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">S-&gt;count--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿到栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getTop</span><span class="params">(Stack* S,DataType* m_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S || S-&gt;count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line">*m_data = S-&gt;top-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack* S = <span class="keyword">new</span> Stack;</span><br><span class="line">initStack(S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> m = n;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">Snode* tempnode = <span class="keyword">new</span> Snode;</span><br><span class="line">tempnode-&gt;data = n;</span><br><span class="line">pushStack(S, tempnode);</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m &gt;<span class="number">0</span>)</span><br><span class="line">&#123; </span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">popStack(S);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">popStack(S);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">popStack(S);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">popStack(S);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">popStack(S);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isEmpty(S))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S-&gt;top-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">getTop(S, &amp;temp);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> S;</span><br><span class="line"><span class="keyword">return</span><span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>补充:要修改指针指向地址，可以传递二级指针。</p><p>一级指针修改值。</p></blockquote><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="迷宫求解"><a href="#迷宫求解" class="headerlink" title="迷宫求解"></a>迷宫求解</h3><p>链接——<a href="https://blog.csdn.net/qq_51604330/article/details/120783602?spm=1001.2014.3001.5501">【栈】实现迷宫求解(C++)(详解)</a></p><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>链接——<a href="https://blog.csdn.net/qq_51604330/article/details/120792231?spm=1001.2014.3001.5501">【数据结构】栈(C++)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;只能在一边进出，先进的后出。&lt;/p&gt;
&lt;p&gt;进出的一端叫做栈顶，另一端叫做栈底。&lt;/p&gt;
&lt;p&gt;栈可以使用顺序存储结构，也能使用链式存储结构。&lt;/p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://doraemon2.xyz/tags/%E6%A0%88/"/>
    
    <category term="-c++" scheme="http://doraemon2.xyz/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>【栈】实现表达式求值</title>
    <link href="http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-10-15T15:03:52.000Z</published>
    <updated>2021-10-15T15:13:06.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【栈】实现表达式求值"><a href="#【栈】实现表达式求值" class="headerlink" title="【栈】实现表达式求值"></a>【栈】实现表达式求值</h1><h2 id="思路-amp-amp-理解-amp-amp-注意"><a href="#思路-amp-amp-理解-amp-amp-注意" class="headerlink" title="思路 &amp;&amp; 理解 &amp;&amp; 注意"></a>思路 &amp;&amp; 理解 &amp;&amp; 注意</h2><blockquote><p>给定一串表达式，字符串类型，依次遍历从头开始遍历每一个位置的内容。</p><p>第一个数字，第一个运算符先直接往栈里面push(两个不同的栈)<br>接着走，遇到数push进来，接着走，遇到运算符，和前面那个已经push进栈的运算符进行优先级比较，如果当前运算符优先级大，那就接着push进来，反之，pop出栈，运算前面的式子之和(之后判断运算符栈中是否还有内容，并且当前运算符的优先级是否小于等于已有的运算符，小于等于就接着运算前面的表达式，完成push当前运算符，反之继续往下遍历push…pop…),直到最后一个元素。</p><p>注意;</p><p>一直发生变化的是rdata-右操作数,所以每次压完运算符找新的右操作数都会将他置空，准备重新赋值。</p><p>没有添加括号优先级运算。</p></blockquote><h2 id="expression-h"><a href="#expression-h" class="headerlink" title="expression.h"></a>expression.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Postion</span>//地图中点的坐标,这个栈中存的元素就是点的坐标</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _x;</span><br><span class="line"><span class="keyword">int</span> _y;</span><br><span class="line">&#125;Postion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;</span><br><span class="line">DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S, DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶元素         </span></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意何时自增何时不自增</span></span><br><span class="line"><span class="keyword">return</span> S.top - <span class="number">1</span>;<span class="comment">//返回栈顶元素的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] S.base;</span><br><span class="line">S.top = S.base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="experssion-cpp"><a href="#experssion-cpp" class="headerlink" title="experssion.cpp"></a>experssion.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;expression.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较 lhs 的优先级是否高于 rhs，rhs 表示栈顶的符号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLarger</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;lhs, <span class="keyword">const</span> <span class="keyword">int</span> &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rhs == <span class="string">&#x27;+&#x27;</span> || rhs == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (lhs == <span class="string">&#x27;*&#x27;</span> || lhs == <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算左右操作数+运算符 (对运算符求值)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">result = left + right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">result = left - right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">result = left * right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">result = left / right;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算主体</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack data_stack;<span class="comment">//操作数堆栈</span></span><br><span class="line">Stack opt_stack;<span class="comment">//运算符堆栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">0</span>;<span class="comment">//0接收左操作数，1接收操作符，2,接收右操作数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左右操作数</span></span><br><span class="line"><span class="comment">//一直在发生变化的是右操作符</span></span><br><span class="line"><span class="keyword">int</span> ldata = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rdata = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> last_opt = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化堆栈</span></span><br><span class="line">initStack(data_stack);</span><br><span class="line">initStack(opt_stack);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第一个开始遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isspace</span>(input[i]))<span class="comment">//跳过空白符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不是空白，第一次到这里，默认是status = 0是左操作数</span></span><br><span class="line"><span class="keyword">switch</span> (status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//isdigit-判断是否是十进制数字</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//得到做操作数左操作数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左操作数是如何得到的</span></span><br><span class="line"><span class="comment">遍历字符串，第一个得到的肯定是左操作数，但我们不知道它是几位数。默认ldata为0</span></span><br><span class="line"><span class="comment">其实就是——这个数是几位，这个if()条件就能进来几次</span></span><br><span class="line"><span class="comment">累加在ldata中，得到左操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(input[i]))</span><br><span class="line">&#123;</span><br><span class="line">ldata *= <span class="number">10</span>;</span><br><span class="line">ldata += input[i] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//求出该位上这个数是几</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么时候执行到这里？</span></span><br><span class="line"><span class="comment">//第一个数字得到之后，也就是得到了ldata之后</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">pushStack(data_stack, ldata);<span class="comment">//左操作数进栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在input[i]的位置是运算符</span></span><br><span class="line"><span class="comment">//因为结束case结束之后，出来for循环还得++，这样就错过这个运算符了</span></span><br><span class="line"><span class="comment">//为了保证到case 1的语句中此时的input[i]是运算符，所以要字先--</span></span><br><span class="line">i--;</span><br><span class="line"></span><br><span class="line">status = <span class="number">1</span>;<span class="comment">//操作数确定了，下一个就该运算符了。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//遇到操作符</span></span><br><span class="line"><span class="keyword">if</span> (input[i] == <span class="string">&#x27;+&#x27;</span> || input[i] == <span class="string">&#x27;-&#x27;</span> || input[i] == <span class="string">&#x27;*&#x27;</span> || input[i] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(opt_stack))<span class="comment">//第一个运算符暂时不做任何处理，先入栈保存</span></span><br><span class="line">&#123;</span><br><span class="line">pushStack(opt_stack, input[i]);<span class="comment">//第一个操作符进栈</span></span><br><span class="line"><span class="comment">//运算符进栈存的是对应符号的ASCII码</span></span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//状态标记为2 下一个为右操作数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//不是第一个运算符，那么就将这个与之前的做优先级比较，如果这个优先级高，那就先算这个</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前运算符高于前一个运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前input[i]运算符  栈里面的存的第一个运算符</span></span><br><span class="line"><span class="keyword">if</span> (isLarger(input[i], *getTop(opt_stack)))<span class="comment">//如果当前运算符的优先级高于前一个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//压进栈</span></span><br><span class="line">pushStack(opt_stack, input[i]);<span class="comment">//操作符入栈</span></span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//下一个是右操作数</span></span><br><span class="line">rdata = <span class="number">0</span>;<span class="comment">//将右操作数置空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//当前运算符的优先级小于(等于)前一个(栈顶)运算符。则计算前一个运算符的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//拿到操作符 和 前面两个左右操作数</span></span><br><span class="line"><span class="comment">//先取到右边的，在取左边的(倒着拿出来)</span></span><br><span class="line"><span class="comment">//运算的时候注意参数传递顺序</span></span><br><span class="line">popStack(data_stack, right);</span><br><span class="line">popStack(data_stack, left);</span><br><span class="line">popStack(opt_stack, opt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = operate(left, right, opt);</span><br><span class="line">pushStack(data_stack, result);<span class="comment">//得到一部分的结果压进栈</span></span><br><span class="line">&#125; <span class="keyword">while</span> (!isEmpty(opt_stack) &amp;&amp; !isLarger(input[i],*getTop(opt_stack)));<span class="comment">//自动再往前判断，是否可以对前面的表达式进行运算</span></span><br><span class="line"><span class="comment">//运算符栈不为空 并且当前运算符优先级小于等于栈顶运算符(前面的)那么就能一并进行运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将当前input[i]运算符压入栈</span></span><br><span class="line">pushStack(opt_stack, input[i]);</span><br><span class="line"></span><br><span class="line">status = <span class="number">2</span>;<span class="comment">//去右操作数</span></span><br><span class="line">rdata = <span class="number">0</span>;<span class="comment">//置空</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (input[i] == <span class="string">&#x27;=&#x27;</span>)<span class="comment">//到达结尾</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">popStack(data_stack, rdata);</span><br><span class="line">popStack(data_stack, ldata);</span><br><span class="line">popStack(opt_stack, opt);</span><br><span class="line"></span><br><span class="line">result = operate(ldata, rdata, opt);</span><br><span class="line">pushStack(data_stack, result);</span><br><span class="line">&#125; <span class="keyword">while</span> (!isEmpty(opt_stack));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回得到最后结果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;运算符输入错误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//右操作数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(input[i]))<span class="comment">//同上求左操作数，求出rdata右操作数</span></span><br><span class="line">&#123;</span><br><span class="line">rdata *= <span class="number">10</span>;</span><br><span class="line">rdata += input[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pushStack(data_stack, rdata);<span class="comment">//右操作数入栈</span></span><br><span class="line">i--;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;12+3*6/3+4*5=&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calculate(str) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//38</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【栈】实现表达式求值&quot;&gt;&lt;a href=&quot;#【栈】实现表达式求值&quot; class=&quot;headerlink&quot; title=&quot;【栈】实现表达式求值&quot;&gt;&lt;/a&gt;【栈】实现表达式求值&lt;/h1&gt;&lt;h2 id=&quot;思路-amp-amp-理解-amp-amp-注意&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://doraemon2.xyz/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【栈】实现迷宫求解</title>
    <link href="http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3/"/>
    <id>http://doraemon2.xyz/2021/10/15/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3/</id>
    <published>2021-10-15T06:58:35.000Z</published>
    <updated>2021-10-15T07:40:23.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迷宫求解"><a href="#迷宫求解" class="headerlink" title="迷宫求解"></a>迷宫求解</h1><p>从入口进入开始， 向不同方向试探，走到死胡同就退回。</p><blockquote><p>找迷宫通路需要使用回溯法，找迷宫通路是对回溯法的一个很好的应用，实现回溯的过程用到数据结构—<strong>栈</strong>！</p></blockquote><blockquote><p>回溯法：</p><p>​        对一个包括有很多个结点，每个结点有若干个搜索分支的问题，把原问题分解为若干个子问题求解的 算法；当搜索到某个结点发现无法再继续搜索下去时，就让搜索过程回溯(回退)到该节点的前一个结点，继续 搜索该节点外的其他尚未搜索的分支；如果发现该结点无法再搜索下去，就让搜索过程回溯到这个结点的前一 结点继续这样的搜索过程；这样的搜索过程一直进行到搜索到问题的解或者搜索完了全部可搜索分支没有解存 在为止</p></blockquote><h2 id="思路-amp-解释"><a href="#思路-amp-解释" class="headerlink" title="思路&amp;解释"></a>思路&amp;解释</h2><blockquote><p>二维数组作为地图。</p><p>一开始确定一个入口——需要判定入口是否合法。</p><p>先将入口位置坐标压入栈，只要栈中不为空，那么每次判断移动方向前都要判断当前位置是不是出口。然后由此坐标开始向四周判断，判断哪有路可以走，是路就开始移动(cur-当前位置),压进栈……,走到死胡同，说明四周都不能走了，开始边popStack边向四周判断，不放过来时路上的任何一个遗漏的可能出口路径，反之，找到出口直接return true。如果该迷宫没有出口，结果栈中的元素将被全部pop出来，栈空，return false;</p><p>相关细节如下代码所示</p></blockquote><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/images/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.assets/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.gif" alt="迷宫求解"></p><blockquote><p>实际探索路径中，有的”胡同没去探索”。</p></blockquote><h2 id="maze-h"><a href="#maze-h" class="headerlink" title="maze.h"></a>maze.h</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Postion</span>//地图中点的坐标,这个栈中存的元素就是点的坐标</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> _x;</span><br><span class="line"><span class="keyword">int</span> _y;</span><br><span class="line">&#125;Postion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Postion DataType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType* top;</span><br><span class="line">DataType* base;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = <span class="keyword">new</span> DataType[MAX_SIZE];</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top = S.base;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushStack</span><span class="params">(Stack&amp; S, DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(S.top) = data;</span><br><span class="line">S.top++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popStack</span><span class="params">(Stack&amp; S,DataType&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = *(--S.top);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶元素         </span></span><br><span class="line"><span class="function">DataType* <span class="title">getTop</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意何时自增何时不自增</span></span><br><span class="line"><span class="keyword">return</span> S.top<span class="number">-1</span>;<span class="comment">//返回栈顶元素的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryStack</span><span class="params">(Stack&amp; S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] S.base;</span><br><span class="line">S.top = S.base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maze-cpp"><a href="#maze-cpp" class="headerlink" title="maze.cpp"></a>maze.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;maze.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW  6<span class="comment">//行</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL  6<span class="comment">//列</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Maze</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL];</span><br><span class="line">&#125;Maze;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据给出给出的地图数据初始化结构体地图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initMaze</span><span class="params">(Maze&amp; m, <span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line">m.<span class="built_in">map</span>[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印迷宫(地图)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMaze</span><span class="params">(Maze&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m.<span class="built_in">map</span>[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是有效的入口</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidEnter</span><span class="params">(Maze* m,Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);<span class="comment">//断言-里面的表达式为0直接终止程序,注意里面的内容是什么</span></span><br><span class="line"><span class="comment">//只要入口在四个边界上就是合法的,并且是1(道路)</span></span><br><span class="line"><span class="keyword">if</span> (((enter._x == <span class="number">0</span> || enter._x == ROW - <span class="number">1</span>) || (enter._y == <span class="number">0</span> || enter._y == COL - <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前位置是否是出口</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isVaildExit</span><span class="params">(Maze* m, Postion cur, Postion enter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);</span><br><span class="line"><span class="comment">//该结点不能是入口点，除了入口点，在边界上就是合法出口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((cur._x != enter._x || cur._y != enter._y) &amp;&amp; ((cur._x == <span class="number">0</span> || cur._x == ROW - <span class="number">1</span>) || (cur._y == <span class="number">0</span> || cur._y == COL - <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前结点的下一个结点是否能走通-是不是可以走的点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNextPass</span><span class="params">(Maze* m, Postion cur, Postion next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m);</span><br><span class="line"><span class="comment">//判断next是不是cur的下一个结点</span></span><br><span class="line"><span class="comment">//同一行相邻或者同一列相邻</span></span><br><span class="line"><span class="keyword">if</span> (((next._x == cur._x) &amp;&amp; ((next._y == cur._y + <span class="number">1</span>) || (next._y == cur._y - <span class="number">1</span>)))</span><br><span class="line">|| ((next._y == cur._y) &amp;&amp; ((next._x = cur._x + <span class="number">1</span>) || (next._x = cur._x - <span class="number">1</span>))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确实是cur的下一个结点(相邻的 )</span></span><br><span class="line"><span class="comment">//判断这个点是不是在迷宫里</span></span><br><span class="line"><span class="comment">//合法坐标并且那个位置的值是1</span></span><br><span class="line"><span class="keyword">if</span> (((next._x &gt;= <span class="number">0</span> &amp;&amp; next._x &lt; ROW) &amp;&amp; (next._y &gt;= <span class="number">0</span> &amp;&amp; next._y &lt; COL)) </span><br><span class="line">&amp;&amp; (m-&gt;<span class="built_in">map</span>[next._x][next._y] == <span class="number">1</span>))</span><br><span class="line"><span class="comment">//最后的参数==1，不仅仅是看是否是可以走的位置(道路是1)，</span></span><br><span class="line"><span class="comment">//同时有了这个我们就不用倒着往往前走了(不走重复的路)，不是有效的结点不只是墙(0)</span></span><br><span class="line"><span class="comment">//走过的也不是有效结点，直接pop出栈，通过出栈来往前回退</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找迷宫通路</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PassMaze</span><span class="params">(Maze* m, Postion enter, Stack&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(m &amp;&amp; isValidEnter(m, enter));</span><br><span class="line"></span><br><span class="line">Postion cur = enter;<span class="comment">//cur存储当前结点</span></span><br><span class="line">Postion next;<span class="comment">//下一个结点，从入口开始出发向四周移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先将入口压入栈中</span></span><br><span class="line">pushStack(s, cur);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[cur._x][cur._y] = <span class="number">2</span>;<span class="comment">//将入口值改为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环求解-当栈中还有路径时</span></span><br><span class="line"><span class="keyword">while</span> (!isEmpty(s))</span><br><span class="line">&#123;</span><br><span class="line">cur = *getTop(s);<span class="comment">//取到栈顶元素</span></span><br><span class="line"><span class="comment">//判断当前位置是否是出口</span></span><br><span class="line"><span class="keyword">if</span> (isVaildExit(m, cur, enter))<span class="comment">//注意参数传递顺序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//是出口直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不是出口继续在周围判断</span></span><br><span class="line"><span class="comment">//把cur当前刚才那个位置拿过来向四周判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先向左判断</span></span><br><span class="line">next = cur;</span><br><span class="line">next._y = cur._y - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m,cur,next))<span class="comment">//如果下一个结点走得通</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//走得通就走到那个位置-压进栈</span></span><br><span class="line">pushStack(s, next);</span><br><span class="line"><span class="comment">//走过的位置-标记</span></span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//之后</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走不通向另一个方向判断</span></span><br><span class="line"><span class="comment">//向右走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._y = cur._y + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._x = cur._x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向上走一步</span></span><br><span class="line">next = cur;</span><br><span class="line">next._x = cur._x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (isNextPass(m, cur, next))</span><br><span class="line">&#123;</span><br><span class="line">pushStack(s, next);</span><br><span class="line">m-&gt;<span class="built_in">map</span>[next._x][next._y] = m-&gt;<span class="built_in">map</span>[cur._x][cur._y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//走到这里说明此结点的四个方向都走不通</span></span><br><span class="line"><span class="comment">//进行回溯</span></span><br><span class="line">Postion tmp;<span class="comment">//没用 临时接收</span></span><br><span class="line">popStack(s, tmp);<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//0-墙 1-路</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[ROW][COL] = &#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maze m;<span class="comment">//创建一个迷宫(地图)</span></span><br><span class="line">initMaze(m, <span class="built_in">map</span>);<span class="comment">//初始化迷宫</span></span><br><span class="line">printMaze(m);<span class="comment">//打印迷宫</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;_______&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迷宫入口</span></span><br><span class="line">Postion enter;</span><br><span class="line">enter._x = <span class="number">0</span>;</span><br><span class="line">enter._y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line">Stack s;<span class="comment">//用于保存走过的轨迹，便于回溯</span></span><br><span class="line">initStack(s);<span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = PassMaze(&amp;m, enter, s);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有解&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无解&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">printMaze(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/images/%E3%80%90%E6%A0%88%E3%80%91%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3.assets/image-20211015144121027.png" alt="image-20211015144121027"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>1.指针自增情况</p><p>2.参数传递顺序</p><p>3.F5是个好东西</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迷宫求解&quot;&gt;&lt;a href=&quot;#迷宫求解&quot; class=&quot;headerlink&quot; title=&quot;迷宫求解&quot;&gt;&lt;/a&gt;迷宫求解&lt;/h1&gt;&lt;p&gt;从入口进入开始， 向不同方向试探，走到死胡同就退回。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;找迷宫通路需要使用回溯法，找迷</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://doraemon2.xyz/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(18)【中等】删除链表的倒数第 N 个结点(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/13/LeetCode%E5%88%B7%E9%A2%98(18)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/13/LeetCode%E5%88%B7%E9%A2%98(18)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9(C++)/</id>
    <published>2021-10-13T13:28:33.000Z</published>
    <updated>2021-10-13T13:35:28.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h1><p><img src="https://img-blog.csdnimg.cn/cccef7ef54064a88b4cdce113fb09158.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARG8yZU0wTg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>题目——[链接](<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode） (leetcode-cn.com)</a>)</p><h2 id="遍历统计方法"><a href="#遍历统计方法" class="headerlink" title="遍历统计方法"></a>遍历统计方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)<span class="comment">//空的直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count =  <span class="number">0</span>;<span class="comment">//统计个数</span></span><br><span class="line">        ListNode* tempnode = head;</span><br><span class="line">        ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">         <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tempnode)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempnode = head;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//一共就一个，也一并算到删除第一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(count == n)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//删除第一个结点之后的结点</span></span><br><span class="line">        <span class="comment">//循环拿到要删除结点的前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(prev != count -n)</span><br><span class="line">        &#123;</span><br><span class="line">            prev++;</span><br><span class="line">            <span class="comment">//此时已经到了要删除结点的前一个结点，break</span></span><br><span class="line">            <span class="keyword">if</span>(prev == count-n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有一个元素 or 删除第一个结点的时候得单独讨论,此方法不适用，越界了</span></span><br><span class="line">        <span class="comment">//由此可以理解为什么有的方法用了哨兵结点了，这样可以删除头结点</span></span><br><span class="line">        temp =tempnode-&gt;next;</span><br><span class="line">        tempnode-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="哨兵结点"><a href="#哨兵结点" class="headerlink" title="哨兵结点"></a>哨兵结点</h2><p>在上面方法的基础上加入一个哨兵结点。</p><p>哨兵结点的next指向head。</p><p>(LeetCode中的head都是带数据的)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)<span class="comment">//空的直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count =  <span class="number">0</span>;<span class="comment">//统计个数</span></span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">-1</span>;</span><br><span class="line">        ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* tempHead = <span class="keyword">new</span> ListNode;</span><br><span class="line">        ListNode* tempnode = head;</span><br><span class="line"></span><br><span class="line">        tempHead-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span>(tempnode)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            tempnode = tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tempnode = tempHead;</span><br><span class="line">        <span class="keyword">while</span>(prev !=count-n)</span><br><span class="line">        &#123;</span><br><span class="line">            prev++;</span><br><span class="line">            <span class="keyword">if</span>(prev == count-n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tempnode =tempnode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp = tempnode-&gt;next;</span><br><span class="line">        tempnode-&gt;next=  temp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span>   temp;</span><br><span class="line">        <span class="keyword">return</span> tempHead-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快慢指针-哨兵结点"><a href="#快慢指针-哨兵结点" class="headerlink" title="快慢指针+哨兵结点"></a>快慢指针+哨兵结点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//快慢指针都先指向新的头结点</span></span><br><span class="line">    <span class="comment">//快指针比慢指针先走n步</span></span><br><span class="line">    <span class="comment">//然后同时出发</span></span><br><span class="line">    <span class="comment">//当fast走到最后一个结点时，此时slow的下一个结点就是要删除的结点</span></span><br><span class="line">    <span class="keyword">if</span>(!head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* tempHead = <span class="keyword">new</span> ListNode;</span><br><span class="line">    ListNode* temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    ListNode* slow = tempHead;</span><br><span class="line">    ListNode* fast =tempHead;</span><br><span class="line">    tempHead -&gt;next = head;</span><br><span class="line">    <span class="keyword">while</span>(count != n)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">while</span>(fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next;  </span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = slow-&gt;next;</span><br><span class="line">    slow-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>   temp;</span><br><span class="line">    <span class="keyword">return</span> tempHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;19-删除链表的倒数第-N-个结点&quot;&gt;&lt;a href=&quot;#19-删除链表的倒数第-N-个结点&quot; class=&quot;headerlink&quot; title=&quot;19. 删除链表的倒数第 N 个结点&quot;&gt;&lt;/a&gt;19. 删除链表的倒数第 N 个结点&lt;/h1&gt;&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-指针" scheme="http://doraemon2.xyz/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】堆(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/13/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/13/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++)/</id>
    <published>2021-10-13T03:10:03.000Z</published>
    <updated>2021-10-13T03:12:26.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012141012636.png" alt="image-20211012141012636"></p><blockquote><p>最大堆:最上面的结点数值最大</p><p>特点:<br>1.每个结点最多可以有两个结点</p><p>2.根结点的键值是所有结点中最大的，每个结点的值都比孩子的值大。</p><p>3.除了<strong>根节点</strong>没有兄弟结点，<strong>最后一个</strong>左子结点可以没有兄弟结点，其他结点必须有兄弟结点。(有这个限制，下面的求子结点和父结点的公式才能成立。)</p></blockquote><blockquote><p>最小堆:最上面的结点数值最小….其他同最大堆</p></blockquote><hr><p><strong>堆是最有个性的树，用数组表示的树。</strong></p><hr><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012142229662.png" alt="image-20211012142229662"></p><hr><h2 id="在数组中快速创建堆"><a href="#在数组中快速创建堆" class="headerlink" title="在数组中快速创建堆"></a>在数组中快速创建堆</h2><p>左图——》右图</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012143038239.png" alt="image-20211012143038239"></p><blockquote><p>1.找到最后一个结点的父结点，(该父结点)与其子结点进行比较大小，若某个子结点大于父结点，则与该父结点交换位置。(就是从最后一个非叶子结点开始进行调整，(向下调整就是找到该父结结点的子结点，进行调整。))</p><p>2.再移动到前一个父结点，进行上述操作。</p><p>3……    </p></blockquote><hr><p>补充:static修饰的全局函数</p><blockquote><p>一个普通的全局的静态函数。. 这样的static函数与普通函数的区别是：用static修饰的函数，限定在本源码文件中，不能被本源码文件以外的代码文件调用。</p></blockquote><p>链接——<a href="https://www.cnblogs.com/muyi23333/articles/13533016.html#:~:text=static%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%AB%E5%81%9A%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%EF%BC%8C%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E6%9C%89%E4%B8%A4%E7%A7%8D%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%85%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9D%A5%E5%88%86%E7%B1%BB%EF%BC%9A.%20%E5%A6%82%E6%9E%9C%E8%BF%99%E4%B8%AA%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%B1%BB%E9%87%8C%EF%BC%8C%E9%82%A3%E4%B9%88%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%EF%BC%9B%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9C%A8%E4%BA%8E%EF%BC%9A%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%8D%E4%BC%9A%E8%AE%BF%E9%97%AE%E6%88%96%E8%80%85%E4%BF%AE%E6%94%B9%E4%BB%BB%E4%BD%95%E5%AF%B9%E8%B1%A1%EF%BC%88%E9%9D%9Estatic%EF%BC%89%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98%E3%80%82.%20%E5%85%B6%E5%AE%9E%E5%BE%88%E5%A5%BD%E7%90%86%E8%A7%A3%EF%BC%8C%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98,%28%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%29%E5%B1%9E%E4%BA%8E%E7%B1%BB%E6%9C%AC%E8%BA%AB%EF%BC%8C%E5%9C%A8%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E4%BC%9A%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%B1%BB%E5%90%8D%E7%9B%B4%E6%8E%A5%E5%8E%BB%E8%AE%BF%E9%97%AE%EF%BC%9B%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%EF%BC%88%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%EF%BC%89%E5%B1%9E%E4%BA%8E%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%AA%E6%9C%89%E5%9C%A8%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BA%A7%E7%94%9F%EF%BC%88%E5%88%9B%E5%BB%BA%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%EF%BC%89%E6%97%B6%E6%89%8D%E4%BC%9A%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%AE%9E%E4%BE%8B%EF%BC%89%E5%8E%BB%E8%AE%BF%E9%97%AE%E3%80%82.%20%E5%A6%82%E6%9E%9C%E5%AE%83%E4%B8%8D%E6%98%AF%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%B1%BB%E4%B8%AD%EF%BC%8C%E9%82%A3%E4%B9%88%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E5%85%A8%E5%B1%80%E7%9A%84%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0%E3%80%82.%20%E8%BF%99%E6%A0%B7%E7%9A%84static%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%EF%BC%9A%E7%94%A8static%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E9%99%90%E5%AE%9A%E5%9C%A8%E6%9C%AC%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%A2%AB%E6%9C%AC%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E4%BB%A5%E5%A4%96%E7%9A%84%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8%E3%80%82.">链接</a></p><hr><h2 id="相关接口实现"><a href="#相关接口实现" class="headerlink" title="相关接口实现"></a>相关接口实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span>* arr;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line">&#125;Heap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(Heap&amp; hp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span>* orginal, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> capacity = DEFAULT_CAPCITY &gt; size ? DEFAULT_CAPCITY : size;</span><br><span class="line">hp.arr = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line"><span class="keyword">if</span> (!hp.arr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">hp.capacity = capacity;</span><br><span class="line">hp.size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果存在原始数据则构建堆</span></span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//方式1：直接全部拿过来</span></span><br><span class="line"><span class="comment">/*_memccpy(hp.arr, orginal, size, size * sizeof(int));</span></span><br><span class="line"><span class="comment">hp.size = size;</span></span><br><span class="line"><span class="comment">buildHeap(hp);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：一个一个插入 ，插一次排一次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">insertHeap(hp, orginal[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ((hp.size - <span class="number">1</span>)<span class="number">-1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">adjustDown(hp, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下调整——根据已经有的数据内容进行调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(Heap&amp; hp,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = hp.arr[index];<span class="comment">//当前父节点的值</span></span><br><span class="line"><span class="keyword">int</span> parent = <span class="number">0</span>;<span class="comment">//索引</span></span><br><span class="line"><span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//调整是一个循环的过程，整个向下</span></span><br><span class="line"><span class="comment">//能够进入循环的条件，它得有左子结点。</span></span><br><span class="line"><span class="keyword">for</span> (parent = index; (parent * <span class="number">2</span> + <span class="number">1</span>) &lt; hp.size; parent = child)<span class="comment">//for循环的最后一个参数，定位新的父结点索引</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从最后一个父结点开始，父结点肯定有左孩子</span></span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取两个子结点中较大的一个</span></span><br><span class="line"><span class="keyword">if</span> (((child + <span class="number">1</span>) &lt; hp.size) &amp;&amp; hp.arr[child] &lt; hp.arr[child + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">child++;<span class="comment">//如果右边的孩子大，那就拿到右边孩子的下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将子结点与父结点进行对比</span></span><br><span class="line"><span class="keyword">if</span> (cur &gt;= hp.arr[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//如果在高层，此时父结点大于子结点就break,因为是从底层上来的，比父结点都大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hp.arr[parent] = hp.arr[child];</span><br><span class="line">hp.arr[child] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向上调整——对新插入的元素进行调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustUp</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = hp.arr[index];<span class="comment">//要插入的结点</span></span><br><span class="line"><span class="keyword">int</span> parent = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; hp.arr[parent])</span><br><span class="line">&#123;</span><br><span class="line">hp.arr[index] = hp.arr[parent];</span><br><span class="line">hp.arr[parent] = temp;</span><br><span class="line">index = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果已经小于等于父亲的值了</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入新的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertHeap</span><span class="params">(Heap&amp; hp, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hp.size == hp.capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = hp.size;<span class="comment">//保存新加入元素的位置，因为size要++</span></span><br><span class="line">hp.arr[hp.size++] = val;</span><br><span class="line">adjustUp(hp,index);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出堆中元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeap</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = hp.size;</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = front; j &lt; back; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hp.arr[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">num -= row;<span class="comment">//输出完本行还剩的元素个数</span></span><br><span class="line"><span class="comment">//如果减去本行输出的个数小于0</span></span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">row *= <span class="number">2</span>;<span class="comment">//下一行要输出的元素个数</span></span><br><span class="line"></span><br><span class="line">front = back;<span class="comment">//定位下一行的起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num - row &lt;= <span class="number">0</span>)<span class="comment">//如果当前的元素个数不够输出下一行的，直接定位下一行的back位置</span></span><br><span class="line">&#123;</span><br><span class="line">back = hp.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// 够则——手动定位结尾位置</span></span><br><span class="line">&#123;</span><br><span class="line">back += row;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出堆顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popTop</span><span class="params">(Heap&amp; hp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hp.arr[<span class="number">0</span>] = hp.arr[hp.size - <span class="number">1</span>];</span><br><span class="line">hp.size--;</span><br><span class="line">buildHeap(hp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构建堆 and  向下调整的图解</strong></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211012163121314.png" alt="image-20211012163121314"></p><hr><p>补充——<a href="https://blog.csdn.net/qq_51604330/article/details/120730051">打印输出</a></p><hr><p> 堆插入元素按升序(降序)排序的效率时很高的，因为只需要和父亲比较。父亲的父亲……</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="构建优先队列"><a href="#构建优先队列" class="headerlink" title="构建优先队列"></a>构建优先队列</h3><blockquote><p>操作系统内核作业调度是优先队列的一个应用实例，它根据优先级的高低而不是先到先服务的方式来进行调度；</p></blockquote><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E5%A0%86(C++).assets/image-20211013092337526.png" alt="image-20211013092337526"></p><blockquote><p>如果最小键值元素拥有最高的优先级，那么这种优先队列叫作<strong>升序优先队列</strong>（即总是先删除最小 的元素），类似的，如果最大键值元素拥有最高的优先级，那么这种优先队列叫作<strong>降序优先队列</strong> （即总是先删除最大的元素）；由于这两种类型是完全对称的，所以只需要关注其中一种。</p></blockquote><hr><p><strong>核心实现同上建最大堆</strong>，就是把其中的数据换成了Task(任务，里面包括优先级，等其他属性)，根据优先级的大小，来创建堆。</p><hr><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote><p>堆排序(Heapsort)是指利用堆这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特 点快速定位指定索引的元素。</p><p>选择排序工作原理:第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置， 然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p></blockquote><hr><p>类似于上面构建最大堆时的弹出堆顶元素。只是不将最后一个元素删除(不size–)，而是不断的将建好的大堆堆顶元素放到最后。</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustDown</span><span class="params">(<span class="keyword">int</span>* ary, <span class="keyword">int</span> index, <span class="keyword">int</span> tatal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = ary[index];</span><br><span class="line"><span class="keyword">int</span> parent = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (parent = index; (parent * <span class="number">2</span> + <span class="number">1</span>) &lt; tatal; parent = child)</span><br><span class="line">&#123;</span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (((child + <span class="number">1</span>) &lt; tatal) &amp;&amp; (ary[child] &lt; ary[child + <span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cur &gt;= ary[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ary[parent] = ary[child];</span><br><span class="line">ary[child] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* ary,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tempS = size;</span><br><span class="line">    <span class="comment">//先用这个数组键一个堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (size - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">adjustDown(ary, i, tempS);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//必须要先建好一个堆</span></span><br><span class="line">    <span class="comment">//因为这样将堆顶元素和堆尾元素交换之后，除了堆顶新换过来了元素，“仍”是一个最大(小)堆，因为比较就要和父节点比。</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = tempS - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (;back &gt; <span class="number">0</span>; back--)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> tempChange = ary[front];</span><br><span class="line">ary[front] = ary[back];</span><br><span class="line">ary[back] = tempChange;</span><br><span class="line">adjustDown(ary, front, --tempS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arraY[] = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(arraY) / <span class="keyword">sizeof</span>(arraY[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HeapSort(arraY, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arraY[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-堆" scheme="http://doraemon2.xyz/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>按照二叉树每行的个数打印数组</title>
    <link href="http://doraemon2.xyz/2021/10/12/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84/"/>
    <id>http://doraemon2.xyz/2021/10/12/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84/</id>
    <published>2021-10-12T11:17:40.000Z</published>
    <updated>2021-10-12T11:21:24.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210530121020635.gif" alt="在这里插入图片描述"></p><blockquote><p>这个b玩意儿耗了我2个小时，怎么tm就写不出来呢。</p><p>可能是吃的太饱了吧。</p><p>越写不出来一定要越冷静下来。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = hp.size;</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> back = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = front; j &lt; back; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hp.arr[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num -= row;<span class="comment">//输出完本行还剩的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果减去本行输出的个数小于0</span></span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">row *= <span class="number">2</span>;<span class="comment">//下一行要输出的元素个数</span></span><br><span class="line"></span><br><span class="line">front = back;<span class="comment">//定位下一行的起点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num - row &lt;= <span class="number">0</span>)<span class="comment">//如果当前的元素个数不够输出下一行的，直接定位下一行的back位置</span></span><br><span class="line">&#123;</span><br><span class="line">back = hp.size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// 够则——手动定位结尾位置</span></span><br><span class="line">&#123;</span><br><span class="line">back += row;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8C%89%E7%85%A7%E4%BA%8C%E5%8F%89%E6%A0%91%E6%AF%8F%E8%A1%8C%E7%9A%84%E4%B8%AA%E6%95%B0%E6%89%93%E5%8D%B0%E6%95%B0%E7%BB%84.assets/image-20211012192048031.png" alt="image-20211012192048031"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210530121020635.gif&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个b玩意儿耗了我2个小时，怎么tm就写不出来呢。&lt;/p&gt;
&lt;p&gt;可能是吃的太</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-二叉树" scheme="http://doraemon2.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="-堆" scheme="http://doraemon2.xyz/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】队列(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%98%9F%E5%88%97(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/11/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%98%9F%E5%88%97(C++)/</id>
    <published>2021-10-11T11:34:30.000Z</published>
    <updated>2021-10-11T11:46:33.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种受限的线性表，它允许在一段进行删除操作，在另一端进行插入操作。</p><p>可以用数组实现，也可以用链表实现。</p><h2 id="数组实现-顺序存储"><a href="#数组实现-顺序存储" class="headerlink" title="数组实现(顺序存储)"></a>数组实现(顺序存储)</h2><p>设立一个队头指针front,一个队尾指针rear，分别指向队头元素和队尾元素，rear-front为元素个数。</p><p>(数组实现中，其实就是下标。)</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType <span class="built_in">queue</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)<span class="comment">//如果传递进来的是个空指针的话</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;rear == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;rear == SQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(SeqQueue* SQ,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;rear] = data;</span><br><span class="line">SQ-&gt;rear++;<span class="comment">//队尾指针后移,插入之后rear&quot;指向&quot;当前位置的下一个位置。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = SQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (i &lt; SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; SQ-&gt;<span class="built_in">queue</span>[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队-从表头开始删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//就是删除第一个元素</span></span><br><span class="line"><span class="keyword">if</span> (!SQ || isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = SQ-&gt;front; i &lt; SQ-&gt;rear; i++)</span><br><span class="line">&#123;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[i] = SQ-&gt;<span class="built_in">queue</span>[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;rear--;</span><br><span class="line"><span class="comment">//直接对front进行操作的话空间会越来越小</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列首元素</span></span><br><span class="line"><span class="function">DataType <span class="title">getFront</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">destoryQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取长度-元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getElemsNum</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SQ-&gt;rear-SQ-&gt;front;<span class="comment">//返回SQ-&gt;rear也一样，数组下标从0开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表实现-链式存储"><a href="#链表实现-链式存储" class="headerlink" title="链表实现(链式存储)"></a>链表实现(链式存储)</h2><p>为了操作上的方便，我们将队头指针指向链队列的头结点，而队尾指针指向终端结点。</p><p>就是简化了单链表，加了些条件限制(一边进，一边出。) </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;Qnode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Qnode* QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组实现的队列rear指向的是最后一个的下一个，而用链表实现的队列rear指向的是最后一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//队列的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">QueuePtr front;<span class="comment">//队头指针</span></span><br><span class="line">QueuePtr rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;length = <span class="number">0</span>;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = <span class="literal">NULL</span>;<span class="comment">//把队头和队尾指针同时置空</span></span><br><span class="line"><span class="comment">//初始化的置空可以想象成是有个“头结点”,判断队列中是否有元素就看front是否指向的是NULL</span></span><br><span class="line"><span class="comment">//其实就是有个头结点，开始就已经new出来了</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队列是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (LQ-&gt;length == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队-从尾部</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(LinkQueue* LQ, DataType num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* node = <span class="keyword">new</span> Qnode;</span><br><span class="line">node-&gt;data = num;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;rear-&gt;next = node;</span><br><span class="line">LQ-&gt;rear = node;<span class="comment">//定位到新的末尾结点</span></span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队-从头部</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = LQ-&gt;front;</span><br><span class="line">LQ-&gt;front = LQ-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">LQ-&gt;length--;</span><br><span class="line"><span class="comment">//如果出了这个元素后为空，需要将rear也置空</span></span><br><span class="line"><span class="keyword">if</span> (!LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">LQ-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = LQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clearQueue</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (LQ-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = LQ-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> LQ-&gt;front;</span><br><span class="line">LQ-&gt;front = tempnode;</span><br><span class="line">&#125;</span><br><span class="line">LQ-&gt;front = LQ-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">LQ-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列的首元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getFront</span><span class="params">(LinkQueue* LQ, DataType* recv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ || isEmpty(LQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!recv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">*recv = LQ-&gt;front-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取队列元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNums</span><span class="params">(LinkQueue* LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!LQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> LQ-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="线程池中的任务队列"><a href="#线程池中的任务队列" class="headerlink" title="线程池中的任务队列"></a>线程池中的任务队列</h3><p><strong>线程池</strong>——由一个任务队列和一组处理队列的线程组成。一旦工作进程需要处理某个可能“阻塞”的 操作，不用自己操作，将其作为一个任务放到线程池的队列，接着会被某个空闲线程提取处理。</p><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011090328793.png" alt="image-20211011090328793"></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>与数组实现队列中，出队方式相关，直接移动front(假溢出)，front前的元素全部抛弃，认为是空，下次直接覆盖上去。</p><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011092439002.png" alt="image-20211011092439002"></p><p><strong>判断是否满了</strong>,rear+1是否等于front</p><blockquote><p>用模运算来循环</p></blockquote><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011092958249.png" alt="image-20211011092958249"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType <span class="built_in">queue</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;<span class="comment">//rear一直在追front</span></span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;front = SQ-&gt;rear = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((SQ-&gt;rear + <span class="number">1</span>) % MAX_SIZE == SQ-&gt;front)<span class="comment">//因为rear要指向front前的一个空的位置，所以真正只可以push进MAX_SIZE-1个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SQ-&gt;front == SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(SeqQueue* SQ, DataType m_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ || isFull(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">SQ-&gt;<span class="built_in">queue</span>[SQ-&gt;rear] = m_data;</span><br><span class="line"><span class="comment">//移动队尾指针</span></span><br><span class="line">SQ-&gt;rear = (SQ-&gt;rear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ || isEmpty(SQ))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队首指针后移</span></span><br><span class="line">SQ-&gt;front = (SQ-&gt;front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="comment">//从第一个位置之后，rear都指向一个空的位置</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">printQueue</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = SQ-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (index != SQ-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; SQ-&gt;<span class="built_in">queue</span>[index] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">index = (index + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getElemsNum</span><span class="params">(SeqQueue* SQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!SQ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (SQ-&gt;rear - SQ-&gt;front + MAX_SIZE) % MAX_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>它的入队顺序没有变化，但是出队的顺序是根据优先级的高低来决定的，优先级高的先出。</p><blockquote><p>还是要对比顺序存储和链式存储rear指向位置。</p><p>顺序存储rear指向最后一个的下一个位置</p><p>链式存储rear指向最后一个</p></blockquote> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>//结点结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> priority;<span class="comment">//优先级</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Qnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>//队列结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">Qnode* front;</span><br><span class="line">Qnode* rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>)<span class="comment">//空的，返回真，不空返回假，if(isEmprt(Q) != NULL)就是： 真的就直接return </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;length == MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushQueue</span><span class="params">(Queue* Q, DataType _data, <span class="keyword">int</span> _priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFull(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* _node = <span class="keyword">new</span> Qnode;</span><br><span class="line">_node-&gt;priority = _priority;</span><br><span class="line">_node-&gt;data = _data;</span><br><span class="line">_node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空队列</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = _node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;rear-&gt;next = _node;</span><br><span class="line">Q-&gt;rear = _node;<span class="comment">//定位到新的结尾</span></span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队列——按照优先级</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">popQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q || isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* recvPrev = <span class="literal">NULL</span>;<span class="comment">//存储要删除结点的前一个结点</span></span><br><span class="line">Qnode* start = <span class="literal">NULL</span>;</span><br><span class="line">Qnode* startNext = <span class="literal">NULL</span>;</span><br><span class="line">Qnode* deleteTmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">start = Q-&gt;front;</span><br><span class="line">startNext = start-&gt;next;</span><br><span class="line"></span><br><span class="line">recvPrev = start;<span class="comment">//默认要删除的是第二个,所以存的是第一个结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况1，当前队列中就一个结点</span></span><br><span class="line"><span class="keyword">if</span> (!startNext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> start;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常情况,完整的遍历一遍</span></span><br><span class="line"><span class="keyword">while</span> (startNext)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (startNext-&gt;priority &gt; start-&gt;priority)</span><br><span class="line">&#123;</span><br><span class="line">recvPrev = start;</span><br><span class="line">&#125;</span><br><span class="line">start = startNext;</span><br><span class="line">startNext = startNext-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况2，第一个结点是优先级最高的</span></span><br><span class="line"><span class="comment">//这样得到的recvPrev是第一个结点了，也有可能是为了删除第二个结点</span></span><br><span class="line"><span class="comment">//所以要进行一下验证,验证是否要删除的是第一个结点</span></span><br><span class="line">Qnode* difFandS = <span class="literal">NULL</span>;</span><br><span class="line">difFandS = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (recvPrev-&gt;priority &gt; difFandS-&gt;priority)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果第一个结点的优先级大于第二个结点</span></span><br><span class="line"><span class="keyword">delete</span> recvPrev;</span><br><span class="line">Q-&gt;front = difFandS;</span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出来后recvPrev就是要删除结点的前一个结点</span></span><br><span class="line">deleteTmp = recvPrev-&gt;next;</span><br><span class="line">recvPrev-&gt;next = deleteTmp-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> deleteTmp;</span><br><span class="line"></span><br><span class="line">Q-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">printQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//补充提示注意:根据具体的返回内容来书写判断语句条件</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty(Q))<span class="comment">//空的，返回真，不空返回假，if(isEmprt(Q))就是： 返回了真的就直接return </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;空的，别打印了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Qnode* tempnode = Q-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; tempnode-&gt;priority &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空整个队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clearQueue</span><span class="params">(Queue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Qnode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (Q-&gt;front)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> Q-&gt;front;</span><br><span class="line">Q-&gt;front = tempnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态顺序队列"><a href="#动态顺序队列" class="headerlink" title="动态顺序队列"></a>动态顺序队列</h3><p>使用链式存储(链表)实现的队列即为动态顺序队列，前面已经实现过，不再重复。</p><h3 id="高并发WEB服务器队列的应用"><a href="#高并发WEB服务器队列的应用" class="headerlink" title="高并发WEB服务器队列的应用"></a>高并发WEB服务器队列的应用</h3><blockquote><p>在高并发 HTTP 反向代理服务器 Nginx 中，存在着一个跟性能息息相关的模块 ——文件缓存。 </p><p>经常访问到的文件会被 Nginx 从磁盘缓存到内存，这样可以极大的提高 Nginx 的并发能力，不过因为 内存的限制，</p><p>当缓存的文件数达到一定程度的时候就会采取淘汰机制，</p><p>优先淘汰进入时间比较久或是最近访问很少(LRU)的队列文件。 </p></blockquote><p><img src="/images/%E9%98%9F%E5%88%97.assets/image-20211011183523476.png" alt="image-20211011183523476"></p><p><strong>具体实现方案：</strong> </p><blockquote><p>使用双向循环队列保存缓存的文件节点，这样可以实现多种淘汰策略： </p><p>比如：如果采用淘汰进入时间比较久的策略，就可以使用队列的特性，先进先出 </p><p>如果要采用按照 LRU(进入时间 or  最近访问较少)，就遍历链表，找到节点删除。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;队列是一种受限的线性表，它允许在一段进行删除操作，在另一端进行插入操作。&lt;/p&gt;
&lt;p&gt;可以用数组实现，也可以用链表实现。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-队列" scheme="http://doraemon2.xyz/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装MySQL</title>
    <link href="http://doraemon2.xyz/2021/10/10/Windows%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://doraemon2.xyz/2021/10/10/Windows%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-10-10T12:06:26.000Z</published>
    <updated>2021-10-13T11:59:56.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows下安装MySql"><a href="#Windows下安装MySql" class="headerlink" title="Windows下安装MySql"></a>Windows下安装MySql</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>下载链接</strong>——<a href="https://dev.mysql.com/downloads/installer/">链接</a></p><p><strong>选择第二个下载</strong></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190007070.png" alt="image-20211010190007070"></p><p>点击图片左下角的蓝字直接进行下载。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190059716.png" alt="image-20211010190059716"></p><p>下载完成，点击安装。</p><p>选择第一个，点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190524873.png" alt="image-20211010190524873"></p><p>点击Execulte</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010190621387.png" alt="image-20211010190621387"></p><p>等待…然后点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193243997.png" alt="image-20211010193243997"></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193302838.png" alt="image-20211010193302838"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193408919.png" alt="image-20211010193408919"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193425871.png" alt="image-20211010193425871"></p><p>选择第一个，然后点next。</p><p>设置完密码，点击add user。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193734629.png" alt="image-20211010193734629"></p><p>设置完成后，点击ok。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193848843.png" alt="image-20211010193848843"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010193925604.png" alt="image-20211010193925604"></p><p>默认，点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194029475.png" alt="image-20211010194029475"></p><p>点击Execute。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194105930.png" alt="image-20211010194105930"></p><p>点击Finish。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194211792.png" alt="image-20211010194211792"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194305757.png" alt="image-20211010194305757"></p><p>点击Finish。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194337661.png" alt="image-20211010194337661"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194404243.png" alt="image-20211010194404243"></p><p>输入密码点击check测试。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194425657.png" alt="image-20211010194425657"></p><p>点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194456386.png" alt="image-20211010194456386"></p><p>点击Execute</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194529263.png" alt="image-20211010194529263"></p><p>点击Finish,再点击next。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194603450.png" alt="image-20211010194603450"></p><p>再次Finish。</p><p>弹出窗口。</p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010194740186.png" alt="image-20211010194740186"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><strong>方式一</strong></p><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010195034032.png" alt="image-20211010195034032"></p><p><strong>方式二</strong></p><p>管理员方式打开命令行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">停止</span><br><span class="line">net stop MySQL80</span><br><span class="line">开启</span><br><span class="line">net start MySQL80 </span><br><span class="line">命令行直接链接服务器</span><br><span class="line">mysql -hlocalhost -uroot -p密码</span><br></pre></td></tr></table></figure><h2 id="配置相关环境变量"><a href="#配置相关环境变量" class="headerlink" title="配置相关环境变量"></a>配置相关环境变量</h2><p><img src="/images/Windows%E5%AE%89%E8%A3%85MySQL.assets/image-20211010200033556.png" alt="image-20211010200033556"></p><p>点编辑。</p><p>C:\Program Files\MySQL\MySQL Server 8.0\bin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows下安装MySql&quot;&gt;&lt;a href=&quot;#Windows下安装MySql&quot; class=&quot;headerlink&quot; title=&quot;Windows下安装MySql&quot;&gt;&lt;/a&gt;Windows下安装MySql&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://doraemon2.xyz/categories/MySQL/"/>
    
    
    <category term="-MySQL" scheme="http://doraemon2.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(17)【中等】两数相加(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/10/LeetCode%E5%88%B7%E9%A2%98(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://doraemon2.xyz/2021/10/10/LeetCode%E5%88%B7%E9%A2%98(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-10-10T03:45:24.000Z</published>
    <updated>2021-10-10T04:00:41.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98-(17)%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.assets/image-20211010112458353.png" alt="image-20211010112458353"></p><p>题目——<a href="https://leetcode-cn.com/problems/add-two-numbers/">链接</a></p><p><strong>这题将两个val分开加到sum中更方便</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            从前往后遍历链表，对应的结点乘以10的n次方</span></span><br><span class="line"><span class="comment">            越高位越往后存，所以用尾插           </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//其中一个为空直接返回另一个</span></span><br><span class="line">        <span class="keyword">if</span>(!l1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!l2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化一个头结点(不存数据，最后将这个结点去掉了(return它的next))</span></span><br><span class="line">        ListNode* sumNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">        sumNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//用于尾插链接,保存定位当前链表的最后一个结点</span></span><br><span class="line">        ListNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">//负责进一</span></span><br><span class="line">        <span class="comment">//循环进入条件，如果1个不为空或者有1可进</span></span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || n == <span class="number">1</span>)</span><br><span class="line">        &#123;     </span><br><span class="line">            <span class="comment">//为每一位相加的结果创建新结点</span></span><br><span class="line">            ListNode* addNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果l1和l2一样长，但是最后两个数相加能进一</span></span><br><span class="line">            <span class="keyword">if</span>(!l1 &amp;&amp; !l2)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = n;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果l2已经到头，但是l2没有</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!l2)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = l1-&gt;val+n;</span><br><span class="line">                <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">1</span>;</span><br><span class="line">                    addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果l1已经到头，但是l2没有</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!l1)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;val = l2-&gt;val+n;</span><br><span class="line">                <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">1</span>;</span><br><span class="line">                    addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//两个都不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                   addNode-&gt;val = l1-&gt;val + l2-&gt;val + n;</span><br><span class="line">                   n  =  <span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">if</span>(addNode-&gt;val &gt;= <span class="number">10</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       n = <span class="number">1</span>;</span><br><span class="line">                       addNode-&gt;val %= <span class="number">10</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;          </span><br><span class="line">            <span class="comment">//根据题目结果来看，最后的和是通过尾插法插入到sumNode中的</span></span><br><span class="line">            <span class="comment">//如果是第一次插入</span></span><br><span class="line">            <span class="keyword">if</span>(!sumNode-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                sumNode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="comment">//用于保存当前最后一个结点</span></span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//用于保存之前头结点后面的结点</span></span><br><span class="line">                tempnode-&gt;next = addNode;</span><br><span class="line">                addNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                tempnode = addNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断条件，什么时候可以往后指</span></span><br><span class="line">            <span class="keyword">if</span>(l1)</span><br><span class="line">            &#123;</span><br><span class="line">                   l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2)</span><br><span class="line">            &#123;</span><br><span class="line">                   l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去掉第一个结点(直接返回sumNode-&gt;Next从第二个开始有数据的结点开始返回好像也行)</span></span><br><span class="line">        <span class="comment">// ListNode* deleHead = sumNode-&gt;next;</span></span><br><span class="line">        <span class="comment">// sumNode-&gt;val = sumNode-&gt;next-&gt;val;</span></span><br><span class="line">        <span class="comment">// sumNode-&gt;next = sumNode-&gt;next-&gt;next;</span></span><br><span class="line">        <span class="comment">// delete deleHead;</span></span><br><span class="line">        <span class="keyword">return</span> sumNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-两数相加&quot;&gt;&lt;a href=&quot;#2-两数相加&quot; class=&quot;headerlink&quot; title=&quot;2.两数相加&quot;&gt;&lt;/a&gt;2.两数相加&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/LeetCode%E5%88%B7%E9%A2%98-(17)%E3%8</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(16)【简单】移除链表元素&amp;&amp;回文链表&amp;&amp;删除链表中的结点</title>
    <link href="http://doraemon2.xyz/2021/10/09/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&amp;&amp;%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&amp;&amp;%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>http://doraemon2.xyz/2021/10/09/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&amp;&amp;%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&amp;&amp;%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</id>
    <published>2021-10-09T13:15:11.000Z</published>
    <updated>2021-10-15T02:26:27.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h1><p>链接——<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211008202714495.png" alt="image-20211008202714495"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置一个新的头结点指向head——就能解决</span></span><br><span class="line">        ListNode* Newhead = <span class="keyword">new</span> ListNode;</span><br><span class="line">        Newhead-&gt;next = head;</span><br><span class="line">        ListNode* tempnode = Newhead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(tempnode-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tempnode-&gt;next-&gt;val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* recv = tempnode-&gt;next;</span><br><span class="line">                tempnode-&gt;next= tempnode-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> recv;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tempnode = tempnode-&gt;next;</span><br><span class="line">            &#125;              </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* temp = Newhead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> Newhead;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234.回文链表"></a>234.回文链表</h1><p>题目——<a href="https://leetcode-cn.com/problems/palindrome-linked-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211006155828562.png" alt="image-20211006155828562"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用容器装，然后从头到后遍历比较</span></span><br><span class="line">        <span class="comment">//注意容器存储类型,存val内存开销会小一点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ListV;</span><br><span class="line">        <span class="keyword">while</span>(head)</span><br><span class="line">        &#123;</span><br><span class="line">            ListV.push_back(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j= ListV.size()<span class="number">-1</span>;i&lt;j;i++,j--)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(ListV[i]!= ListV[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="237-删除链表中的结点"><a href="#237-删除链表中的结点" class="headerlink" title="237.删除链表中的结点"></a>237.删除链表中的结点</h1><p>题目——<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(16)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0&&%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8&&%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9.assets/image-20211009205928937.png" alt="image-20211009205928937"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将变成后面的结点，然后将后面的结点删除防止内存泄漏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">     ListNode* tempnode = node-&gt;next;</span><br><span class="line">     node-&gt;val = tempnode-&gt;val;</span><br><span class="line">     node-&gt;next = tempnode-&gt;next;</span><br><span class="line">     <span class="keyword">delete</span> tempnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;203-移除链表元素&quot;&gt;&lt;a href=&quot;#203-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;203.移除链表元素&quot;&gt;&lt;/a&gt;203.移除链表元素&lt;/h1&gt;&lt;p&gt;链接——&lt;a href=&quot;https://leetcode-cn.com/p</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】链表(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/09/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++)/</id>
    <published>2021-10-09T12:50:46.000Z</published>
    <updated>2021-10-09T12:52:29.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是线性表的链式存储方式，逻辑上相邻的数据在计算机中的内存位置不必须相邻，给每一个元素 加一个指针域，指向下一个元素的位置。</p><p><strong>如下图所示</strong>:</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211004153758080.png" alt="image-20211004153758080"></p><p><strong>链表的核心要素</strong>：</p><ul><li>每个结点由数据域和指针域组成</li><li>指针域指向下一个结点的内存地址</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>链表的结点均单项指向下一个结点，形成一条单项访问的数据链。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211004154730170.png" alt="image-20211004154730170"></p><h3 id="相关接口实现"><a href="#相关接口实现" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode,LinkList;<span class="comment">//LinkList为头结点</span></span><br><span class="line"><span class="comment">//初始化就是初始化头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkList</span><span class="params">(LinkList*&amp; linklist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">linklist = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!linklist)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">linklist-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;next = L-&gt;next;<span class="comment">//头结点默认的next是NULL</span></span><br><span class="line">L-&gt;next = node;<span class="comment">//与头结点相连接</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkNode* tempnode = L;<span class="comment">//从头结点开始</span></span><br><span class="line"><span class="comment">//通过循环找到最后一个结点</span></span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next)<span class="comment">//直到循环到下一个结点为空，就进不去这个循环了，此时的tempnode就是最后一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意:如果只有一个头结点会直接到达这里。因为头结点的next指向空</span></span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定位置插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertLinkList</span><span class="params">(LinkList*&amp; L,<span class="keyword">int</span> index,DataType num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || index &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode* newnode = <span class="keyword">new</span> LinkNode;</span><br><span class="line">newnode-&gt;data = num;</span><br><span class="line">pushFront(L, newnode);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历寻找</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkList* p, * newNode;</span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; count &lt; index<span class="number">-1</span>)<span class="comment">//count&lt;index-1条件控制，最后执行完这段代码，count就是index前一个位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p最后就是要插入位置的前一个结点</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与新的结点链接</span></span><br><span class="line">newNode = <span class="keyword">new</span> LinkNode;<span class="comment">//生成新的结点</span></span><br><span class="line">newNode-&gt;data = num;</span><br><span class="line">newNode-&gt;next = p-&gt;next;  </span><br><span class="line">p-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问指定位置的元素 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> postion,<span class="keyword">int</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || postion &lt;= <span class="number">0</span> || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为什么这样写因为本链表头结点无数据</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (count &lt; postion  &amp;&amp; tempnode)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误的postion必定导致tempnode为null</span></span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = tempnode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找元素-按值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> e,<span class="keyword">int</span> &amp;index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (tempnode &amp;&amp; tempnode-&gt;data != e)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一遍下来没查到，tempnode为NULL</span></span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = count;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素-下标</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;                                                    </span><br><span class="line">LinkNode* tempnode = L;</span><br><span class="line"><span class="comment">//补充:也能再创建个接口来遍历链表统计结点数</span></span><br><span class="line"><span class="keyword">while</span> (tempnode &amp;&amp; count != index<span class="number">-1</span>)<span class="comment">//找到要删除结点的前一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode-&gt;next)<span class="comment">//找到的前一个结点是最后一个结点，说明index的下标过大，reture false</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功找到</span></span><br><span class="line">LinkNode* removeNode = tempnode-&gt;next;</span><br><span class="line">tempnode-&gt;next = removeNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> removeNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">destoryList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList* tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">tempnode = L;<span class="comment">//不断的往下取都结点，依次释放。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出表中元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* p = <span class="literal">NULL</span>;<span class="comment">//用它拿到第一个结点</span></span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;<span class="comment">//访问下一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>在单链表的基础上让最后一个结点指向第一个结点。</p><h3 id="相关接口实现-1"><a href="#相关接口实现-1" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode, LinkList;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inintLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next = L;</span><br><span class="line">L-&gt;data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L,LinkNode *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头结点的指针域指针指向自己的时候就是空的循环链表，本头结点不存数值</span></span><br><span class="line"><span class="keyword">if</span> (L == L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非空的循坏链表</span></span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next != L)<span class="comment">//找到最后一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;next = L;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList*&amp; L, LinkNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode* tempnode = L-&gt;next;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = tempnode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkNode*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || L == L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode != L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>定一个数，从头开始依次报数，报道这个数的就delete,直到求出最后一个出局的编号是多少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//约瑟夫环问题</span></span><br><span class="line"><span class="comment">//注意i 和 j的作用  </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Joseph</span><span class="params">(LinkNode*&amp; L,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">LinkNode* p, * q;<span class="comment">//p负责向下指，q负责与临时保存要删除的结点，链接到后面的结点</span></span><br><span class="line">p = L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!L || p-&gt;next == L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//定位要删除结点的位置</span></span><br><span class="line">    <span class="comment">//通过i和j的不断增加，来定位位置</span></span><br><span class="line">    <span class="comment">//j是不断叠加的</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//记录最后一个出圈者的编号</span></span><br><span class="line"><span class="comment">//该结点的值即为编号。</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//i为第一个要删除的结点位置</span></span><br><span class="line">i += val;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第i个结点，p指向该结点的上一个结点</span></span><br><span class="line">        <span class="comment">//能够进行这里，这个while循环的条件肯定是成立的</span></span><br><span class="line">        <span class="comment">//作用就是通过对j增加，然后与i进行比较。</span></span><br><span class="line"><span class="comment">//注意是从头开始，头结点不存数值</span></span><br><span class="line">        <span class="comment">//每次遍历都能遍历到头结点</span></span><br><span class="line">        <span class="comment">//如果头结点存数值的话，那j的条件就得修改</span></span><br><span class="line">        <span class="comment">//随便想了一下，应该是j &lt; i</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//这两个判断的位置要注意一下</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;next != L)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">times++;<span class="comment">//进行了几轮</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line">num = q-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新连接起来</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放被删除结点空间</span></span><br><span class="line">printList(L);</span><br><span class="line">&#125; <span class="keyword">while</span> (L-&gt;next != L);<span class="comment">//删到最后就剩自己指向自己了</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最后被删除的结点位置是第&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;个&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>在单链表的基础上添加一个指向前一个结点的指针。</p><h3 id="相关接口实现-2"><a href="#相关接口实现-2" class="headerlink" title="相关接口实现"></a>相关接口实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> dataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">dataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span>* <span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">doubleNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode,LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L = <span class="keyword">new</span> LinkList;</span><br><span class="line"><span class="keyword">if</span> (!L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;data = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushBack</span><span class="params">(LinkList*&amp; L,LinkNode*&amp; node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L;</span><br><span class="line"><span class="keyword">while</span> (tempnode-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一次进行尾插就直接来到这里</span></span><br><span class="line">tempnode-&gt;next = node;</span><br><span class="line">node-&gt;prev = tempnode;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前插</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(LinkList* &amp;L, LinkNode* &amp;node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;prev = L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line">L-&gt;next = node;</span><br><span class="line">node-&gt;prev = L;</span><br><span class="line">node-&gt;next = tempnode;</span><br><span class="line">tempnode-&gt;prev = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">LinkList* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tempnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定位置插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertLinkList</span><span class="params">(LinkList*&amp; L,<span class="keyword">int</span> index,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count == index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode* newnode = <span class="keyword">new</span> LinkNode;</span><br><span class="line">newnode-&gt;data = num;</span><br><span class="line">LinkNode* tempnodeII = tempnode-&gt;prev;</span><br><span class="line">tempnodeII-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = tempnodeII;</span><br><span class="line">newnode-&gt;next = tempnode;</span><br><span class="line">tempnode-&gt;prev = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteLinkList</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="comment">//同在指定位置插入元素,先定位到这个结点</span></span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">tempnode-&gt;prev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tempnode-&gt;prev-&gt;next = tempnode-&gt;next;</span><br><span class="line">tempnode-&gt;next-&gt;prev = tempnode-&gt;prev;</span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到某个位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getElems</span><span class="params">(LinkList*&amp; L, <span class="keyword">int</span> index, <span class="keyword">int</span>&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L || !L-&gt;next || index &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>  count = <span class="number">1</span>;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count == index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">tempnode = tempnode-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = tempnode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">destoryLinkList</span><span class="params">(LinkList*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkNode* tempnode = <span class="literal">NULL</span>;</span><br><span class="line">tempnode = L;</span><br><span class="line"><span class="comment">//找到下一个，删除前一个、从前往后删</span></span><br><span class="line"><span class="keyword">while</span> (tempnode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//L移动到真正的第一个结点</span></span><br><span class="line">L = L-&gt;next;</span><br><span class="line"><span class="comment">//删除他原来的</span></span><br><span class="line"><span class="keyword">delete</span> tempnode;</span><br><span class="line"></span><br><span class="line">tempnode = L;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="Linux内核共享双向链表"><a href="#Linux内核共享双向链表" class="headerlink" title="Linux内核共享双向链表"></a>Linux内核共享双向链表</h3><blockquote><p>在 linux 内核中，有大量的数据结构需要用到双向链表，例如进程、文件、模块、页面等。 </p><p>若采用双向链表的传统实现方式，需要为这些数据结构维护各自的链表，并且为每个链表都 </p><p>要设计插入、删除等操作函数。因为用来维持链表的 next 和 prev 指针指向对应类型的对 </p><p>象，因此一种数据结构的链表操作函数不能用于操作其它数据结构的链表。</p></blockquote><blockquote><p>有没有一种方式让多个链表共享同一套链表操作呢？</p></blockquote><p>——<strong>将结点中的指针域和数据域分离</strong>。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E9%93%BE%E8%A1%A8(C++).assets/image-20211009192009185.png" alt="image-20211009192009185"></p><p><strong>例如</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>* <span class="title">prev</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">time_t</span> timeout;</span><br><span class="line">LinkNode node;<span class="comment">//挂件</span></span><br><span class="line">&#125;ConnTimeOut;</span><br></pre></td></tr></table></figure><p><strong>特殊访问</strong>：</p><p>——取到结构体中挂件的的偏移量，得到结构体的地址，然后进行访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ConnTimeOut* ct = <span class="keyword">new</span> ConnTimeOut;</span><br><span class="line">ct-&gt;fd = <span class="number">3</span>;</span><br><span class="line">LinkNode* p = &amp;(ct-&gt;node);</span><br><span class="line"><span class="keyword">int</span> offset = offsetof(ConnTimeOut, node);<span class="comment">//node成员在内存中距结构体起始位置16个字节</span></span><br><span class="line">ConnTimeOut* tmp = (ConnTimeOut*)((<span class="keyword">size_t</span>)p - offset);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;tmp-&gt;fd;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关接口示例</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initLinkNode</span><span class="params">(LinkNode&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">L.next = <span class="literal">NULL</span>;</span><br><span class="line">L.prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ConnTimeOut* cL = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化一个空的双向链表</span></span><br><span class="line">cL = <span class="keyword">new</span> ConnTimeOut;</span><br><span class="line">cL-&gt;fd = <span class="number">-1</span>;</span><br><span class="line">initLinkNode(cL-&gt;node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>怎么个共享法呢?</p></blockquote><p><strong>重新解释</strong>：</p><p>将一个结点中的指针域剥离出来，创建一个新的结构体，来存放这个指针域，也就是说结构体嵌套。不同的结点(结构体数据内容不同，但是都有这个剥离出来的指针域。)，使用同一个接口进行操作，靠的就是他们中相同的”指针域”结构体，就是对这个结构体中的”指针域结构体”进行操作。</p><p><strong>例如</strong>：<br>不同的结构体，但是但是他们都有上面LinkNode node这个挂件，那么他们就共用同一个初始化指针指向的函数。</p><p>传递这个共有的内容给函数，这个函数对他们进行操作。</p><p>例如: 将结点链接起来。不同链表使用同一个函数进行插入操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;链表是线性表的链式存储方式，逻辑上相邻的数据在计算机中的内存位置不必须相邻，给每一个元素 加一个指针域，指向下一个元素的位置。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="http://doraemon2.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-数据结构" scheme="http://doraemon2.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(15)【简单】删除链表中重复元素(C++)</title>
    <link href="http://doraemon2.xyz/2021/10/05/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++)/"/>
    <id>http://doraemon2.xyz/2021/10/05/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++)/</id>
    <published>2021-10-05T11:11:26.000Z</published>
    <updated>2021-10-05T11:41:57.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h1><hr><p>题目——<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">链接</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++).assets/image-20211005184131269.png" alt="image-20211005184131269"></p><hr><h2 id="单指针法"><a href="#单指针法" class="headerlink" title="单指针法"></a>单指针法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个指针往后遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tempnode = head;<span class="comment">//这个头结点里面好像有元素</span></span><br><span class="line">        <span class="keyword">while</span>(tempnode-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tempnode-&gt;val == tempnode-&gt;next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                tempnode-&gt;next = tempnode-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tempnode = tempnode-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="双指针-前后指针法"><a href="#双指针-前后指针法" class="headerlink" title="双指针-前后指针法"></a>双指针-前后指针法</h2><p><strong>注意前后指针的链接</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* Prev = head;</span><br><span class="line">        ListNode* Next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(Next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Prev-&gt;val == Next-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">              </span><br><span class="line">               Prev-&gt;next = Next-&gt;next;</span><br><span class="line">               Next = Next-&gt;next;               </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Prev= Next;</span><br><span class="line">                Next = Next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>感谢这位老哥的分享——<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/comments/40973">链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = deleteDuplicates(head-&gt;next);</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val == head-&gt;next-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>图解</strong>:</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(15)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0(C++).assets/image-20211005183636285.png" alt="image-20211005183636285"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;83-删除排序链表中的重复元素&quot;&gt;&lt;a href=&quot;#83-删除排序链表中的重复元素&quot; class=&quot;headerlink&quot; title=&quot;83. 删除排序链表中的重复元素&quot;&gt;&lt;/a&gt;83. 删除排序链表中的重复元素&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;题目——&lt;a href</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-链表" scheme="http://doraemon2.xyz/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
</feed>
