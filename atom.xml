<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="https://doraemon-hub-art.github.io/atom.xml" rel="self"/>
  
  <link href="https://doraemon-hub-art.github.io/"/>
  <updated>2022-01-28T10:43:39.313Z</updated>
  <id>https://doraemon-hub-art.github.io/</id>
  
  <author>
    <name>快乐的威猛先生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【QT】QT打印调试信息</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/28/%E3%80%90QT%E3%80%91QT%E6%89%93%E5%8D%B0%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/28/%E3%80%90QT%E3%80%91QT%E6%89%93%E5%8D%B0%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF/</id>
    <published>2022-01-28T10:43:07.000Z</published>
    <updated>2022-01-28T10:43:39.313Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QDebug打印调试信息</span></span><br><span class="line">   <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">   qDebug(<span class="string">&quot;十进制%d&quot;</span>,num);</span><br><span class="line">   qDebug(<span class="string">&quot;八进制%o&quot;</span>,num);</span><br><span class="line">   qDebug(<span class="string">&quot;十六进制%x&quot;</span>,num);</span><br><span class="line">   qreal PI = <span class="number">3.14</span>;</span><br><span class="line">   qDebug(<span class="string">&quot;浮点%f&quot;</span>,PI);</span><br><span class="line">   qDebug(<span class="string">&quot;科学计数法%e&quot;</span>,PI);</span><br><span class="line">   qDebug(<span class="string">&quot;123%%&quot;</span>);<span class="comment">//123%</span></span><br><span class="line">   <span class="comment">//另一种输入方式</span></span><br><span class="line">   qDebug()&lt;&lt;PI;</span><br><span class="line">   QString str = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">   qDebug()&lt;&lt;str;</span><br><span class="line">   qDebug().noquote()&lt;&lt;str;<span class="comment">//不带双引号输出</span></span><br><span class="line">   qDebug()&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;<span class="string">&quot;world&quot;</span>;<span class="comment">//默认输入，这两个单词中间会有空格</span></span><br><span class="line">   qDebug().nospace()&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;<span class="string">&quot;world&quot;</span>;<span class="comment">//去掉空格</span></span><br><span class="line">   <span class="comment">//控制台程序会输入到黑窗口</span></span><br><span class="line">   <span class="comment">//桌面应用程序会输出到-应用程序输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT文件处理</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2022-01-24T15:28:30.000Z</published>
    <updated>2022-01-24T15:29:28.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><p>QFile类用于文件操作，它提供了读写文件的接口，可以读写文件、二进制文件和Qt资源文件。</p><p>处理文本文件和二进制文件，可以使用QTextStream类和QDataStream类。处理临时文件可以使用QTemporaryFile,获取信息可以使用QFileInfo,处理目录可以使用QDir,监视文件和目录变化可以使用QFileSystemWatcher。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201242329099.png" alt="image-20220124203618757"></p><p><strong>QFile类示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件读取</span></span><br><span class="line">   <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;hello.txt&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">if</span>(file.open(QIODevice::ReadOnly))</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">       qint32 n = file.readLine(buffer,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">       <span class="keyword">if</span>(n != <span class="number">-1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">            qDebug()&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;buffer;</span><br><span class="line">            file.close();<span class="comment">//关闭文件</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">        qDebug()&lt;&lt;file.errorString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//文件写入</span></span><br><span class="line">   QFile dataFile;</span><br><span class="line">   <span class="keyword">double</span> dPI = <span class="number">3.1415926</span>;</span><br><span class="line">   <span class="keyword">int</span> age =<span class="number">19</span>;</span><br><span class="line">   dataFile.setFileName(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(dataFile.open(QFile::WriteOnly | QFile::Truncate))</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;dataFile)</span></span>;</span><br><span class="line">        <span class="comment">//设置精度</span></span><br><span class="line">        out.setRealNumberPrecision(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置字段宽度</span></span><br><span class="line">        out.setFieldWidth(<span class="number">20</span>);</span><br><span class="line">         <span class="comment">//设置对齐方式</span></span><br><span class="line">         out.setFieldAlignment(QTextStream::AlignCenter);</span><br><span class="line">        out&lt;&lt;QString(<span class="string">&quot;PI:&quot;</span>)&lt;&lt;dPI;</span><br><span class="line">        <span class="comment">//将整数以二进制方式写入</span></span><br><span class="line">        out&lt;&lt;bin&lt;&lt;age;</span><br><span class="line">        <span class="comment">//十六进制写入，并显示进制前缀</span></span><br><span class="line">        out&lt;&lt;hex&lt;&lt;showbase&lt;&lt;age;</span><br><span class="line">        <span class="comment">//科学计数法</span></span><br><span class="line">        out&lt;&lt;scientific&lt;&lt;dPI;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>操作二进制文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDataStream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//往文件中写入数据</span></span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function">QFile  <span class="title">binFile</span><span class="params">(<span class="string">&quot;info.bat&quot;</span>)</span></span>;</span><br><span class="line">     <span class="keyword">if</span>(binFile.open(QIODevice::WriteOnly | QIODevice::Truncate))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function">QDataStream <span class="title">out</span><span class="params">(&amp;binFile)</span></span>;</span><br><span class="line">         out&lt;&lt;QString(<span class="string">&quot;半生瓜のblog&quot;</span>)&lt;&lt;QDate::fromString(<span class="string">&quot;2022-01-24&quot;</span>,<span class="string">&quot;yyyy-MM-dd&quot;</span>)&lt;&lt;(qint32)<span class="number">19</span>;</span><br><span class="line">          binFile.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         qDebug()&lt;&lt;binFile.errorString();</span><br><span class="line">     &#125;</span><br><span class="line">     binFile.setFileName(<span class="string">&quot;info.bat&quot;</span>);<span class="comment">//指明要操作的文件</span></span><br><span class="line">     <span class="keyword">if</span>(binFile.open(QIODevice::ReadOnly))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function">QDataStream <span class="title">in</span><span class="params">(&amp;binFile)</span></span>;</span><br><span class="line">        <span class="comment">//怎么写怎么读</span></span><br><span class="line">         QString Name;</span><br><span class="line">         QDate NowTime;</span><br><span class="line">         qint32 Age;</span><br><span class="line">         in&gt;&gt;Name&gt;&gt;NowTime&gt;&gt;Age;</span><br><span class="line">         qDebug()&lt;&lt;Name&lt;&lt;NowTime&lt;&lt;Age;</span><br><span class="line">         binFile.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">          qDebug()&lt;&lt;binFile.errorString();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例:获取文件信息</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201242329924.png" alt="image-20220124232543877"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FileInfo::getFileInfo</span><span class="params">(QString &amp;fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过这个类来获取文件的信息</span></span><br><span class="line">    <span class="function">QFileInfo <span class="title">info</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    qint64 size = info.size();<span class="comment">//获取文件大小</span></span><br><span class="line">    QDateTime createTime = info.created();<span class="comment">//获取文件创建时间</span></span><br><span class="line">    QDateTime lastModTime = info.lastModified();<span class="comment">//获取文件最后一次被的修改的时间</span></span><br><span class="line">    QDateTime lasReadTime = info.lastRead();<span class="comment">//获取文件最后一次被读取的时间</span></span><br><span class="line">    <span class="comment">//文件的属性信息</span></span><br><span class="line">    <span class="keyword">bool</span> isDir = info.isDir();<span class="comment">//是不是目录</span></span><br><span class="line">    <span class="keyword">bool</span> isFile = info.isFile();<span class="comment">//是不是文件</span></span><br><span class="line">    <span class="keyword">bool</span> isSymLink = info.isSymLink();<span class="comment">//是不是链接</span></span><br><span class="line">    <span class="keyword">bool</span> isHid = info.isHidden();<span class="comment">//是否隐藏</span></span><br><span class="line">    <span class="keyword">bool</span> isReadable = info.isReadable();<span class="comment">//是否可读</span></span><br><span class="line">    <span class="keyword">bool</span> isWritable = info.isWritable();<span class="comment">//是否可写</span></span><br><span class="line">    <span class="keyword">bool</span> isExcutable = info.isExecutable();<span class="comment">//是否可执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据读取信息设置控件信息</span></span><br><span class="line">    ui-&gt;FileSizeLineEdit-&gt;setText(QString::number(size));<span class="comment">//整型转字符串</span></span><br><span class="line">    ui-&gt;CreateTimeLineEdit-&gt;setText(createTime.toString());<span class="comment">//QDate转字符串</span></span><br><span class="line">    ui-&gt;LastModTimeLineEdit-&gt;setText(lastModTime.toString());</span><br><span class="line">    ui-&gt;LastCheckTimeLineEdit-&gt;setText(lasReadTime.toString());</span><br><span class="line">    ui-&gt;isDirCheckBox-&gt;setChecked(isDir);</span><br><span class="line">    ui-&gt;isFileCheckBox-&gt;setChecked(isFile);</span><br><span class="line">    ui-&gt;isExecutableCheckBox-&gt;setChecked(isExcutable);</span><br><span class="line">    ui-&gt;isSymLinkCheckBox-&gt;setChecked(isSymLink);</span><br><span class="line">    ui-&gt;isHiddenCheckBox-&gt;setChecked(isHid);</span><br><span class="line">    ui-&gt;isWritableCheckBox-&gt;setChecked(isWritable);</span><br><span class="line">    ui-&gt;isReadableCheckBox-&gt;setChecked(isReadable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FileInfo::on_browerFileBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//选择文件</span></span><br><span class="line">    QString fileName = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">&quot;打开文件&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;files(*)&quot;</span>);</span><br><span class="line">     <span class="comment">//选择目录QString path = QFileDialog::getExistingDirectory(this,&quot;选择目录&quot;,&quot;.&quot;);</span></span><br><span class="line">    ui-&gt;FileNameLineEdit-&gt;setText(fileName);<span class="comment">//文件名(带路径的)</span></span><br><span class="line">    getFileInfo(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件处理&quot;&gt;&lt;a href=&quot;#文件处理&quot; class=&quot;headerlink&quot; title=&quot;文件处理&quot;&gt;&lt;/a&gt;文件处理&lt;/h1&gt;&lt;p&gt;QFile类用于文件操作，它提供了读写文件的接口，可以读写文件、二进制文件和Qt资源文件。&lt;/p&gt;
&lt;p&gt;处理文本文件和二进</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT正则表达式</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-24T08:54:46.000Z</published>
    <updated>2022-01-24T08:56:15.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT正则表达式"><a href="#QT正则表达式" class="headerlink" title="QT正则表达式"></a>QT正则表达式</h1><p>正则表达式即一个文本匹配字符串的一种模式。Qt中QRegExp类实现使用正则表达式进行模式匹配，且完全支持Unicode,主要应用:字符串验证、搜索、查找替换、分割。</p><p><strong>正则表达式中字符及字符集</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241110136.png" alt="    "></p><p><strong>正则表达式中的量词</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241655096.png" alt="image-20220124111743871"></p><p><strong>正则表达式中的断言</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241120248.png" alt="image-20220124112005197"></p><p><strong>QRegExp支持通配符</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241120415.png" alt="image-20220124112047375"></p><p> <strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整匹配</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">reg</span><span class="params">(<span class="string">&quot;a&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;reg.exactMatch(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//任意个数字+两个非数字</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">reg0</span><span class="params">(<span class="string">&quot;\\d*\\D&#123;2&#125;&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;reg0.exactMatch(<span class="string">&quot;123ab&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用通配符匹配</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;*.txt&quot;</span>)</span></span>;</span><br><span class="line">   <span class="comment">//设置匹配语法</span></span><br><span class="line">   rx.setPatternSyntax(QRegExp::Wildcard);<span class="comment">//支持通配符</span></span><br><span class="line">   qDebug()&lt;&lt;rx.exactMatch(<span class="string">&quot;123.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//匹配单词边界</span></span><br><span class="line">   QRegExp reg1;</span><br><span class="line">   <span class="comment">//设置匹配模式</span></span><br><span class="line">   reg1.setPattern(<span class="string">&quot;\\b(hello|Hello)\\b&quot;</span>);</span><br><span class="line">   qDebug()&lt;&lt;reg1.indexIn(<span class="string">&quot;Hello everyone.&quot;</span>);<span class="comment">//返回起始下标</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//捕获匹配的文本</span></span><br><span class="line">   <span class="comment">//由(?:开始。)结束</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">regHight</span><span class="params">(<span class="string">&quot;(\\d+)(?:\\s*)(cm|inchi)&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;regHight.indexIn(<span class="string">&quot;Mr.WM 170cm&quot;</span>);</span><br><span class="line">   qDebug()&lt;&lt;regHight.cap(<span class="number">0</span>);<span class="comment">//完整</span></span><br><span class="line">   qDebug()&lt;&lt;regHight.cap(<span class="number">1</span>);<span class="comment">//第一部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//断言?!</span></span><br><span class="line">   QRegExp reg2;</span><br><span class="line">   reg2.setPattern(<span class="string">&quot;面(?!包)&quot;</span>);<span class="comment">//面后面不是包才匹配成功</span></span><br><span class="line">   QString str =<span class="string">&quot;我爱吃面食，面包也行吧。&quot;</span>;</span><br><span class="line">   str.replace(reg2,<span class="string">&quot;米&quot;</span>);<span class="comment">//我爱吃米食，面包也行吧</span></span><br><span class="line">   qDebug()&lt;&lt;str;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Qt5引入了新的类</span></span><br><span class="line">   <span class="function">QRegularExpression  <span class="title">regExp</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">   <span class="comment">//结果QRegularExpressionMatch(Valid, has match: 0:(0, 5, &quot;hello&quot;)</span></span><br><span class="line">   qDebug()&lt;&lt;regExp.match(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">   regExp.setPattern(<span class="string">&quot;[A-Z]&#123;3,8&#125;&quot;</span>);</span><br><span class="line">   <span class="comment">//设置匹配模式-大小写不敏感</span></span><br><span class="line">   regExp.setPatternOptions(QRegularExpression::CaseInsensitiveOption);</span><br><span class="line">   qDebug()&lt;&lt;regExp.match(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function">QRegularExpression <span class="title">reDate</span><span class="params">(<span class="string">&quot;^(\\d\\d)/(\\d\\d)/(\\d\\d\\d\\d)$&quot;</span>)</span></span>;<span class="comment">//日期</span></span><br><span class="line">   QRegularExpressionMatch match0 = reDate.match(<span class="string">&quot;01/24/2022&quot;</span>);</span><br><span class="line">   QString strMatch = match0.captured(<span class="number">0</span>);</span><br><span class="line">   qDebug()&lt;&lt;strMatch;</span><br><span class="line">   qDebug()&lt;&lt;match0;</span><br><span class="line"></span><br><span class="line">   QString sPattern;</span><br><span class="line">   sPattern = <span class="string">&quot;^(Jan|Feb|Mar|Apr|May) \\d\\d \\d\\d\\d\\d$&quot;</span>;</span><br><span class="line">   <span class="function">QRegularExpression <span class="title">rDate1</span><span class="params">(sPattern)</span></span>;</span><br><span class="line">   <span class="function">QString <span class="title">ss</span><span class="params">(<span class="string">&quot;Apr 01&quot;</span>)</span></span>;</span><br><span class="line">   QRegularExpressionMatch match2;</span><br><span class="line">   match2 = rDate1.match(ss,<span class="number">0</span>,QRegularExpression::PartialPreferCompleteMatch);    <span class="comment">//部分匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2.hasMatch();<span class="comment">//完整匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2.hasPartialMatch();<span class="comment">//部分匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT正则表达式&quot;&gt;&lt;a href=&quot;#QT正则表达式&quot; class=&quot;headerlink&quot; title=&quot;QT正则表达式&quot;&gt;&lt;/a&gt;QT正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式即一个文本匹配字符串的一种模式。Qt中QRegExp类实现使用正则表达式进行模式匹配，且完</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT标准对话框</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/23/%E3%80%90QT%E3%80%91QT%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/23/%E3%80%90QT%E3%80%91QT%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/</id>
    <published>2022-01-23T14:43:07.000Z</published>
    <updated>2022-01-23T14:44:13.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT标准对话框"><a href="#QT标准对话框" class="headerlink" title="QT标准对话框"></a>QT标准对话框</h1><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243662.png" alt="image-20220123114821788"></p><p><strong>示例:</strong></p><ul><li>消息框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232236990.png" alt="image-20220123223658903"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;msgboxdlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line">MsgBoxDlg::MsgBoxDlg(QWidget* parent ):QDialog(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;标准信息对话框集合&quot;</span>);</span><br><span class="line">    <span class="comment">//构造部件</span></span><br><span class="line">    m_tipLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;请选择一种消息框&quot;</span>);</span><br><span class="line">    m_questionBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;问题消息框&quot;</span>);</span><br><span class="line">    m_infomationBtn= <span class="keyword">new</span> QPushButton(<span class="string">&quot;信息消息框&quot;</span>);</span><br><span class="line">    m_warningBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;警告消息框&quot;</span>);</span><br><span class="line">    m_criticalBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;错误消息框&quot;</span>);</span><br><span class="line">    m_aboutBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;关于消息框&quot;</span>);</span><br><span class="line">    m_aboutQtBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;关于Qt消息框&quot;</span>);</span><br><span class="line">    <span class="comment">//布局界面</span></span><br><span class="line">    m_mainLayout = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_tipLabel,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_questionBtn,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_infomationBtn,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_warningBtn,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_criticalBtn,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_aboutBtn,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_aboutQtBtn,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    connect(m_questionBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showQuestionMsgDlg);</span><br><span class="line">    connect(m_infomationBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showInfomationMsgDlg);</span><br><span class="line">    connect(m_warningBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showWarningMsgDlg);</span><br><span class="line">    connect(m_criticalBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showCriticalMsgDlg);</span><br><span class="line">    connect(m_aboutBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showAboutMsgDlg);</span><br><span class="line">    connect(m_aboutQtBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showAboutQtMsgDlg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showQuestionMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> res =  QMessageBox::question(<span class="keyword">this</span>,<span class="string">&quot;问题消息框&quot;</span>,<span class="string">&quot;您已打开问题消息框,是否关闭？&quot;</span>,QMessageBox::Ok | QMessageBox::Cancel,QMessageBox::Ok);</span><br><span class="line">   <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">   <span class="keyword">case</span> QMessageBox::Ok:</span><br><span class="line">       m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框-确定&quot;</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> QMessageBox::Cancel:</span><br><span class="line">       m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框-取消&quot;</span>);</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showInfomationMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;信息消息框&quot;</span>);</span><br><span class="line">    QMessageBox::information(<span class="keyword">this</span>,<span class="string">&quot;信息提示框&quot;</span>,<span class="string">&quot;这是个信息提示框&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showWarningMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;警告消息&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> res = QMessageBox::warning(<span class="keyword">this</span>,<span class="string">&quot;警告消息框&quot;</span>,<span class="string">&quot;警告!&quot;</span>,QMessageBox::Save | QMessageBox::Cancel | QMessageBox::Discard,QMessageBox::Save);</span><br><span class="line">    <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">    <span class="keyword">case</span> QMessageBox::Save:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了保存&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> QMessageBox::Discard:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了忽视&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QMessageBox::Cancel:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了取消&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showCriticalMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;错误消息框&quot;</span>);</span><br><span class="line">    QMessageBox::critical(<span class="keyword">this</span>,<span class="string">&quot;错误消息框&quot;</span>,<span class="string">&quot;发生错误!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showAboutMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;关于消息框&quot;</span>);</span><br><span class="line">    QMessageBox::about(<span class="keyword">this</span>,<span class="string">&quot;关于&quot;</span>,<span class="string">&quot;关于消息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showAboutQtMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;关于Qt消息框&quot;</span>);</span><br><span class="line">    QMessageBox::aboutQt(<span class="keyword">this</span>,<span class="string">&quot;关于QT&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>输入对话框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243463.png" alt="image-20220123223756778"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;inputdlag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QInputDialog&gt;</span></span></span><br><span class="line">InputDlag::InputDlag(QWidget*parent):QDialog(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;输入对话框示例&quot;</span>);</span><br><span class="line">    m_nameTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">    m_sexTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line">    m_ageTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;年龄:&quot;</span>);</span><br><span class="line">    m_scoreTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;打分:&quot;</span>);</span><br><span class="line">    m_nameLabel =  <span class="keyword">new</span> QLabel(<span class="string">&quot;快乐的威猛先生&quot;</span>);</span><br><span class="line">    m_sexLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    m_ageLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;19&quot;</span>);</span><br><span class="line">    m_scoreLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    m_nameBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑姓名&quot;</span>);</span><br><span class="line">    m_ageBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑年龄&quot;</span>);</span><br><span class="line">    m_sexBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑性别&quot;</span>);</span><br><span class="line">    m_scoreBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑分数&quot;</span>);</span><br><span class="line"></span><br><span class="line">    m_mainLayout = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameTitle,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameLabel,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameBtn,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexTitle,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexLabel,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexBtn,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageTitle,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageLabel,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageBtn,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreTitle,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreLabel,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreBtn,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//设置控件间的间隙</span></span><br><span class="line">    m_mainLayout-&gt;setSpacing(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//设置控件与窗体的间隙</span></span><br><span class="line">    m_mainLayout-&gt;setMargin(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    connect(m_nameBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editName);</span><br><span class="line">    connect(m_ageBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editAge);</span><br><span class="line">    connect(m_sexBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editSex);</span><br><span class="line">    connect(m_scoreBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">   QString sName = QInputDialog::getText(<span class="keyword">this</span>,<span class="string">&quot;标准字符串输入对话框&quot;</span>,<span class="string">&quot;请编辑姓名&quot;</span>,QLineEdit::Normal,m_nameLabel-&gt;text(),&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok &amp;&amp; !sName.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        m_nameLabel-&gt;setText(sName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">    <span class="keyword">int</span> age = QInputDialog::getInt(<span class="keyword">this</span>,<span class="string">&quot;标准int数据类型对话框&quot;</span>,<span class="string">&quot;请编辑年龄&quot;</span>,m_ageLabel-&gt;text().toInt(),<span class="number">0</span>,<span class="number">120</span>,<span class="number">1</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok)</span><br><span class="line">    &#123;</span><br><span class="line">      m_ageLabel-&gt;setText(QString(<span class="string">&quot;%1&quot;</span>).arg(age));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">    QStringList sexList;</span><br><span class="line">    sexList&lt;&lt;<span class="string">&quot;男&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;保密&quot;</span>;</span><br><span class="line">    QString sex = QInputDialog::getItem(<span class="keyword">this</span>,<span class="string">&quot;标准条目输入对话框&quot;</span>,<span class="string">&quot;请选择性别&quot;</span>,sexList,<span class="number">0</span>,<span class="literal">false</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok &amp;&amp; !sex.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        m_sexLabel-&gt;setText(sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;<span class="comment">//保存函数调用是否成功</span></span><br><span class="line">    <span class="keyword">double</span> score = QInputDialog::getDouble(<span class="keyword">this</span>,<span class="string">&quot;标准double类型输入对话框&quot;</span>,<span class="string">&quot;请打分&quot;</span>,m_scoreLabel-&gt;text().toDouble(),<span class="number">0</span>,<span class="number">100</span>,<span class="number">1</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok)</span><br><span class="line">    &#123;</span><br><span class="line">        m_scoreLabel-&gt;setText(QString::number(score));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件对话框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243631.png" alt="image-20220123224016456"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialog::ShowFileDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString sPath = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">&quot;标准文件对话框&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;C++ files(*.cpp);;C files(*.c);;Header files(*.h)&quot;</span> );</span><br><span class="line">    m_fileLineBtn-&gt;setText(sPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT标准对话框&quot;&gt;&lt;a href=&quot;#QT标准对话框&quot; class=&quot;headerlink&quot; title=&quot;QT标准对话框&quot;&gt;&lt;/a&gt;QT标准对话框&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/blogimg/raw/ma</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【计算机网络】计算机网络基础知识笔记</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/22/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/22/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-22T14:10:09.000Z</published>
    <updated>2022-01-22T14:29:19.988Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>相关视频</strong>——<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=1">计算机网络微课堂（有字幕无背景音乐版）</a></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络、互联-连-网和因特网"><a href="#网络、互联-连-网和因特网" class="headerlink" title="网络、互联(连)网和因特网"></a>网络、互联(连)网和因特网</h3><ol><li>网络是由若干结点和连接这些结点的链路组成的。</li><li>多个网络还可以通过路由器互联起来，这样就构成了一个范围更大的网络，即互联网。因此，<strong>互联网是网络的网络</strong>。</li><li>因特网是世界上最大的互连网络。</li></ol><hr><p><strong>internet与Internet</strong></p><ul><li>interne互联网是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。</li><li>Internet因特网则是一个专用名词，它指当前全球最大的、开放的、由众多网咯相互连接而成的特定计算机网络，它采用TCP/IP协议族作为通信的规则，前身是美国的ARPANET。</li></ul><hr><h3 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211067.png" alt="image-20211128174107045"></p><p><strong>因特网服务提供者ISP</strong></p><p>Internet Service Provider</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211065.png" alt="image-20211128174159750"></p><p><strong>基于ISP的三层结构的因特网</strong></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216043.png" alt="image-20211128174315792"></p><h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3><p><strong>面向公众。</strong></p><p><strong>因特网协会ISOC。</strong></p><h3 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h3><ul><li> 边缘部分</li></ul><p>由所有连接在因特网上的主机组成，这部分是用户直接使用的，用来通信(传送数据、音频或视频)和资源共享。</p><ul><li>核心部分</li></ul><p>由大量网络和连接这些网络的路由器组成。这部分是边缘部分提供服务的(提供连通性和交换性)。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211069.png" alt="image-20211128174803586"></p><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><h4 id="电路交换Circuit-Switching"><a href="#电路交换Circuit-Switching" class="headerlink" title="电路交换Circuit Switching"></a>电路交换Circuit Switching</h4><ul><li>电话交换机接通电话线的方式称为电路交换。</li><li>从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211082.png" alt="image-20211128174950373"></p><ul><li>电路交换的三个步骤:<ol><li>建立连接(分配通信资源)</li><li>通话(一直占用通信资源)</li><li>释放连接(归还通信资源)</li></ol></li></ul><p><strong>电路交换示意图</strong>：</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222221607.png" alt="image-20211128175216746"></p><p><strong>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</strong></p><h4 id="分组交换Pactet-Switching"><a href="#分组交换Pactet-Switching" class="headerlink" title="分组交换Pactet Switching"></a>分组交换Pactet Switching</h4><p> <strong>表示一整块的数据称为报文。</strong></p><ul><li>发送方-构造分组-发送分组</li><li>路由器-缓存分组-转发分组(查表转发)</li><li>接收方-接收分组-还原报文</li></ul><hr><p>报文交换过时，不做讲解。</p><hr><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222221525.png" alt="image-20211128181240979"></p><h2 id="计算机网络的定义和分类"><a href="#计算机网络的定义和分类" class="headerlink" title="计算机网络的定义和分类"></a>计算机网络的定义和分类</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3><p>没有公认的唯一定义。</p><p><strong>计算机网路最简单的定义是:一些相互连接的、自治的计算机的集合。</strong></p><p><strong>互连</strong>：是指计算机之间可以通过有线或无线的方式进行数据通信。</p><p>**自治:**是指独立的计算机，它有自己的硬件和软件，可以单独运行使用。</p><p><strong>集合</strong>：是指至少需要两台计算机。</p><p><strong>计算机网络较好的定义是:<strong>计算机网络主要是由一些，</strong>通用的、可编程的硬件互连而成的</strong>，而这些硬件并非专门用来实现某一特定目的(例如传送数据或视频信号)。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类:</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类:</strong></p><ul><li>有线网络</li><li>无限网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个域网PAN</li></ul><p><strong>按拓扑结构分类:</strong></p><ul><li>总线型网络</li><li>星型网络</li><li>环型网络</li><li>网状型网络</li></ul><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><ul><li>速率</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211755.png" alt="image-20211129112054273"></p><ul><li>带宽</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211765.png" alt="image-20211129112214632"></p><ul><li>吞吐量<ul><li>吞吐量表示在单位时间内容通过某个网络(或信道、接口)的数据量。</li><li>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或额定速率的限制。</li></ul></li><li>时延</li></ul><p><strong>完成一次通信在路上各个环节所花费的时间。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211798.png" alt="image-20211129113000756"></p><ul><li>时延带宽积</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211997.png" alt="image-20211129113356747"></p><ul><li>往返时间</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211687.png" alt="image-20211129115456122"></p><ul><li><p>利用率</p><ul><li>信道利用率:用来表示某信道有百分之几的时间是被利用的(有数据通过)。</li><li>网络利用率:全网络的信道利用率的加权平均。</li></ul></li><li><p>丢包率</p></li></ul><p>丢包率即分组丢失了率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong>。</p><hr><p>可以分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。</p><hr><p><strong>丢包率反映了网络的拥塞情况。</strong></p><hr><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="常见的计算机网络体系结构"><a href="#常见的计算机网络体系结构" class="headerlink" title="常见的计算机网络体系结构"></a>常见的计算机网络体系结构</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211737.png" alt="image-20211129124036710"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211789.png" alt="image-20211129124212350"></p><h3 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211800.png" alt="image-20211129141336258"></p><h3 id="计算机网络体系结构分层思想举例"><a href="#计算机网络体系结构分层思想举例" class="headerlink" title="计算机网络体系结构分层思想举例"></a>计算机网络体系结构分层思想举例</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211815.png" alt="image-20211129181020328"></p><h3 id="计算机网络体系结构中的准用术语"><a href="#计算机网络体系结构中的准用术语" class="headerlink" title="计算机网络体系结构中的准用术语"></a>计算机网络体系结构中的准用术语</h3><p>来源于OSI七层网络结构，也使用与TCP/IP的四层体系结构和五层原理体系结构。</p><ul><li><p><strong>实体</strong>：任何可发送或接收信息的硬件或软件进程。</p></li><li><p><strong>对等实体</strong>：收发双方相同层次中的实体。</p></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211928.png" alt="image-20211129181319829"></p><hr><ul><li><strong>协议</strong>：控制两个对等实体进行<strong>逻辑通信</strong>规则的集合。  </li></ul><p>之所以称为逻辑通信，是因为真是不存在，提出来是为了方便我们研究其中的某一层而不受其他层干扰。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211611.png" alt="image-20211129182105876"></p><ul><li>协议的三个要素<ul><li>语法:定义所交换信息的格式。(哪些字段，由哪些数据构成)</li><li>语义:定义收发双方所要完成的操作。 </li><li>同步:定义收发双方的时序关系。</li></ul></li></ul><hr><p>  <strong>服务</strong>：</p><ul><li>在协议的控制下，两个对等实体间的逻辑通信使得<strong>本层能够向上一层提供服务</strong>。</li><li>要实现本层协议，还需要使用下面一层所提供的服务。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222222439.png" alt="image-20211129182807008"></p><ul><li>协议是”水平的”，服务是”垂直的”。</li><li>实体看得见相邻下层提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实现是”透明”的。</li></ul><hr><p><strong>服务访问点</strong>：<strong>在同一系统中相邻两层的实体交换信息的逻辑接口，</strong>用于区分不同的服务类型。</p><ul><li>数据链路层的服务区分那个问点为帧的”类型”字段。</li><li>网络层的服务访问点为IP数据报首部中的”协议字段”。</li><li>运输层的服务访问点为”端口号”。</li></ul><hr><p><strong>协议数据单元PDU</strong>:<strong>对等层次之间传送的数据包</strong>称为该层的协议数据单元。(详情如下图所示)</p><p><strong>服务数据单元SDU</strong>:<strong>同一系统内，层与层之间交换的数据包</strong>称为服务数据单元。</p><p><strong>多个SDU可以合成为一个PDU，一个SDU也可以划分为几个PDU。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222220789.png" alt="image-20211129185730334"></p><hr><h1 id="物理层-需要计算"><a href="#物理层-需要计算" class="headerlink" title="物理层(需要计算)"></a>物理层(需要计算)</h1><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><ul><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流。</li><li>物理层为数据链路层屏蔽了各种传输媒体的差异，使<strong>数据链路层只考虑如何完成本层的协议和服务</strong>，而不必考虑网络具体的传输媒体是什么。</li></ul><hr><ul><li>物理层协议的主要任务<ul><li>机械特性:指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置。</li><li>电气特性:指明在接口电缆的各条线上出现的电压的范围。</li><li>功能特性:指明某条线上出现的某一电平的电压表示何种意义。</li><li>过程特性:指明对于不同功能的各种可能事件的出现顺序。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216939.png" alt="image-20211201141002980"></p><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211182.png" alt="image-20211201141357226"></p><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211486.png" alt="image-20211201145814049"></p><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216356.png" alt="image-20211201150107003"></p><ul><li>码元:(就是构成信号的一段波形)在使用时间域的波形表示数字信号时，<strong>代表不同离散数值的基本波形</strong>。</li></ul><h3 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211524.png" alt="image-20211201151001037"></p><h3 id="基本调制方法"><a href="#基本调制方法" class="headerlink" title="基本调制方法"></a>基本调制方法</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211186.png" alt="image-20211201151153964"></p><p><strong>使用基本调制方法，1个码元只能包含有一个比特信息。</strong></p><h3 id="混合调制"><a href="#混合调制" class="headerlink" title="混合调制"></a>混合调制</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222220788.png" alt="image-20211201151447042"></p><h2 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211303.png" alt="image-20211202190829933"></p><p><strong>失真因素</strong></p><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><p><strong>奈氏准则</strong>：在假定的理想条件下，<strong>为了避免码间串扰，码元传输速率是有上限的。</strong></p><p>理想低通道的最高码元传输速率=2W Baud = 2W码元/秒</p><p>理想带通信道的最高码元传输速率= W Baud = W 码元/秒</p><p><strong>W：信道带宽(单位为Hz)</strong></p><p>Baud: 波特,即码元/秒</p><ul><li><p>码元传输速率又称为波特率、调制速率、波形速率或符号速率。它与比特率有一定关系:</p><ul><li>当1个码元只携带1比特的信息时，则波特率(码元/秒)与比特率(比特/秒)在数值上是相等的；</li><li>当1个码元携带n比特的信息量时，则波特率转换成比特率时，数值要乘以n。</li></ul></li><li><p>要提高信息传输速率(比特率)，就必须设法使每个码元能携带更多个比特的信息量。<strong>这需要才用多元制。</strong></p></li><li><p>实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的这个上限数值。</p></li></ul><hr><p><strong>香农公式</strong>:带宽受限且有高斯白噪声干扰的信道的极限信息传输速率。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217065.png" alt="image-20211202204650304"></p><ul><li>在信道带宽一定的情况下，根据奈氏准则和香农同时，先要提高信息的传输速率就必须采用多元制(更好的调制方法)和努力提高信道中的信噪比。</li><li>自从香农公式发表后，各种新的信号处理和调制方法就不断出现，其目的都是为了尽可能地接近香农公式给出的传输速率极限。</li></ul><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="数据链路层概述"><a href="#数据链路层概述" class="headerlink" title="数据链路层概述"></a>数据链路层概述</h2><p><strong>数据链路层在网络体系结构中所处的地位</strong></p><ul><li>链路(Link)就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。</li><li>数据链路(Data Link)是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217749.png" alt="image-20211203112128150"></p><hr><p><strong>数据链路层的三个重要问题</strong></p><ul><li>封装成帧</li><li>差错检测</li><li>可靠传输:尽管误码是不能完全避免的，但若能实现发送方发送什么，接收方就能收到什么，就成为可靠传输。</li></ul><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><ul><li><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。</p><ul><li>帧头和帧尾中包含有重要的控制信息。</li><li>帧头和帧尾的作用之一就是帧定界。</li></ul></li><li><p>透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。</p><ul><li>面向字节的物理链路使用<strong>字节填充</strong>(或称字符填充)的方法实现透明传输。</li><li>面向比特的物理链路层使用<strong>比特填充</strong>的方法实现透明传输。</li></ul></li><li><p>为了提高帧的传输效率，应当使<strong>帧的数据的长度尽可能大些</strong>。</p></li><li><p>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分长度上限，即<strong>最大传送单元MTU</strong>(Maximum Transfer Unit)。</p></li></ul><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><ul><li>​    实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变为0,0可能变为1.这称为<strong>比特差错</strong>。</li><li>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER</strong>(Bit Error Rate)。</li><li>使用<strong>差错检测码</strong>来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。</li></ul><hr><ul><li>奇偶校验<ul><li>在待发送的数据后面添加1位奇偶校验位，使整个数据(包括所添加的校验位在内)中”1”的个数为奇数(奇校验)或偶数(偶校验)。</li><li>如果有奇数个位发生误码，则奇偶性发生变化，可以检查出误码。</li><li>如果有偶数个位发生误码，则奇偶性不会发生变化，不能检查出误码(漏检); </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211858.png" alt="image-20211203123226725"></p><hr><ul><li>循环冗余校验CRC(Cyclic Redundancy Check)<ul><li>收发双方约定好一个生成多项式G(x);</li><li>发送方<strong>基于待发送的数据和生成多项式</strong>计算出差错检测码(冗余码)，将其添加到待传输数据的后面一起传输；</li><li>接口双方通过生成多项式来计算收到的数据是否产生了误码。</li></ul></li><li>示例:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217481.png" alt="image-20211203143234819"></p><ul><li>检测码<strong>只能检测</strong>出帧在传输过程中出现了差错，但并不能定位错误，因此<strong>无法纠正错误</strong>。</li><li>想要纠正传输中的差错，可以使用冗余信息更多的纠错码来进行向前纠错。但纠错码的开销比较大，在计算机网络中较少使用。</li><li>循环冗余校验CRC有很好的检错能力(漏检率非常低)，虽然计算比较复杂，但非常有易于用硬件实现，因此被广泛应用于数据链路层。</li><li>在计算机网络中通常采用我们后续课程中将要讨论的<strong>检测重传方式</strong>来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于 数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</li></ul><hr><h2 id="可靠传输的基本概念"><a href="#可靠传输的基本概念" class="headerlink" title="可靠传输的基本概念"></a>可靠传输的基本概念</h2><ul><li>使用差错检测技术(例如循环冗余校验CRC)，接收方的数据链路层就可检测出帧在传输过程中是否产生了误码(比特错误)。</li><li>数据链路层向上层提供的服务类型<ul><li>不可靠传输服务:仅仅丢弃有误码的帧，其他什么也不做；</li><li>可靠传输服务:想办法实现发送端发送什么，接收端就收到什么。</li></ul></li><li>一般情况下，有线链路的误码率比较低，为了减小开销，并不要求数据链路层向上提供可靠传输服务。其实出现了误码，可靠传输的问题由其上层处理。</li><li>无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。</li></ul><hr><ul><li>比特差错只是传输差错中的一种。</li><li>从整个计算机网络体系结构来看，传输差错还包括分组丢失、分组失序以及分组重复。</li><li>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。</li><li><strong>可靠传输服务并不仅局限于数据链路层</strong>，其它各层均可选择实现可靠传输。</li><li>可靠传输的实现比较复杂，开销也比较大，是否使用取决于应用需求。</li></ul><hr><h2 id="三种可靠的传输机制"><a href="#三种可靠的传输机制" class="headerlink" title="三种可靠的传输机制"></a>三种可靠的传输机制</h2><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><p><strong>这三种可靠传输机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中。</strong></p><hr><h2 id="可靠传输的实现机制——停止-等待协议SW-Stop-and-Wait"><a href="#可靠传输的实现机制——停止-等待协议SW-Stop-and-Wait" class="headerlink" title="可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait)"></a>可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait)</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211189.png" alt="image-20211210102758928"></p><p><strong>注意事项</strong>：</p><ul><li><p>接收端检测到数据分组有误码时，将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发送方尽早重传，也可以给发送方发送NAK分组。</p></li><li><p>为了让接收方能够判断所收到的数据分组是否是重复的，需要给数据分组编号。由于停止-等待协议的停等特性，只需1个比特编号就够了，即编号0和1。</p></li><li><p>为了让发送方能够判断所收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用的比特数量一样，数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路成实现停止-等待协议可以不用给ACK分组编号。</p></li><li><p>超级计时器设置的重传时间应仔细选择。一般可将重传时间选为略大于”从发送方到接收方的平均往返时间”。</p><ul><li>在数据链路层点对点的往返时间比较确定，重传时间比较好设定。</li><li>然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。</li></ul><p><strong>信道利用率</strong></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211702.png" alt="image-20211210104308108"></p></li><li><p><strong>放往返时延RTT远大于数据帧发送时延TD时(例如使用卫星链路)，信道利用率非常低。</strong></p></li><li><p>若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。 </p></li><li><p>为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。</p></li><li><p>像停止等待协议这种通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ，意思是重传的请求时自动进行的。因为不需要接收方显式地请求发送方重传某个出错的分组。</p></li></ul><h2 id="回退N帧协议GBN"><a href="#回退N帧协议GBN" class="headerlink" title="回退N帧协议GBN"></a>回退N帧协议GBN</h2><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211115.png" alt="image-20211210113602913"></p><ul><li><p>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议。</p></li><li><p>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议。</p></li><li><p>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高。</p><h2 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218539.png" alt="image-20211210121720306"></p></li></ul><hr><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li><p>点对点协议PPP(Point-to-Protocol)是目前使用最广泛的点对点数据链路层协议。</p></li><li><p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由一下三部分构成：</p><ul><li>对各种协议数据报的封装方法(封装成帧)</li><li>链路控制协议LCP,用于建立、配置以及测试数据链路的连接</li><li>一套网络控制协议NCPs,其中的每一个协议支持不同的网络协议层</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218070.png" alt="image-20211211103428924"></p><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211200.png" alt="image-20211211103610922"></p><hr><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p><strong>面向字节的异步链路采用插入转义字符的字节填充法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211204.png" alt="image-20211211104001368"></p><ul><li><p><strong>发送方的处理</strong>：        </p><ul><li>出现的每一个7E(PPP帧的定界符)字节转变成2字节序列(7D,5E)。</li><li>出现的每一个7D(转义字符)变成2个字节序列(7D,5D)。</li><li>出现的一个ASCII码控制字符(数值小于0x20的字符)，则在该字符前面插入一个7D字节，同时将该字符的编码加上0x20。</li></ul><p>**接收方的处理:**进行反变换即可恢复出原来的帧的数据部分。</p></li></ul><hr><p><strong>面向比特的同步链路采用插入比特0的比特填充法。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211477.png" alt="image-20211211104627725"></p><p><strong>发送方的处理</strong>:    </p><ul><li>对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1，则立即填充1个比特0。</li></ul><p><strong>接收方的处理</strong>:</p><ul><li>对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1，就把其后的1个比特0删除。</li></ul><hr><h3 id="差错检测-1"><a href="#差错检测-1" class="headerlink" title="差错检测"></a>差错检测</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211771.png" alt="image-20211211104905728"></p><p><strong>接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧;反之，就丢弃这个帧。使用PPP的数据连路程向上不提供可靠传输服务。</strong></p><hr><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218734.png" alt="image-20211211105310989"></p><hr><h2 id="媒体接入控制"><a href="#媒体接入控制" class="headerlink" title="媒体接入控制"></a>媒体接入控制</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>  共享信道要着重考虑的一个问题就是如何协调多个发送和接受站点对 一个共享传输媒体的占用，即 <strong>媒体介入控制MAC</strong>。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211986.png" alt="image-20211218164314679"></p><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的点对点链路和链路层交换机的交换式局域网在有线领域已经完全取代了共享式局域网，但由于无线信道的广播天性，无限局域网仍然使用的是共享媒体技术。</p><hr><h3 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h3><p><strong>信道复用</strong></p><ul><li>复用(Multiplexing)是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。</li><li>当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道充分利用传输媒体的带宽。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218338.png" alt="image-20211218164851100"></p><hr><p><strong>常见的几种信道复用技术</strong></p><ul><li>频分复用FDM</li></ul><p>频分复用的所有用户同时占用不同的频带资源并行通信。</p><ul><li><p>时分复用TDM</p></li><li><p>波分复用WDM</p></li><li><p>码分复用CDM</p></li></ul><hr><p><strong>复用和多址</strong></p><ul><li>复用是将单一媒体的频带资源划分为很多子信道，这些子信道之间相互独立，互不干扰。从媒体的整体频带资源上看，每个子信道只占用该媒体频带资源的一部分。</li><li>多址( 更确切说应该称为多点接入)处理的是动态分配信道给用户。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道用酒地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)。</li><li>某种程度上，FDMA、TDMA、CDMA可以分别看成是FDM、TDM、CDM的应用。</li></ul><hr><h3 id="动态接入控制——随机接入"><a href="#动态接入控制——随机接入" class="headerlink" title="动态接入控制——随机接入"></a>动态接入控制——随机接入</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211324.png" alt="image-20211218171423334"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218915.png" alt="image-20211218171533987"></p><hr><p>CSMA/CD协议——争用期(碰撞窗口)</p><p><strong>CSMA/CD——总线局域网使用的协议</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218400.png" alt="image-20211218171918314"></p><p>CSMA/CD协议——最小帧长</p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211107.png" alt="image-20211218172022123"></p><ul><li>以太网规定最小帧长为64字节，即521比特(512比特时间为争用期)；<ul><li>如果要发送的数据非常少，那么必须加入一些填充字节，使帧长不小于64字节。</li></ul></li><li>以太网的最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞。<ul><li>如果在争用期(共发送64字节)没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞。</li><li>如果在争用期内检测到碰撞，就立即终止发送，这时已经发送出去的数据一定小于64字节，因此凡长度小于64字节的帧都是由于碰撞而异常中止的无效帧。</li></ul></li></ul><hr><p><strong>CSMA/CD协议——最大帧长</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211272.png" alt="image-20211218180530913"></p><hr><p><strong>CSMA/CD协议——截断二进制指数退避算法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211448.png" alt="image-20211218180755083"></p><ul><li>若连续多次发生碰撞，就表明可能有较多的主机参与竞争信道。但使用上述退避算法可使重传需要推迟的平均时间随重传次数而增大(这也称为动态退避)，因而减小发生碰撞的概率，有利于整个系统的稳定。</li><li>当重传达16次仍不能成功时，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则丢弃该帧，并向高层报告。  </li></ul><hr><p><strong>CSMA/CA——信道利用率</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211459.png" alt="image-20211218181731572"></p><hr><p><strong>CSMA/CD协议——帧发送流程</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211507.png" alt="image-20211218181830509"></p><hr><p><strong>CSMA/CD协议——帧接收流程</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219879.png" alt="image-20211218182110407"></p><hr><h3 id="动态接入控制——随机接入-1"><a href="#动态接入控制——随机接入-1" class="headerlink" title="动态接入控制——随机接入"></a>动态接入控制——随机接入</h3><p><strong>无线局域网使用的协议——CSMA/CA</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211008.png" alt="image-20211218182959628"></p><ul><li> 802.11无线局域网使用CSMA/CA协议，在CSMA的基础上增加了一个碰撞避免CA功能。</li><li> 由于不可能避免所有的碰撞，并且无线信道误码率较高，802.11标准还使用了数据链路层确认机制(停止-等待协议)来保证数据被正确接收。</li><li> 802.11的MAC层标准定义了两种不用的媒体接入控制方式:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211268.png" alt="image-20211218183450872"></p><hr><p><strong>帧间间隔IFS</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219989.png" alt="image-20211218185852871"></p><hr><p><strong>CSMA/CA协议的工作原理</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211554.png" alt="image-20211218190810792"></p><ul><li>当站点检测到信道是空闲的，并且所发送的数据帧不是成功发送完上一个数据帧之后立即连续发送的数据帧，则不使用退避算法。</li><li>以下情况必须使用退避算法<ul><li>在发送数据帧之后检测到信道处于忙状态时；</li><li>在每一次重传一个数据帧时；</li><li>在每一次成功发送后要连续发送下一个帧时(这是为了避免一个站点长时间占用信道。)</li></ul></li></ul><hr><p><strong>CSMA/CA协议的退避算法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219762.png" alt="image-20211218191400390"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219897.png" alt="image-20211218191646404"></p><hr><p><strong>CSMA/CA协议的信道预约和虚拟载波监听</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211077.png" alt="image-20211218192525693"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211401.png" alt="image-20211218192810615"></p><hr><h2 id="集线器与交换机的区别"><a href="#集线器与交换机的区别" class="headerlink" title="集线器与交换机的区别"></a>集线器与交换机的区别</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205724.png" alt="image-20211224210321350"></p><ul><li>使用集线器的以太网在逻辑上扔是一个总线网，各站共享总线资源，使用的还是CSMA/CD协议；</li><li>集线器只工作在物理层，它的每个接口仅简单地转发比特，不进行碰撞检测(由各站的网卡进行检测)；</li><li>集线器一般都有少量的容错能力和 网络管理功能。例如:若网络中某个网卡出现了故障， 不停的发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然可以正常工作。</li></ul><hr><p>使用集线器HUB在物理层扩展以太网</p><ul><li>以太网交换机</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211947.png" alt="image-20211224213741211"></p><ul><li>以太网交换机通常都有多个接口。每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都工作在全双工方式。</li><li>以太网交换机具有并行性，能同时连通多对接口，使多对主机能同时通信，无碰撞(不使用CSMA/CD协议)。</li><li>以太网交换机一般都具有多种速率的接口 ，例如:10mb/s、100mb/s、1Gb/s、10Gb/s接口的多种组合。</li><li>以太网交换机工作在数据链路层(也包括物理层)，它收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。</li><li>以太网交换机是一种即插即用设备，其内部的帧交换变是通过自学习算法自动地逐渐建立起来的。、</li><li>帧的两种转发方式:<ol><li>存储转发</li><li>直通交换:采用基于硬件的交叉矩阵(交换时延非常小，但不检查帧是否有差错)。</li></ol></li><li><strong>交换机可以隔离碰撞域</strong></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211344.png" alt="image-20211224214219768"></p><ul><li><strong>对比</strong></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211480.png" alt="image-20211224214323467"></p><hr><h2 id="以太网交换机自学习和转发帧的流程"><a href="#以太网交换机自学习和转发帧的流程" class="headerlink" title="以太网交换机自学习和转发帧的流程"></a>以太网交换机自学习和转发帧的流程</h2><ul><li>交换机工作在数据链路层(也包括物理层)</li><li>以太网交换机收到帧后，在帧交换表中查找帧的目的AMC地址所对应的接口号，然后通过该接口转发帧。</li><li>以太网交换机是一种即插即用的设备，<strong>刚上电启动时其内部的帧交换表是空的</strong>。随着网络中各主机间的通信，<strong>以太网交换机通过自学习算法自动主键建立起帧交换表</strong>。 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211548.png" alt="image-20211225223654672"></p><ul><li>每条记录的都有自己的有效时间，到期自动删除，这是因为MAC地址交换机接口的对应关系不是永久性的。</li></ul><hr><h2 id="以太网交换机的生成树协议STP"><a href="#以太网交换机的生成树协议STP" class="headerlink" title="以太网交换机的生成树协议STP"></a>以太网交换机的生成树协议STP</h2><ul><li><p>如何提高以太网的可靠性？</p><ul><li>添加冗余链路可以提高以太网的可靠性，同时也会带来负面效应——形成网络环路。</li><li>网络环路会带来以下问题<ul><li>广播风暴——会大量消耗网络资源，使得网络无法正常转发其他数据帧；主机收到重复的广播帧，大量消耗主机资源；交换机的帧交换表震荡(漂移)。</li></ul></li><li>以太网交换机使用生成树协议STP可以在增加冗余链路来提高网路可靠性的同时又避免网络环路带来的各种问题。<ul><li>不论交换机之间采用怎样的物理连接，交换机都能自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路)；</li><li>最终生成的树型逻辑拓扑要确保连通整个网络；</li><li>当首次链接交换机或网络物理拓扑发生变化时(有可能是认为改变或故障)，交换机都将进行生成树的重新计算。</li></ul></li></ul><hr><h2 id="虚拟局域网VLAN概述"><a href="#虚拟局域网VLAN概述" class="headerlink" title="虚拟局域网VLAN概述"></a>虚拟局域网VLAN概述</h2><ul><li>以太网交换机工作在数据链路层(也包括物理层)</li><li>使用一个或多个以太网交换机互连起来的交换机以台网，其所有站点都属于同一个广播域。  </li><li>随着交换式以太网规模的扩大，广播域相应扩大。</li><li>巨大的广播域会带来很多弊端<ul><li>广播风暴</li><li>难以管理和维护</li><li>潜在的安全问题</li></ul></li></ul><p><strong>广播风暴会浪费网络资源和各主机的CPU资源。</strong></p><ul><li>网络中会频繁使用广播信息<ul><li>TCP/IP协议栈中的很多协议都会使用广播 </li><li>地址解析协议ARP(已知IP地址，找出其相应的MAC地址)</li><li>路由信息协议RIP(一种小型的内部路由协议)</li><li>动态主机配置协议DHCP( 用于自动配置IP地址)</li></ul></li><li>分割广播域的方法<ul><li>使用路由器可以分割广播域</li><li>因为路由器默认情况下不对广播数据包进行转发，因此路由器很自然的就可以隔绝广播域，但是成本比较高，在这种情况下，虚拟局域网孕育而生。</li></ul></li><li>虚拟局域网VLAN(Virtual Local Area Network)是一种将局域网内的设备划分成与物理层位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205310.png" alt="image-20211225230438665"></p><p>也就是说同一个VLAN中可以广播通信，不用 VLAN之间不能广播通信。</p><hr><h2 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205165.png" alt="image-20211226102813027"></p><ul><li><p>交换机的端口类型有以下三种</p><ul><li><p>Access</p></li><li><p>Trunk</p></li><li><p>Hybrid</p></li></ul></li><li><p>交换机各端口的缺省VLAN ID</p><ul><li>在思科交换机上称为Native VLAN，即本征VLAN。</li><li>在华为交换机上称为Port VLAN ID,即端口VLAN ID，简称PVID。</li></ul></li></ul><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211999.png" alt="image-20211226103845860"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211926.png" alt="image-20211226104126252"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211063.png" alt="image-20211226104534255"></p><hr><h1 id="MAC地址、IP地址以及ARP协议"><a href="#MAC地址、IP地址以及ARP协议" class="headerlink" title="MAC地址、IP地址以及ARP协议"></a>MAC地址、IP地址以及ARP协议</h1><ul><li>MAC地址是以太网的MAC子层所使用的地址；(数据链路层)</li><li>IP地址是TCP/IP体系结构网际层所使用的地址；(网际层)</li><li>ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址所获取到设备的MAC地址；(网际层)</li><li>尽管IP地址和ARP协议属于TCP/IP体系结构的网际层(而不属于数据链路层)，但是它们与MAC地址存在一定的关系，并且我们日常的网络应用都离不开MAC地址 、IP地址以及ARP协议。因此我们将这三者放在一起讨论。</li></ul><hr><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>使用点对点信道的数据链路层不需要使用地址。</p><ul><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识，即一个数据链路层地址；</li><li>在每个主机发送的帧中必须携带标识发送主机和接收主机的地址。由于这类地址是用于媒体接入控制MAC(Media Access Control)，因此这类地址被称为MAC地址。<ul><li>MAC地址一般是被固化在网卡(网络适配器)的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为硬件地址；</li><li>MAC地址有时也被称为物理地址。<strong>请注意:这并不意味着MAC地址属于网络体系结构中的物理层。</strong> (属于数据链路层。)</li></ul></li><li>一般情况下，用户主机会包含两个网络适配器:有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)，每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，<strong>严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各个设备的唯一标识。</strong></li></ul><hr><h3 id="IEEE-802局域网的MAC地址格式"><a href="#IEEE-802局域网的MAC地址格式" class="headerlink" title="IEEE 802局域网的MAC地址格式"></a>IEEE 802局域网的MAC地址格式</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211629.png" alt="image-20211218200923564"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211829.png" alt="image-20211218205055859"></p><hr><h3 id="IEE-802局域网的MAC地址发送顺序"><a href="#IEE-802局域网的MAC地址发送顺序" class="headerlink" title="IEE 802局域网的MAC地址发送顺序"></a>IEE 802局域网的MAC地址发送顺序</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211282.png" alt="image-20211218205624901"></p><p> 字节发送顺序: 第一字节——》第六字节</p><p>字节内的比特发送顺序: b0——》b7</p><hr><h3 id="单播MAC地址举例"><a href="#单播MAC地址举例" class="headerlink" title="单播MAC地址举例"></a>单播MAC地址举例</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211565.png" alt="image-20211218205848042"></p><hr><h3 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h3><p><strong>判断地址是否是多播地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211597.png" alt="image-20211218210629375"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211847.png" alt="image-20211218210751071"></p><h3 id="随机MAC地址"><a href="#随机MAC地址" class="headerlink" title="随机MAC地址"></a>随机MAC地址</h3><p>略……</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>IP地址属于网络层的范畴。</strong></p><ul><li>IP地址是因特网(Internet)上的主机和路由器所使用的地址，用于标识两部分信息:<ul><li>网络编号:标识因特网上数以百万计的网络</li><li>主机编号:标识同一网络上不同主机(或路由器各接口)</li></ul></li></ul><hr><h3 id="从网络体系结构看IP地址与MAC地址"><a href="#从网络体系结构看IP地址与MAC地址" class="headerlink" title="从网络体系结构看IP地址与MAC地址"></a>从网络体系结构看IP地址与MAC地址</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211908.png" alt="image-20211219134730343"></p><p><strong>上层无需看懂上一层的数据结构和内容，只需要添加首部相关信息即可，然后继续交付给下一层。</strong></p><hr><h3 id="数据包转发过程中IP地址与MAC地址的变化情况"><a href="#数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="数据包转发过程中IP地址与MAC地址的变化情况"></a>数据包转发过程中IP地址与MAC地址的变化情况</h3><p>(可以想象成对应层进行水平通信)</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211931.png" alt="image-20211219154029674"></p><ul><li>数据包转发过程中<strong>源IP地址和目的IP地址保持不变</strong>；</li><li>数据包转发过程中<strong>源MAC地址和目的MAC地址逐个链路(或逐个网络)改变</strong>；</li></ul><hr><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><strong>不能跨网路使用</strong>。</p><p>通过ARP协议来通过IP地址找到对应的MAC地址。</p><hr><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><ul><li>网络层的主要任务是实现网络互连，进而实现数据包在各网络之间的传输。</li><li>要实现网络层任务，需要解决以下主要问题:<ul><li>网络层向运输层提供怎样的服务(“可靠传输”还是”不可靠传输”)</li><li>网络层寻址问题</li><li>路由选择问题</li></ul></li><li>因特网(Internet)是目前全世界用户数量最多的互联网，它使用TCP/IP协议栈。</li><li>由于TCP/IP协议栈中的网络层使用网际协议IP，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为网际层。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211550.png" alt="image-20211226105659888"></p><ul><li>综上所述 ，我们通过学习TCP/IP协议栈的网际层来学习网络层的理论知识和实践技术。</li></ul><hr><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><p><strong>面向连接的虚电路服务</strong></p><ul><li>可靠通信由网络来保证</li><li>必须建立网络层的连接——虚电路VC(Virtual Circuit)</li><li>通信双方沿着已建立的虚电路发送分组</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211454.png" alt="image-20211226110019174"></p><ul><li>目的主机的地址仅在连接建立阶段使用,之后每个分组的首部只需要携带一条虚电路的编号(构成虚电路的每一段电路都有一个虚电路编号)。</li><li>这种通信方式如果再使用可靠传输协议的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到到达、不丢失、不重复)。</li><li>通讯结束之后，需要释放之前所建立的虚电路。<ul><li>很多广域分组交换网都使用面向无连接的虚电路服务。例如，曾经的X.25和逐渐过时的帧中继FR，异步传输模式ATM等。</li></ul></li></ul><hr><p><strong>无连接的数据报服务</strong></p><ul><li>可靠通信应由用户主机来保证</li><li>不需要建立网络层链接</li><li>每个分组可走不同的路径</li><li>每个分组的首部必须携带目的主机的完整地址</li><li>这种通信方式所传送的分组可能误码、丢失、重复和失序。</li><li>由于网络本身 不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)。</li><li>因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)，而将相对简单的尽最大努力的分组交换功能置于因特网核心。、</li><li>采用这种设计思想的好处是，网络的造假大大降低，运行方式灵活，能够适应多种应用。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222200077.png" alt="image-20211226110852595"></p><hr><p><strong>由于TCP/IP体系结构的因特网的网际层提供的是简单灵活、无连接的、尽最大努力交付的数据报服务，因此本章主要围绕网际层如何传送IP数据报这个主题进行讨论。</strong></p><hr><h2 id="IPv4地址概述"><a href="#IPv4地址概述" class="headerlink" title="IPv4地址概述"></a>IPv4地址概述</h2><ul><li>IPv4地址就是给因特网上的每一台主机(或路由器)的每一个接口分配一个在全世界范围内是唯一的32比特的标识符。</li><li>IP地址由因特网名字和数字分配机构ICANN进行分配<ul><li>我国用户可向亚太网络信息中西APNIC申请IP地址，需要缴费，且一般不接受个人申请。</li></ul></li><li>IPv4地址的编址方法经历了如下三个历史阶段:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211054.png" alt="image-20211226111701850"></p><ul><li>32比特的IPv4地址采用点分十进制表示方法以方便用户使用。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211646.png" alt="image-20211226111842336"></p><hr><h2 id="分类编址的IPv4地址"><a href="#分类编址的IPv4地址" class="headerlink" title="分类编址的IPv4地址"></a>分类编址的IPv4地址</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211251.png" alt="image-20211226121806223"></p><p><strong>A类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211314.png" alt="image-20211226123045434"></p><p><strong>B类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211753.png" alt="image-20211226123300052"></p><p><strong>C类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211358.png" alt="image-20211226123642556"></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211367.png" alt="image-20211226124115503"></p><hr><h2 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h2><ul><li>为新增网络申请新的网络号会带来以下弊端<ul><li> 等待需要时间和花费更多的费用</li><li> 会浪费其他路由器中路由表记录的数据</li><li> 浪费原有网络中剩余的大量IP地址</li></ul></li></ul><p><strong>解决办法</strong>:</p><ul><li>从主机号部分借用一部分作为子网号</li><li>32 比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号。<ul><li>子网掩码使用连续的比特1来对应网络号和子网号</li><li>子网掩码使用连续的比特0来对应主机号</li><li>将划分子网的IPv4地址与其相应的子网掩码进行逻辑与运算就可以得到IPv4地址所在子网的网络地址</li></ul></li><li>默认的子网掩码是指在未划分子网的情况下使用的子网掩码 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211195.png" alt="image-20211227134330831"></p><hr><h2 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h2><ul><li>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是数量巨大的C类网因为其地址空间太小并没有得到充分使用，而因特网的IP地址仍在加速消耗，整个IPv4地址空间面临全部消耗的威胁。</li><li>为此，引因特网工程任务组IETF又提出了采用无分类编址的方法来解决IP地址紧张的问题，同时还专门成立IPv6工作组负责研究新版本IP工作组负责研究新版本IP以彻底解决IP地址耗尽问题。</li><li>1993年，IETF发布了五分类域间路由器选择CIDR的RFC文档，RFC 1517 ~ 1519和1520。<ul><li>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念</li><li>CIDR可以更加有效的分配IPv4的地址空间，并且可以在新的IPv6使用之前允许因特网的规模继续增长。</li></ul></li><li>CIDR使用“斜线记法”，或称为CIDR记法。 即在IPv4地址后面加上斜线“/”,在斜线后面写上网络前缀所占的比特数量。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211645.png" alt="image-20211227135904225"></p><ul><li>CIDR实际上是将网络前缀都相同的连续IP地址组成一个”CIDR地址块”。</li><li>我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节；<ul><li>地址块的最小地址</li><li>地址块的最大地址</li><li>地址块中的地址数量</li><li>地址块聚合某类网络(A 类、B类或C类)的数量</li><li>地址掩码(也可继续称为子网掩码)</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202112271406851.png" alt="image-20211227140637756"></p><hr><h2 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h2><p> <strong>定长的子网掩码LFSM</strong></p><ul><li>使用同一子网掩码来划分子网</li><li>每个子网所分配的IP地址数量相同，造成IP地址的浪费</li><li>子网划分方式不灵活,只能划分出2的n次方个子网(n是从主机号部分借用的用来作为子网号的比特数量)</li></ul><p><strong>变长的子网掩码VLSM</strong></p><ul><li>使用不同的子网掩码来划分子网</li><li>每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</li><li>子网划分方式灵活，可以按需分配。</li></ul><hr><h2 id="IP数据报的发送和转发过程"><a href="#IP数据报的发送和转发过程" class="headerlink" title="IP数据报的发送和转发过程"></a>IP数据报的发送和转发过程</h2><ul><li>IP数据报的发送和转发过程包含以下两个部分<ul><li>主机发送IP数据报</li><li>路由器转发IP数据报</li></ul></li></ul><p><strong>主机发送IP数据报</strong></p><ul><li>判断目的主机是否与自己在同一网络<ul><li>若在同一个网络，则属于直接交付</li><li>若不在同一个网络，则属于间接交付，传输给主机所在网络的默认网关(路由器)，由默认网关帮忙转发。</li></ul></li></ul><p><strong>路由器转发IP数据报</strong></p><ol><li>检查IP数据报首部是否出错    <ul><li>若出错，则直接丢弃该IP数据报并通报源主机；</li><li>若没有出错，则进行转发。</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目<ul><li>若找到匹配条目，则转发给条目中知识的下一跳；</li><li>若找不到，则丢弃该IP数据报并通告源主机。</li></ul></li></ol><hr><h2 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h2><ul><li>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表。<ul><li>这种人工配置方式简单、开销小。但不能及时适应网络状态(流量、拓扑等)的变化。</li><li>一般只在小规模网络中可采用。</li></ul></li><li>使用静态路由配置可能出现一下情况导致产生路由环路的错误<ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul></li><li>路由条目的类型<ul><li>直连网络</li><li>静态路由(人工配置)</li><li>动态路由(路由选择协议)</li></ul></li><li>特殊的静态路由条目<ul><li>默认路由(目的网络为0,0,0,0,地址掩码为0,0,0,0)</li><li>特定主机路由(目的网络为特定主机的IP地址，地址掩码为255,255,255,255)</li><li>黑洞路由(下一条为null0)</li></ul></li></ul><hr><h2 id="路由选择协议概述"><a href="#路由选择协议概述" class="headerlink" title="路由选择协议概述"></a>路由选择协议概述</h2><ul><li><p>静态路由选择</p><ul><li>由人工配置的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。</li><li>这种人工配置方式简单、开销小。但不能即使适应网络状态(流量、拓扑等)的变化。</li><li>一般只在小规模网络中采用。</li></ul></li><li><p>动态路由选择</p><ul><li>路由器通过选协议自动获取路由信息。</li><li>比较复杂、开销比较大。</li><li>适用于大规模网络。</li></ul></li><li><p>因特网所采用的路由选择协议主要特点</p><ul><li>自适应:动态路由选择，能较好地适应网络状态的变化。</li><li>分布式:路由器之间交换路由信息。</li><li>分层次:将整个因特网划分为许多较小的自治系统AS(Autonomous System)</li></ul></li><li><p>常见的路由选择协议</p></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201192033521.png" alt="image-20220119203357327"></p><ul><li>路由器的基本结构</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211656.png" alt="image-20220119203612087"></p><hr><h2 id="路由信息协议RIP的基本工作原理"><a href="#路由信息协议RIP的基本工作原理" class="headerlink" title="路由信息协议RIP的基本工作原理"></a>路由信息协议RIP的基本工作原理</h2><ul><li> 路由信息协议RIP是内部网关协议IGP中最先得到广泛使用的协议之一，其相关标准文档为RFC 1058。</li><li> RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其它每一个网络的距离记录。这是一组距离，称为”距离向量D-V”。</li><li>RIP使用跳数(Hop Count)作为度量(Metric)来衡量到达目的网络的距离。<ul><li>路由器到直连网络的距离定义为1。</li><li>路由器到非直连网络的距离定义为所经过的路由器数加1。</li><li>允许一条路径最多只能包含15个路由器。”距离”等于16时相当于不可达。因此，RIP只适用于小型互联网。</li></ul></li><li> RIP认为好的路由就是”距离短”的路由，也就是所通过路由器数量最少的路由。</li><li> 当到达同一目的网络有多条”距离相等”的路由时，可以进行等价负载均衡。</li><li>RIP包含以下三个要点：<ul><li>和谁交换信息，仅和相邻路由器交换信息</li><li>交换什么信息，自己的路由表</li><li>何时交换信息，周期性交换(例如每30秒)</li></ul></li><li> RIP存在”坏消息传播 “的问题。</li><li>“坏消息传播得慢”又称为路由环路或距离无穷计数问题，这是距离向量算法的一个固有问题。可以采取多种措施减少出现该问题的概率或减小该问题带来的危害。<ul><li>限制最大路径距离为15(16表示不可达)</li><li>当路由表发生变化时就立即发送更新报文(即”触发更新”)，而不仅是周期性发送。</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送(即”水平分割”)</li></ul></li></ul><hr><h2 id="开放最短路径优先OSPF的基本工作原理"><a href="#开放最短路径优先OSPF的基本工作原理" class="headerlink" title="开放最短路径优先OSPF的基本工作原理"></a>开放最短路径优先OSPF的基本工作原理</h2><ul><li>开放最短路径优先OSPF，是为了客服RIP的缺点在1989年开发出来的。<ul><li>“开放”表明OSPF协议不是受某一家厂商控制，而是公开发表的。</li><li>“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF。</li></ul></li><li>OSPF是基于链路状态的，而不像RIP那样是基于距离向量的。</li><li>OSPF采用SPF算法计算路由，从算法上保证了不会产生路由环路。</li><li>OSPF不限制网络规模，更新效率高，收敛速度快。</li><li>链路状态是指本路由器都和哪些路由器相邻，以及相应链路的”代价”(cost)。<ul><li>“代价”用来表示费用、距离、时延、带宽、等等。这些都由网络管理人员来决定。</li></ul></li><li>OSPF相邻路由器之间通过交互问候(Hello)分组，建立和维护邻居关系。<ul><li>Hello分组封装在IP数据报中，发往组广播地址224.0.0.5。</li><li>发送周期为10秒。</li><li>40秒未收到来自邻居路由器的Hello分组，则认为该邻居路由器不可达。</li></ul></li><li>使用OFS的每个路由器都会产生链路状态通告LSA，LAS中包含了以下内容:<ul><li>直连网络的链路状态信息</li><li>邻居路由器的链路状态信息</li></ul></li><li>LSA被封装在链路状态更新分组LSU中，采用洪泛法发送。</li><li>使用OSPF的每个路由器都有一个链路状态数据路LSDB，用于从存储LSA。</li><li>通过各路由器洪泛法送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致。</li><li>使用OSPF的各路由器基于LSDB进行最短路径优先SPF计算，构建出各自到达其他各路由器的最短路径，即构建各自的路由表。</li><li>OSPF有以下五种分组类型。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201200953862.png" alt="image-20220120095314602"></p><ul><li>OSPF的基本工作过程</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211355.png" alt="image-20220120095744314"></p><ul><li>OSPF在多点接入网络中路由器邻居关系的建立<ul><li>选举指定路由器DR和备用的指定路由器BDR</li><li>所有的非DR/BDR只与DR/BDR建立邻居关系表</li><li>非DR/BDR之间通过DR/BDR交换信息</li></ul></li><li>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211410.png" alt="image-20220120100419880"></p><hr><h2 id="边际网关协议BGP的基本工作-原理"><a href="#边际网关协议BGP的基本工作-原理" class="headerlink" title="边际网关协议BGP的基本工作 原理"></a>边际网关协议BGP的基本工作 原理</h2><ul><li>因特网采用分层次的路由选择协议</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211279.png" alt="image-20220120101016898"></p><ul><li>内部网关协议IGP(例如路由信息协议RIP或开放最短路径优先OSPF)<ul><li>设法使分组在一个自治系统内尽可能有效地从开源网络传输到目的网络</li><li>无需考虑自治系统外部其他方面的策略</li></ul></li><li>外部网关协议EGP(例如边界网关协议BGP)<ul><li>在不同的自治系统内，度量路由的”代价”(距离，带宽，费用等)可能不同。因此，对于自治系统之间的路由选择，使用”代价”作为度量来寻找最佳路由是不行的。</li><li>自治系统之间的路由选择必须考虑相关策略(政治，经济，安全等)</li></ul></li><li>在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的”BGP发言人”。<ul><li>在此TCP连接上交换BGP报文以建立BGP会话。</li><li>利用BGP会话交换路由信息(例如，增加新的路由，或撤销过时的路由，以及报告出错的情况。)</li><li>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的邻站或对等站。</li></ul></li><li>BGP发言人除了运行BGP之外，还必须运行自己所在自治系统所使用的内部网关协议IGP，例如OSPF或RIP。</li><li>BGP发言人交换网络可达性的信息(要到达某个网络所要经过的一些系列自治系统)</li><li>当BGP发言人互相交换了网络可达的信息后，各BGP发言人就根据所采用的策略从收到的路由器信息中找出到达各自自治系统的较好的路由。也就是构造出树型结构、不存在回路的自治系统连通图。</li><li>BGP适用于多级结构的因特网</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211666.png" alt="image-20220120110012111"></p><ul><li>BGP-4有以下四种报文<ul><li>OPEN(打开)报文:用来与相邻的另一个BGP发言人建立关系，使通信初始化。</li><li>UPDATE(更新报文):用来通告某一路由的信息，以列出要撤出的多条路由。</li><li>KEEPALIVE(保活)报文:用来周期性地证实邻站的连通性。</li><li>NOTIFICATION(通知)报文:用来发送检测到的差错。</li></ul></li></ul><hr><h2 id="IPv4数据报的首部格式"><a href="#IPv4数据报的首部格式" class="headerlink" title="IPv4数据报的首部格式"></a>IPv4数据报的首部格式</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201256737.png" alt="image-20220120125600629"></p><ul><li>版本</li></ul><p>占4比特，表示IP协议的版本。</p><p>通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4(即IPv4)。</p><ul><li>首部长度</li></ul><p>占4个比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。</p><p>最小十进制取值为5，表示IP数据报首部只有20字节固定部分。</p><p>最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分。</p><ul><li>可选字段</li></ul><p>长度从1字节到40个字节不等。用来支持排错、测量及安全等措施。</p><p>可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。</p><ul><li>填充字段</li></ul><p>确保首部长度为4字节的整数倍。使用全0填充。</p><ul><li>区分服务</li></ul><p>占8比特，用来获得更好的服务。</p><p>该字段在旧标准中叫作服务类型，但实际上一直没有被使用过。</p><p>1998年，因特网工程任务组IETF把这个字段改名为区分服务。</p><p>利用该字段的不同数值可提供不同等级的服务质量。</p><p>只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。</p><ul><li>总长度</li></ul><p>占16比特，表示IP数据报的总长度(首部+数据载荷)。</p><p>最大取值为十进制的65535，以字节为单位。</p><ul><li> 标识</li></ul><p>占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。</p><p>IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。</p><p>与下面两个字段共同用于IP数据报分片。</p><ul><li>标志</li></ul><p>占3个比特， 各比特含义如下:</p><p>DF位:1表示不允许分片，0表示允许分片</p><p>MF位:1表示”后面还有分片”，0表示”这是最后一个分片”</p><ul><li>片偏移</li></ul><p>占13个比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。</p><p>片偏移以8个字节为单位。</p><ul><li>生存周期TT</li></ul><p>占8比特，最初以秒为单位，最大生存周期为255秒；路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。 </p><p>现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。</p><ul><li> 协议</li></ul><p>占8比特，指明IPv4数据报的数据部分是何种协议数据单元。</p><p>常用的一些协议和相应协议字段值如下。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211532.png" alt="image-20220120133158792"></p><p>例如:</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201332349.png" alt="image-20220120133245278"></p><ul><li>首部检验和</li></ul><p>占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和。</p><p>IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段(生存时间、标志、片偏移等)的取值可能发生变化。</p><p>由于IP层本身并不提供可靠传输的服务，并且计算首部校验和是一项耗时的操作，因此在IPv6中，路由器不再计算首部校验和，从而更快转发IP数据报。</p><ul><li> 源IP地址和目的IP地址</li></ul><p>各占32比特，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址。</p><hr><h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><ul><li>为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)。</li><li>主机或路由器使用ICMP来发送差错报告报文和询问的报文。</li><li>ICMP报文被封装在IP数据报中发送。</li><li>ICMP差错报告报文共有以下5种:<ul><li>终点不可达<ul><li>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。具体可再根据ICMP的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。</li></ul></li><li>源点抑制<ul><li>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。</li></ul></li><li>时间超过<ul><li>当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。若结构不为0，则将该IP数据报转发出去；若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文。</li><li>另外，当终点在预先规定的时间内不能收到一个数据报的全部报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。</li></ul></li><li>参数问题<ul><li>当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码，就丢弃该数据报，并向源点发送参数问题报文。</li></ul></li><li>改变路由(重定向)<ul><li>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更改好的路由)。</li></ul></li></ul></li><li>以下情况不应发送ICMP差错报告报文:<ul><li>对ICMP差错报告不再发送ICMP差错报告报文</li><li>对第一个分片的数据数据报片的所有后序数据报片都不发送ICMP差错报告报文</li><li>对具有多播地址的数据报都不发送ICMP差错报告报文</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告</li></ul></li><li>常见的ICMP询问报文有以下两种:<ul><li>回送请求和回答:ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达及了解其有关状态。</li><li>时间戳请求和回答:ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时刻一共有多少秒。这种询问报文用来进行时钟同步和测量时间。</li></ul></li><li>ICMP应用举例<ul><li>分组网间探测PING(Packet InterNet Groper)<ul><li>用来测试主机或路由器间的连通性</li><li>应用层直接使用网际层的ICMP(没有通过运输层的TCP或UDP)</li><li>使用ICMP回送请求和报文回答</li></ul></li><li>跟踪路由(traceroute)<ul><li>用来测试IP数据报从源主机到达目的主机要经过哪些路由器</li><li>Windows版本<ul><li>tracert命令</li><li>应用层直接使用网际层ICMP</li><li>使用了ICMP回送请求和回答报文以及差错报告报文。</li></ul></li><li>Unix版本<ul><li>traceroute命令</li><li>在运输层使用UDP协议</li><li>仅使用ICMP差错报告报文</li></ul></li></ul></li></ul></li></ul><hr><h2 id="虚拟专用网VPN与网络地址转换NAT"><a href="#虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="虚拟专用网VPN与网络地址转换NAT"></a>虚拟专用网VPN与网络地址转换NAT</h2><ul><li>虚拟专用网VPN(Virtual Private Network)</li></ul><p>利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称虚拟专用网。由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往小于本机构所拥有的主机数量。因此，虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址，而不是需要申请的、在因特网上使用的公有地址。</p><p>如下图所示，同一个机构内不同部门的内部网络所构成的虚拟专用网VPN又称为内联网VPN。</p><p>有时一个机构的VPN需要有某些外部机构(通常就是合作伙伴)参加进来。这样的VPN就称为外联网VPN。</p><p>在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。这种VPN称为远程接入VPN。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201702232.png" alt="image-20220120170254113"></p><ul><li>网络地址转换NAT(Network Address Translation)</li></ul><p>虽然因特网采用了无分类编制方式来减缓IPv4地址空间耗尽的速度，但由于因特网用户数目的激增，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，IPv4地址空间即将面临耗尽的危险仍然没有被解除。</p><p>1994年提出了一种网络地址转换NAT的方法再次缓解了IPv4地址空间即将耗尽的问题。</p><p>NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。</p><p>由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。</p><p>这样，用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。这种将端口和IP地址一起进行转换的技术叫做NAPT(Network Address and Port Translation)。</p><p> 对于一些P2P网络应用，需要外网主机主动与内网主机进行通信，在通过NAT时会遇到问题，需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。</p><p>另外，由于NAT对外网屏蔽了内网主机的网络地址，能为内网主机提供一定的安全保护。</p><hr><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><ul><li>计算机网络体系中的物理层、数据链路层以及网络层它们共同解决了将主机通过异构网络互联起来所面临的问题，<strong>实现了主机到主机的通信</strong>。</li><li>但实际上在计算机网络中进行通信的真正实体是位于通信两端主机中的进程。</li><li><strong>如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务，运输层协议又称为端到端协议。</strong> </li></ul><p><strong>运输层直接为应用进程间的逻辑通信提供服务。</strong></p><p>运输层向高层用户屏蔽了下面网络核心的细节(如网络拓扑、所采用的路由选择协议等)，它使应用进程看见的就好像在两个运输层实体之间有一条端到端的逻辑通信信道。</p><p>根据应用需求的不同，因特网的运输层为应用层提供了两种不同的运输协议，即面向连接的TCP和面向无连接的UDP。  </p><hr><h2 id="运输层端口号、复用与分用的概念"><a href="#运输层端口号、复用与分用的概念" class="headerlink" title="运输层端口号、复用与分用的概念"></a>运输层端口号、复用与分用的概念</h2><ul><li>运行在计算机上的进程使用进程标识符PID来标志。</li><li>因特网上的计算机并不是统一的操作系统，不同的操作系统又使用不同格式的进程标识符。</li><li>为了使运行不同操作系统的计算机的应用进程之间能够进行网络通信，就必须使用统一的方法对TCP/IP体系的应用进程之间进行标识。</li><li>TCP/IP体系的运输层使用端口号来区分应用层的不同应用进程。<ul><li>端口号使用16比特来表示，取值范围0~65535<ul><li>熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如：FTP使用21/20，HTTP使用80，DNS使用53。</li><li>登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如：Microsoft RDP微软远程桌面使用端口3389。</li><li>短暂端口号:49152~65535,留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li></ul></li><li>端口号只具有本地意义，即端口号知识为了标识本计算机的应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。</li></ul></li><li>发送方的复用和接收方的分用</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211744.png" alt="image-20220121105513721"></p><ul><li>TCP/IP体现的应用层常用协议所使用的运输层熟知端口号。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211662.png" alt="image-20220121105632816"></p><hr><h2 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h2><ul><li>UDP和TCP是TCP/IP体系结构运输层中的两个重要协议。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211887.png" alt="image-20220121110338706"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211085.png" alt="image-20220121120948641"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211207.png" alt="image-20220121121305265"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211004.png"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121121824930.png" alt="image-20220121121824930"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211294.png" alt="image-20220121143745015"></p><p><strong>总结：</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121143837490.png"></p><hr><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><ul><li>一般来说，我们总是希望数据传输的快一点。<ul><li>但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</li></ul></li><li>所谓流量控制(flow control)就是让发送方的发送速率不要太快，要让接收方来得及接收。</li><li>利用<strong>滑动窗口机制</strong>可以很方便地在TCP连接上实现对发送方的流量控制。<ul><li>TCP接收方利用自己的接收窗口的大小来限制发送方发送窗口的大小。</li><li>TCP发送方收到接收方的零窗口通知后，应启动持续计时器。持续计时器超时后，向接收方发送零窗口探测报文。</li></ul></li></ul><hr><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><ul><li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。这种情况就叫做拥塞。<ul><li>在计算机网络中的链路容量(即带宽)、交换结点中的缓存和处理机等，都是网络的资源。</li></ul></li><li>若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降。</li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211875.png" alt="image-20220121154141570"></p><p><strong>TCP四种拥塞控制算法</strong></p><p>假定如下条件:</p><ol><li>数据是单方向传送，而另一个方向只传送确认。</li><li>接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。</li><li>以最大报文段MSS的个数为讨论问题的单位，而不是以字节为单位。</li></ol><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211310.png" alt="image-20220121154528835"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211868.png" alt="image-20220121155107915"></p><ul><li>慢开始和拥塞避免算法是1988天提出的TCP拥塞控制算法(TCP Tahoe版本)。</li><li>1990年又增加了两个新的拥塞控制算法(改进TCP的性能)，这就是快重传和快恢复(TCP Reno版本)<ul><li>有时个别报文段会在网络中丢失，但实际上网络并未发生拥塞。<ul><li>这将导致发送方超时重传，并误认为网络发生了拥塞；</li><li>发送方把拥塞窗口cwnd又设置为最小值1，并错误地启动慢开始算法，因而降低了传输效率。</li></ul></li></ul></li><li>采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。</li><li>所谓快重传，就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传。<ul><li>要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认。</li><li>即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。</li><li>发送方一旦收到了3个连续的重复确认，就将相应的报文段立即重传，而不是等待该报文段的超时重传计时器超时再重传。</li><li>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞(进而降低拥塞窗口cwnd为11)。使用快重传可以使整个网络的吞吐量提高约20%。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211987.png" alt="image-20220121161125618"></p><ul><li>发送方一旦接收3个重复确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法。<ul><li>发送方将慢开始门限ssthresh值和拥塞窗口值调整为当前窗口的一半；开始执行拥塞避免算法。</li><li>也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些，即等于新的ssthresh+3。<ul><li>既然发送方收到3个重复的确认，就表明有3个数据报文已经离开了网络；</li><li>这3个报文段不再小号网络资源而是停留在接收方的接受缓存中；</li><li>可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些。</li></ul></li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211405.png" alt="image-20220121161846216"></p><hr><h2 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h2><ul><li>超时重传时间的选择是TCP最复杂的问题之一</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211706.png" alt="image-20220121173233822"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211160.png" alt="image-20220121173348663"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121173551734.png" alt="image-20220121173551734"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121173707202.png" alt="image-20220121173707202"></p><hr><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ul><li>TCP基于以字节为单位的滑动窗口来实现</li></ul><p><strong>发送方个各部分解释</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121174734786.png" alt="image-20220121174734786"></p><p><strong>如何描述发送窗口的状态?</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211148.png" alt="image-20220121174906895"></p><p><strong>接收方各部分解释</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211531.png" alt="image-20220121175530759"></p><hr><ul><li>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接受窗口一样大。 <ul><li>网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的。</li><li>发送方还可能根据网路当时的拥塞情况适当减小自己的发送窗口尺寸。</li></ul></li><li>对于不按序到达的数据应如何处理，TCP并无明确规定。  <ul><li>如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样对网络资源的利用不利，因为发送方会重复传送较多的数据。</li><li>TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li></ul></li><li>TCP要求接收方必须有积累确认和捎带确认机制，这样可以减小传出开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送的时候把确认信息顺便捎带上。<ul><li>接收方不应过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。<ul><li>TCP标准规定，确认推迟的时间不应超过0.5秒。若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认[RFC 1122]</li><li>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</li></ul></li></ul></li><li><strong>TCP的通信是全双工通信</strong>。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清是哪一方的窗口。</li></ul><hr><h2 id="TCP的运输连接管理——TCP的连接建立"><a href="#TCP的运输连接管理——TCP的连接建立" class="headerlink" title="TCP的运输连接管理——TCP的连接建立"></a>TCP的运输连接管理——TCP的连接建立</h2><ul><li>TCP是面向连接的协议，它基于运输连接来传送TCP报文段。</li><li>TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。</li><li>TCP运输连接有以下三个阶段:<ol><li>建立TCP连接</li><li>数据传送</li><li>释放TCP连接</li></ol></li><li>TCP的运输连接管理就是使运输连接的建立和释放都能正常地进行。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211495.png" alt="image-20220121195406514"></p><ul><li>TCP的连接过程建立要解决以下三个问题:<ul><li>使TCP双方能够确知对方的存在；</li><li>使TCP双方能够协商一些参数(如:最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等)；</li><li>使TCP双方能够对运输实体资源(如:缓存大小、连接表中的项目等)进行分配。</li></ul></li><li>TCP使用”三报文握手”建立连接</li></ul><p><strong>将TCP建立连接的过程比喻为”握手”。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121225849023.png" alt="image-20220121225849023"></p><p><strong>注意:</strong></p><ol><li>TCP的标准规定，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</li><li>TCP的标准规定，普通的确认报文段如果不携带数据，则 不消耗序号。</li></ol><hr><h2 id="TCP的运输连接管理——TCP的连接释放"><a href="#TCP的运输连接管理——TCP的连接释放" class="headerlink" title="TCP的运输连接管理——TCP的连接释放"></a>TCP的运输连接管理——TCP的连接释放</h2><ul><li>TCP通过”四报文挥手”来释放连接</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211307.png" alt="image-20220122110727990"></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211240.png" alt="image-20220122110816636"></p><ul><li>TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动保活计时器(2小时定时)。</li><li>若保活计时器定时周期未收到TCP客户进程发来的数据，则当保活计时器到时后，TCP服务器进程就向TCP客户进程发送一个探测报文段，以后则每个75秒发送一次。若发送10个探测报文段后仍无TCP客户进程的响应，TCP服务器进程就认为TCP客户进程所在主机出了故障，接着就关闭这个连接。</li></ul><hr><h2 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h2><ul><li>为了实现可靠传输，TCP采用了面向字节流的方式。</li><li>但TCP在发送数据时，是从发送缓存中去除一部分或全部自己并给其添加一个首部使之成为TCP报文段后进行发送。<ul><li>一个TCP报文段由首部和数据载荷两部分构成。</li><li>TCP的全部功能都体现在它首部中各字段的作用。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211719.png" alt="image-20220122111430437"></p><p><strong>TCP报文段的首部格式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211728.png" alt="image-20220122111459273"></p><ul><li><p>源端口:占16比特，写入源端口号，用来标识发送该TCP报文段的应用进程。</p></li><li><p>目的端口号:占16比特，写入目的端口号，用来标识接收该TCP报文段的应用进程。</p></li><li><p>序号:占32比特，取值范围[0,2的32次方-1]，序号增加到最后一个后，下一个序号就又回到0。</p><ul><li>指出本TCP报文段数据载荷的第一个字节的序号。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221119697.png" alt="image-20220122111941601"></p></li><li><p>确认号:占32比特，取值范围[0,2的32次方-1]，确认号增加到最后一个后，下一个确认号就又回到0。</p><ul><li>指出期望收到对方下一个TCP报文段的数据的第一个字节的序号，同时也是对之前收到的所有数据的确认。</li><li>若确认好为n,则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据。</li></ul></li><li><p>确认标志位ACK:取值为1时确认号字段才有效；取值为0时确认号字段无效。</p></li><li><p>数据偏移:占4比特，并以4字节为单位。</p><ul><li>用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远。</li><li>这个字段实际上是指出了TCP报文段的首部长度。<ul><li>首部固定长度为20字节，因此数据偏移字段的最小值为0101(2进制)。</li><li>首部最大长度为60字节，因此数据偏移字段的最大值为1111(2进制)。</li></ul></li></ul></li><li><p>保留字段:占6比特，保留为今后使用，但目前应置为0。</p></li><li><p>窗口:占16比特，以字节为单位。指出发送本报文段的一方的接受窗口。</p><ul><li>窗口值作为接收方让发送方设置其发送窗口的依据。 </li><li>这是以接受方的接收能力来控制发送方的发送能力，称为流量控制。</li></ul></li><li><p>校验和:占16比特，检查范围包括TCP报文段的首部和数据载荷两部分。</p><ul><li>在计算校验和时，要在TCP报文段的前面加上12字节的伪首部。</li></ul></li><li><p>同步标志位SYN：在TCP连接建立时用来同步序号。</p></li><li><p>终止标志位FIN:用来释放TCP连接。</p></li><li><p>复位标志位RST:用来复位TCP连接。</p><ul><li>当RST=1时，表明TCP连接出现了异常，必须释放连接，然后再重新建立连接。</li><li>RST置1还用来拒绝一个非法的报文段或拒绝打开一个TCP连接。</li></ul></li><li><p>推送标志位PSH:接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p></li><li><p>紧急标志位URG:取值为1时紧急指针字段有效；取值为0时紧急指针字段无效。</p></li><li><p>紧急指针:占16比特，以字节为单位，用来指明紧急数据的长度。</p><ul><li>当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立刻封装到一个TCP报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据。</li></ul></li><li><p>选项(长度可变)字段</p><ul><li>最大报文段长度MSS选项:TCP报文段数据载荷部分的最大长度。</li><li>窗口扩大选项:为了扩大窗口(提高吞吐率)。</li><li>时间戳选项：<ul><li>用来计算往返时间RTT</li><li>用于处理序号超范围的情况，又称为防止序号绕回PAWS。</li></ul></li></ul></li><li><p>填充字段:</p><ul><li>由于选项的长度可变，因此使用填充来确保报文段首部能被4整除(因为数据偏移字段，也就是首部长度字段，是以4字节为单位的)。</li></ul></li></ul><hr><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211179.png" alt="image-20220122132028215"></p><ul><li>应用层是计算机网路体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分。<ul><li>早起基于文本的应用(电子邮件、远程登录、文件传输、新闻组)</li><li>20世纪90年代将因特网带入千家万户的万维网WWW</li><li>当今流行的即时通信、P2P文件共享及各种音视频应用</li><li>计算设备的小型化和”无处不在”，宽带住宅接入和无线接入的日益普及和迅速发展，为未来更多的新型应用提供了广阔的舞台。</li></ul></li></ul><hr><h2 id="客户-服务器方式-C-S方式-和对等方式-P2P方式"><a href="#客户-服务器方式-C-S方式-和对等方式-P2P方式" class="headerlink" title="客户/服务器方式(C/S方式)和对等方式(P2P方式)"></a>客户/服务器方式(C/S方式)和对等方式(P2P方式)</h2><ul><li>网络应用程序运行在处于网络边缘的不同的端系统上，通过彼此间的通信来共同完成某项任务。</li><li>开发一种新的网络应用首先要考虑的问题就是网络应用程序在各种端系统上的组织方式和它们之间的关系。目前流行的主要有一下两种:<ul><li>客户/服务器(Client/Server,C/S)方式</li><li>对等(Peer-to-Peer，P2P)方式</li></ul></li><li>客户/服务器方式<ul><li>客户和服务器是指通信中所涉及的两个应用进程。</li><li>客户/服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务请求方，服务器是服务提供方。</li><li>服务器总是处于运行状态，并等待客户的服务请求。服务器具有固定端口号(例如HTTP服务器的默认端口号为80)，而运行服务器的主机也具有固定的IP地址。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221554415.png" alt="image-20220122155410294"></p><ul><li>C/S方式是因特网上传统的、同时也是最成熟的方式，很多我们熟悉的网络应用采用的都是C/S方式。包括万维网WWW、电子邮件、文件传输FTP等。</li><li>基于C/S方式的应用服务通常是服务集中型的，即应用服务集中在网络中比客户计算机少得多的服务器计算机上。<ul><li>由于一台服务器计算机要为多个客户机提供服务，在C/S应用中，常会出现服务器计算机跟不上众多客户机请求的情况。</li><li>为此，在C/S应用中，常用计算机集群(或服务器场)构建一个强大的虚拟服务器。</li></ul></li><li>对等方式<ul><li>在P2P方式中，没有固定的服务请求者和服务提供者，分部在网络边缘的各端系统中的应用进程是对等的，被称为对等方。对等方相互之间直接通信，每个对等方既是服务的请求者，又是服务的提供者。</li></ul></li><li>目前，在因特网上流行的P2P应用主要包括P2P文件共享、即时通信。P2P流媒体、分布式存储等。</li><li>基于P2P的应用是服务分散型的，因为服务不是集中在少数几个服务器计算机中，而是分部在大量对等计算机中，这些计算机并不为服务提供商所有，而是为个人控制的桌面计算机和笔记本电脑，它们通常位于住宅、校园和办公室中。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221602031.png" alt="image-20220122160212877"></p><ul><li>P2P方式的最突出特性之一就是它的可扩展性。因为系统每增加一个对等方，不仅增加的是服务的请求者，同时也增加了服务的提供者，系统性能不会因规模的增大而降低。</li><li>P2P方式具有成本上的优势，因为它通常不需要庞大的服务器设施和服务器带宽。为了降低成本，服务提供商对于将P2P方式用于应用的兴趣越来越大。</li></ul><hr><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><ul><li>DHCP的作用<ul><li>动态主机配置协议DHCP提供了一种机制，称为即插即用连网。这种机制允许一台计算机加入新网络时可自动获取IP地址等网络配置信息，而不用手工参与。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211039.png"></p><ul><li>DHCP的工作过程 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211953.png" alt="image-20220122162618095"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211300.png" alt="image-20220122162011727"></p><ul><li>DHCP中继代理<ul><li>在每一个网络上都设置一个DHCP服务器会使DHCP服务器的数量太多。因此现在是使每一个网络至少有一个DHCP中继代理(通常是一台路由器)，它配置了DHCP服务器的IP地址信息，作为各网络中计算机与DHCP服务器的桥梁。</li></ul></li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211628.png" alt="image-20220122162136764"></p><hr><h2 id="域名系统DNS-Domain-Name-System"><a href="#域名系统DNS-Domain-Name-System" class="headerlink" title="域名系统DNS(Domain Name System)"></a>域名系统DNS(Domain Name System)</h2><ul><li>域名系统DNS的作用  </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221630519.png" alt="image-20220122163005418"></p><p><strong>因特网是否可以只使用一台DNS服务器？</strong></p><p>这种做法并不可取。因为因特网的规模很大， 这样的又名服务器很定会因为超负荷而无法正常工作，而且一旦域名服务器出现故障，整个因特网就会瘫痪。</p><p>早在1983年，因特网就开始采用层次结构的命名树作为主机的名字(即域名)，并使用分布式的域名系统DNS。</p><p>DNS使大多数域名都在本地解析，仅少量解析需要在因特网上通信，因此系统效率很高。</p><p>由于DNS是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行。</p><ul><li>因特网采用层次树状结构的域名结构</li><li>域名的结构由若干个分量组成，各分量之间用”点”隔开，分别代表不同级别的域名。<ul><li>例如:……三级域名.二级域名.顶级域名</li><li>每一级的域名都由英文字母和数字组成，不超过63个字符，不区分大小写字母。</li><li>级别最低的域名写在最左边，而级别最高的顶级域名写在最右边。</li><li>完整的域名不超过255个字符。</li></ul></li><li>域名系统既不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。</li><li>各级域名由其上一级的域名管理机构管理，而最高的顶级域名则是由因特网名称与数字地址分配机构ICANN进行管理。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211132.png" alt="image-20220122164141563"></p><p><strong>举例:因特网的域名空间</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211306.png" alt="image-20220122164339259"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211249.png" alt="image-20220122164622233"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211171.png" alt="image-20220122164848121"></p><ul><li>为了提高DNS的查询效率，并减轻根域名服务器的负荷和减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存，高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。</li><li>由于域名到IP地址的映射关系并不是永久不变，为保持高速缓存表中的内容正确， 域名服务器应为每项内容设置计时器并删除超过合理时间的项(例如，每个项目只存放两天)。</li><li>不但在本地域名服务器中需要高速缓存，在用户主机中也很需要。许多用户主机在启动时从本地域名服务器下载域名和IP地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到域名时才向域名服务器查询。同理，主机也需要保持高速缓存中内容的正确性。</li></ul><hr><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><ul><li>将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即文件传送。</li><li>文件传送协议FTP是因特网上使用最广泛的文件传送协议。<ul><li>FTP提供交互式的访问， 允许客户指明文件的类型与格式(如指明是否使用ASCII码),并允许文件具有存取权限(如访问文件的用户必须经过授权，并输入有效的口令)。</li><li>FTP屏蔽了各计算机系统的细节，因而适用于在异构网络中任意计算机之间传送文件。</li></ul></li><li>在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之一，而由电子邮件和域名系统所产生的通信量还要小于FTP所产生的通信量。只是到了1995年，万维网WWW的通信量才首次超过FTP。</li><li>FTP的常见用途是在计算机之间传输文件，尤其是用于批量传输文件。</li><li>FTP的另一个常见用途是让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器。</li><li>FTP的基本工作原理  </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211857.png" alt="image-20220122185645526"></p><hr><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211814.png" alt="image-20220122185843732"></p><ul><li>电子邮件系统采用客户/服务器方式；</li><li>电子邮件系统的三个主要组成构建：用户代理，邮件服务器，以及电子邮件所需的协议。<ul><li>用户代理是用户与电子邮件系统的接口，又称为电子邮件客户端软件。</li><li>邮件服务器是电子邮件系统的基础设施，因特网上所有的LSP都有邮件服务器，其功能是发送和接收邮件，同时还要负责维护用户的邮箱。</li><li>协议包括邮件发送协议(例如SMTP)和邮件读取协议(例如POP3,IMAP)。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211826.png" alt="image-20220122190900927"></p><ul><li>简单的邮件传送协议SMTP的基本工作原理</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221912329.png" alt="image-20220122191220999"></p><ul><li>电子邮件的信息格式并不是SMTP定义的，而是在RFC 822中单独定义的。这个RFC文档已在2008年更新为RFC 5322。一个电子邮件有信封和内容两部分。而内容又由首部和主体两部分构成。 </li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211490.png" alt="image-20220122191606512"></p><ul><li>SMTP协议只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。</li><li>SMTP不能满足传送多媒体邮件(例如带有图片、音频或视频数据)的需要。并且许多其他非英语国家的文字(例如中文、俄文、甚至带有重音符号法文或德文)也无法用SMTP传送。</li><li>为了解决SMTP传送非ASCII码文本的问题，提出了多用途因特网邮件扩展MIME。<ul><li>增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息。</li><li>定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。</li><li>定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。 </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221925613.png" alt="image-20220122192558527"></p><ul><li>实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP。</li></ul><hr><ul><li>常用的邮件读取协议有以下两个:<ul><li>邮局协议POP，POP3是其第三个版本，是因特网正式标准。<ul><li>POP3非常简单、功能有限的有限读取协议。用户只能以下载并删除方式或下载并保留方式从邮件服务器下载邮件到用户方计算机。不允许用户在邮件服务器上管理自己的邮件。(例如创建文件夹，对邮件进行分类管理等)。</li></ul></li><li>因特网邮件访问协议IMAP,IMAP4是其第四个版本，目前还只是因特网建议标准。 <ul><li>IMAP4功能比POP3强大的邮件读取协议。用户在自己的计算机上就可以操控邮件服务器中的邮件，就像在本地操控一样，因此IMAP是一个联机协议。</li></ul></li><li>POP3和IMAP4都采用基于TCP连接的客户/服务器方式。POP3使用熟知端口110，IMAP4使用熟知端口143。</li></ul></li></ul><hr><ul><li>基于万维网的电子邮件<ul><li>通过浏览器登录(提供用户名和口令)邮件服务器万维网网站就可以撰写、收发。阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。</li><li>邮件服务器网站通常都提供非常强大和方便的邮件管理功能，用户可以在邮件服务器网站上管理和处理自己的邮件，而不需要将邮件下载到本地进行管理。</li><li>这种工作模式在用户浏览器与邮件服务器之间使用HTTP协议，而邮件服务器之间使用SMTP协议。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221941760.png" alt="image-20220122194155654"></p><hr><h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221948654.png" alt="image-20220122194840548"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211104.png" alt="image-20220122201959631"></p><ul><li>浏览器最重要的部分是渲染引擎，就是浏览器内核。负责对网页内容进行解析和显示。<ul><li>不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里显示的效果可能不同；</li><li>网页编写者需要在不同内核的浏览器中测试网页显示效果 。</li></ul></li><li>为了方便地访问在世界范围的文档，万维网使用同一资源定位符URL来指明因特网上任何种类”资源”的位置。</li><li>URL的一般形式由以下四个部分组成:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211563.png" alt="image-20220122203154458"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211372.png" alt="image-20220122203357702"></p><ul><li>超文本传输协议HTTP</li></ul><p>HTTP定义了浏览器(即万维网客户进程)怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211202.png" alt="image-20220122203829928"></p><ul><li>HTTP/1.0采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立TCP连接，当收到相应后就立即关闭连接。<ul><li>每请求一个文档就要两倍的RTT的开销。若一个网页上有多个引用对象(例如图片等)，那么请求每个对象都需要花费2RTT的时间。</li><li>为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重。 </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211566.png" alt="image-20220122204320755"></p><ul><li>HTTP/1.1采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一客户(浏览器)和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。<ul><li>为了进一步提高效率，HTTP/1.1的持续连接还可以使用流水线方式工作，即浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。</li></ul></li><li>HTTP的报文格式</li></ul><p>HTTP是面向文本的，其报文中的每一个字段都是一些ASCII码串，并且每个字段的长度都是不确定的。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211012.png" alt="image-20220122205332275"></p><p><strong>HTTP请求报文支持以下方法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211164.png" alt="image-20220122205414486"></p><p><strong>HTTP相应报文格式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222057665.png" alt="image-20220122205705564"></p><p><strong>相应报文中常见的状态行</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211483.png" alt="image-20220122205728780"></p><ul><li>使用Cookie在服务器上记录用户信息</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211197.png" alt="image-20220122210035934"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222100496.png"></p><ul><li>万维网缓存与代理服务器</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211361.png" alt="image-20220122210538427"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;相关视频&lt;/strong&gt;——&lt;a href=&quot;https://www.bilibili.com/video/BV1c4411d7jb?p=1&quot;&gt;计算机网络微课堂（有字幕无背景音乐版）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://doraemon-hub-art.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="-计算机网络" scheme="https://doraemon-hub-art.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>PicGo+Gitee搭建图床的注意事项</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/21/PicGo-Gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/21/PicGo-Gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2022-01-21T03:51:00.000Z</published>
    <updated>2022-01-21T04:08:07.174Z</updated>
    
    <content type="html"><![CDATA[<p>刚才想把Gitee图床换成Github来托管，无奈失败了，加上Gitee访问速度更快一些，那就不瞎搞了，随便写一下，具体的搭建过程还请见其他作者的教程。</p><p>我选的是这个插件。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121115416330.png"></p><p>owner只包括你的Gitee用户名，<strong>repo只包括你的仓库名</strong>，具体的名字从链接里面看，例如:</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120449631.png" alt="image-20220121120449631"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121115520221.png" alt="image-20220121115520221"></p><p>我的Typora设置。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120054032.png" alt="image-20220121120054032"></p><p>粘贴图片会自动上传到Gitee中，并且弹出”上传完成的提示”。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120152543.png" alt="image-20220121120152543"></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚才想把Gitee图床换成Github来托管，无奈失败了，加上Gitee访问速度更快一些，那就不瞎搞了，随便写一下，具体的搭建过程还请见其他作者的教程。&lt;/p&gt;
&lt;p&gt;我选的是这个插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/</summary>
      
    
    
    
    <category term="计算机" scheme="https://doraemon-hub-art.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-Pic" scheme="https://doraemon-hub-art.github.io/tags/Pic/"/>
    
    <category term="-Gitee" scheme="https://doraemon-hub-art.github.io/tags/Gitee/"/>
    
    <category term="-图床" scheme="https://doraemon-hub-art.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Python基础语法(1)</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/19/%E3%80%90Python%E3%80%91Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(1)/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/19/%E3%80%90Python%E3%80%91Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(1)/</id>
    <published>2022-01-19T04:36:50.000Z</published>
    <updated>2022-01-19T04:37:36.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础知识"><a href="#Python基础知识" class="headerlink" title="Python基础知识"></a>Python基础知识</h1><p><strong>相关视频</strong>——<a href="https://www.bilibili.com/video/BV12E411A7ZQ?from=search&seid=9145828381968044237&spm_id_from=333.337.0.0">Python爬虫编程基础5天速成（2021全新合集）Python入门+数据分析</a></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Python是一门解释型、面向对象的高级编程语言。</li><li>Python是开源免费的，支持交互式、可跨平台移植的脚本语言。</li><li>Python的设计混合了传统语言的软件软件工程的特点和脚本语言的易用性。<ul><li>具有如下特性:</li><li>开源、易于维护</li><li>可移植</li><li>易于使用、简单优雅</li><li>广泛的标准库、功能强大</li><li>可扩展、可嵌入</li><li>……</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多行注释</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">单行注释</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><ul><li>变量无需先定义,直接使用即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">Python解释器干了两件事</span><br><span class="line"><span class="number">1</span>在内存中创建了一个<span class="string">&#x27;ABC&#x27;</span>的字符串</span><br><span class="line"><span class="number">2</span>在内存中创建了一个名为a的变量，并把它指向<span class="string">&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>print</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">占位符——格式化输入</span><br><span class="line">age = <span class="number">3</span></span><br><span class="line">print(<span class="string">&quot;我今年%d岁了&quot;</span>，age)</span><br></pre></td></tr></table></figure><ul><li>input——进行输入</li><li>type(变量名)查看变量的类型</li><li>强制类型转换——变量类型(变量)</li><li>**——次方</li></ul><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> c &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">&quot;大于10&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> c &lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">&quot;小于10&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;等于10&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过缩进来告诉编译器这几行代码属于同一个代码段。</p><h2 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h2><p>import xxx或者from … import 来导入相应的模块</p><p>可以选择全部引入还是引入部分函数。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>for…in,可以依次把list或者tuple中的元素迭代出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment"># 0 1 2 3 4</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从0开始以3为增量(步进值 )，11为限制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>):</span><br><span class="line">    print(i)    </span><br><span class="line">    <span class="comment">#0 3 6 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逐个遍历字符串中的每个字母</span></span><br><span class="line">name = <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#遍历列表中的每个元素</span></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    print(a[i])</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>while</p><p>python没有++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#计算<span class="number">1</span>到<span class="number">100</span>的和</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    sum += i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>python总while可以和else使用，当while条件不满足的时候执行else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i =<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    print(i,<span class="string">&quot;小于10&quot;</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,<span class="string">&quot;大于等于10&quot;</span>) <span class="comment">#不满足while执行条件，循环终止。</span></span><br></pre></td></tr></table></figure><ul><li>break、continue同其他编程语言</li><li>pass是空语句，一般用做占位语句，不做任何事情。</li></ul><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>String</strong></p><ul><li>Python中的字符串可以使用单引号、双引号或者三引号，反斜杠\转义特殊字符。</li><li>Python3源码文件默认以UFT-8编码，所有字符串都是unicode字符串。</li><li>支持字符串拼接、截取等多种运算。</li></ul><p>三引号，默认保留编写程序时的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">ABC</span></span><br><span class="line"><span class="string">A1B2C3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单双引号使用时候区别，有的字符串用到单引号就需要使用转义字符，类似情况同理，使用转义字符。</p><p> <strong>字符串的截取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123ABC&quot;</span></span><br><span class="line"><span class="comment">#访问某一个字符，就当做字符数组使用</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#xx[起始位置:结束位置]</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#字符串访问中同样也有步进值</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#起始位置可以省略，默认为从第一个开始</span></span><br><span class="line">print(<span class="built_in">str</span>[:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#结束位置可以省略,默认为到最后一个结束</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:])</span><br></pre></td></tr></table></figure><p><strong>字符串的拼接</strong></p><p>“xxx”+”xxx”</p><p>引号前加r取消转义,内容全部保留</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r&quot;123\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串相关函数</strong></p><p>略……,现用现查吧。</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>类似于其他编程语言中的数组。</p><ul><li>列表可以完成大多数集合类的数据结构实现。<strong>列表中有元素的类型可以不相同</strong>，它支持数字、字符串、甚至可以包括列表(嵌套)。</li><li>列表是写在方括号[]之间，用逗号分隔开的元素列表</li><li>列表索引值以0为开始值，-1为从末尾的位置开始。</li><li>列表可以使用+操作符进行拼接。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line">nameList = []#定义一个空列表</span><br><span class="line">nameList1 = [<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;小李&quot;</span>]</span><br><span class="line">print(nameList1)#打印全部内容</span><br><span class="line">testList = [<span class="number">123</span>,<span class="string">&quot;ABC&quot;</span>]#怎么定义的，就是什么类型</span><br><span class="line">#遍历</span><br><span class="line"><span class="keyword">for</span> name in testList:</span><br><span class="line">    print(name)</span><br><span class="line">#长度</span><br><span class="line">length = len(testList)</span><br><span class="line">#常用的方法</span><br><span class="line">#增加</span><br><span class="line">#在末尾追加一个元素</span><br><span class="line">nameList.append(<span class="string">&quot;添加一个数据&quot;</span>)</span><br><span class="line">#扩展，将另一个列表中的数据逐一添加到末尾</span><br><span class="line">nameList.extend(nameList1)</span><br><span class="line"><span class="meta">#insert</span></span><br><span class="line">nameList.insert(<span class="number">1</span>,<span class="string">&quot;数据&quot;</span>)</span><br><span class="line">#删除</span><br><span class="line">#指定下标删除元素</span><br><span class="line">del nameList[<span class="number">1</span>]</span><br><span class="line">#删除末尾元素</span><br><span class="line">nameList.pop()</span><br><span class="line">#指定数据元素删除-多个匹配内容只会删除找到的第一个</span><br><span class="line">nameList.remove(<span class="string">&quot;元素名字&quot;</span>)</span><br><span class="line">#修改</span><br><span class="line">nameList[<span class="number">1</span>] = <span class="string">&quot;我是新的数据&quot;</span></span><br><span class="line">#查找</span><br><span class="line">findName = input(<span class="string">&quot;查找内容&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> findName in nameList:</span><br><span class="line">    print(<span class="string">&quot;找到了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    print(<span class="string">&quot;没有&quot;</span>)</span><br><span class="line">#指定范围查找指定内容,找到返回下标，左闭又开</span><br><span class="line">nameList.index(<span class="string">&quot;查找内容&quot;</span>,<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">#统计某个元素出现几次</span><br><span class="line">nameList.count(<span class="string">&quot;元素&quot;</span>)</span><br><span class="line">#反转</span><br><span class="line">nameList.reverse()</span><br><span class="line">#排序-升序</span><br><span class="line">nameList.sort()</span><br><span class="line">#排序-降序</span><br><span class="line">nameList.sort(reverse=True)</span><br><span class="line">#嵌套</span><br><span class="line">#有三个元素的空列表，其中的每个元素都是一个空列表</span><br><span class="line">schoolNames = [[],[],[]]</span><br><span class="line">SecondNames= [[<span class="string">&#x27;赵&#x27;</span>,<span class="string">&#x27;钱&#x27;</span>],[<span class="string">&#x27;孙&#x27;</span>,<span class="string">&#x27;李&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">#例子-将元素随机分配</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">office=[[],[],[]]</span><br><span class="line">names = [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;G&quot;</span>,<span class="string">&quot;H&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name in names:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    office[index].append(name);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li>类似于list,不同之处在于元组的元组不能修改，写在小括号里。</li><li>元组的元素不可变，但可以包含可变对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建元组</span></span><br><span class="line">tupTest = (<span class="number">50</span>)</span><br><span class="line"><span class="comment">#多数操作同List</span></span><br><span class="line">tup1 = (<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>)</span><br><span class="line"><span class="comment">#元组中的元素不能被修改的</span></span><br><span class="line"><span class="comment">#增——将两个元组链接到一起在一起</span></span><br><span class="line">tup2 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">tup = tup1 + tup2</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">del</span> tup<span class="comment">#删除了整个元组变量</span></span><br></pre></td></tr></table></figure><hr><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典是无序的对象集合，使用键-值(key-value)存储，具有极快的查找速度。</li><li>键(key)必须使用不可变类型。</li><li>同一个字典中，键(key)必须是唯一的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;快乐的威猛先生&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">#访问不存在的键，不报错方法</span></span><br><span class="line">info.get(<span class="string">&quot;test&quot;</span>)<span class="comment">#不存在默认返回None</span></span><br><span class="line"><span class="comment">#可以设定找不到的默认返回值</span></span><br><span class="line">info.get(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;m&quot;</span>)<span class="comment">#m为默认返回值</span></span><br><span class="line"><span class="comment">#增</span></span><br><span class="line">newID = <span class="built_in">input</span>()</span><br><span class="line">info[<span class="string">&quot;ID&quot;</span>] = newID</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&quot;name&quot;</span>]<span class="comment">#删除了整个键值对</span></span><br><span class="line"><span class="keyword">del</span> info<span class="comment">#删除整个字典，在内存中清除这个变量</span></span><br><span class="line"><span class="comment">#改</span></span><br><span class="line">info[<span class="string">&quot;age&quot;</span>] = <span class="number">19</span></span><br><span class="line"><span class="comment">#拿到所有的键，列表形式</span></span><br><span class="line">info.keys()</span><br><span class="line"><span class="comment">#拿到所有的值</span></span><br><span class="line">info.values()</span><br><span class="line"><span class="comment">#拿到所有的对儿, 每个键值对是与元组形式</span></span><br><span class="line">info.items()</span><br><span class="line"><span class="comment">#遍历key value</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> info.items():</span><br><span class="line">    print(<span class="string">&quot;key=%s,value=%s&quot;</span>(key,value))</span><br><span class="line"><span class="comment">#使用枚举函数拿到列表元素及其下标</span></span><br><span class="line">mylist = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(mylist):</span><br><span class="line">    print(i,x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>和字典类似，也是一组key的结合，但不存储value。key不能重复。</li><li>集合是无序的，重复的元素在set中自动被过滤。去重操作。</li></ul><p>略……</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>把具有独立功能的代码块组织为一个小模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunction</span>():</span></span><br><span class="line">    print(<span class="string">&quot;---MyFunction---&quot;</span>)</span><br><span class="line"><span class="comment">#函数的调用</span></span><br><span class="line">myfunction()</span><br><span class="line"><span class="comment">#带参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2Num</span>(<span class="params">a,b</span>):</span></span><br><span class="line">     <span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">#返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">10</span>,b+<span class="number">10</span></span><br><span class="line"><span class="comment">#接收</span></span><br><span class="line">tmp1,tmp2 = test(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">r = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">tmp =r.read(<span class="number">6</span>)<span class="comment">#读6个</span></span><br><span class="line"><span class="comment">#read方法读取指定的字符，开始定位于文件头部，随着指定往后移动</span></span><br><span class="line">print(tmp)</span><br><span class="line"><span class="comment">#全部读完,放到列表中</span></span><br><span class="line">tmp2=r.readline()</span><br><span class="line"><span class="comment">#每次读一行</span></span><br><span class="line">tmp3=r.readline()</span><br><span class="line">r.close()</span><br><span class="line"><span class="comment">#删除重命名等操作在os这个库中，删除时注意路径</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;text2.txt&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可能发生问题的代码块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#捕获处理异常</span></span><br><span class="line"><span class="keyword">except</span> (IOError,NameError)<span class="keyword">as</span> result:<span class="comment">#异常类型想要被捕获，需要一致。逗号分隔多种异常</span></span><br><span class="line">    <span class="comment">#捕获异常后指定的内容</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#result获取异常描述</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#try---finally，和嵌套</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="comment">#这里出现问题会直接跳出，到 except</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = r.readline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(content) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        r.close()</span><br><span class="line">        print(<span class="string">&quot;文件关闭&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment">#无论有没有异常都会被执行</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python基础知识&quot;&gt;&lt;a href=&quot;#Python基础知识&quot; class=&quot;headerlink&quot; title=&quot;Python基础知识&quot;&gt;&lt;/a&gt;Python基础知识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;相关视频&lt;/strong&gt;——&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="Python" scheme="https://doraemon-hub-art.github.io/categories/Python/"/>
    
    
    <category term="-Python" scheme="https://doraemon-hub-art.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT容器</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/18/%E3%80%90QT%E3%80%91QT%E5%AE%B9%E5%99%A8/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/18/%E3%80%90QT%E3%80%91QT%E5%AE%B9%E5%99%A8/</id>
    <published>2022-01-18T08:45:02.000Z</published>
    <updated>2022-01-18T08:47:34.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT容器"><a href="#QT容器" class="headerlink" title="QT容器"></a>QT容器</h1><h2 id="QString类"><a href="#QString类" class="headerlink" title="QString类"></a>QString类</h2><p><strong>隐式共享:</strong></p><p>隐式数据共享机制去最大化资源有效利用和最小化复制克隆操作。</p><p>隐式数据共享类当作为函数参数传递的时候，不仅安全而且效率很高，因为传递的时候只是传递了数据的指针，数据本身只当自己被修改的时候才会去复制。简称写时复制。</p><p>数据相同时，执行浅拷贝，仅复制指向数据块的指针，数据不同时则执行深拷贝。</p><p>隐式共享技术可以大大降低对内存的开销以及，CPU资源的消耗，很大程度提高应用程序的运行效率。</p><p>QString类保存了16位的Unicode值(宽字节)，Unicode把所有语言都统一到一套编码里，Unicode提供UTF-8、UTF-16、UTF-32编码方式。</p><p>UTF-8以字节为单位对Unicode进行编码，对不同范围的字体使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。</p><p><strong>代码示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QString s = <span class="string">&quot;Hello&quot;</span>;<span class="comment">//Hello数据块引用计数为1</span></span><br><span class="line">QString s1 = s;<span class="comment">//Hello数据块引用计数为2</span></span><br><span class="line">QString s2 = s;<span class="comment">//Hello数据块引用计数为3</span></span><br><span class="line"><span class="comment">//其中一个进行球盖</span></span><br><span class="line">s2 = <span class="string">&quot;He&quot;</span>;<span class="comment">//不在引用Hello这个数据块，Hello数据块引用-1，He数据块引用计数为1</span></span><br><span class="line">QString s3 = s;<span class="comment">//Hello数据块引用计数为3</span></span><br><span class="line">QString s4 = s2;<span class="comment">//He数据块引用计数为2</span></span><br><span class="line">QString s5 = s2;<span class="comment">//He数据块引用计数为2</span></span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const char* 初始化</span></span><br><span class="line">QString s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function">QString <span class="title">str</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//QChar数组初始化</span></span><br><span class="line">QChar cHi[<span class="number">3</span>] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;;</span><br><span class="line"><span class="function">QString <span class="title">strHi</span><span class="params">(cHi,<span class="number">2</span>)</span></span>;Z</span><br><span class="line"><span class="comment">//类对象初始化</span></span><br><span class="line">QString s1 = s;</span><br></pre></td></tr></table></figure><p><strong>转换</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QString转数字</span></span><br><span class="line">  <span class="function">QString <span class="title">strAge</span><span class="params">(<span class="string">&quot;18&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> nAge = strAge.toInt();<span class="comment">//默认是10进制</span></span><br><span class="line">  <span class="function">QString <span class="title">strRate</span><span class="params">(<span class="string">&quot;3.14&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">float</span> nRate = strRate.toFloat();</span><br><span class="line">  <span class="function">QString <span class="title">strDouble</span><span class="params">(<span class="string">&quot;3.333&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">double</span> strD = strDouble.toDouble();</span><br><span class="line">  <span class="comment">//数字转QString</span></span><br><span class="line">  <span class="keyword">int</span> year = <span class="number">2022</span>;</span><br><span class="line">  <span class="keyword">float</span> height = <span class="number">1.70f</span>;</span><br><span class="line">  QString strYear;</span><br><span class="line">  strYear =  strYear.number(year);</span><br><span class="line">  QString strHeight;</span><br><span class="line">  strHeight = strHeight.number(height);</span><br><span class="line">  QString strTest;</span><br><span class="line">  strTest = strTest.setNum(year);</span><br><span class="line">  <span class="comment">//QString转QByteArray</span></span><br><span class="line">  QString strTom = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">  QByteArray tomArray = strTom.toUtf8();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* cTom = tomArray.data();</span><br><span class="line">  <span class="comment">//QString转QDataTime</span></span><br><span class="line">  QString strTime = <span class="string">&quot;1949-10-01 10:00:00&quot;</span>;</span><br><span class="line">  QDateTime dtTime = QDateTime::fromString(strTime,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">  <span class="comment">//QDateTime转QString</span></span><br><span class="line">  QDateTime dtCurrent = QDateTime::currentDateTime();</span><br><span class="line">  QString strCurrent = dtCurrent.toString(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QString的拼接</span></span><br><span class="line">    QString s = <span class="string">&quot;对不起&quot;</span>;</span><br><span class="line">    s += <span class="string">&quot;我是警察。&quot;</span>;</span><br><span class="line">    s.append(<span class="string">&quot;Sorry。&quot;</span>);<span class="comment">// 结尾添加</span></span><br><span class="line">    <span class="comment">//QString格式化</span></span><br><span class="line">    QString s0;</span><br><span class="line">    s0.<span class="built_in">sprintf</span>(<span class="string">&quot;%s%d%s&quot;</span>,<span class="string">&quot;我&quot;</span>,<span class="number">19</span>,<span class="string">&quot;岁了。&quot;</span>);</span><br><span class="line">    QString s1;</span><br><span class="line">    s1 = QString(<span class="string">&quot;%1%2%3&quot;</span>).arg(<span class="string">&quot;我&quot;</span>).arg(<span class="number">19</span>).arg(<span class="string">&quot;岁了。&quot;</span>);</span><br><span class="line">    <span class="comment">//以索引方式访问</span></span><br><span class="line">    QChar qc1= s1.at(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//插入字符</span></span><br><span class="line">    QString s2= <span class="string">&quot;我岁了。&quot;</span>;</span><br><span class="line">    QString s3 = <span class="string">&quot;19&quot;</span>;</span><br><span class="line">    s2.insert(<span class="number">1</span>,s3.toUtf8());</span><br><span class="line">    <span class="comment">//在字符串起始位置插入</span></span><br><span class="line">    s2.prepend(<span class="string">&quot;今年&quot;</span>);</span><br><span class="line">    <span class="comment">//指定位置进行替换</span></span><br><span class="line">    s2.replace(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&quot;去年&quot;</span>);</span><br><span class="line">    <span class="comment">//去除字符串两端的空格,中间的空格变为一个空格</span></span><br><span class="line">    s2.trimmed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询字符</span></span><br><span class="line">    QString s4 = <span class="string">&quot;哔哩哔哩关注快乐的威猛先生&quot;</span>;</span><br><span class="line">    <span class="comment">//查询是否以xx开头,BOOL</span></span><br><span class="line">    qDebug()&lt;&lt;s4.startsWith(<span class="string">&quot;哔哩哔哩&quot;</span>);</span><br><span class="line">    QString s5 = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">    qDebug()&lt;&lt;s5.startsWith(<span class="string">&quot;tom&quot;</span>,Qt::CaseSensitive);<span class="comment">//大小写敏感</span></span><br><span class="line">    <span class="comment">//查询是否以xx结尾</span></span><br><span class="line">    qDebug()&lt;&lt;s5.endsWith(<span class="string">&quot;威猛先生&quot;</span>);<span class="comment">//同样可以表明大小写是否敏感</span></span><br><span class="line">    <span class="comment">//是否包含</span></span><br><span class="line">   qDebug()&lt;&lt;s5.contains(<span class="string">&quot;o&quot;</span>);<span class="comment">//同样可以表明大小写是否敏感</span></span><br><span class="line">   <span class="comment">//比较</span></span><br><span class="line">    qDebug()&lt;&lt;QString::compare(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;tom&quot;</span>,Qt::CaseInsensitive);<span class="comment">//判断字符串是否相等，大小写是否敏感</span></span><br><span class="line">    <span class="comment">//分割字符串</span></span><br><span class="line">    QString strTime =  <span class="string">&quot;2022/1/17&quot;</span>;</span><br><span class="line">    QStringList timeList = strTime.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    foreach (QString ss,timeList) &#123;<span class="comment">//循环读取容器中的元素，用一个变量来接收读取到的数据</span></span><br><span class="line">       qDebug()&lt;&lt;ss;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//截取字符串</span></span><br><span class="line">    QString sFriends = <span class="string">&quot;EnvyuskenyS&quot;</span>;</span><br><span class="line">    qDebug()&lt;&lt;sFriends.mid(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断NULL字符串isNull()，采用默认构造函数，或者用const char*xx =&#x27;\0&#x27;来对QString进行构造</span></span><br><span class="line"><span class="comment">//判断空字符传isEmpty()</span></span><br></pre></td></tr></table></figure><hr><h2 id="QStringList"><a href="#QStringList" class="headerlink" title="QStringList"></a>QStringList</h2><p>QString类型的链表</p><p>常用操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> QStringList weekList;</span><br><span class="line"> weekList&lt;&lt;<span class="string">&quot;星期一&quot;</span>&lt;&lt;<span class="string">&quot;星期二&quot;</span>&lt;&lt;<span class="string">&quot;星期三&quot;</span>&lt;&lt;<span class="string">&quot;星期四&quot;</span>&lt;&lt;<span class="string">&quot;星期五&quot;</span>&lt;&lt;<span class="string">&quot;星期六&quot;</span>;</span><br><span class="line"> weekList.append(<span class="string">&quot;星期天&quot;</span>);<span class="comment">//尾插</span></span><br><span class="line"> qDebug()&lt;&lt;weekList;</span><br><span class="line"> <span class="comment">//for遍历链表</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; weekList.size();i++)</span><br><span class="line"> &#123;</span><br><span class="line">      qDebug()&lt;&lt;weekList.at(i);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//foreach遍历链表</span></span><br><span class="line"> foreach (QString ss, weekList) &#123;</span><br><span class="line">    qDebug()&lt;&lt;ss;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//STL风格迭代器</span></span><br><span class="line"> QStringList::iterator it = weekList.begin();</span><br><span class="line"> <span class="keyword">for</span>(;it !=  weekList.end();it++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;*it;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格迭代</span></span><br><span class="line"> QListIterator&lt;QString&gt;itr(weekList);</span><br><span class="line"> <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">     qDebug()&lt;&lt;itr.next();<span class="comment">//java风格的迭代器初识位置在第一个元素的前一个位置</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//查看链表中是否包含某个元素</span></span><br><span class="line"> qDebug()&lt;&lt;weekList.contains(<span class="string">&quot;星期八&quot;</span>);</span><br><span class="line"> <span class="comment">//插入元素</span></span><br><span class="line"> weekList.insert(<span class="number">0</span>,<span class="string">&quot;星期零&quot;</span>);</span><br><span class="line"> weekList.append(<span class="string">&quot;星期八&quot;</span>);</span><br><span class="line"> <span class="comment">//删除元素</span></span><br><span class="line"> weekList.removeFirst();</span><br><span class="line"> weekList.removeLast();</span><br><span class="line"> weekList.removeOne(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line"> weekList.removeAt(<span class="number">0</span>);</span><br><span class="line"> weekList.clear();</span><br></pre></td></tr></table></figure><hr><h2 id="QList"><a href="#QList" class="headerlink" title="QList"></a>QList</h2><p>QList&lt; T &gt;是最常用的容器类。QList以列表形态存储并管理数据，并能进行基于快速索引的访问，也可以进行快速的数据删除操作。继承自QList类的子类有QItemSelection、QQueue、QStringList、QTestEventList.</p><p>可用运算符&lt;&lt; 、append()、prepend()进行添加元素，insert()进行插入。QList&lt; T &gt;维护了一个指针数组，数组元素指向每一个链表项，因此QList&lt; T &gt; 提供了基于下标的快速访问。</p><p>Java风格迭代器迭代点位置：第一个列表项前、两个列表项中间、最后一个列表项之后。STL风格迭代器迭代点位置：直接指向列表项。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201181647149.png" alt="image-20220117165954098"></p><p>QString中可以通过[]来访问元素。因为里面放的是指针，通过指针访问元素。</p><p><strong>相关操作示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;<span class="keyword">int</span>&gt;<span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//添加与元素</span></span><br><span class="line">    <span class="built_in">list</span>&lt;&lt;1&lt;&lt;2&lt;&lt;3&lt;&lt;4&lt;&lt;5;</span><br><span class="line">    <span class="built_in">list</span>.append(0);</span><br><span class="line">    <span class="built_in">list</span>.prepend(6);</span><br><span class="line">    <span class="built_in">list</span>.insert(0,99);</span><br><span class="line">    //查找元素</span><br><span class="line">   <span class="built_in">list</span>.at(2);</span><br><span class="line">   <span class="built_in">list</span>[2];</span><br><span class="line">    //查看是否包含</span><br><span class="line">   <span class="built_in">list</span>.contains(8);</span><br><span class="line">    //修改元素</span><br><span class="line">    <span class="built_in">list</span>.replace(1,66);</span><br><span class="line">    <span class="built_in">list</span>[2] = 77;</span><br><span class="line">    //删除元素</span><br><span class="line">    <span class="built_in">list</span>.removeFirst();</span><br><span class="line">    <span class="built_in">list</span>.removeLast();</span><br><span class="line">    //删除指定位置元素</span><br><span class="line">    <span class="built_in">list</span>.removeAt(2);</span><br><span class="line">    //指定元素删除</span><br><span class="line">    <span class="built_in">list</span>.removeOne(66);</span><br><span class="line">    //清空链表</span><br><span class="line">    <span class="built_in">list</span>.clear();</span><br></pre></td></tr></table></figure><p><strong>迭代器</strong></p><p><strong>JAVA风格迭代器</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JAVA风格迭代器</span></span><br><span class="line">   QList&lt;<span class="keyword">int</span>&gt;montList;</span><br><span class="line">   <span class="function">QMutableListIterator&lt;<span class="keyword">int</span>&gt; <span class="title">it_mrw</span><span class="params">(montList)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;   <span class="number">12</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       it_mrw.insert(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反遍历</span></span><br><span class="line">   <span class="comment">//将迭代器移到结尾，判断前面是否有数据</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toBack();it_mrw.hasPrevious();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mrw.previous();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//正遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toFront();it_mrw.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mrw.next();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//删除、修改</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toFront(); it_mrw.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">int</span> month = it_mrw.next();</span><br><span class="line">        <span class="keyword">if</span>(month== <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             it_mrw.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(month == <span class="number">11</span>)</span><br><span class="line">       &#123;</span><br><span class="line">             it_mrw.setValue(<span class="number">12</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   qDebug()&lt;&lt;montList;</span><br><span class="line">   <span class="comment">//只读迭代器</span></span><br><span class="line">   QListIterator&lt;<span class="keyword">int</span>&gt;it_mr(montList);</span><br><span class="line">   <span class="comment">//正遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mr.toFront();it_mr.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mr.next();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mr.toBack();it_mr.hasPrevious();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mr.previous();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>STL风格迭代器</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//STL风格迭代器</span></span><br><span class="line">QList&lt;<span class="keyword">int</span>&gt;numList;</span><br><span class="line">numList&lt;&lt;<span class="number">10</span>&lt;&lt;<span class="number">11</span>&lt;&lt;<span class="number">12</span>&lt;&lt;<span class="number">13</span>;</span><br><span class="line"><span class="comment">//读写迭代器</span></span><br><span class="line"> QList&lt;<span class="keyword">int</span>&gt;::iterator it_numRW;</span><br><span class="line"> <span class="keyword">for</span>( it_numRW = numList.begin();it_numRW != numList.end();it_numRW++)</span><br><span class="line"> &#123;</span><br><span class="line">     *it_numRW =*it_numRW *  <span class="number">10</span>;</span><br><span class="line">      qDebug()&lt;&lt;*it_numRW;</span><br><span class="line"> &#125;</span><br><span class="line"> qDebug()&lt;&lt;<span class="string">&quot;---&quot;</span>;</span><br><span class="line"> <span class="comment">//只读迭代器</span></span><br><span class="line"> QList&lt;<span class="keyword">int</span>&gt;::const_iterator it_numR;</span><br><span class="line"> <span class="comment">//constEnd方法返回的迭代器指向最后一个元素之后，是虚拟的。</span></span><br><span class="line"> <span class="keyword">for</span>( it_numR = numList.constBegin();it_numR != numList.constEnd();it_numR++)</span><br><span class="line"> &#123;</span><br><span class="line">         qDebug()&lt;&lt;*it_numR;</span><br><span class="line"> &#125;</span><br><span class="line">   qDebug()&lt;&lt;<span class="string">&quot;---&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="QLinkedList"><a href="#QLinkedList" class="headerlink" title="QLinkedList"></a>QLinkedList</h2><p> 更加高效，大量数据情况下运行速度更快。是一个更加”纯粹”的链表。</p><p>不支持下标访问，不用维护那个指针数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">QLinkedList&lt;QString&gt;weekList;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">8</span> ;j ++ )</span><br><span class="line"> &#123;</span><br><span class="line">      weekList&lt;&lt;QString(<span class="string">&quot;%1%2&quot;</span>).arg(<span class="string">&quot;星期&quot;</span>).arg(j);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line">  QLinkedListIterator&lt;QString&gt;it_wr(weekList);</span><br><span class="line">  <span class="keyword">for</span>(it_wr.toFront();it_wr.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_wr.next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Java风格读写迭代器</span></span><br><span class="line">  QMutableLinkedListIterator&lt;QString&gt;it_wrw(weekList);</span><br><span class="line">  <span class="keyword">for</span>(it_wrw.toFront();it_wrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      QString day = it_wrw.next();</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期3&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          it_wrw.setValue(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期5&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          it_wrw.setValue(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期6&quot;</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          it_wrw.insert(<span class="string">&quot;星期六6&quot;</span>);<span class="comment">//插入到当前位置的后面</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>( it_wrw.toFront();it_wrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_wrw.next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//QLinkedList不能支持下标访问</span></span><br></pre></td></tr></table></figure><hr><h2 id="QVector"><a href="#QVector" class="headerlink" title="QVector"></a>QVector</h2><p>QVector在相邻的内存中存储给定数据类型T的一组数据。在QVector前部或中间位置插入操作速度都很慢，因为会导致内存中大量数据的移动。访问数据可使用下标，也可以使用迭代器。继承自QVector类的子类有QPolygon、QPolygonF、QStack。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">QVector&lt;QString&gt;vStarts;</span><br><span class="line">  <span class="comment">//添加元素</span></span><br><span class="line"> vStarts&lt;&lt;<span class="string">&quot;星期1&quot;</span>&lt;&lt;<span class="string">&quot;星期2&quot;</span>&lt;&lt;<span class="string">&quot;星期3&quot;</span>;</span><br><span class="line"> vStarts.append(<span class="string">&quot;星期4&quot;</span>);</span><br><span class="line"> vStarts.prepend(<span class="string">&quot;星期5&quot;</span>);</span><br><span class="line"> vStarts.insert(<span class="number">0</span>,<span class="string">&quot;星期6&quot;</span>);</span><br><span class="line"> <span class="comment">//修改元素</span></span><br><span class="line"> vStarts.replace(<span class="number">0</span>,<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line"> <span class="comment">//删除元素</span></span><br><span class="line"> vStarts.remove(<span class="number">0</span>);</span><br><span class="line"> vStarts.removeFirst();</span><br><span class="line"> vStarts.removeAll(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"> <span class="comment">//访问元素</span></span><br><span class="line"> vStarts[<span class="number">2</span>];</span><br><span class="line"> vStarts.at(<span class="number">2</span>);</span><br><span class="line"> vStarts.contains(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"> <span class="comment">//JAVA风格只读迭代</span></span><br><span class="line"> QVectorIterator&lt;QString&gt;it_sr(vStarts);</span><br><span class="line"> <span class="keyword">for</span>(it_sr.toFront();it_sr.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;it_sr.next();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格读写迭代</span></span><br><span class="line"> QMutableVectorIterator&lt;QString&gt;it_srw(vStarts);</span><br><span class="line"> <span class="keyword">for</span>(it_srw.toFront();it_srw.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     QString s = it_srw.next();</span><br><span class="line">     <span class="keyword">if</span>(!QString::compare(s,<span class="string">&quot;星期1&quot;</span>))</span><br><span class="line">      &#123;</span><br><span class="line">         it_srw.setValue(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> qDebug()&lt;&lt;vStarts;</span><br></pre></td></tr></table></figure><hr><h2 id="QMap"><a href="#QMap" class="headerlink" title="QMap"></a>QMap</h2><p>QMap与QHash差别：</p><ul><li>QHash比QMap查找速度更快。</li><li>QHash以任意顺序存储，QMap以key顺序存储数据。</li><li>QHash的key必须提供operator==()及一个全局的qHash(key)函数，而QMap必须提供operator&lt;()函数。</li></ul><p>存储一键多值数据时可使用QMultiMap&lt; key,T&gt;容器或QMultiHash&lt; key, T&gt;容器</p><p><strong>默认从小到大排序。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201181103021.png" alt="image-20220118110333932"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">QMap&lt;QString,QString&gt;infoMap;</span><br><span class="line"> infoMap.insert(<span class="string">&quot;哈哈哈哈&quot;</span>,<span class="string">&quot;鸡汤来喽&quot;</span>);</span><br><span class="line"> infoMap.insert(<span class="string">&quot;芜湖&quot;</span>,<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line"> infoMap[<span class="string">&quot;哔哩哔哩&quot;</span>]=<span class="string">&quot;快乐的威猛先生&quot;</span>;</span><br><span class="line"> infoMap[<span class="string">&quot;CSDN&quot;</span>]=<span class="string">&quot;半生瓜のblog&quot;</span>;</span><br><span class="line"> <span class="comment">//通过key查找value</span></span><br><span class="line"> qDebug()&lt;&lt;infoMap[<span class="string">&quot;哔哩哔哩&quot;</span>];</span><br><span class="line"> <span class="comment">//通过value找key</span></span><br><span class="line"> qDebug()&lt;&lt;infoMap.key(<span class="string">&quot;快乐的威猛先生&quot;</span>);</span><br><span class="line"> <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line"> QMapIterator&lt;QString,QString&gt;it_r(infoMap);</span><br><span class="line"> <span class="keyword">for</span>(it_r.toFront();it_r.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     it_r.next();</span><br><span class="line">     qDebug()&lt;&lt;it_r.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_r.value();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格读写迭代器</span></span><br><span class="line"> QMutableMapIterator&lt;QString,QString&gt;it_rw(infoMap);</span><br><span class="line"> <span class="keyword">for</span>(it_rw.toFront();it_rw.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     it_rw.next();</span><br><span class="line">     <span class="keyword">if</span>(it_rw.key()==<span class="string">&quot;哔哩哔哩&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         it_rw.setValue(<span class="string">&quot;关注快乐的威猛先生&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//STL风格只读迭代器</span></span><br><span class="line"> QMap&lt;QString,QString&gt;::const_iterator i_r;</span><br><span class="line"> i_r = infoMap.constBegin();</span><br><span class="line"> <span class="keyword">for</span>(;i_r != infoMap.constEnd();i_r++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;i_r.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;i_r.value();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//STL风格读写迭代器</span></span><br><span class="line"> QMap&lt;QString,QString&gt;::iterator i_rw;</span><br><span class="line"> <span class="keyword">for</span>(i_rw = infoMap.begin();i_rw != infoMap.end();i_rw++)</span><br><span class="line"> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i_rw.key() == <span class="string">&quot;哔哩哔哩&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i_rw.value() = <span class="string">&quot;快关注威猛先生&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> i_rw = infoMap.find(<span class="string">&quot;哔哩哔哩&quot;</span>);</span><br><span class="line"> i_rw.value() =<span class="string">&quot;bilibili&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(i_rw = infoMap.begin();i_rw != infoMap.end();i_rw++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;*i_rw;<span class="comment">//value</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//一个键对应多个值</span></span><br><span class="line"> QMultiMap&lt;QString,QString&gt;wMap1;<span class="comment">//一个key对应多个value</span></span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring1&quot;</span>,<span class="string">&quot;5°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;15°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;16°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;17°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring3&quot;</span>,<span class="string">&quot;25°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;35°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;36°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;37°C&quot;</span>);</span><br><span class="line"> <span class="comment">//指定元素删除</span></span><br><span class="line"> wMap1.remove(<span class="string">&quot;spring1&quot;</span>,<span class="string">&quot;5°C&quot;</span>);</span><br><span class="line"> <span class="comment">//查询指定value</span></span><br><span class="line"> wMap1.values(<span class="string">&quot;spring2&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//JAVA风格只读迭代</span></span><br><span class="line"> QMapIterator&lt;QString,QString&gt;it_r1(wMap1);</span><br><span class="line"> <span class="keyword">for</span>(it_r1.toFront();it_r1.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;it_r1.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_r1.next().value(); <span class="comment">//这个迭代器看起来比较变扭，先拿key,然后通过下一个迭代点拿value</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> qDebug()&lt;&lt;wMap1;</span><br></pre></td></tr></table></figure><hr><h2 id="QHash"><a href="#QHash" class="headerlink" title="QHash"></a>QHash</h2><p><strong>无序。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QHash类</span></span><br><span class="line">  QHash&lt;<span class="keyword">int</span>,QString&gt;moneyHash;</span><br><span class="line">  moneyHash.insert(<span class="number">1</span>,<span class="string">&quot;一块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">10</span>,<span class="string">&quot;十块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">20</span>,<span class="string">&quot;二十块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">50</span>,<span class="string">&quot;五十块钱&quot;</span>);</span><br><span class="line">  moneyHash[<span class="number">50</span>]  = <span class="string">&quot;50&quot;</span>;</span><br><span class="line">  moneyHash.insertMulti(<span class="number">50</span>,<span class="string">&quot;50块钱&quot;</span>);<span class="comment">//插入多个value</span></span><br><span class="line">  qDebug()&lt;&lt;moneyHash;</span><br><span class="line">  <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line">  QHashIterator&lt;<span class="keyword">int</span>,QString&gt;it_mr(moneyHash);</span><br><span class="line">  <span class="keyword">for</span>(it_mr.toFront();it_mr.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_mr.key()&lt;&lt;it_mr.next().value();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//JAVA风格读写迭代器</span></span><br><span class="line">  QMutableHashIterator&lt;<span class="keyword">int</span>,QString&gt;it_mrw(moneyHash);</span><br><span class="line">  <span class="comment">//修改数据</span></span><br><span class="line">  <span class="keyword">if</span>(  it_mrw.findNext(<span class="string">&quot;十块钱&quot;</span>))</span><br><span class="line">  &#123;</span><br><span class="line">      it_mrw.setValue(<span class="string">&quot;10元&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(it_mrw.toFront();it_mrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_mrw.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_mrw.next().value();</span><br><span class="line">  &#125;</span><br><span class="line">  qDebug()&lt;&lt;moneyHash;</span><br></pre></td></tr></table></figure><hr><h2 id="QVariant类"><a href="#QVariant类" class="headerlink" title="QVariant类"></a>QVariant类</h2><p>QVariant类能保存很多Qt类型的值，包括QColor,QBrush,QFont,QRect,QString及QSize等等，而且能存放Qt的容器类型值。</p><p>可采用toT()将QVariant对象转换为T类型数据并获取其值。如toInt()，toFloat(),toString(),可用type方法获取数据类型。对于GUI模块中定义的数据类型没有相应的转换函数，即没有toColor(),没有toImage()这样的函数提供，可通过value()方法实现转换，判断两种类型是否可以转换可通过用type方法获取数据类型，判断方法的返回值判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QVariant <span class="title">vNum</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vNum.toInt();</span><br><span class="line"><span class="function">QVariant <span class="title">vPi</span><span class="params">(<span class="number">3.1415f</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt; vPi.toFloat();</span><br><span class="line"><span class="function">QVariant <span class="title">vStr</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vStr.toString();</span><br><span class="line"><span class="function">QVariant <span class="title">vb</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vb.toBool();</span><br><span class="line"></span><br><span class="line">QColor c = QColor(Qt::red);</span><br><span class="line">QVariant VC = c;</span><br><span class="line">qDebug()&lt;&lt;VC.type();</span><br><span class="line">qDebug()&lt;&lt;VC.value&lt;QColor&gt;();</span><br><span class="line"></span><br><span class="line">QVariant vss = vStr;</span><br><span class="line">qDebug()&lt;&lt;vss.canConvert(QVariant::Int);<span class="comment">//返回数据类型转换能力，QVariant的转换能力</span></span><br><span class="line">qDebug()&lt;&lt;vss.convert(QVariant::Int);<span class="comment">//false,转换失败，数据清空</span></span><br><span class="line"><span class="comment">//转换成功的条件:有转换能力，且数据类型匹配。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT容器&quot;&gt;&lt;a href=&quot;#QT容器&quot; class=&quot;headerlink&quot; title=&quot;QT容器&quot;&gt;&lt;/a&gt;QT容器&lt;/h1&gt;&lt;h2 id=&quot;QString类&quot;&gt;&lt;a href=&quot;#QString类&quot; class=&quot;headerlink&quot; title=&quot;Q</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT布局管理器</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2022-01-16T13:57:29.000Z</published>
    <updated>2022-01-24T08:55:33.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h1><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201162157302.png" alt="image-20220116123759846"></p><p><strong>设计模式实现布局</strong></p><p>详情见工具栏</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161308818.png" alt="image-20220116130800777"></p><p>垂直布局，水平布局，打破布局。</p><p><strong>代码实现布局</strong></p><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testlayout.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFormLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QRadioButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QSpacerItem&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    TestLayout w;</span><br><span class="line">   <span class="comment">//添加部件并且布局</span></span><br><span class="line">    <span class="comment">//添加标签</span></span><br><span class="line">    QLabel* nameLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;姓名:(&amp;N)&quot;</span>);</span><br><span class="line">    QLabel* ageLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;年龄:(&amp;A)&quot;</span>);</span><br><span class="line">    QLabel* emailLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;邮箱:(&amp;E)&quot;</span>);</span><br><span class="line">    QLabel* doorLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;门牌号码:&quot;</span>);</span><br><span class="line">     <span class="comment">// 添加文本框</span></span><br><span class="line">     QLineEdit* nameLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* ageLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* emailLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* doorNumLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置伙伴关系——绑定快捷键</span></span><br><span class="line">    nameLabel-&gt;setBuddy(nameLineEdit);</span><br><span class="line">    ageLabel-&gt;setBuddy(ageLineEdit);</span><br><span class="line">    emailLabel-&gt;setBuddy(emailLineEdit);</span><br><span class="line">    <span class="comment">//添加布局</span></span><br><span class="line">    <span class="comment">//QFormLayout常用语表单布局</span></span><br><span class="line">    QFormLayout* headerLayout = <span class="keyword">new</span> QFormLayout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将部件添加到布局管理器中</span></span><br><span class="line">     headerLayout-&gt;addRow(nameLabel,nameLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(ageLabel,ageLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(emailLabel,emailLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(doorLabel,doorNumLineEdit);</span><br><span class="line">     <span class="comment">//性别标签</span></span><br><span class="line">     QLabel* sexLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;性别:&quot;</span>);</span><br><span class="line">     <span class="comment">//添加单选按钮</span></span><br><span class="line">    QRadioButton* mBtn = <span class="keyword">new</span> QRadioButton;</span><br><span class="line">    QRadioButton* wBtn = <span class="keyword">new</span> QRadioButton;</span><br><span class="line">    mBtn-&gt;setText(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    wBtn-&gt;setText(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    <span class="comment">//添加水平布局管理器</span></span><br><span class="line">    QHBoxLayout* sexLayout = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    sexLayout-&gt;addWidget(sexLabel);</span><br><span class="line">    sexLayout-&gt;addWidget(mBtn);</span><br><span class="line">    sexLayout-&gt;addWidget(wBtn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加垂直布局管理器</span></span><br><span class="line">    <span class="comment">//将两个布局管理器添加到一起</span></span><br><span class="line">    QVBoxLayout* mainLayout = <span class="keyword">new</span> QVBoxLayout(&amp;w);<span class="comment">//参数-指定父窗体</span></span><br><span class="line">    mainLayout-&gt;addLayout(headerLayout);<span class="comment">//添加布局</span></span><br><span class="line">    mainLayout-&gt;addLayout(sexLayout);</span><br><span class="line">    <span class="comment">//在性别选项下添加空白</span></span><br><span class="line">    QSpacerItem* spacer = <span class="keyword">new</span> QSpacerItem(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    mainLayout-&gt;addItem(spacer);<span class="comment">//添加空隙对象</span></span><br><span class="line">    <span class="comment">//添加一个按钮</span></span><br><span class="line">    QPushButton* okBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">    <span class="comment">//将按钮添加到布局管理器中</span></span><br><span class="line">    mainLayout-&gt;addWidget(okBtn);<span class="comment">//添加部件</span></span><br><span class="line">    mainLayout-&gt;setMargin(<span class="number">10</span>);<span class="comment">//与窗口的间隙</span></span><br><span class="line">    mainLayout-&gt;setSpacing(<span class="number">20</span>);<span class="comment">//设置控件间的间隙</span></span><br><span class="line">    <span class="comment">//设置窗口布局管理器</span></span><br><span class="line">    w.setLayout(mainLayout);</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201162157284.png" alt="image-20220116215432704"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;布局管理器&quot;&gt;&lt;a href=&quot;#布局管理器&quot; class=&quot;headerlink&quot; title=&quot;布局管理器&quot;&gt;&lt;/a&gt;布局管理器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/blogimg/raw/master/202</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT窗口部件</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/</id>
    <published>2022-01-16T04:26:40.000Z</published>
    <updated>2022-01-16T04:28:59.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT窗口部件"><a href="#QT窗口部件" class="headerlink" title="QT窗口部件"></a>QT窗口部件</h1><h2 id="默认部件基类"><a href="#默认部件基类" class="headerlink" title="默认部件基类"></a>默认部件基类</h2><p>QT提供的默认部件基类包括QMainWindow、QWidget、和QDialog，这三个部件基类也是用的最多的。</p><p>QMainWindow是带有菜单栏、工具栏、状态栏的主窗口类，它有自己单独的布局。布局有一个中心区域，通常是标准的QT部件，也可以是定制的部件，且必须有一个中心小部件。setCentralWidget()方法可设置中心部件。</p><p>QWidget类是所有部件对象的基类，被称为基础窗口部件。</p><p>QWidget提供自我绘制和处理用户输入等基本功能，如接收鼠标、键盘和其他事件，并且在屏幕上绘制自己的表现。每一个窗口部件都是矩形的，并且它们是按照**Z轴(由屏幕里到屏幕外)**顺序排列的。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。一个没有父窗口部件的窗口部件一直是顶级窗口部件。非顶级窗口部件时父窗口的子部件。</p><p>QWidget构造函数有两个参数:QWidget*parent = 0,QT:WindowFlages f = 0。</p><p>parent即父窗口，默认为0，即没有父窗口，是顶级窗口，如果指定parent值，则当前窗体将会是一个子部件。QT:WindowFlags是QT:WindowType，枚举值的组合，用来设置窗口的属性，f=0表示默认为QT:Widget风格，setWindowState()可设置窗体的状态，参数由QT:WindowStates枚举值指定。</p><p><strong>QWidget类关系表</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161228351.png" alt="image-20220115102847426"></p><p><strong>窗体状态</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201151029912.png" alt="image-20220115102920884"></p><p><strong>模态</strong></p><p>窗口间的阻塞情况，是否必须先关闭某一窗口之后，才能对另一个窗口进行操作。</p><p>被设置为模态窗口的窗口关闭之后才能对其他窗口进行操作。</p><hr><p>QDialog是各种对话框的基类，其继承自QWidget，对话框有两种表现形态:形态对话框、非模态对话框。模态对话框就是一个阻塞同一应用程序中其它可视窗口的输入对话框。用户必须完成当前对话框中的交互操作并且关闭窗口后才能操作当前音乐程序中的其它窗口。模式对话框有它们自己的本地事件循环。exec()方法可使窗口以模态方式运行。当用户关闭这个对话框，exec()将提供一个可用的返回值并且这时流程控制继续从调用exec()的地方进行。</p><p>通常，我们链接默认按钮，例如”OK”到accpet()槽并且把”Cancel”链接到reject()槽，来使对话框关闭并且返回适当的值。另外，我们也可以连接done()槽，传递给它Accepted或Rejected。</p><p><strong>模态窗口运行</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）调用exec()方法，如</span><br><span class="line">QDialog dlg;</span><br><span class="line">dlg.exec();</span><br><span class="line">（<span class="number">2</span>）调用setModal()方法设置模态，如</span><br><span class="line">QDialog dlg;</span><br><span class="line">dlg.setModal(<span class="literal">true</span>);</span><br><span class="line">dlg.show();</span><br><span class="line">（<span class="number">3</span>）QWidget widget;</span><br><span class="line">widget.setWindowModality(Qt::ApplicationModal);</span><br><span class="line">widget.show();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161228218.png" alt="image-20220115175915707"></p><hr><h2 id="其他部件"><a href="#其他部件" class="headerlink" title="其他部件"></a>其他部件</h2><p><strong>QLabel</strong></p><p>常用来显示文本、文字、图片、gif动图。</p><p>可与其他部件设置伙伴关系，此时标签起到快捷键作用。</p><p><strong>QLineEdit</strong></p><p>接收用户输入。</p><p>可以增加限制条件，例如只能让用户输入什么。</p><p>掩码字符</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161136600.png" alt="image-20220116113648534"></p><p><strong>QPushButton</strong></p><p>按钮类，常用显示文字图标。</p><p><strong>QRadioButton</strong></p><p>单选按钮类，只能选一个，将单选框按钮加入一个分组框中时，加入的按钮是一个分组，分组中只能选中一个，具有排他性。</p><p><strong>QCheckBox</strong></p><p>多选按钮类，可多选。</p><p>略….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT窗口部件&quot;&gt;&lt;a href=&quot;#QT窗口部件&quot; class=&quot;headerlink&quot; title=&quot;QT窗口部件&quot;&gt;&lt;/a&gt;QT窗口部件&lt;/h1&gt;&lt;h2 id=&quot;默认部件基类&quot;&gt;&lt;a href=&quot;#默认部件基类&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT对象树</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%AF%B9%E8%B1%A1%E6%A0%91/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%AF%B9%E8%B1%A1%E6%A0%91/</id>
    <published>2022-01-13T14:09:50.000Z</published>
    <updated>2022-01-13T14:10:59.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT对象树"><a href="#QT对象树" class="headerlink" title="QT对象树"></a>QT对象树</h1><p>QT提供了对象树机制，能够<strong>自动</strong>、有效的组织和管理继承自QObject的对象。</p><p>每个继承自QObject类的对象通过它的对象链表(QObjectList)来管理子类对象，当用户创建一个子对象时，其对象链表相应更新子类对象的信息，对象链表可通过children()获取。</p><p>当父类对象析构的时候，其对象链表中的所有(子类)对象也会被析构，父对象会自动，将其从父对象列表中删除，QT保证没有对象会被delete两次。开发中手动回收资源时建议使用deleteLater代替delete,因为deleteLater多次是安全的。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201131239311.png" alt="image-20220113123903219"></p><hr><p>派生于QObject的类，申请资源的时候，我们可以不用过分的去关注资源回收情况，因为当该基类销毁回收时，子类也会一起销毁回收。</p><hr><p><strong>当某一个子类进行销毁的时候，如果它也有子类，对应的子类也会销毁回收。</strong></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201132152345.png" alt="image-20220113215247296"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201132153248.png" alt="image-20220113215301204"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT对象树&quot;&gt;&lt;a href=&quot;#QT对象树&quot; class=&quot;headerlink&quot; title=&quot;QT对象树&quot;&gt;&lt;/a&gt;QT对象树&lt;/h1&gt;&lt;p&gt;QT提供了对象树机制，能够&lt;strong&gt;自动&lt;/strong&gt;、有效的组织和管理继承自QObject的对象。&lt;/p</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT元对象系统</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%85%83%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%85%83%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-01-13T03:24:58.000Z</published>
    <updated>2022-01-13T03:46:16.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT元对象系统-Meta-Object-System"><a href="#QT元对象系统-Meta-Object-System" class="headerlink" title="QT元对象系统(Meta-Object-System)"></a>QT元对象系统(Meta-Object-System)</h1><h2 id="元对象系统"><a href="#元对象系统" class="headerlink" title="元对象系统"></a>元对象系统</h2><p>元对象系统是一个基于标准C++的扩展，为QT提供了信号与槽机制、实时类型信息、动态属性系统。</p><p>元对象系统的三个基本条件:类必须继承自QObject、类声明Q_OBJECT宏(默认私有)、元对象编译器moc。</p><p><strong>信号与槽机制是QT的核心机制</strong>，信号与槽是一种高级接口，应用于对象之间的通信。信号和槽是QT自行定义的一种通信机制，它独立于标准的C/C++语言，要正确的处理信号和槽，必须借助一个称为moc(Meta-Object-Compiler)，也就是”元对象编译器”。</p><p>它为高层次的事件处理自动生成所需要的必要代码。QT程序在交由标准编译器编译之前，先要使用moc分析C++源文件。如果moc发现在一个类头文件中包含了函Q_OBJECT，则会生成以moc_className.cpp(自定义类名)的.cpp文件。这个源文件中包含了Q_OBJECT宏的实现代码。新的文件同样将进入编译系统，与源文件一起参与编译。构建生成的.o文件包含与moc生成的.cpp文件中。</p><hr><h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><p><strong>产生的历史背景</strong>:</p><p>GUI用户界面中，当用户操作一个窗口部件时，需要其他窗口部件响应，传统方式经常使用callback(回调机制)来实现。所谓回调即事先将函数指针作为一个参数传递给另一个函数，然后在函数处理过程中适当地方调用函数。</p><p>回调机制有两个缺陷:类型不安全，不能保证调用过程中使用正确的参数,强耦合，处理函数必须知道调用哪个回调函数。</p><p><strong>QT的信号与槽机制:</strong></p><p>QT的信号与槽机制是类型安全的，<strong>松耦合</strong>，更灵活，更方便。</p><p>信号与槽(Signal &amp; Slot)是QT编程的基础，也是QT的一大创新。因为有了信号与槽机制的编程，在QT中处理界面的各个组件的交互操作时变得更加直观个简单。</p><p>**信号(Signal)**就是在特定情况下被发射的事件，例如PushButton最常见的信号就是鼠标单击时发射的clicked()信号。发生信号使用QT的emit关键字。QT的signals关键字指出进入了信号的声明区，随后即可声明自己的信号。</p><p>**槽(Slot)**就是对信号响应的函数。槽就是一个函数，与一般的C++函数是一样的,可以声明在类的任何部分(public、private or protected)，可以具有任何参数，也可以被直接调用。</p><p>槽函数与一般的函数不同的是:槽函数可以与一个信号关联(connect)，当信号被发射时， 关联的槽函数被自动执行。</p><p><strong>信号与槽链接方式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201121318703.png" alt="image-20220112131738342"></p><h3 id="信号与槽链接-一对一"><a href="#信号与槽链接-一对一" class="headerlink" title="信号与槽链接( 一对一)"></a>信号与槽链接( 一对一)</h3><p><strong>mainwindow.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义信号</span></span><br><span class="line">    <span class="comment">//信号的声明</span></span><br><span class="line">    <span class="comment">//信号不用实现也不能实现</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Comeon</span><span class="params">(QString&amp; str)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//同样可以手动添加槽方法-或者在设计模式中添加槽方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_WorldBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_CNBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_BJBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startSend</span><span class="params">(QString&amp; str)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>mainwindow.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;qdebug.h&gt;</span></span></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//链接信号与槽</span></span><br><span class="line">    <span class="comment">//默认是自动关联</span></span><br><span class="line">    <span class="comment">//将信号和处理这个信号的槽方法相连接起来，connect只负责将它们两个链接在一起</span></span><br><span class="line">    <span class="comment">//至于谁发的，就无所谓了。</span></span><br><span class="line">    connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br><span class="line"> <span class="comment">//或者 //connect(this,&amp;MainWindow::Comeon,this,&amp;MainWindow::startSend);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_WorldBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//发射信号</span></span><br><span class="line">    QString str = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_CNBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="string">&quot;Hello China!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_BJBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="string">&quot;Hello BeiJing!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::startSend</span><span class="params">(QString &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打印调试信息</span></span><br><span class="line">     qDebug()&lt;&lt;str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="信号与槽链接-一对多"><a href="#信号与槽链接-一对多" class="headerlink" title="信号与槽链接(一对多)"></a>信号与槽链接(一对多)</h3><p>一个信号对应多个槽方法。可以多个槽响应一个信号。</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCN()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br></pre></td></tr></table></figure><p><strong>注意:<strong>一般情况下多个槽方法的参数个数保持一致，</strong>但是，</strong>有的时候，可以不使用信号传过来的这个参数，所以槽方法的参数个数可以比信号传递的参数个数少，但是，不能比信号传递过来的参数数量多。</p><p> <strong>错误示范:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCN(QString&amp;,<span class="keyword">int</span>)));</span><br></pre></td></tr></table></figure><p><strong>链接失败。</strong></p><hr><h3 id="信号与槽链接-多对一"><a href="#信号与槽链接-多对一" class="headerlink" title="信号与槽链接(多对一)"></a>信号与槽链接(多对一)</h3><p> 多个信号链接一个槽方法。进一步反应了信号与槽机制的灵活性。</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon2()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon3()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon4()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br></pre></td></tr></table></figure><p>参数设置见上《信号与槽链接(一对多)》。</p><hr><h3 id="信号与信号-一对一"><a href="#信号与信号-一对一" class="headerlink" title="信号与信号(一对一)"></a>信号与信号(一对一)</h3><p>当一个信号发射时，发射另一个信号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon4()),<span class="keyword">this</span>,SIGNAL(Comeon3())); </span><br></pre></td></tr></table></figure><hr><h3 id="断开信号与槽链接"><a href="#断开信号与槽链接" class="headerlink" title="断开信号与槽链接"></a>断开信号与槽链接</h3><p><strong>断开一个信号和一个与它相链接的槽方法。</strong></p><p>disconnect,参数同connect</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disconnect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br></pre></td></tr></table></figure><p><strong>断开所有与该信号相连接的槽方法。</strong></p><p>与上面不同的是，后两个参数置为0，所有的对象，和所有的槽方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disconnect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="number">0</span>,<span class="number">0</span>),;</span><br></pre></td></tr></table></figure><hr><p><strong>断开指定对象的所有信号与的指定对象的所有槽方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qDebug()&lt;&lt;<span class="string">&quot;断开this所有信号与this的所有槽方法的链接&quot;</span>;</span><br><span class="line">disconnect(<span class="keyword">this</span>,<span class="number">0</span>,<span class="keyword">this</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">disconnect(<span class="keyword">this</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//断开this所有相关的对象的槽方法的链接</span></span><br></pre></td></tr></table></figure><hr><p><strong>也可以通过connect函数的返回值来断开某个链接。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取返回值</span></span><br><span class="line">......</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">QMetaObject::Connection m_res;<span class="comment">//返回值类型</span></span><br><span class="line">......</span><br><span class="line">       m_res = connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));<span class="comment">//获取返回值</span></span><br><span class="line">......</span><br><span class="line">    disconnect(m_res);<span class="comment">//断开链接</span></span><br></pre></td></tr></table></figure><hr><p><strong>总结-信号与槽机制的优越性:</strong></p><ol><li>信号与槽机制是类型安全的，相关联的信号与槽参数必需匹配(详细解释在上，相关联的槽方法的参数只能少不能多)</li><li>信号与槽是松耦合的，信号发送者不知道也不需要知道接受者的信息。</li><li>信号与槽可以使用任意类型的任意数量的参数。、</li></ol><hr><h2 id="动态属性系统"><a href="#动态属性系统" class="headerlink" title="动态属性系统"></a>动态属性系统</h2><p>在标准C++中，为了保证封装性，我们经常声明一个私有变量，然后声明两个共有函数例如set,get来对这个变量进行操作。</p><p>同理，在QT中我们可以使用宏**Q_PROPERTY()**来实现这些，函数可以使用QObject::property()和QObject::setProperty()。</p><p>在使用的时候，我们不用知道变量的所在类的任何细节，只需要知道名字即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Q_PROPERTY(type name</span><br><span class="line">             (READ getFunction [WRITE setFunction] |</span><br><span class="line">              MEMBER memberName [(READ getFunction | WRITE setFunction)])</span><br><span class="line">             [RESET resetFunction]</span><br><span class="line">             [NOTIFY notifySignal]</span><br><span class="line">             [REVISION <span class="keyword">int</span>]</span><br><span class="line">             [DESIGNABLE <span class="keyword">bool</span>]</span><br><span class="line">             [SCRIPTABLE <span class="keyword">bool</span>]</span><br><span class="line">             [STORED <span class="keyword">bool</span>]</span><br><span class="line">             [USER <span class="keyword">bool</span>]</span><br><span class="line">             [CONSTANT]</span><br><span class="line">             [FINAL])</span><br></pre></td></tr></table></figure><p>  <strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    Q_PROPERTY(QString mask READ mask WRITE setMask NOTIFY maskChanged)</span><br><span class="line">......</span><br><span class="line">    QObject* obj  = myPc;</span><br><span class="line">    qDebug()&lt;&lt;obj-&gt;property(<span class="string">&quot;mask&quot;</span>).toString();</span><br><span class="line">    qDebug()&lt;&lt;obj-&gt;property(<span class="string">&quot;mask&quot;</span>).toString();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT元对象系统-Meta-Object-System&quot;&gt;&lt;a href=&quot;#QT元对象系统-Meta-Object-System&quot; class=&quot;headerlink&quot; title=&quot;QT元对象系统(Meta-Object-System)&quot;&gt;&lt;/a&gt;QT元对象系统</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】自定义软件打包发布</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/11/%E3%80%90QT%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/11/%E3%80%90QT%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</id>
    <published>2022-01-11T10:29:34.000Z</published>
    <updated>2022-01-11T10:30:47.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义软件打包发布"><a href="#自定义软件打包发布" class="headerlink" title="自定义软件打包发布"></a>自定义软件打包发布</h1><ul><li>安装nisi和nisedit。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830396.png" alt="image-20220111172214216"></p><ul><li>打开nisedit。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111726717.png"></p><ul><li>点击——文件——新建脚本：向导。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111729295.png" alt="image-20220111172905248"></p><ul><li>设置名称等信息，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830469.png"></p><ul><li>选择安装图标——设置安装语言，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111731748.png"></p><ul><li>选择授权文件(License.txt,里面的内容自定义。)点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830536.png" alt="image-20220111173423517"></p><ul><li>选择你的程序相关文件，删掉默认的两个。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830195.png" alt="image-20220111173708350"></p><ul><li>点击添加文件，注意其中部分文件的路径。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830512.png" alt="image-20220111173816372"></p><ul><li>其中要注意的路径，就是带有文件夹的，如下图所示。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830658.png" alt="image-20220111174520365"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830635.png" alt="image-20220111174539381"></p><ul><li>添加完成，选中.exe文件，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111747350.png" alt="image-20220111174756306"></p><ul><li>默认，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111746544.png" alt="image-20220111174654495"></p><ul><li>选择自述文件，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830098.png" alt="image-20220111174809257"></p><ul><li>设置相关文字消息提示，以及图标。点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111803351.png" alt="image-20220111180304300"></p><ul><li>将三个选项都勾上，点击完成。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830698.png" alt="image-20220111180406001"></p><ul><li>保存文件，打包完成。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830687.png" alt="image-20220111180457048"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830547.png" alt="image-20220111180522390"></p><hr><h1 id="补充-windeployqt补全相关库"><a href="#补充-windeployqt补全相关库" class="headerlink" title="补充:windeployqt补全相关库"></a>补充:windeployqt补全相关库</h1><p>有可能补的不全，需要手动补充。</p><p>windeployqt ExamSys.exe</p><p>找不到命令添加环境变量。D:\QT5.9.6\5.9.6\mingw53_32\bin</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111811360.png" alt="image-20220111181158287"></p><p>完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义软件打包发布&quot;&gt;&lt;a href=&quot;#自定义软件打包发布&quot; class=&quot;headerlink&quot; title=&quot;自定义软件打包发布&quot;&gt;&lt;/a&gt;自定义软件打包发布&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装nisi和nisedit。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【MFC】MFC文件操作和注册表操作</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/09/%E3%80%90MFC%E3%80%91MFC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/09/%E3%80%90MFC%E3%80%91MFC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-09T04:58:44.000Z</published>
    <updated>2022-01-09T05:24:49.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MFC文件和注册表的操作"><a href="#MFC文件和注册表的操作" class="headerlink" title="MFC文件和注册表的操作"></a>MFC文件和注册表的操作</h1><p>日志、操作配置文件、ini文件、注册表、音视频的文件存储。</p><p>Linux下一切皆文件。</p><h2 id="C-C-文件操作"><a href="#C-C-文件操作" class="headerlink" title="C/C++文件操作"></a>C/C++文件操作</h2><h3 id="常量指针和指针常量"><a href="#常量指针和指针常量" class="headerlink" title="常量指针和指针常量"></a>常量指针和指针常量</h3><p>const char*  p == char const *p 常量指针，表示指向的内容为常量，指针的指向可以修改，指针指向的内容不能修改。</p><p>char* const p  指针常量，表示地址是常量，指向不能改变，指向的内容可以改变。 </p><h3 id="C语言文件操作"><a href="#C语言文件操作" class="headerlink" title="C语言文件操作"></a>C语言文件操作</h3><p><strong>文件打开的模式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201091305850.png" alt="image-20220108164525100"></p><p><strong>示例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">errno_t</span> err = _wfopen_s(&amp;pFile,_T(<span class="string">&quot;1.txt&quot;</span>),_T(<span class="string">&quot;w&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;Open Fail ErrorCode = %d&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(_T(<span class="string">&quot;ohguradianbyebye&quot;</span>), <span class="number">2</span>, wcslen(_T(<span class="string">&quot;ohguradianbyebye&quot;</span>))+<span class="number">1</span>, pFile); <span class="comment">//wcslen求宽字符串的长度</span></span><br><span class="line">fclose(pFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">errno_t</span> err = _wfopen_s(&amp;pFile, _T(<span class="string">&quot;1.txt&quot;</span>), _T(<span class="string">&quot;r&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;Open Fail ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(pFile, <span class="number">0</span>, SEEK_END);<span class="comment">//偏移到结尾位置</span></span><br><span class="line"><span class="keyword">int</span> len = ftell(pFile);<span class="comment">//得到文件指针的当前位置，也就是文件长度。</span></span><br><span class="line">WCHAR *pBuf=<span class="keyword">new</span> WCHAR[len+<span class="number">1</span>];</span><br><span class="line">fseek(pFile,<span class="number">0</span>,SEEK_SET);<span class="comment">//文件指针回到开头位置</span></span><br><span class="line">    <span class="comment">//等同于rewind(pFile);</span></span><br><span class="line">fread(pBuf,<span class="number">2</span>,len,pFile);<span class="comment">//这里是宽字节所以是2</span></span><br><span class="line">pBuf[len] = <span class="number">0</span>;<span class="comment">//确保数组最后一个元素为&#x27;\0&#x27;</span></span><br><span class="line">MessageBox(pBuf);</span><br><span class="line">fclose(pFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-文件操作"><a href="#C-文件操作" class="headerlink" title="C++文件操作"></a>C++文件操作</h3><p> <strong>ofstream类</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201081815893.png" alt="image-20220108181527795"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line">ofs.write(<span class="string">&quot;doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;droaemon&quot;</span>));</span><br><span class="line">ofs. close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">char</span> pBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">ifs.read(pBuf,<span class="number">100</span>);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Win32-API-MFC文件操作"><a href="#Win32-API-MFC文件操作" class="headerlink" title="Win32 API/MFC文件操作"></a>Win32 API/MFC文件操作</h2><h3 id="Win32-API文件操作"><a href="#Win32-API文件操作" class="headerlink" title="Win32 API文件操作"></a>Win32 API文件操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFileA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//创建或打开的对象的名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           LPCSTR                lpFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//访问方式,读、读写，写、查询</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//共享方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="comment">//NULL不能被子进程继承 </span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//如何创建文件</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                dwCreationDisposition,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//设置文件的属性和标志</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WriteFile(</span><br><span class="line">    _In_ HANDLE hFile,</span><br><span class="line">    _In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span><br><span class="line">    <span class="comment">//要写入的字节数</span></span><br><span class="line">    _In_ DWORD nNumberOfBytesToWrite,</span><br><span class="line">    <span class="comment">//用来接收实际写入到文件的字节数</span></span><br><span class="line">    _Out_opt_ LPDWORD lpNumberOfBytesWritten,</span><br><span class="line">    _Inout_opt_ LPOVERLAPPED lpOverlapped</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE  hFile;</span><br><span class="line">hFile = CreateFile(_T(<span class="string">&quot;3.txt&quot;</span>),GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_NEW,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;%d&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwwrites;</span><br><span class="line">WriteFile(hFile,<span class="string">&quot;Doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;Doraemon&quot;</span>),&amp;dwwrites,<span class="literal">NULL</span>);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hFile;</span><br><span class="line">hFile = CreateFile(_T(<span class="string">&quot;3.txt&quot;</span>),GENERIC_READ,<span class="number">0</span>,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">char</span> pBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwreads;</span><br><span class="line">ReadFile(hFile,pBuf,<span class="number">100</span>,&amp;dwreads,<span class="literal">NULL</span>);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MFC文件操作"><a href="#MFC文件操作" class="headerlink" title="MFC文件操作"></a>MFC文件操作</h3><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(<span class="string">L&quot;4.txt&quot;</span>,CFile::modeCreate | CFile::modeWrite)</span></span>;</span><br><span class="line">file.Write(<span class="string">&quot;doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;doraemon&quot;</span>));</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(<span class="string">L&quot;4.txt&quot;</span>,CFile::modeRead)</span></span>;</span><br><span class="line"><span class="keyword">char</span>* pBuf;</span><br><span class="line">DWORD dwFileLen = file.GetLength();</span><br><span class="line">pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[dwFileLen + <span class="number">1</span>];</span><br><span class="line">pBuf[dwFileLen] = <span class="number">0</span>;</span><br><span class="line">file.Read(pBuf, dwFileLen);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CFileDialog(</span><br><span class="line">    <span class="comment">//TRUE构建一个打开的对话框，FLASE构建一个保存对话框</span></span><br><span class="line">    BOOL bOpenFileDialog,</span><br><span class="line">    <span class="comment">//指定默认的文件扩展名</span></span><br><span class="line">    LPCTSTR lpszDefExt = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="comment">//初始化文件名NULL默认没有初始文件名</span></span><br><span class="line">    LPCTSTR lpszFileName = <span class="literal">NULL</span>,</span><br><span class="line">    DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,</span><br><span class="line">    <span class="comment">//用来指定一个或一组文件的过滤器</span></span><br><span class="line">    LPCTSTR lpszFilter = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="comment">//用来指定文件对话框的父窗口或拥有窗口</span></span><br><span class="line">    CWnd* pParentWnd = <span class="literal">NULL</span>,</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>,</span><br><span class="line">    BOOL bVistaStyle = TRUE);</span><br></pre></td></tr></table></figure><p><strong>例如:创建一个默认保存对话框</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(FALSE)</span></span>;</span><br><span class="line">fileDlg.DoModal();</span><br></pre></td></tr></table></figure><p><strong>文件夹方式保存读取文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(FALSE)</span></span>;</span><br><span class="line">fileDlg.m_ofn.lpstrTitle = <span class="string">L&quot;doraemon&quot;</span>;</span><br><span class="line">fileDlg.m_ofn.lpstrFilter = _T(<span class="string">&quot;Text Files(*.txt)\0*.txt\0All Files(*.*)\0*.*\0\0&quot;</span>);</span><br><span class="line">fileDlg.m_ofn.lpstrDefExt = <span class="string">L&quot;txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (fileDlg.DoModal() == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(fileDlg.GetFileName(), CFile::modeCreate | CFile::modeWrite)</span></span>;</span><br><span class="line">USES_CONVERSION;</span><br><span class="line"><span class="keyword">char</span>* szBuf = T2A(fileDlg.GetFileName());</span><br><span class="line">TRACE(<span class="string">&quot;fileDlg.GetFileName()= %s&quot;</span>, szBuf);</span><br><span class="line">file.Write(<span class="string">&quot;ZYXXX&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;ZYXXX&quot;</span>));</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(TRUE)</span></span>;</span><br><span class="line">fileDlg.m_ofn.lpstrTitle = <span class="string">L&quot;doraemon&quot;</span>;</span><br><span class="line">fileDlg.m_ofn.lpstrFilter = _T(<span class="string">&quot;Text Files(*.txt)\0*.txt\0All Files(*.*)\0*.*\0\0&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fileDlg.DoModal() == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(fileDlg.GetFileName(), CFile::modeRead)</span></span>;</span><br><span class="line"><span class="keyword">char</span>* pBuf;</span><br><span class="line">DWORD dwFileLen = file.GetLength();</span><br><span class="line">pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[dwFileLen + <span class="number">1</span>];</span><br><span class="line">pBuf[dwFileLen] = <span class="number">0</span>;</span><br><span class="line">file.Read(pBuf, dwFileLen);</span><br><span class="line">file.Close();</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf );</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201091305759.png" alt="image-20220109101517226"></p><h2 id="配置文件的访问与读写"><a href="#配置文件的访问与读写" class="headerlink" title="配置文件的访问与读写"></a>配置文件的访问与读写</h2><p> <strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnWirteConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取当前路径</span></span><br><span class="line">WCHAR strPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectoryW(MAX_PATH,strPath);</span><br><span class="line">CString strFilePath;</span><br><span class="line">strFilePath.Format(<span class="string">L&quot;%ls//Test.ini&quot;</span>,strPath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;metadata&quot;</span>,<span class="string">L&quot;title&quot;</span>,<span class="string">L&quot;搜狗双拼&quot;</span>,strFilePath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;ch&quot;</span>,<span class="string">L&quot;I&quot;</span>,strFilePath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;sh&quot;</span>,<span class="string">L&quot;U&quot;</span>,strFilePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnReadConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WCHAR strPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strTitle[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strCh[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strSh[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectoryW(MAX_PATH, strPath);</span><br><span class="line">CString strFilePath;</span><br><span class="line">strFilePath.Format(<span class="string">L&quot;%ls//Test.ini&quot;</span>, strPath);</span><br><span class="line">DWORD dwNum1 = GetPrivateProfileStringW(<span class="string">L&quot;metadata&quot;</span>,<span class="string">L&quot;title&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">DWORD dwNum2 = GetPrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;ch&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">DWORD dwNum3 = GetPrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;sh&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line"><span class="keyword">char</span>* szTitle = W2A(strTitle);</span><br><span class="line"><span class="keyword">char</span>*  szSh = W2A(strSh);</span><br><span class="line"><span class="keyword">char</span>* szCh = W2A(strCh);</span><br><span class="line">TRACE(<span class="string">&quot;strTitle = %s . strCh = %s, strSh = %s&quot;</span>,szTitle,szCh,szSh);<span class="comment">//没读取出来-_-</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册表编程"><a href="#注册表编程" class="headerlink" title="注册表编程"></a>注册表编程</h2><p>注册表存储在二进制文件里面，win32 API提供了大量的函数操作注册表。</p><p><strong>创建注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RegCreateKeyW (</span><br><span class="line">    <span class="comment">//打开的当前项句柄,实际上就是那几个分支选项</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//打开或创建的表项的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//用来接收创建或者打开表项的句柄</span></span><br><span class="line">    _Out_ PHKEY phkResult</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>打开注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RegOpenKeyW (</span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    _Out_ PHKEY phkResult</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>写入注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RegSetValueW (</span><br><span class="line">   <span class="comment">//打开的当前项句柄,实际上就是那几个分支选项</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//打开或者创建的表项的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//指示被存储信息的类型REG_SZ类型</span></span><br><span class="line">    _In_ DWORD dwType,</span><br><span class="line">    <span class="comment">//要存放到注册表里面的数据</span></span><br><span class="line">    _In_reads_bytes_opt_(cbData) LPCWSTR lpData,</span><br><span class="line">    <span class="comment">//要存放的字符串数据的大小、长度</span></span><br><span class="line">    _In_ DWORD cbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>扩展——设置注册表项下指定值的数据和类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RegSetValueExW(</span><br><span class="line">    <span class="comment">//打开的当前项的句柄，</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//指向一个字符串的指针，包含了将要设置值的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpValueName,</span><br><span class="line">    <span class="comment">//保留参数 0 </span></span><br><span class="line">    _Reserved_ DWORD Reserved,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    _In_ DWORD dwType,</span><br><span class="line">    _In_reads_bytes_opt_(cbData) CONST BYTE* lpData,</span><br><span class="line">    _In_ DWORD cbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>从注册表中读取数据</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RegQueryValueW (</span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//读取的缓存</span></span><br><span class="line">    _Out_writes_bytes_to_opt_(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPWSTR lpData,</span><br><span class="line">    <span class="comment">//缓存大小</span></span><br><span class="line">    _Inout_opt_ PLONG lpcbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写注册表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnWriteReg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwAge = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//创建注册表项 </span></span><br><span class="line"><span class="keyword">int</span> ret = ::RegCreateKeyW(HKEY_LOCAL_MACHINE, <span class="string">L&quot;SOFTWARE\\Doraemon\\admin&quot;</span>, &amp;hKey);<span class="comment">//创建失败，以管理员方式运行。</span></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegCreateKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;创建注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写注册表</span></span><br><span class="line">ret = ::RegSetValueEx(hKey, <span class="string">L&quot;age&quot;</span>, <span class="number">0</span>, REG_DWORD, (CONST BYTE*) &amp; dwAge, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegCreateKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;写注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">::RegCloseKey(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读注册表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnReadReg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwAge;</span><br><span class="line"><span class="comment">//打开注册表项 </span></span><br><span class="line"><span class="keyword">int</span> ret = ::RegCreateKeyW(HKEY_LOCAL_MACHINE, <span class="string">L&quot;SOFTWARE\\Doraemon\\admin&quot;</span>, &amp;hKey);<span class="comment">//创建失败，以管理员方式运行。</span></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegOpenKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;打开注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读注册表</span></span><br><span class="line">DWORD dwType;</span><br><span class="line">DWORD dwValue;</span><br><span class="line"></span><br><span class="line">ret = ::RegQueryValueEx(hKey, <span class="string">L&quot;age&quot;</span>, <span class="number">0</span>, &amp;dwType, (LPBYTE) &amp; dwAge, &amp;dwValue);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegQueryValueEx Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;读注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TRACE(<span class="string">&quot;dwType = %d,dwValue = %d,dwAge = %d&quot;</span>,dwType,dwValue,dwAge);</span><br><span class="line">::RegCloseKey(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件操作的实际应用"><a href="#文件操作的实际应用" class="headerlink" title="文件操作的实际应用"></a>文件操作的实际应用</h2><ol><li>调试日志debugview,文件日志:警告日志、错误日志。</li><li>视频存储</li><li>文件传输CFile和socket结合使用</li><li>C语言和MFC的文件操作用途广泛，Win32 API、ifstream,ofstream用的少。</li><li>配置文件windows</li><li>注册表操作-病毒-逆向</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MFC文件和注册表的操作&quot;&gt;&lt;a href=&quot;#MFC文件和注册表的操作&quot; class=&quot;headerlink&quot; title=&quot;MFC文件和注册表的操作&quot;&gt;&lt;/a&gt;MFC文件和注册表的操作&lt;/h1&gt;&lt;p&gt;日志、操作配置文件、ini文件、注册表、音视频的文件存储。&lt;</summary>
      
    
    
    
    <category term="MFC" scheme="https://doraemon-hub-art.github.io/categories/MFC/"/>
    
    
    <category term="-MFC" scheme="https://doraemon-hub-art.github.io/tags/MFC/"/>
    
    <category term="-文件操作" scheme="https://doraemon-hub-art.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】动态链接库</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/08/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/08/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</id>
    <published>2022-01-08T03:05:05.000Z</published>
    <updated>2022-01-08T05:25:32.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h1><p>DLL就是整个windows操作系统的基础。动态链接库不能直接运行，也不能接收消息。他们就是一些独立的文件。</p><p>Windows API中的所有函数都包含在DLL中。</p><p><strong>其中三个最重要的DLL</strong></p><ul><li>Kernel32.dll——它包含用于管理内存、进程和线程的各个函数:CreateThread</li><li>User32.dll——它包含用于指定用户界面任务(如窗口的创建和消息的传送)的各个函数</li><li>GDI32.dll——它包含用于画图和显示文本的各个函数</li></ul><h2 id="静态库和动态库"><a href="#静态库和动态库" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h2><p><strong>静态库:</strong><br>函数和数据被编译进一个二进制文件(通常扩展名为.LIB)。在使用静态库的情况下，在编译链接可执行文件时，链接器从库中复制这些函数和数据并把它们和应用程序的其他模块组合起来创建最终的可执行文件(.EXE文件)。</p><p><strong>动态库:</strong><br>在使用动态库的时候，往往提供提供两个文件：一个引入库(静态库)(LIB)和一个DLL。引入库包含被DLL导出的函数和变量的符号名,DLL包含实际的函数和数据。<strong>在编译链接</strong>可执行文件时，<strong>只</strong>需要链接引入库，DLL中的函数代码和数据并不复制到可执行文件中，而是在运行时候，再去加载DLL，访问DLL中导出的函数。</p><p><strong>使用动态链接库的好处:</strong></p><ol><li>增强产品的功能(更换界面的DLL)</li><li>提供二次开发的平台(SDK基础版本)</li><li>简化项目管理(串行开发，以多个DLL的方式获取)</li><li>可以节省磁盘空间和内存</li><li>有助于资源的共享(对话框模块，字符串，图标)</li><li>有助于实现应用程序的本地化(多语言版本)</li><li>可以采用多种语言来编写</li></ol><h2 id="使用动态链接库"><a href="#使用动态链接库" class="headerlink" title="使用动态链接库"></a>使用动态链接库</h2><h3 id="创建DLL"><a href="#创建DLL" class="headerlink" title="创建DLL"></a>创建DLL</h3><p> <strong>dumpbin命令</strong></p><p>通过使用这个命令来知道库中导出的都是什么函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提供给用户用的函数</span></span><br><span class="line"><span class="comment">//应用程序如果要访问某个DLL中的函数，那么函数必须是被导出的函数。</span></span><br><span class="line"><span class="comment">//为了让DLL导出一些函数，需要在每个将要被导出的函数前面加上_declspec(dllexport)</span></span><br><span class="line">_declspec(dllexport)<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_declspec(dllexport)<span class="function"><span class="keyword">int</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201081325222.png" alt="image-20220107121301863"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201081325123.png"></p><p>名字改变===名字粉碎，区分不同的函数。</p><h3 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h3><p>lib文件直接复制到当前文件路径下，对应的dll文件也要复制过去。</p><p> 将静态库文件.lib添加到项目属性的链接器-输入-附加依赖项中。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201071301313.png" alt="image-20220107130111252"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDLLMFCTestDlg::OnBnClickedButton1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString str;</span><br><span class="line">str.Format(<span class="string">L&quot;4+3 = %d&quot;</span>,add(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">MessageBox(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDLLMFCTestDlg::OnBnClickedButton2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString str;</span><br><span class="line">str.Format(<span class="string">L&quot;4-3 = %d&quot;</span>,substract (<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">MessageBox(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用dumpbin -imports XXX.exe查看可执行文件导入了哪些DLL。</p><p>在.exe文件运行的时候，系统将为exe分配一个4GB的地址空间，然后加载模块会分析该应用程序的输入信息，从中找到该程序将要访问的动态链接库信息。然后在用户的机器上搜索这些动态链接库。</p><hr><p>_ declspec(dllexport)与_declspec(dllimport)</p><p>与使用extern关键字这种方式对比，使用_declspec(dllimport)的标识符，它将告诉编译器是从<strong>动态链接库</strong>引入的。</p><p>extern表示函数是外部的全局函数。</p><p>_declspec(dllexport)是在类、函数以及数据的声明的时候使用。把DLL里面的相关代码暴露出来给其他应用程序使用。<strong>提供给别的应用程序使用。</strong>表示提供者。供DLL内部使用。</p><p>_declspec(dllimport)是在外部程序需要使用DLL内相关内容时使用的标识符。<strong>是把DLL中的相关代码插入到应用程序中去。</strong>表示使用者。不是DLL内部使用。</p><p>通常情况下，DLL的实现者和使用者不是同一个人，DLL+头文件方式。</p><p>具体：略……</p><p>头文件建议使用条件指令编译。是使得程序的可读性增强，灵活性增强。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果定义了DLL1_API，则什么也不干，如果没听已，则</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DLL1_API </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL1_API _declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>   </span></span><br><span class="line"></span><br><span class="line"><span class="function">DLL1_API <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function">DLL1_API <span class="keyword">int</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><hr><h3 id="从DLL中导出C-类"><a href="#从DLL中导出C-类" class="headerlink" title="从DLL中导出C++类"></a>从DLL中导出C++类</h3><p>动态链接库导出整个类和仅导出该类的某些成员函数在实现方式的区别:如果在声明该类时，指定了导出标志，那么该类中所有的函数都被导出，否则只有那些声明时指定了导出标志的类成员才会被导出。</p><hr><h3 id="解决名字改编问题"><a href="#解决名字改编问题" class="headerlink" title="解决名字改编问题"></a>解决名字改编问题</h3><p>编译器在生成DLL时，会对函数名进行改编。</p><p>我们可以使用如下代码防止名字改编:<br>extern “C”</p><p>#define DLL_API extern “c” _declspec(dllexport)</p><p>这样编译器就不会做改变，一个用C语言编写的客户端程序可以调用C++编写的DLL，其缺点就是不能导出一个类的成员函数，只能用于导出全局函数这种情况。</p><p>_stdcall标准的调用约定 C/C++ MFC</p><p>Delphi 用pacal 是从左至右的压栈方式。</p><p>.def文件</p><p>LIBRARY DLLNAME</p><p>EXPORTS //即使调用_stdcall约定，也不会发生改编，而智慧调用这里显示的</p><p>add //字符串</p><p>substract</p><p>EXPORTS语句引入了一个由一个多个definitions(导出的函数或数据)组成的节。每个定义必须在单独一行上。EXPORTS关键字可以在第一个定义所在的同一行上或在前一行上。.def文件可以包含一个或多个EXPORTS语句。</p><p><strong>当DLL中导出函数采用的是标准调用约定时，访问该dll的客户端程序也应该采用该调用约定类型来访问相应的导出函数。</strong></p><h3 id="显式链接-动态方式加载DLL"><a href="#显式链接-动态方式加载DLL" class="headerlink" title="显式链接(动态方式加载DLL)"></a>显式链接(动态方式加载DLL)</h3><p>不需要lib文件。</p><p><strong>LoadLibrary</strong></p><p><strong>注意名字是否被改编，调用的是哪个函数。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDLLMFCTestDlg::OnBnClickedButton1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//动态加载DLL</span></span><br><span class="line">HINSTANCE hInst = LoadLibrary(<span class="string">L&quot;ZYXTDLL.dll&quot;</span>);</span><br><span class="line"><span class="comment">//声明要加载的函数</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*ADDPROC)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//从DLL获取函数地址，A通过导出函数的实际函数名</span></span><br><span class="line">ADDPROC Add = (ADDPROC)GetProcAddress(hInst,<span class="string">&quot;?add@@YAHHH@Z&quot;</span>); </span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    ADDPROC Add = (ADDPROC)GetProcAddress(hInst,MAKEINTRESOURCEA(<span class="number">1</span>)); </span><br><span class="line"><span class="keyword">if</span> (!Add)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="string">L&quot;获取函数地址失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CString str;</span><br><span class="line">str.Format(<span class="string">L&quot;4+3 = %d&quot;</span>,Add(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">MessageBox(str);</span><br><span class="line">FreeLibrary(hInst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为调用LoadLibrary时动态加载动态链接库，所以不需要头文件和.lib文件。</p><p>如果我们在动态链接库中使用标准调用约定_stdcall，而在可执行程序中使用动态加载DLL，会发生名字重编，如果知道DLL中函数的序号，这时可以使用宏MAKEINTRESOURCE把序号转变成名字。</p><h3 id="DLLMAIN函数"><a href="#DLLMAIN函数" class="headerlink" title="DLLMAIN函数"></a>DLLMAIN函数</h3><p>对可执行模块来说，入口函数是winmain。</p><p>对DLL文件来说，入口函数是DLLMAIN。</p><p>在编写DLL文件时，可以写DLLMAIN也可以不写。</p><p><strong>函数原型</strong></p><p>// 表示动态链接可以的模块句柄，当DLL初次被加载时，句柄可以通过这个参数传递进来。如果某些函数需要使用到当前DLL模块的句柄，那么就可以为该DLL提供DILLMAIN函数，然后通过参数，保存在一个全局变量中，以供其他函数使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HINSTANCE hinstDLL,  </span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD fdwReason,     <span class="comment">// reason for calling function</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpReserved )</span>  <span class="comment">// reserved</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Perform actions based on the reason for calling.</span></span><br><span class="line">    <span class="keyword">switch</span>( fdwReason ) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:<span class="comment">//当进程第一次加载DLL并调用DLLMAIN函数</span></span><br><span class="line">         <span class="comment">// Initialize once for each new process.</span></span><br><span class="line">         <span class="comment">// Return FALSE to fail DLL load.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:<span class="comment">//当前进程正在创建一个新线程</span></span><br><span class="line">         <span class="comment">// Do thread-specific initialization.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:<span class="comment">//线程结束</span></span><br><span class="line">         <span class="comment">// Do thread-specific cleanup.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:<span class="comment">//进程结束</span></span><br><span class="line">         <span class="comment">// Perform any necessary cleanup.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// Successful DLL_PROCESS_ATTACH.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态链接库&quot;&gt;&lt;a href=&quot;#动态链接库&quot; class=&quot;headerlink&quot; title=&quot;动态链接库&quot;&gt;&lt;/a&gt;动态链接库&lt;/h1&gt;&lt;p&gt;DLL就是整个windows操作系统的基础。动态链接库不能直接运行，也不能接收消息。他们就是一些独立的文件。&lt;/p&gt;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://doraemon-hub-art.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="-操作系统" scheme="https://doraemon-hub-art.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="-DLL" scheme="https://doraemon-hub-art.github.io/tags/DLL/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】进程间的通信</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/05/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/05/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</id>
    <published>2022-01-05T10:09:50.000Z</published>
    <updated>2022-01-05T10:14:04.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p><strong>程序</strong>是计算机<strong>指令的集合</strong>，它以文件的形式存储在磁盘上。</p><p><strong>进程</strong>通常上被定义为一个正在运行的程序的实例，是一个程序在其自身的地址空间中的一次执行活动，一个程序可以对应多个进程。</p><p>进程是资源申请，高度和独立运行的单位，因此，它使用系统中的运行资源，而程序不能申请使用系统资源，不能被系统高度也不能作为独立运行的单位，因此它不占系统运行资源。</p><h2 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h2><ul><li><strong>操作系统用来管理进行的内核对象</strong></li></ul><p>内核对象也是系统用来存放关于进程的统计信息的地方，内核对象是操作系统内部分配的一个内在块，该内存块是一种数据结构，其成员负责维护该对象的各种信息。</p><ul><li><strong>地址空间</strong></li></ul><p>它包含所有可执行模块或DLL模块的代码和数据，另外，它也包含动态内存分配的地址空间，例如线程的栈和堆分配空间。</p><ul><li><strong>进程从来不执行任何东西，它只是纯粹的容器，或说是线程的执行环境。</strong></li></ul><p>若要使它完成某项操作，它必须拥有一个在它环境中运行的的线程，次线程负责执行包含在进程的地址空间中的代码，也就是，真正完成代码执行的线程。</p><h2 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h2><p>子进程还是一个进程，指的是由另一个进程(对应称之为父进程)所创建的进程。</p><p>单任务的同步机制——线程、子进程都可以实现。</p><p>需要保护地址空间。</p><p>子进程的线程既可以在父进程终止之后执行代码，也可以在父进程运行的过程中执行代码。</p><h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h2><p> <strong>CreateProcessW</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CreateProcess函数</span><br><span class="line">CreateProcessW(</span><br><span class="line">    _In_opt_ LPCWSTR lpApplicationName,<span class="comment">// 该字符串可以指定要执行的模块的完整路径和文件名</span></span><br><span class="line">_Inout_opt_ LPWSTR lpCommandLine,  <span class="comment">//命令行</span></span><br><span class="line"></span><br><span class="line">_In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line"><span class="comment">//该 结构确定子进程是否可以继承返回到新进程对象的句柄。如果//lpProcessAttributes为NULL，则不能继承该句柄</span></span><br><span class="line">_In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line"><span class="comment">//该结构确定子进程是否可以继承返回到新线程对象的句柄。如果//lpThreadAttributes为NULL，则不能继承该句柄</span></span><br><span class="line">_In_ BOOL bInheritHandles,</span><br><span class="line"><span class="comment">//如果此参数为TRUE，则新进程将继承调用进程中的每个可继承句柄。如果参//数为FALSE，则不会继承句柄。请注意，继承的句柄与原始句柄具有相同的值和//访问权限</span></span><br><span class="line">    _In_ DWORD dwCreationFlags,<span class="comment">// 控制优先级类别和流程创建的标志 CREATE_NEW_CONSOLE</span></span><br><span class="line">_In_opt_ LPVOID lpEnvironment,<span class="comment">// 指向新进程的环境块的指针。如果此参数为//NULL，则新进程将使用调用进程的环境</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    _In_opt_ LPCWSTR lpCurrentDirectory,<span class="comment">// 进程当前目录的完整路径</span></span><br><span class="line">    _In_ LPSTARTUPINFOW lpStartupInfo, <span class="comment">//设置扩展属性</span></span><br><span class="line">    _Out_ LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 该结构接收有关新进程的标识//信息</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p> <strong>示例</strong>:创建一个用firefox打开bing的进程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunExe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//TCHAR szApplicationName[] = _T(&quot;D:\\Mozilla Firefox\\firefox.exe&quot;);</span></span><br><span class="line">TCHAR szlpCommandLine[] = _T(<span class="string">&quot;\&quot;D:\\Mozilla Firefox\\firefox.exe\&quot;https://cn.bing.com/&quot;</span>);</span><br><span class="line">STARTUPINFO strStartupInfo;</span><br><span class="line"><span class="built_in">memset</span>(&amp;strStartupInfo,<span class="number">0</span>,<span class="keyword">sizeof</span>(strStartupInfo));</span><br><span class="line">strStartupInfo.cb = <span class="keyword">sizeof</span>(strStartupInfo);</span><br><span class="line">PROCESS_INFORMATION szProcessInformation;</span><br><span class="line"><span class="built_in">memset</span>(&amp;szProcessInformation,<span class="number">0</span>,<span class="keyword">sizeof</span>(szProcessInformation));</span><br><span class="line"><span class="keyword">int</span> iRet = CreateProcess(<span class="literal">NULL</span>, szlpCommandLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">false</span>,CREATE_NEW_CONSOLE,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;strStartupInfo,&amp;szProcessInformation);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建成功</span></span><br><span class="line">WaitForSingleObject(szProcessInformation.hProcess,<span class="number">3000</span>);</span><br><span class="line">CloseHandle(szProcessInformation.hProcess);</span><br><span class="line">CloseHandle(szProcessInformation.hThread);</span><br><span class="line">szProcessInformation.dwProcessId = <span class="number">0</span>;</span><br><span class="line">szProcessInformation.dwThreadId = <span class="number">0</span>;</span><br><span class="line">szProcessInformation.hThread = <span class="number">0</span>;</span><br><span class="line">szProcessInformation.hProcess = <span class="number">0</span>;</span><br><span class="line">printf_s(<span class="string">&quot;Success iRet = %d\n&quot;</span>,iRet);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">printf_s(<span class="string">&quot;Create Failed iRet = %d,errorcode =%d\n&quot;</span>,iRet,GetLastError());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;test\n&quot;</span>);</span><br><span class="line">RunExe();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h2><ol><li>socket编程——IP和端口</li><li>剪贴板——剪贴板的内核对象</li><li>邮槽——邮槽的内核对象</li><li>匿名管道——内核对象</li><li>命名管道——内核对象</li><li>Copy_data findwindows wm_copydata——消息sendmessage</li></ol><h3 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h3><p>系统维护管理的一块<strong>内存</strong>区域。</p><p><strong>原理</strong>:当一个进程在复制数据时，是将数据放到内存区域中，当另一个进程在粘贴数据时，从该内存区域取出数据，显示到窗口上面。</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CClipboardDlg::OnBnClickedButton2</span><span class="params">()</span><span class="comment">//发送</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1 打开剪切板</span></span><br><span class="line"><span class="keyword">if</span> (OpenClipboard())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2 清空剪切板</span></span><br><span class="line">EmptyClipboard();</span><br><span class="line"><span class="keyword">char</span>* szSendBuf;</span><br><span class="line"><span class="comment">//3 获取编辑框的内容</span></span><br><span class="line">CStringW strSendW;</span><br><span class="line">GetDlgItemText(IDC_EDIT_SEND, strSendW);</span><br><span class="line"></span><br><span class="line">CStringA strSend = (CStringA)strSendW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 分配一个内存对象，内存对象的句柄就是hClip</span></span><br><span class="line">HANDLE hClip = GlobalAlloc(GMEM_MOVEABLE, strSend.GetLength() + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//5 将剪切板句柄加锁</span></span><br><span class="line">szSendBuf = (<span class="keyword">char</span>*)GlobalLock(hClip);</span><br><span class="line"><span class="built_in">strcpy</span>(szSendBuf, strSend);</span><br><span class="line">TRACE(<span class="string">&quot;szSendBuf = %s&quot;</span>, szSendBuf);</span><br><span class="line">GlobalUnlock(hClip);</span><br><span class="line"><span class="comment">//6 将数据放入剪切板</span></span><br><span class="line">SetClipboardData(CF_TEXT, hClip);</span><br><span class="line"><span class="comment">//关闭剪切板</span></span><br><span class="line">CloseClipboard();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CClipboardDlg::OnBnClickedButton3</span><span class="params">()</span><span class="comment">//接收</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (OpenClipboard())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确认剪切板是否可用</span></span><br><span class="line"><span class="keyword">if</span> (IsClipboardFormatAvailable(CF_TEXT))</span><br><span class="line">&#123;</span><br><span class="line">HANDLE hClip;</span><br><span class="line"><span class="keyword">char</span>* pBuf;</span><br><span class="line"><span class="comment">//向剪切板要数据</span></span><br><span class="line">hClip = GetClipboardData(CF_TEXT);</span><br><span class="line">pBuf = (<span class="keyword">char</span>*)GlobalLock(hClip);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">LPCWSTR strBuf = A2W(pBuf);</span><br><span class="line">GlobalUnlock(hClip);</span><br><span class="line">SetDlgItemText(IDC_EDIT_RECV, strBuf);</span><br><span class="line">&#125;</span><br><span class="line">CloseClipboard();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201051810854.png" alt="image-20220103195035740"></p><h3 id="邮槽"><a href="#邮槽" class="headerlink" title="邮槽"></a>邮槽</h3><p>使用邮槽通信的进程分为服务端和客户端。邮槽有服务端创建，在创建时需要指定邮槽名，创建之后服务端得到邮槽的句柄 。在邮槽创建后，客户端可以通过邮槽名的打开邮槽，在获得句柄后可以向邮槽写入消息。</p><p>邮槽通信是单向的，只有服务端才能从邮槽中读取消息，客户端只能写入消息。消息是先入先出的。客户端先写入的消息在服务端先被读取。</p><p>通过邮槽通信的数据可以是任意格式的，但是一条消息不能大于424字节。</p><p>邮槽除了在本机内进程进程间通信外，在主机间也可以通信。在主机间进程邮槽通信时，数据通过网络传播时使用的是数据包协议(UDP),所以是一种不可靠通信。通过网络进程邮槽通信时，客户端必须知道服务端的主机名或域名。</p><hr><p><strong>示例:</strong></p><p>服务端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnSlot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    &quot;\\\\.\\mailslot\\Mymailslot    \\.\mailslot\Mymailslot </span></span><br><span class="line"><span class="comment">//  1  创建一个邮槽</span></span><br><span class="line">LPCTSTR szSlotName = TEXT(<span class="string">&quot;\\\\.\\mailslot\\Mymailslot&quot;</span>);</span><br><span class="line">HANDLE hSlot = CreateMailslot(szSlotName,</span><br><span class="line"><span class="number">0</span>,                             <span class="comment">// no maximum message size </span></span><br><span class="line">MAILSLOT_WAIT_FOREVER,         <span class="comment">// no time-out for operations </span></span><br><span class="line"><span class="literal">NULL</span>); <span class="comment">// default security</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hSlot == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;CreateMailslot failed with %d\n&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 读取数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line">TRACE(<span class="string">&quot;Begin ReadFile&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!ReadFile(hSlot, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;读取数据失败&quot;</span>));</span><br><span class="line">CloseHandle(hSlot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TRACE(<span class="string">&quot;End ReadFile&quot;</span>);</span><br><span class="line">MessageBox((CStringW)szBuf);</span><br><span class="line">CloseHandle(hSlot);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个文件句柄</span></span><br><span class="line">LPCTSTR szSlotName = TEXT(<span class="string">&quot;\\\\.\\mailslot\\Mymailslot&quot;</span>);</span><br><span class="line">HANDLEhMailSlot = CreateFile(szSlotName,FILE_GENERIC_WRITE,FILE_SHARE_READ,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hMailSlot == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;CreateMail fail with %d\n&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[] = <span class="string">&quot;ZYX is handsome&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!WriteFile(hMailSlot,szBuf,<span class="built_in">strlen</span>(szBuf)+<span class="number">1</span>,&amp;dwWrite,<span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;写入数据失败&quot;</span>));</span><br><span class="line">CloseHandle(hMailSlot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hMailSlot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h3><p>匿名管道是一个没有命名的单向管道，本质上就是一个共享的内存，抽象成是管道。</p><p>通常用来在父进程和子进程之间通信。只能实现本地两个进程之间的通信。不能实现网络通信。</p><p><strong>优点是效率高，原理本质上就是共享内存。</strong></p><p><strong>CreatePipe</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CreatePipe(</span><br><span class="line">    _Out_ PHANDLE hReadPipe,  <span class="comment">//该变量接收管道的读取句柄</span></span><br><span class="line">    _Out_ PHANDLE hWritePipe,<span class="comment">// 该变量接收管道的写句柄</span></span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpPipeAttributes,<span class="comment">//安全属性NULL-句柄是否能被子进程继承</span></span><br><span class="line">    _In_ DWORD nSize  <span class="comment">//管道缓冲区的大小 0 :默认缓冲区大小</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h3><p>与Socket相似，支持网络之间进程的通信。</p><p><strong>CreateNamePipe</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateNamedPipeA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName,  <span class="comment">// \.\pipe&lt;i&gt;pipename</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwOpenMode,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 dwPipeMode,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 nMaxInstances,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 nOutBufferSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 nInBufferSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                 nDefaultTimeOut,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpSecurityAttributes</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>ConnectNamePipe</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ConnectNamedPipe</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE       hNamedPipe,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPOVERLAPPED lpOverlapped</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p> <strong>示例:</strong><br>服务端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnCreateNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1创建一个命名管道</span></span><br><span class="line">LPCTSTR szhPipeName = TEXT(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>);</span><br><span class="line">hNamedPipe = CreateNamedPipe(szhPipeName, PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE, <span class="number">1</span>, <span class="number">1024</span>, <span class="number">1024</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hNamedPipe == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;CreateNamedPipe failed with %d\n&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(_T(<span class="string">&quot;创建命名管道失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2等待客户端的连接</span></span><br><span class="line">HANDLE hEvent = CreateEvent(<span class="literal">NULL</span>,TRUE,FALSE,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hEvent == <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line">MessageBox(_T(<span class="string">&quot;创建事件失败&quot;</span>));</span><br><span class="line">CloseHandle(hNamedPipe);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">OVERLAPPED ovlap;</span><br><span class="line">ZeroMemory(&amp;ovlap,<span class="keyword">sizeof</span>(OVERLAPPED));</span><br><span class="line">ovlap.hEvent = hEvent;</span><br><span class="line"><span class="keyword">if</span> (!ConnectNamedPipe(hNamedPipe, &amp;ovlap))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(GetLastError() != ERROR_IO_PENDING)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;等待客户端连接失败&quot;</span>));</span><br><span class="line">CloseHandle(hNamedPipe);</span><br><span class="line">CloseHandle(hEvent);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line">hEvent = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (WaitForSingleObject(hEvent, INFINITE) == WAIT_FAILED)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;等待对象失败&quot;</span>));</span><br><span class="line">CloseHandle(hNamedPipe);</span><br><span class="line">CloseHandle(hEvent);</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line">hEvent = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnSreadNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="keyword">if</span> (!ReadFile(hNamedPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;读取数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">MessageBox((CStringW)szBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnSwriteNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[] = <span class="string">&quot;ZYX is handsome Server&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!WriteFile(hNamedPipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;写入数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnConNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPCTSTR szNamePipeName = TEXT(<span class="string">&quot;\\\\.\\pipe\\mypipe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WaitNamedPipe(szNamePipeName, NMPWAIT_WAIT_FOREVER) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;当前没有可以利用的管道&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">hNamedPipe = CreateFile(szNamePipeName,GENERIC_READ | GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hNamedPipe == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;打开命名管道失败!&quot;</span>));</span><br><span class="line">hNamedPipe = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnReadNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwRead;</span><br><span class="line"><span class="keyword">if</span> (!ReadFile(hNamedPipe, szBuf, <span class="number">100</span>, &amp;dwRead, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;读取数据失败&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">MessageBox((CStringW)szBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CChildView::OnWriteNamePipe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line"><span class="comment">//写入数据</span></span><br><span class="line"><span class="keyword">char</span> szBuf[] = <span class="string">&quot;ZYX is handsome Client&quot;</span>;</span><br><span class="line">DWORD dwWrite;</span><br><span class="line"><span class="keyword">if</span> (!WriteFile(hNamedPipe, szBuf, <span class="built_in">strlen</span>(szBuf) + <span class="number">1</span>, &amp;dwWrite, <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">&quot;写入数据失败&quot;</span>));</span><br><span class="line">CloseHandle(hNamedPipe);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hNamedPipe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WM-COPYDATA"><a href="#WM-COPYDATA" class="headerlink" title="WM_COPYDATA"></a>WM_COPYDATA</h3><p>利用WM_COPYDATA这个消息进行通信。</p><p><strong>是最常用、最灵活的进程间通信方式。</strong></p><p>一个应用程序发送WM_COPYDATA消息以将数据传递给另一个应用程序。</p><p><strong>SPY++专门够用来查找窗口句柄。</strong></p><p>要给进程发送数据，首先要拿到该窗口的句柄，也就是要拿到标题(因为句柄有可能会发生变化)。</p><hr><p>发送端:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWMCOPYDATASENDDlg::OnBnClickedSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//必须要知道接收端的标题 句柄 spy工具</span></span><br><span class="line">CString strWindowTitle = _T(<span class="string">&quot;MFCRecv&quot;</span>);</span><br><span class="line">CString strDataToSend = _T(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//获取句柄</span></span><br><span class="line">HWND hRecvWnd = ::FindWindow(<span class="literal">NULL</span>, strWindowTitle.GetBuffer(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">if</span> (hRecvWnd != <span class="literal">NULL</span> &amp;&amp; ::IsWindow(hRecvWnd))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//数据的封装</span></span><br><span class="line">COPYDATASTRUCT cpd;</span><br><span class="line">cpd.dwData = <span class="number">0</span>;</span><br><span class="line">cpd.cbData = strDataToSend.GetLength()*<span class="keyword">sizeof</span>(TCHAR);</span><br><span class="line">cpd.lpData = (PVOID)strDataToSend.GetBuffer(<span class="number">0</span>);</span><br><span class="line">::SendMessage(hRecvWnd,WM_COPYDATA,(WPARAM)(AfxGetApp()-&gt;m_pMainWnd),(LPARAM)&amp;cpd);</span><br><span class="line">&#125;</span><br><span class="line">strDataToSend.ReleaseBuffer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CWMCOPYDATADlg::OnCopyData</span><span class="params">(CWnd* pWnd, COPYDATASTRUCT* pCopyDataStruct)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//消息响应函数</span></span><br><span class="line"><span class="comment">//解析数据</span></span><br><span class="line">LPCTSTR szText = (LPCTSTR)(pCopyDataStruct-&gt;lpData);</span><br><span class="line">DWORD dwLength = pCopyDataStruct-&gt;cbData;</span><br><span class="line">TCHAR szRecvText[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szRecvText,szText,dwLength);</span><br><span class="line">MessageBox(szRecvText, _T(<span class="string">&quot;Bingo&quot;</span>), MB_OK);</span><br><span class="line"><span class="keyword">return</span> CDialogEx::OnCopyData(pWnd, pCopyDataStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="比较-amp-总结"><a href="#比较-amp-总结" class="headerlink" title="比较&amp;总结"></a>比较&amp;总结</h3><ul><li>剪贴板比较简单，剪贴板和匿名管道只能实现同一机器的两个进程通信。而不能实现网络进程之间的通信。</li><li>邮槽是基于广播的，可以一对多发送。但只能一个发送，一个接收(单向)。</li><li>命名管道和邮槽可以进程网络通信。命名管道只能是点对点的单一通信。</li><li>邮槽的缺点就是传输的数据量很小，424字节以下。</li><li>WM_COPYDATA封装数据非常方便，如果数据量较大，建议使用命名管道。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;程序&lt;/strong&gt;是计算机&lt;strong&gt;指令的集合&lt;/strong&gt;，它以文件的形式存储在磁盘上。&lt;/p&gt;
&lt;p&gt;&lt;s</summary>
      
    
    
    
    <category term="操作系统" scheme="https://doraemon-hub-art.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="-操作系统" scheme="https://doraemon-hub-art.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="-进程" scheme="https://doraemon-hub-art.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】多线程之线程同步</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/01/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/01/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</id>
    <published>2022-01-01T03:41:31.000Z</published>
    <updated>2022-01-01T03:53:16.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>线程是CPU调度和分派的基本单位。</li><li>进程<ul><li>是分配资源的基本单位。</li><li>等同于正在运行的程序以及它所管理的资源。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202201011145151.png" alt="image-20211226150432077"></p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ul><li>CreateThread——Windows中创建线程API</li><li>baginthreadex——底层实现是CreateThread</li></ul><p><strong>示例1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unsigned int __stdcall thread_main_dog(void* cnt)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; *((int*)cnt);</span><br><span class="line">    for (int j &#x3D; 0; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;www\n&quot;);</span><br><span class="line">        Sleep(1000);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">unsigned int __stdcall thread_main_cat(void* cnt)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; *((int*)cnt);</span><br><span class="line">    for (int j &#x3D; 0; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;mmm\n&quot;);</span><br><span class="line">        Sleep(2000);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">unsigned int __stdcall thread_main_bird(void* cnt)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; *((int*)cnt);</span><br><span class="line">    for (int j &#x3D; 0; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;jjj\n&quot;);</span><br><span class="line">        Sleep(3000);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;安全属性——线程堆的大小默认为0——线程函数——线程函数的参数——线程的初识状态0表示立即执行——用来接收线程ID</span><br><span class="line">    unsigned int dog_id &#x3D; 0; </span><br><span class="line">    unsigned int cat_id &#x3D; 0; </span><br><span class="line">    unsigned int bird_id &#x3D; 0; </span><br><span class="line">    int count &#x3D; 10;</span><br><span class="line">    _beginthreadex(NULL, 0, thread_main_dog, (void*)&amp;count,0,&amp;dog_id);</span><br><span class="line">    _beginthreadex(NULL, 0, thread_main_cat, (void*)&amp;count,0,&amp;cat_id);</span><br><span class="line">    _beginthreadex(NULL, 0, thread_main_bird, (void*)&amp;count,0,&amp;bird_id);</span><br><span class="line"></span><br><span class="line">    printf(&quot;%d %d %d\n&quot;, dog_id, cat_id, bird_id);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;system(&quot;pause&quot;);</span><br><span class="line">    Sleep(1000000);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>示例2</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI ThreadFun(LPVOID p)</span><br><span class="line">&#123;</span><br><span class="line">    int temp &#x3D; *((int*)p);</span><br><span class="line">    printf(&quot;我是子线程，PID&#x3D;%d,temp &#x3D; %d\n&quot;, GetCurrentThreadId(),temp);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;我是主线程\n&quot;);</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadID;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    安全属性，一般填NULL</span><br><span class="line">    线程栈空间大小，0为默认大小1MB</span><br><span class="line">    线程函数地址</span><br><span class="line">    传给线程函数的参数</span><br><span class="line">    指定额外的标志来控制线程的创建*&#x2F;</span><br><span class="line">     int m &#x3D; 10;</span><br><span class="line">    hThread &#x3D; CreateThread(NULL,0,ThreadFun,&amp;m,0,&amp;dwThreadID);</span><br><span class="line">    Sleep(10000);</span><br><span class="line">    &#x2F;&#x2F;关闭线程</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h2><ul><li>理解内核对象</li></ul><p><strong>定义</strong>：内核对象通过API来创建，每个内核对象是一个数据结构，它对应一块内存， 由操作系统内核分配，并且只能由操作系统内核访问。在此数据结构中少数成员如安全描述符和使用计数是所有对应都有的，但其他大多数成员都是不用类型的对象特有的。内核对象的数据结构只能由操作系统提供的API访问，应用程序在内存中不能访问。调用创建内核对象的函数后，<strong>该函数会返回一个句柄，它标识了所创建的对象</strong>。它可以由进程的任何线程使用。</p><p>**常见的内核对象:**进程、线程、文件、存取符号对象、事件对象、文件对象、作业对象、互斥对象、管道对象、等待计时器对象、邮件槽对象，信号对象。(创建时会产生内核对象。)</p><p>CreateProcess </p><p>CreateThread</p><p>CreateFile</p><p>Job</p><p>Mutex</p><p>……</p><p><strong>内核对象:为了管理线程/文件等资源而由操作系统创建的数据块。</strong></p><p><strong>其创建的所有者肯定是操作系统。</strong></p><p><strong>带create的都是内核对象的创建。</strong></p><h2 id="主线程和子线程的结束时间"><a href="#主线程和子线程的结束时间" class="headerlink" title="主线程和子线程的结束时间"></a>主线程和子线程的结束时间</h2><p>main函数返回后，整个进程终止，同时终止其包含的所有线程。</p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line"></span><br><span class="line">unsigned   int __stdcall ThreadFunc(LPVOID p)</span><br><span class="line">&#123;</span><br><span class="line">    int cnt &#x3D; *((int*)p);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sleep(1000);</span><br><span class="line">        printf(&quot;runing thread\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;main begin\n&quot;);</span><br><span class="line">    int iPrarm &#x3D; 5;</span><br><span class="line">    unsigned int dwThreadID;</span><br><span class="line">    HANDLE hThread &#x3D; (HANDLE)_beginthreadex(NULL, 0, ThreadFunc, (void*)&amp;iPrarm, 0, &amp;dwThreadID);</span><br><span class="line">    &#x2F;&#x2F;Sleep(20000);</span><br><span class="line">    printf(&quot;main end\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用WaitForSingleObject来等待一个内核对象变为已通知状态。  </p><h2 id="为什么使用多线程"><a href="#为什么使用多线程" class="headerlink" title="为什么使用多线程"></a>为什么使用多线程</h2><ul><li>避免阻塞</li></ul><p>单个进程只有一个主线程，当主线程阻塞的时候，整个进程也就阻塞了，无法再做其它的有一些功能了。</p><ul><li>避免CPU空转</li></ul><p>应用程序经常会涉及到RPC，数据库访问，磁盘IO等操作，这些操作的速度比CPU慢很多，而在等待这些响应时，CPU却不能去处理新的请求，导致这种单线程的应用程序性能很差。</p><ul><li>提升效率</li></ul><p>一个进程要独立拥有4GB的虚拟地址空间，而多线程可以共享同一地址空间，线程的切换比进程的切换要快得多。</p><p><strong>上下文切换</strong></p><p>分时使用CPU需要进行上下文切换。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202201011143767.png" alt="image-20211228182457603"></p><p><strong>多线程可以理解成一个轻量级的多进程。</strong> </p><p><strong>解释</strong>：每个进程开始执行 时，需要各个区域读到内存中，下一个进程开始执行时，需要将上一个进程的东西读出来放到硬盘中，再将进程B的各个区域读到内存中，这就是上下文切换。而线程间不用，这些区域资源都是共享的，所以线程间要快于进程间通信。</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>CPU是抢占式的。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">unsigned WINAPI threadDes(void* arg);</span><br><span class="line">unsigned WINAPI threadInc(void* arg);</span><br><span class="line"></span><br><span class="line">#define NUM_THREAD 50</span><br><span class="line">long long num &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F;变量放在内存中，计算机的时候从内存中拿出来在CPU中运算，运算完成的变量放回去</span><br><span class="line">&#x2F;*</span><br><span class="line">  在此案例中，上一次的进程对变量进行操作，还没有来得及将计算后的结果放回内存中(替换原来的变量值)，下一个线程就开始(切换到了)了(下一个进程拿到的变量值还没有改变)，进行相应的操作。</span><br><span class="line">*&#x2F;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE tHandles[NUM_THREAD];</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;size of long long: %d \n&quot;,sizeof(long long));</span><br><span class="line">    for (i &#x3D; 0; i &lt; NUM_THREAD; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (i % 2)</span><br><span class="line">        &#123;</span><br><span class="line">            tHandles[i] &#x3D; (HANDLE)_beginthreadex(NULL,0,threadInc,NULL,0,NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            tHandles[i] &#x3D; (HANDLE)_beginthreadex(NULL, 0,threadDes,NULL,0,NULL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(NUM_THREAD,tHandles,TRUE,INFINITE);&#x2F;&#x2F;等待多个线程结束</span><br><span class="line">    printf(&quot;%d&quot;, num);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned WINAPI threadInc(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 500000; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">unsigned WINAPI threadDes(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 500000; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num -&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>——上一个锁，告诉CPU当前线程正在用这个变量，后面的先别进来。</p><h3 id="线程同步之互斥对象"><a href="#线程同步之互斥对象" class="headerlink" title="线程同步之互斥对象"></a>线程同步之互斥对象</h3><p>CreateMutex——创建互斥对象。</p><p><strong>用互斥体解决上面的这个问题。</strong></p><p><strong>避免产生资源竞争。</strong></p><p>互斥对象属于内核对象，它能够确保线程拥有对当个资源的互斥访问权。</p><p>互斥对象包含一个使用数量，一个线程ID和一个计数器。其线程ID用于标识系统中的哪个线程当前拥有互斥对象，计数器用于指明该线程拥有互斥对象的次数。</p><p>创建互斥对象 :调用CreateMutex，调用成功，该函数返回所创建的互斥对象的句柄。</p><p>请求互斥对象所有权：调用WaitForSingleObject函数。线程必须主动请求共享独享的所有权才能获得所有权。</p><p>释放指定互斥对象的所有权：调用ReleaseMutex函数。线程访问共享资源结束之后，要主动释放对互斥对象的所有权，使该对象处于已通知状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> #include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">unsigned WINAPI threadDes(void* arg);</span><br><span class="line">unsigned WINAPI threadInc(void* arg);</span><br><span class="line"></span><br><span class="line">#define NUM_THREAD 50</span><br><span class="line">long long num &#x3D; 0;</span><br><span class="line">HANDLE hMutex;&#x2F;&#x2F;定义一个互斥体的句柄</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE tHandles[NUM_THREAD];</span><br><span class="line">    int i;</span><br><span class="line">    hMutex &#x3D; CreateMutex(NULL, FALSE, NULL);</span><br><span class="line">    &#x2F;&#x2F;临界区——不是一个变量，是一段代码，就是可能会存在前程之间产生资源抢占的代码。</span><br><span class="line">    for (i &#x3D; 0; i &lt; NUM_THREAD; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (i % 2)</span><br><span class="line">        &#123;</span><br><span class="line">            tHandles[i] &#x3D; (HANDLE)_beginthreadex(NULL,0,threadInc,NULL,0,NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            tHandles[i] &#x3D; (HANDLE)_beginthreadex(NULL, 0,threadDes,NULL,0,NULL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(NUM_THREAD,tHandles,TRUE,INFINITE);&#x2F;&#x2F;等待多个线程结束</span><br><span class="line">    CloseHandle(hMutex);</span><br><span class="line">    printf(&quot;%d&quot;, num);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned WINAPI threadInc(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0; </span><br><span class="line">    WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 500000; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;运行完上面的循环，之后realease之后，下面的线程才能执行。</span><br><span class="line">    ReleaseMutex(hMutex);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">unsigned WINAPI threadDes(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    &#x2F;&#x2F;如果当CPU切换到下一个线程，由于上个线程还没Release，下面的线程只能等待。</span><br><span class="line">    WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">    for (i &#x3D; 0; i &lt; 500000; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num -&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    ReleaseMutex(hMutex);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>多线程+SOCKET实现群聊服务器</p><p>服务端</p><ol><li>每来一个连接，服务端起一个线程(安排一个工人维护)</li><li>将收到的消息转发给所有的客户端</li><li>某个连接断开，需要处理断开的连接</li></ol><p>客户端</p><ol><li>连接服务器</li><li>与服务器进行通信</li></ol><p><strong>服务端</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;多线程+socket编程的联合使用</span><br><span class="line">&#x2F;&#x2F;用互斥体进行线程同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;WinSock2.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">#pragma comment(lib,&quot;ws2_32.lib&quot;)</span><br><span class="line"></span><br><span class="line">#define MAX_CLNT 256</span><br><span class="line">#define MAX_BUF_SIZE</span><br><span class="line">&#x2F;&#x2F;SOCKET数组</span><br><span class="line">SOCKET clntSocks[MAX_CLNT];</span><br><span class="line">int clntCnt &#x3D; 0;&#x2F;&#x2F;当前连接上的socket的数量</span><br><span class="line"></span><br><span class="line">HANDLE hMutex;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;发送给所有的客户端</span><br><span class="line">void SendMsg(char* szMsg, int iLen)</span><br><span class="line">&#123;</span><br><span class="line">    WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; clntCnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        send(clntSocks[i],szMsg,iLen,0);</span><br><span class="line">    &#125;</span><br><span class="line">    ReleaseMutex(hMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理客户端链接的函数</span><br><span class="line">unsigned WINAPI HandleCln(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">     &#x2F;&#x2F;接收传过来的参数</span><br><span class="line">    SOCKET hClntSock &#x3D; *((SOCKET*)arg);</span><br><span class="line">    int iLen &#x3D; 0;</span><br><span class="line">    char szMsg[MAX_BUF_SIZE] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    &#x2F;&#x2F;进行数据的收发</span><br><span class="line">    &#x2F;&#x2F;while (iLen &#x3D; recv(hClntSock,szMsg,sizeof(szMsg),0) !&#x3D; 0)</span><br><span class="line">    &#x2F;&#x2F;&#123;</span><br><span class="line">    &#x2F;&#x2F;    &#x2F;&#x2F;将收到的信息发送给当前在线的所有客户端——达到群聊的效果</span><br><span class="line">    &#x2F;&#x2F;    SendMsg(szMsg,iLen);</span><br><span class="line">    &#x2F;&#x2F;&#125; </span><br><span class="line"></span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        iLen &#x3D; recv(hClntSock, szMsg, sizeof(szMsg), 0);</span><br><span class="line">       &#x2F;&#x2F; printf(&quot;recv mag &#x3D; %s iLen &#x3D; %d \n&quot;, szMsg, iLen);</span><br><span class="line">        if (iLen &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            SendMsg(szMsg, iLen);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hMutex,INFINITE);</span><br><span class="line">    &#x2F;&#x2F;处理客户端断开链接的情况</span><br><span class="line">    for (int j &#x3D;  0; j &lt; clntCnt; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (hClntSock &#x3D;&#x3D; clntSocks[j])</span><br><span class="line">        &#123;</span><br><span class="line">            while (j++ &lt; clntCnt)</span><br><span class="line">            &#123;</span><br><span class="line">                clntSocks[j] &#x3D; clntSocks[j + 1];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clntCnt--;</span><br><span class="line">    printf(&quot;此时连接个数:%d\n&quot;, clntCnt);</span><br><span class="line">    ReleaseMutex(hMutex);</span><br><span class="line">    closesocket(hClntSock);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;初始化套接字库</span><br><span class="line">    WORD wVersion;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    int err;</span><br><span class="line"></span><br><span class="line">    HANDLE hThread;</span><br><span class="line"></span><br><span class="line">    wVersion &#x3D; MAKEWORD(1, 1);</span><br><span class="line">    err &#x3D; WSAStartup(wVersion, &amp;wsaData);&#x2F;&#x2F;初始化哪个版本的网络库，并且将数据存放到哪里</span><br><span class="line">    if (err)</span><br><span class="line">    &#123;</span><br><span class="line">        return err;</span><br><span class="line">    &#125;</span><br><span class="line">    if (LOBYTE(wsaData.wVersion) !&#x3D; 1 || HIBYTE(wsaData.wVersion) !&#x3D; 1)&#x2F;&#x2F;版本检查</span><br><span class="line">    &#123;</span><br><span class="line">        WSACleanup();&#x2F;&#x2F;清理套接字库</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;创建一个互斥对象</span><br><span class="line">    hMutex &#x3D; CreateMutex(NULL,FALSE,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建套接字</span><br><span class="line">    SOCKET sockServer &#x3D; socket(AF_INET, SOCK_STREAM, 0);  &#x2F;&#x2F;协议族、协议栈</span><br><span class="line">    &#x2F;&#x2F;准备绑定的信息</span><br><span class="line">    SOCKADDR_IN addrServer;</span><br><span class="line">    addrServer.sin_addr.S_un.S_addr &#x3D; htonl(INADDR_ANY);&#x2F;&#x2F;htonl——</span><br><span class="line">    addrServer.sin_family &#x3D; AF_INET;&#x2F;&#x2F;协议栈</span><br><span class="line">    addrServer.sin_port &#x3D; htons(6000);&#x2F;&#x2F;端口-1024以下的端口是系统保留的，htons——大小端转换,x86小端，网络传输-大端</span><br><span class="line">    &#x2F;&#x2F;绑定到本机</span><br><span class="line">    if (bind(sockServer, (SOCKADDR*)&amp;addrServer, sizeof(SOCKADDR)) &#x3D;&#x3D; SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;bing error:%d&quot;,GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;监听</span><br><span class="line">    std::cout &lt;&lt; &quot;Server start at port 6000&quot; &lt;&lt; std::endl;</span><br><span class="line">    if (listen(sockServer, 10) &#x3D;&#x3D; SOCKET_ERROR)&#x2F;&#x2F;第二个参数是最大排队连接的个数</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;listen errornum &#x3D; %d\n&quot;,GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;  </span><br><span class="line">    SOCKADDR_IN addrClient;</span><br><span class="line">    int len &#x3D; sizeof(SOCKADDR);</span><br><span class="line">    printf(&quot;start listen\n&quot;);</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;此时来的客户端链接</span><br><span class="line">        &#x2F;&#x2F;接收连接请求,返回根据客户端的套接字</span><br><span class="line">        SOCKET sockConnect &#x3D; accept(sockServer, (SOCKADDR*)&amp;addrClient, &amp;len);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;每来一个链接，就起一个线程</span><br><span class="line">        &#x2F;&#x2F;没来一个连接，全局数组+1个成员，最大连接数+1  </span><br><span class="line"></span><br><span class="line">        WaitForSingleObject(hMutex,INFINITE);</span><br><span class="line"></span><br><span class="line">        clntSocks[clntCnt++] &#x3D; sockConnect;&#x2F;&#x2F;当发生客户端链接的时候，这里有可能发生全局变量的竞争，所以加锁</span><br><span class="line">        printf(&quot;有人下机了，此时连接数目%d\n&quot;,clntCnt);</span><br><span class="line">        ReleaseMutex(hMutex);</span><br><span class="line"></span><br><span class="line">        hThread &#x3D; (HANDLE)_beginthreadex(NULL, 0, HandleCln, (void*)&amp;sockConnect, 0, NULL);</span><br><span class="line">        </span><br><span class="line">        printf(&quot;Connect client IP is :%s \n&quot;,inet_ntoa(addrClient.sin_addr));</span><br><span class="line">        printf(&quot;Connect client NUM is :%d \n&quot;,clntCnt);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;关闭套接字</span><br><span class="line">    closesocket(sockServer);</span><br><span class="line">    &#x2F;&#x2F;清理套接字库</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>客户端</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端要干什么</span><br><span class="line">&#x2F;*</span><br><span class="line">* 接收服务端的消息——起一个线程用来接收消息</span><br><span class="line">* 发送消息个服务端——起一个线程用来发送消息</span><br><span class="line">* 退出机制 </span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;WinSock2.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line"></span><br><span class="line">#pragma comment(lib,&quot;ws2_32.lib&quot;)</span><br><span class="line"></span><br><span class="line">#define  BUF_SIZE 256 </span><br><span class="line">#define NAME_SIZE 20</span><br><span class="line">char szName[NAME_SIZE] &#x3D; &quot;[DEFAULT]&quot;;</span><br><span class="line">char szMsg[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;接收消息</span><br><span class="line">unsigned WINAPI RecvMsg(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    SOCKET hClntSock &#x3D; *((SOCKET*)arg);</span><br><span class="line">    char szNameMsg[NAME_SIZE + BUF_SIZE];</span><br><span class="line">    int iLen &#x3D; 0;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        iLen &#x3D; recv(hClntSock, szNameMsg, NAME_SIZE + BUF_SIZE - 1, 0);</span><br><span class="line">        &#x2F;&#x2F;服务端断开</span><br><span class="line">        if (iLen &#x3D;&#x3D; -1)</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        szNameMsg[iLen] &#x3D; 0;</span><br><span class="line">        fputs(szNameMsg,stdout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;发送消息</span><br><span class="line">unsigned WINAPI SendMsg(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    SOCKET hClntSock &#x3D; *((SOCKET*)arg);</span><br><span class="line">    char szNameMsg[NAME_SIZE + BUF_SIZE];&#x2F;&#x2F;名字+消息</span><br><span class="line">    &#x2F;&#x2F;循环接收来自于控制台的消息 </span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        fgets(szMsg,BUF_SIZE,stdin);&#x2F;&#x2F;从控制台中获取消息——会发生阻塞</span><br><span class="line">        &#x2F;&#x2F;退出机制——当收到Q or q 就退出</span><br><span class="line">        if (!strcmp(szMsg,&quot;Q\n&quot;) || !strcmp(szMsg,&quot;q\n&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            closesocket(hClntSock);</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">        sprintf(szNameMsg, &quot;%s %s&quot;, szName, szMsg);&#x2F;&#x2F;字符串拼接</span><br><span class="line">        send(hClntSock,szNameMsg,strlen(szNameMsg),0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带参数的main函数，用命令行启动</span><br><span class="line">int main(int argc,char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;初始化套接字库</span><br><span class="line">    WORD wVersion;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    int err;</span><br><span class="line">    SOCKET hSock;</span><br><span class="line">    SOCKADDR_IN servAdr;</span><br><span class="line"></span><br><span class="line">    HANDLE hSThread;</span><br><span class="line">    HANDLE hRThread;</span><br><span class="line">   </span><br><span class="line">    wVersion &#x3D; MAKEWORD(1, 1);</span><br><span class="line">    err &#x3D; WSAStartup(wVersion, &amp;wsaData);&#x2F;&#x2F;初始化哪个版本的网络库，并且将数据存放到哪里</span><br><span class="line">    if (err)</span><br><span class="line">    &#123;</span><br><span class="line">        return err;</span><br><span class="line">    &#125;</span><br><span class="line">    if (LOBYTE(wsaData.wVersion) !&#x3D; 1 || HIBYTE(wsaData.wVersion) !&#x3D; 1)&#x2F;&#x2F;版本检查</span><br><span class="line">    &#123;</span><br><span class="line">        WSACleanup();&#x2F;&#x2F;清理套接字库</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    sprintf(szName,&quot;[%s]&quot;,argv[1]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;建立Socket</span><br><span class="line">    hSock &#x3D; socket(PF_INET,SOCK_STREAM,0);</span><br><span class="line">    &#x2F;&#x2F;配置端口和地址</span><br><span class="line">    memset(&amp;servAdr,0,sizeof(servAdr));</span><br><span class="line">    servAdr.sin_addr.S_un.S_addr &#x3D; inet_addr(&quot;127.0.0.1&quot;);</span><br><span class="line">    servAdr.sin_family &#x3D; AF_INET;</span><br><span class="line">    servAdr.sin_port &#x3D; htons(6000);</span><br><span class="line">    &#x2F;&#x2F;连接服务器</span><br><span class="line">    if (connect(hSock, (SOCKADDR*)&amp;servAdr, sizeof(servAdr)) &#x3D;&#x3D; SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;connect error is %d\n&quot;,GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;起一个用来收消息</span><br><span class="line">    </span><br><span class="line">    hRThread &#x3D; (HANDLE)_beginthreadex(NULL,0,RecvMsg,(void*)&amp;hSock,0,NULL);</span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;起一个线程用来发消息</span><br><span class="line"></span><br><span class="line">    hSThread &#x3D; (HANDLE)_beginthreadex(NULL, 0, SendMsg, (void*)&amp;hSock, 0, NULL);</span><br><span class="line">    </span><br><span class="line">    WaitForSingleObject(hSThread,INFINITE);</span><br><span class="line">    WaitForSingleObject(hRThread,INFINITE);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;关闭套接字</span><br><span class="line">    closesocket(hSock);</span><br><span class="line">    WSACleanup();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程同步之事件对象"><a href="#线程同步之事件对象" class="headerlink" title="线程同步之事件对象"></a>线程同步之事件对象</h3><p>事件对象也属于内核对象，它包含以下三个成员:</p><ul><li>使用计数</li><li>用于指明该事件是一个自动重置的事件还是一个人工重置的时间的布尔值；</li><li>用于指明改时间处于已通知状态还是未通知状态的布尔值。</li></ul><p>事件对象有两种类型:人工重置的事件对象和自动重置的事件对象。这两种的区别在于,当人工重置的事件对象得到通知时，等待该事件对象的所有线程均变为可调度线程；而当一个自动重置的事件对象得到通知时，等待该事件对象的线程中只有一个线程变为可调度线程。</p><p>1.创建事件对象</p><p>调用CreateEvent函数创建或打开一个命名的或匿名的事件对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE CreateEvent( 　　</span><br><span class="line">LPSECURITY_ATTRIBUTES lpEventAttributes, &#x2F;&#x2F; 安全属性 　　</span><br><span class="line">BOOL bManualReset, 　　&#x2F;&#x2F; 复位方式　　TRUE 必须用ResetEvent手动复原  FALSE 自动还原为无信号状态</span><br><span class="line">BOOL bInitialState, 　 &#x2F;&#x2F; 初始状态 　　TRUE 初始状态为有信号状态  FALSE 无信号状态</span><br><span class="line">LPCTSTR lpName 　　　　&#x2F;&#x2F;对象名称 　NULL  无名的事件对象　</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.设置事件对象状态</p><p>调用SetEvent函数把指定的事件对象设置为有信号状态。</p><p>3.重置事件对象状态</p><p>调用ResetEvent函数把指定的事件对象设置为无信号状态。</p><p>4.请求事件对象</p><p>线程通过调用WaitForSingleObject函数请求事件对象。</p><p><strong>示例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">#define STR_LEN 100</span><br><span class="line"></span><br><span class="line">static  char str[STR_LEN];</span><br><span class="line">static HANDLE hEvent;</span><br><span class="line"></span><br><span class="line">unsigned WINAPI  NumberOfA(void* arg)</span><br><span class="line">&#123;   </span><br><span class="line">    int i, cnt &#x3D; 0;</span><br><span class="line">    WaitForSingleObject(hEvent,INFINITE);&#x2F;&#x2F;没有执行,在本个例子中，Num of others肯定会先进行打印， 因为当前行代码正在等待事件的相应</span><br><span class="line">    for ( i &#x3D; 0; str[i] !&#x3D; &#39;\0&#39;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (str[i] &#x3D;&#x3D; &#39;A&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Num of A: %d\n&quot;,cnt);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsigned WINAPI NumberOfOthers(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int i, cnt &#x3D; 0;</span><br><span class="line">    for ( i &#x3D; 0; str[i]!&#x3D; &#39;\0&#39;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (str[i] !&#x3D; &#39;A&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Num of others: %d\n&quot;, cnt-1);&#x2F;&#x2F;减一是减去&#x2F;n这个换行符</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    SetEvent(hEvent);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc,char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThread1, hThread2;</span><br><span class="line">    fputs(&quot;input string:\n&quot;,stdout);</span><br><span class="line">    fgets(str,STR_LEN,stdin);</span><br><span class="line">    &#x2F;&#x2F;默认安全符-手动-初识状态为无信号状态</span><br><span class="line">    hEvent &#x3D; CreateEvent(NULL, TRUE, FALSE, NULL);</span><br><span class="line">    hThread1 &#x3D; (HANDLE)_beginthreadex(NULL,0,NumberOfA,NULL,0,NULL);</span><br><span class="line">    hThread2 &#x3D; (HANDLE)_beginthreadex(NULL,0,NumberOfOthers,NULL,0,NULL);</span><br><span class="line">    WaitForSingleObject(hThread1, INFINITE);</span><br><span class="line">    WaitForSingleObject(hThread2, INFINITE);</span><br><span class="line">    &#x2F;&#x2F;直到两个线程执行完毕之后，再把事件设置为无信号状态</span><br><span class="line">    ResetEvent(hEvent);</span><br><span class="line">    CloseHandle(hEvent);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例2：AB同时卖票</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line"></span><br><span class="line">int iTickets &#x3D; 100;</span><br><span class="line">HANDLE g_hEvent;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI SellTicketA(void* lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        WaitForSingleObject(g_hEvent,INFINITE);</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;A remain %d\n&quot;,iTickets);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        SetEvent(g_hEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI SellTicketB(void* lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        WaitForSingleObject(g_hEvent, INFINITE);</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;B remain %d\n&quot;, iTickets);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        SetEvent(g_hEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThreadA;</span><br><span class="line">    HANDLE hThreadB;</span><br><span class="line">    hThreadA &#x3D; CreateThread(NULL,0,SellTicketA,NULL,0,0);</span><br><span class="line">    hThreadB &#x3D; CreateThread(NULL,0,SellTicketB,NULL,0,0);</span><br><span class="line">      </span><br><span class="line">    CloseHandle(hThreadA);</span><br><span class="line">    CloseHandle(hThreadB);</span><br><span class="line">    </span><br><span class="line">    g_hEvent &#x3D; CreateEvent(NULL,FALSE,FALSE,NULL);&#x2F;&#x2F;自动还原成无信号状态</span><br><span class="line">    SetEvent(g_hEvent);</span><br><span class="line">    Sleep(4000);</span><br><span class="line">    CloseHandle(g_hEvent);</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深入理解Windows内核对象与句柄"><a href="#深入理解Windows内核对象与句柄" class="headerlink" title="深入理解Windows内核对象与句柄"></a>深入理解Windows内核对象与句柄</h3><h4 id="内核对象-1"><a href="#内核对象-1" class="headerlink" title="内核对象"></a>内核对象</h4><p>Windows中每个内核对象都只是一个内存块，它由操作系统内核分配，并只能由操作系统内核进行访问，应用程序不能再内存中定位这些数据结构并直接更改其内容。这个内存块是一个数据结构，其成员维护着与对象相关的信息。<strong>少数成员(安全描述符和使用计数)是所有内核对象都有的，但大多数成员都是不同类型对象持有的。</strong>               </p><h4 id="内核对象的使用计数与声明周期"><a href="#内核对象的使用计数与声明周期" class="headerlink" title="内核对象的使用计数与声明周期"></a>内核对象的使用计数与声明周期</h4><p><strong>内核对象的所有者是操作系统，而非进程。</strong></p><p> 就是说，当进程退出，内核对象不一定会销毁。操作系统内核通过内核对象的使用计数，知道当前有多少个进程正在使用一个特定的内核对象。初次创建内核对象，使用计数为1。当另一个进程获得该内核对象的访问权之后，使用计数加1。</p><p><strong>如果内核对象的使用计数递减为0，操作系统内核就会销毁该内核对象。</strong></p><p>也就是说内核对象在当前进程中创建，但是当前进程退出时，内核对象有可能被另外一个进程访问。这时，<strong>进程退出只会减少当前进程对引用的所有内核对象的使用计数，而不会减少其他进程对内核的使用计数(即使该内核对象由当前进程创建)。</strong>那么内核对象的使用计数未递减为0，操作系统内核不会销毁该内核对象。</p><p><strong>如下图所示</strong>： <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202112291720195.png" alt="image-20211229172046095"></p><ol><li>进程1退出，2不退出时。内核对象A，B的引用计数减为0，被操作系统内核销毁，而进程1只减少自身对CD的引用计数，不会影响进程2对C、D的引用计数，此时C、D的引用计数不为0，不会被销毁。</li><li>进程2退出，1不退出时。进程2减少自身对C、D的引用次数，不会影响进程1，故A,B,C,D都不会被销毁</li><li>进程1,2均退出时，只要 ABCD不被其它进程使用，内核推向ABCD的引用计数均递减为0，被内核销毁。</li><li>进程1和2均为退出时，内核对象ABCD的引用计数只要有一个递减为0，那么递减为0的内核对象便被内核销毁。</li></ol><h4 id="操作内核对象"><a href="#操作内核对象" class="headerlink" title="操作内核对象"></a>操作内核对象</h4><p>Windows提供了一组函数进行操作内核对象。成功调用一个创建内核对象的函数后，会返回一个句柄，它表示了所创建的内核对象，可由进程中的任何线程使用。在32位进程中，句柄是一个32位值，在64位进程中句柄是一个64位的值。<strong>我们可使用唯一标识内核对象的句柄，调用内核操作函数对内核对象进行操作。</strong></p><h4 id="内核对象与其他类型的对象"><a href="#内核对象与其他类型的对象" class="headerlink" title="内核对象与其他类型的对象"></a>内核对象与其他类型的对象</h4><p>Windows进程中除了内核对象外还有其他类型的对象，比如窗口，菜单，字体等，这些属于用户对象和GDI对象。要区分内核对象与非内核对象，最简单的方法就是查看创建这个对象的函数，几乎所有创建内核对象的函数都有一个允许我们指定<strong>安全属性</strong>的参数。</p><p><strong>注意:</strong></p><ol><li><strong>一个对象是不是内核对象，通常可以看创建此对象API的参数中是否需要PSECURITY_ATTRIBUTES 类型的参数。</strong></li><li>内核对象只是一个内存块，这块内存位与操作系统内核的地址空间，内存块中存放一个数据结构 (此数据结构的成员有如:安全描述符、计数器等)。</li><li>每个进程中有一个句柄表，这个句柄表(handle table) 仅供内核对象使用。</li></ol><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202201011143539.png" alt="image-20211229194401299"></p><p>4.调用创建内核对象的函数后，其实就是相当于操作系统多了一个内存块，这个内存块就是内核对象。 </p><p>5.调用API CreateThread的时候，比仅仅是创建了一个内核对象，引用计数+1，(创建线程的这个函数)还打开(访问)了内核对象，引用计数+1，所以引用计数就变为2了。(<strong>也就是说实际上创建一个内核对象之后，真是的引用计数其实是2</strong>)</p><p>6.当调用CloseHandle(hThread)时 ，系统通过hThread计算出此句柄在句柄表中的索引，然后把那一项标注为空闲可用的项，内核对象的引用计数-1,即此时此内核对象的引用计数为1，之后这个线程句柄与创建的内核对象已经没有任何关系了。</p><p> <strong>就是说你close之后，该句柄已经和内核对象(内存块)没关系了。</strong></p><p>只有当内核对象的引用计数为0的时候，内核对象才会被销毁。</p><p><strong>但是</strong>，我们已经关闭了线程句柄，也就是这个线程句柄已经和这个内核对象已经没有瓜葛了，那么那个内核对象是怎么又可以和此线程联系起来了呢？<strong>——通过创建线程时产生的那个线程ID。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;访问上面已经调用close的线程1的内核对象，线程ID从创建线程1时获取。</span><br><span class="line">headle2 &#x3D; OpenThread(THREAD_QUERY_INFORMATION, FALSE, threadId);</span><br></pre></td></tr></table></figure><h3 id="线程同步之信号量"><a href="#线程同步之信号量" class="headerlink" title="线程同步之信号量"></a>线程同步之信号量</h3><ul><li><p>信号量可以起到类似于限流参观的作用，一个博物馆只能进这么些人同时参观，后来的人需要在后面排队，<strong>信号量就是把门的，满了拦着人不让进，有位置就往里面放人。</strong>每个人就相当于线程。<strong>信号量限制线程。</strong>这个限制的条件(例如:几个人能同时从参观。)是由程序员来决定的。<strong>信号量限制可活动的线程数。</strong></p></li><li><p>信号量类似于事件对象，同样有两个状态：</p><ul><li>触发状态(有信号状态)，表示有可用资源。</li><li>未触发状态(无信号状态)，表示没有可用资源。</li></ul></li><li><p>信号量的组成</p><ul><li>计数器：该内核对象被使用的次数</li><li>最大资源数量: 标识信号量可以控制的最大资源数量(带符号的32位 )</li><li>当前资源数量:  标识当前可用资源的数量(带符号的32位)。即表示<strong>当前开放的资源个数(注意不是剩下资源的个数)， 只有开放的资源才能被线程所申请</strong>。但这些开放的资源不一定被线程占 用完。例如:当前开放5个资源，只有3个线程申请，则还有2个资源可被申请，但如果这时总共是7个线程要使用信号量，显然开放的5个资源是不够的。这时还可以再开放两个，直到达到最大资源数量。</li></ul><p><strong>信号量的规则如下</strong>：</p><ol><li>如果当前资源计数大于0，那么信号量处于触发状态(有信号状态)，表示有可用资源。</li><li>如果当前资源技术等于0，那么信号量属于未触发状态(无信号状态)，表示没有可用资源。</li><li>系统绝对不会让当前资源计数变为负数。</li><li>当前资源计数绝对不会大于最大资源计数。</li></ol></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202201011143607.png" alt="image-20211230183831748"></p><p><strong>信号量与互斥量不用的地方在于，信号量允许多个线程再同一时刻访问同一资源，但是需要限制在同一时刻访问此资源的最大线程数目。</strong></p><p>信号量对象对线程的同步方式与前面几种方法不同，信号允许多个线程同时使用共享资源。</p><p><strong>类比理解:</strong> 信号量就是停车场保安，线程就是车辆，例如当前停车场已满(所有资源都被占用)，开走一个资源+1(有空车位)，进来一个车-1。(<strong>资源可以理解为“变量——临界区的内容”</strong>)</p><p><strong>创建信号量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HANDLE</span><br><span class="line">WINAPI</span><br><span class="line">CreateSemaphoreW(</span><br><span class="line">    _In_opt_ LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,  &#x2F;&#x2F; Null 安全属性</span><br><span class="line">_In_ LONG lInitialCount,  &#x2F;&#x2F;初始化时，共有多少个资源是可以用的。 0：未触发状&#x2F;&#x2F;态（无信号状态），表示没有可用资源</span><br><span class="line"></span><br><span class="line">    _In_ LONG lMaximumCount,  &#x2F;&#x2F;能够处理的最大的资源数量   3</span><br><span class="line">    _In_opt_ LPCWSTR lpName   &#x2F;&#x2F;NULL 信号量的名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>增加信号量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WINAPI</span><br><span class="line">ReleaseSemaphore(</span><br><span class="line">    _In_ HANDLE hSemaphore,   &#x2F;&#x2F;信号量的句柄</span><br><span class="line">    _In_ LONG lReleaseCount,   &#x2F;&#x2F;将lReleaseCount值加到信号量的当前资源计数上面 0-&gt; 1</span><br><span class="line">    _Out_opt_ LPLONG lpPreviousCount  &#x2F;&#x2F;当前资源计数的原始值</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> <strong>关闭句柄</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CloseHandle(</span><br><span class="line">    _In_ _Post_ptr_invalid_ HANDLE hObject</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">static HANDLE semOne;</span><br><span class="line">static HANDLE semTwo;</span><br><span class="line">static int num;</span><br><span class="line"></span><br><span class="line">unsigned WINAPI Read(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fputs(&quot;Input num:\n&quot;,stdout);</span><br><span class="line">        printf(&quot;begin read\n&quot;);</span><br><span class="line">        WaitForSingleObject(semTwo,INFINITE);&#x2F;&#x2F;等待内核对象semTwo的信号，如果有信号，就继续执行，如果没信号就等待。</span><br><span class="line">        printf(&quot;beginning read\n&quot;);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">        ReleaseSemaphore(semOne,1,NULL);&#x2F;&#x2F;释放and给semOne一个信号</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">unsigned WINAPI Accu(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    for (int  i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">    &#123; </span><br><span class="line">        printf(&quot;begin Accu\n&quot;);</span><br><span class="line">        WaitForSingleObject(semOne,INFINITE);&#x2F;&#x2F;等待内核对象semoOne的信号，无信号，等待ing</span><br><span class="line">        printf(&quot;beginning Accu\n&quot;);</span><br><span class="line">        sum +&#x3D; num;</span><br><span class="line">        printf(&quot;sum &#x3D; %d\n&quot;,sum);</span><br><span class="line">        ReleaseSemaphore(semTwo,1,NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Result: %d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc,char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThread1, hThread2;</span><br><span class="line">    semOne &#x3D; CreateSemaphore(NULL, 0, 1, NULL);&#x2F;&#x2F;初始化时没有可用资源，无信号状态最大信号量是1</span><br><span class="line">    semTwo &#x3D; CreateSemaphore(NULL, 1, 1, NULL);&#x2F;&#x2F;有可用资源，有信号状态</span><br><span class="line">    hThread1 &#x3D; (HANDLE)_beginthreadex(NULL,0,Read,NULL,0,NULL); </span><br><span class="line">    hThread2 &#x3D; (HANDLE)_beginthreadex(NULL,0,Accu,NULL,0,NULL);</span><br><span class="line">  </span><br><span class="line">    CloseHandle(semOne);</span><br><span class="line">    CloseHandle(semTwo);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ReleaseSemaphore当等待函数返回时，它会将信号量的计数减一。当线程完成使用资源时，它调用 ReleaseSemaphore 将信号量的计数增加一。（<a href="https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-releasesemaphore">链接</a>）</p><h3 id="线程同步之代码段"><a href="#线程同步之代码段" class="headerlink" title="线程同步之代码段"></a>线程同步之代码段</h3><p>关键代码段，也称为临界区，工作在用户方式下。它是指一个<strong>小代码段</strong>，在代码块能够执行前，它必须独占对某些资源的访问权。通常把多线程中访问同一种资源的那部分代码当做关键代码块。</p><p><strong>初始化关键代码段</strong></p><p>调用InitializeCriticalSection函数初始化一个关键代码段。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InitializeCriticalSection(</span><br><span class="line">    _Out_ LPCRITICAL_SECTION lpCriticalSection</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>该函数只有一个指向CRITICAL_SECTION结构体的指针。</p><p><strong>进入关键代码段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VOID</span><br><span class="line">WINAPI</span><br><span class="line">EnterCriticalSection(</span><br><span class="line">    _Inout_ LPCRITICAL_SECTION lpCriticalSection</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>调用此函数之前，已获得指定的临界区对象的所有权，该函数等待指定的临界区对象的所有权，如果该所有权赋予了调用线程，则该函数就返回；否则该函数会一直等待，从而导致线程等待。</p><p><strong>退出关键代码段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VOID</span><br><span class="line">WINAPI</span><br><span class="line">LeaveCriticalSection(</span><br><span class="line">    _Inout_ LPCRITICAL_SECTION lpCriticalSection);</span><br></pre></td></tr></table></figure><p>线程使用完临界区所保护的资源之后，需要调用此函数，<strong>释放指定的临界对象的所有权</strong>。</p><p>之后，<strong>其它想要获得该临界区所有权的线程就可以获得该所有权，从而进入关键代码段，访问保护的资源</strong>。</p><p><strong>删除临界区</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">VOID</span><br><span class="line">WINAPI</span><br><span class="line">DeleteCriticalSection(</span><br><span class="line">    _Inout_ LPCRITICAL_SECTION lpCriticalSection</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>当临界区不再需要时，可以调用此函数释放掉该对象，该函数将释放一个没有任何线程所拥有的临界区对象的所有资源。</p><p><strong>当一个代码段调用LeaveCriticalSection之前，其他代码段是无法操作这块代码的。</strong></p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;程序启动，两个线程开启，只有当一个代码块中调用LeaveCriticalSection另一个代码块才能操作临界区对象，这就会使操作这个临界区对象的只有一个。</span><br><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;process.h&gt;</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">int iTickets &#x3D; 100;</span><br><span class="line">CRITICAL_SECTION g_cs;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;A B 两个买票窗口</span><br><span class="line"></span><br><span class="line">DWORD  WINAPI SellTicketA(void* lpParrm)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        EnterCriticalSection(&amp;g_cs);&#x2F;&#x2F;进入临界区(关键代码段)</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;A remain %d\n&quot;,iTickets);</span><br><span class="line">            LeaveCriticalSection(&amp;g_cs);&#x2F;&#x2F;进入临界区</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            LeaveCriticalSection(&amp;g_cs);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD  WINAPI SellTicketB(void* lpParrm)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        EnterCriticalSection(&amp;g_cs);</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;B remain %d\n&quot;,iTickets);</span><br><span class="line">            LeaveCriticalSection(&amp;g_cs);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            LeaveCriticalSection(&amp;g_cs);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThreadA, hThreadB;</span><br><span class="line">    hThreadA &#x3D; CreateThread(NULL,0,SellTicketA,NULL,0,NULL);</span><br><span class="line">    hThreadB &#x3D; CreateThread(NULL,0,SellTicketB,NULL,0,NULL);</span><br><span class="line"></span><br><span class="line">    CloseHandle(hThreadA);</span><br><span class="line">    CloseHandle(hThreadB);</span><br><span class="line">    &#x2F;&#x2F;初始化关键代码块</span><br><span class="line">    InitializeCriticalSection(&amp;g_cs);</span><br><span class="line">    Sleep(4000);</span><br><span class="line">    DeleteCriticalSection(&amp;g_cs);&#x2F;&#x2F;删除临界区(关键代码段)</span><br><span class="line">    </span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程同步之线程死锁"><a href="#线程同步之线程死锁" class="headerlink" title="线程同步之线程死锁"></a>线程同步之线程死锁</h3><p>死锁是指多个线程因竞争资源而造成的一种僵局(互相等待)，若无外力作用，这些进程都将无法向前推进。 </p><p>Enter和Leave要成对出现。</p><p><strong>只有用户态下，发生线程死锁，内核对象是没有死锁的。</strong></p><p>**示例:**死锁情况。</p><p>开启程序，开启线程，线程1进入A代码段，睡1s,切换线程2，进入B代码段，睡1s,此时两个线程相互等待，发生死锁。(<strong>这里用切换，是因为本质上，同一时间CPU只能执行一个任务，显式的多线程是CPU在多个任务之间来回切换，因为速度及快，所以我们理解为多个任务同时进行,也就是多线程。</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;process.h&gt; </span><br><span class="line"></span><br><span class="line">int iTickets &#x3D; 5000;</span><br><span class="line">CRITICAL_SECTION g_csA;</span><br><span class="line">CRITICAL_SECTION g_csB;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; A窗口     B窗口</span><br><span class="line"></span><br><span class="line">DWORD WINAPI SellTicketA(void* lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        EnterCriticalSection(&amp;g_csA);&#x2F;&#x2F;进入临界区A</span><br><span class="line">        &#x2F;&#x2F;Sleep(1);</span><br><span class="line">        EnterCriticalSection(&amp;g_csB);&#x2F;&#x2F;进入临界区B</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;A remain %d\n&quot;, iTickets);</span><br><span class="line">            LeaveCriticalSection(&amp;g_csB);&#x2F;&#x2F;离开临界区B</span><br><span class="line">            LeaveCriticalSection(&amp;g_csA);&#x2F;&#x2F;离开临界区A</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            LeaveCriticalSection(&amp;g_csB);&#x2F;&#x2F;离开临界区B</span><br><span class="line">            LeaveCriticalSection(&amp;g_csA);&#x2F;&#x2F;离开临界区A</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI SellTicketB(void* lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        EnterCriticalSection(&amp;g_csB);&#x2F;&#x2F;进入临界区B</span><br><span class="line">        Sleep(1);</span><br><span class="line">        EnterCriticalSection(&amp;g_csA);&#x2F;&#x2F;进入临界区A</span><br><span class="line">        if (iTickets &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1);</span><br><span class="line">            iTickets--;</span><br><span class="line">            printf(&quot;B remain %d\n&quot;, iTickets);</span><br><span class="line">            LeaveCriticalSection(&amp;g_csA);&#x2F;&#x2F;离开临界区A</span><br><span class="line">            LeaveCriticalSection(&amp;g_csB);&#x2F;&#x2F;离开临界区B</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            LeaveCriticalSection(&amp;g_csA);&#x2F;&#x2F;离开临界区A</span><br><span class="line">            LeaveCriticalSection(&amp;g_csB);&#x2F;&#x2F;离开临界区B</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hThreadA, hThreadB;</span><br><span class="line">    hThreadA &#x3D; CreateThread(NULL, 0, SellTicketA, NULL, 0, NULL);  &#x2F;&#x2F;2</span><br><span class="line">    hThreadB &#x3D; CreateThread(NULL, 0, SellTicketB, NULL, 0, NULL);  &#x2F;&#x2F;2</span><br><span class="line">    CloseHandle(hThreadA); &#x2F;&#x2F;1</span><br><span class="line">    CloseHandle(hThreadB); &#x2F;&#x2F;1</span><br><span class="line">    InitializeCriticalSection(&amp;g_csA); &#x2F;&#x2F;初始化关键代码段A</span><br><span class="line">    InitializeCriticalSection(&amp;g_csB); &#x2F;&#x2F;初始化关键代码段B</span><br><span class="line">    Sleep(40000);</span><br><span class="line">    DeleteCriticalSection(&amp;g_csA);&#x2F;&#x2F;删除临界区</span><br><span class="line">    DeleteCriticalSection(&amp;g_csB);&#x2F;&#x2F;删除临界区</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程同步比较"><a href="#线程同步比较" class="headerlink" title="线程同步比较"></a>线程同步比较</h3><p><strong>Windows线程同步的方式主要有四种:</strong></p><ul><li>互斥对象</li><li>事件对象</li><li>信号量</li><li>关键代码块</li></ul><p><strong>区别:</strong></p><ul><li>互斥对象和事件对象以及信号量都属于<strong>内核对象</strong>，利用内核对象进行线程同步时，<strong>速度较慢</strong>，但利用互斥对象和事件对象这样的内核对象，<strong>可以在多个进程中个各个线程间进行同步</strong>。</li><li>关键代码块工作在<strong>用户方式</strong>下，同步速度较快，但在使用关键底代码块时，很容易进入死锁状态，因为在等待进入关键代码段时无法设定超时值。</li></ul><p>用户级别的:关键代码段，只能本进程中。</p><p>内核级别的:互斥量/事件/信号量，可以跨进程。</p><p><strong>通常，在编写多线程程序并需要实现线程同步时，首先关键代码块，因为它的使用比较简单。</strong></p><p>如果是在MFC中使用的话，可以在类的构造函数initxxx中调用InitializeCriticalSection函数，在该类的析构函数中调用DeleteCriticalSection函数，在所需要保护的代码前调通用EnterCriticalSection函数，在访问完所需保护的资源后，调用LeaveCriticalSection函数。</p><p><strong>需要注意的是:</strong> A在调用了EnterCriticalSection后，要相应的调用LeaveCriticalSection函数，否则其他等待该临界区对象所有权的线程将无法执行。</p><p>B如果访问关键代码段时，使用了多个临界区对象，就要注意防止线程死锁的发生。</p><p><strong>另外</strong>，如果需要在多个进程间的各个线程间实现同步的话，可以使用互斥对象和事件对象或者信号量。</p><p><strong>总结图:</strong> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202201011107236.png" alt="image-20220101110746152"></p><p><strong>什么是线程安全？</strong> 假如你的代码在多线程执行和单线程执行永远是完全一样的结果，那么你的代码是线程安全的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概</summary>
      
    
    
    
    <category term="操作系统" scheme="https://doraemon-hub-art.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="-操作系统" scheme="https://doraemon-hub-art.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="-多线程" scheme="https://doraemon-hub-art.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>宏碁暗影骑士擎安装双系统踩坑记录</title>
    <link href="https://doraemon-hub-art.github.io/2021/12/26/%E5%AE%8F%E7%A2%81%E6%9A%97%E5%BD%B1%E9%AA%91%E5%A3%AB%E6%93%8E%E5%AE%89%E8%A3%85%E5%8F%8C%E7%B3%BB%E7%BB%9F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://doraemon-hub-art.github.io/2021/12/26/%E5%AE%8F%E7%A2%81%E6%9A%97%E5%BD%B1%E9%AA%91%E5%A3%AB%E6%93%8E%E5%AE%89%E8%A3%85%E5%8F%8C%E7%B3%BB%E7%BB%9F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-26T13:59:23.000Z</published>
    <updated>2022-01-01T04:04:57.269Z</updated>
    
    <content type="html"><![CDATA[<p><strong>宏碁暗影骑士擎安装Ubuntu 20.04.3 + Windows10</strong></p><p>本文用来记录笔者前两天安装双系统所遇到的问题，解决的困难只局限于宏碁暗影骑士擎，其它电脑没准不适用。</p><ul><li>安装视频推荐——<a href="https://www.bilibili.com/video/BV1554y1n7zv?from=search&seid=5406529348841572890&spm_id_from=333.337.0.0">Windows 和 Ubuntu 双系统安装指南</a>,这个up主讲的很详细，跟着视频一步一步做就可以。</li><li>我的U盘用<strong>Win32DiskImager</strong>写入镜像之后提示需要格式化才能打开，所以我用的是<strong>rufus</strong>，这个问题该视频评论下面有人提到。</li><li>安装Unbuntu时提示，<strong>turn off rst</strong>,开机猛按F2进入bios设置，在main界面按<strong>ctrl+s</strong>,进入bios高级设置，将sata mode 修改为<strong>ahci</strong>,即可完成正常安装。</li><li>安装完成之后发现无法正常进入win10，因为修改了sata mode,解决办法参考这个博主的文章，完美解决问题——<a href="https://blog.csdn.net/weixin_45658858/article/details/107307523">双系统之下更改Windows硬盘启动方式为AHCI（不用重装系统）</a>。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;宏碁暗影骑士擎安装Ubuntu 20.04.3 + Windows10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文用来记录笔者前两天安装双系统所遇到的问题，解决的困难只局限于宏碁暗影骑士擎，其它电脑没准不适用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装视频推荐——&lt;a hr</summary>
      
    
    
    
    <category term="计算机" scheme="https://doraemon-hub-art.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-Linux" scheme="https://doraemon-hub-art.github.io/tags/Linux/"/>
    
    <category term="-windows" scheme="https://doraemon-hub-art.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++日常积累(没啥用).md</title>
    <link href="https://doraemon-hub-art.github.io/2021/12/10/%E3%80%90C++%E3%80%91C++%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF(%E6%B2%A1%E5%95%A5%E7%94%A8)/"/>
    <id>https://doraemon-hub-art.github.io/2021/12/10/%E3%80%90C++%E3%80%91C++%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF(%E6%B2%A1%E5%95%A5%E7%94%A8)/</id>
    <published>2021-12-10T08:14:18.000Z</published>
    <updated>2021-12-10T08:19:12.995Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>前言</strong>:</p><p>本篇文章用来记录我想到或者没注意过的小概念or知识等。</p><hr><p>2021.12.10</p><ul><li>重写是对于继承关系来说的，并不是必须加virtual,直接在子类中实现不同的定义即可 。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;本篇文章用来记录我想到或者没注意过的小概念or知识等。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2021.12.10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写是对于继承关系来说的，并不是必须加virtual,直接在子类中实现不同的定义</summary>
      
    
    
    
    <category term="C++" scheme="https://doraemon-hub-art.github.io/categories/C/"/>
    
    
    <category term="-C++" scheme="https://doraemon-hub-art.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】MySQL基础知识总结</title>
    <link href="https://doraemon-hub-art.github.io/2021/11/26/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%20/"/>
    <id>https://doraemon-hub-art.github.io/2021/11/26/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%20/</id>
    <published>2021-11-26T12:17:10.000Z</published>
    <updated>2021-11-27T05:39:34.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h3><blockquote><p>数据库就是按照数据结构来组织、存储和管理数据，建立在计算存储设备上的仓库。可以看成是电子化的文件柜，也就是存储电子 文件的处所，用户可以对文件中的数据进行进行新增、查询、更新、删除等操作。</p></blockquote><h3 id="为什么要使用数据库？"><a href="#为什么要使用数据库？" class="headerlink" title="为什么要使用数据库？"></a>为什么要使用数据库？</h3><p>随着，应用程序的功能越来越复杂，数据量越来越大，如何管理这些数据就成了一个 大问题。</p><ul><li>读写文件的并解析出数据需要大量重复代码</li><li>从成千上万的数据中快速查询出指定数据需要复杂的逻辑</li><li>数据缺乏安全感</li></ul><p>如果每个应用程序都各自写自己的读写数据代码，一方面效率低，容易出错，另一方面，每个应用程序访问数据的接口都不同，数据难以复用。</p><p><strong>所以</strong></p><blockquote><p>数据库作为一种转门管理数据的软件就出现了。应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。至于数据本身如何存储到文件，那是数据库软件的事情， 应用程序自己并不关心。</p></blockquote><p>这样一来，编写应用程序的时候，数据读写的功能就被大大地简化了。</p><h3 id="MySql简介"><a href="#MySql简介" class="headerlink" title="MySql简介"></a>MySql简介</h3><blockquote><p>MySql作为一种开源的轻量级数据库（<strong>关系型数据库</strong>），在开源数据库中比较流行，由于小巧安装方便快捷，经常会用于互联网公司， 维护也比较方便。因为开源，使用上比较灵活，mysql还有许多第三方的存储引擎，可以根据自己的需要安装。在功能上mysql可能没有oracle强大，但是对于资源的占用非常少，数据恢复快。在维护上，追求稳定的是性能和易用性。</p></blockquote><p>选择数据库时，既要考虑成本，还要考虑维护的稳定性和便利性， 需要 结合我们的业务，如果提高安全性，海量数据，能承担高昂的成本，可以选择oracle, 一般应用的快速查询，高并发访问，一般情况下都可以选择mysql，另外特殊情况特殊处理。</p><p><strong>优势</strong>：</p><ol><li>开源</li><li>成本低</li><li>快平台性</li><li>容易使用</li></ol><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以吧他们看作很多Excel表。</p><p><strong>例如</strong>:</p><p><img src="/images/MySql.assets/image-20211011195309404.png" alt="image-20211011195309404"></p><blockquote><p>表的每一行称为记录(Record),记录是一个逻辑上的数据。</p></blockquote><blockquote><p>表的每一列称为字段(Column),同一个表的每一刚记录都拥有相同的若干字段。</p></blockquote><blockquote><p>字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串’’。</p><p>通常情况下，字段应该避免允许为NULL。不允许为NULL可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为NULL。</p></blockquote><p>和Excel表有所不同的是，关系数据库的表和表之间需要建立“一对多”，“多对一”和“一对一”的关系，这样才能够按照应用程序的逻辑来组织和存储数据。</p><p><img src="/images/MySql.assets/image-20211013151630595.png" alt="image-20211013151630595"></p><p>每一行对应着一个班级，而一个班级对应着多个学生，所以班级表和学生表的关系就是“一对多”：</p><p><img src="/images/MySql.assets/image-20211013151657803.png" alt="image-20211013151657803"></p><p>反过来，如果我们先在学生表中定位了一行记录，例如ID=1的小花，要确定他的班级，只需要根据他的“班级ID”对应的值101找到班级表中ID=101的记录，即六年级一班。所以，学生表和班级表是“多对一”的关系。</p><p>如果我们把班级表分拆得细一点，例如，单独创建一个教师表：</p><p><img src="/images/MySql.assets/image-20211013151803516.png" alt="image-20211013151803516"></p><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>像文件一样，数据库也能进行如下操作。</p><blockquote><p>（windows下不区分大小写<strong>，</strong>Linux下区分大小写。）</p><p>注意结尾的分号;(就像写C/C++一样)</p></blockquote><hr><ol><li>创建数据库</li><li>查看数据库</li><li>选择数据库</li><li>删除数据库</li></ol><p>在创建数据库之前，可以使用SHOW语句来显示当前已经存在的数据库，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p>因为数据库本身的需要，所以它默认自带了几个库。不要随意删除，否则可能会无法正常运行数据库。</p><p><img src="/images/MySql.assets/image-20211013155948125.png" alt="image-20211013155948125"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>创建数据库是指在数据库系统中划分一块空间，用来存储相应的数据，这是进行表操作的基础，也是进行数据库管理的基础。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database_name(数据库的名字);</span><br></pre></td></tr></table></figure><p><strong>例如</strong>：<br><img src="/images/MySql.assets/image-20211013161521948.png" alt="image-20211013161521948"></p><p>再SHOW</p><p><img src="/images/MySql.assets/image-20211013161601379.png" alt="image-20211013161601379"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>在对数据库进行操作之前，应该先选择一个数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database_name(要记性操作的数据库名字); </span><br></pre></td></tr></table></figure><p>要选择已存在的库，否则会报错。</p><p><img src="/images/MySql.assets/image-20211013175924548.png" alt="image-20211013175924548"></p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE database_name;</span><br></pre></td></tr></table></figure><p>要删除已有的数据库，  否则会报错。</p><p><img src="/images/MySql.assets/image-20211013180400284.png" alt="image-20211013180400284"></p><p>成功删除提示。</p><p><img src="/images/MySql.assets/image-20211013180433402.png" alt="image-20211013180433402"></p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><blockquote><p>可以采用26个英文字母 (不区分大小写) 和0-9的自然数 (一般不需要) 加上下划线 _ 组成，命名简介明确 (Student_Age)，多个单词用下划线 ‘_’ 分隔，一个项目一个数据库，多个项目慎用同一个数据库!!!</p></blockquote><h2 id="数据表的操作"><a href="#数据表的操作" class="headerlink" title="数据表的操作"></a>数据表的操作</h2><blockquote><p>表是一种很重要的数据库对象，是组成数据库的基本元素，由若干个字段组成，主要用来实现存储数据记录。表的操作包含创建表、查询表、修改表和删除表，这些操作是数据库对象的表管理中最基本也是最重要的操作。</p></blockquote><h3 id="创建一个班级表"><a href="#创建一个班级表" class="headerlink" title="创建一个班级表"></a>创建一个班级表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database school;   #创建数据库school</span><br><span class="line"></span><br><span class="line">mysql&gt; use school;   #选择数据库school </span><br><span class="line">mysql&gt; create table class(class_id int, class_name varchar(128), class_teacher varchar(64));         #创建表class</span><br><span class="line">mysql&gt; insert into class values (101, &#39;六年级一班&#39;, &#39;马老师&#39;);  #往表中插入101班记录</span><br><span class="line">mysql&gt;insert into class values (102, &#39;六年级二班&#39;, &#39;潘老师&#39;);   #往表中插入102班记录</span><br><span class="line">mysql&gt;select * from class;  #查询表class 中的全部记录</span><br><span class="line">mysql&gt;select * from class where class_id&#x3D;101;  #查询表class 中的全部记录</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211013182829242.png" alt="image-20211013182829242"></p><p><img src="/images/MySql.assets/image-20211013182810106.png" alt="image-20211013182810106"></p><hr><p>补充:mysql中字符串用单引号括起来。</p><hr><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名([表定义选项])[表选项][分区选择];</span><br></pre></td></tr></table></figure><p>其中[表定义选项]格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;列名1&gt; &lt;类型1&gt; […] &lt;列名n&gt; &lt;类型n&gt;</span><br></pre></td></tr></table></figure><blockquote><p>CREATE TABLE 命令语法比较多，其主要是由</p><p>表创建定义（create-definition）、</p><p>表选项（table-options）和</p><p>分区选项（partition-options）所组成的。</p></blockquote><blockquote><p>- CREATE TABLE：用于创建给定名称的表，必须拥有表CREATE的权限。</p></blockquote><blockquote><p>有些数据库可以使用加引号的识别名，例如，’mydb’.’mytbl’ 是合法的，但 mysql 是不合法。</p></blockquote><p><strong>表的创建有两种方式</strong>：</p><p>1.选择选择数据库，然后按照上面方式创建表。</p><p>2.不选择先选择数据库，以db_name.tbl_name的方式创建，<strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table school.class2(class_id int, class_name varchar(128), class_teacher varchar(64));  </span><br></pre></td></tr></table></figure><blockquote><p>&lt;表定义选项&gt;：表创建定义，由列名（col_name）、列的定义（column_definition, 或者叫类型定义）以及可能的空值说明、完整性约束或表索引组成。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use school;  #选择数据库school </span><br><span class="line">mysql&gt; create table class4(class_id int PRIMARY KEY, class_namevarchar(128) NOT NULL, class_teacher varchar(64) UNIQUE);#创建表class3 </span><br><span class="line"></span><br><span class="line"># UNIQUE 唯一限定-不能重复</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><blockquote><p>默认的情况是，表被创建到当前的数据库中。若表已存在、没有当前数据库或者数据库不存在，则会出现错误。</p><p>提示：使用 CREATE TABLE 创建表时，必须注意以下信息：</p><p>- 要创建的表的名称不区分大小写，不能使用SQL语言中的关键字，如DROP、ALTER、INSERT等。</p><p>- 数据表中每个列（字段）的名称和数据类型，如果创建多个列，要用逗号隔开。</p></blockquote><h4 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h4><p>1）采用26字母和0-9的自然数加上下互相 ‘<em>’ 组成，命名简洁明确，多个单词用下划线 ‘_’</em> 隔开。</p><p>2）全部小写命名，尽量避免出现大写</p><p>3）字段必须填写描述信息</p><p>4）禁止使用数据库关键字</p><p>5）字段名称一般采用名词或动宾短语</p><p>6）采用字段的名字必须是易于理解，一般不超过三个英文单词</p><p>7）在命名表的列时，不要重复表的名称（如：在 user 表中，出现 user_name 字段）</p><p>8）字段命名使用完整名称</p><h4 id="列的类型定义"><a href="#列的类型定义" class="headerlink" title="列的类型定义"></a>列的类型定义</h4><h5 id="整型类型"><a href="#整型类型" class="headerlink" title="整型类型"></a>整型类型</h5><blockquote><p>整数类型是数据库中最基本的数据类型。标准SQL中支持INTEGER和SMALLINT这两种数据类型。MySQL数据库除了支持这两种类型以外，还扩展支持了TINYINT、MEDIUMINT和BIGINT。下表从不同整数类型的字节数、取值范围等方面进行对比。</p></blockquote><p><img src="/images/MySql.assets/image-20211019161552115.png" alt="image-20211019161552115"></p><p><strong>整数类型的附带属性</strong>：</p><h6 id="1-类型名后面的小括号"><a href="#1-类型名后面的小括号" class="headerlink" title="(1)类型名后面的小括号"></a>(1)类型名后面的小括号</h6><p>指定显示宽度 (并不是该类型占用的字节数)。如果不显式指定宽度，则默认为:</p><blockquote><p>tinyint(3)、 smallint(5)、 mediumint(8)、 int(11) 和 bigint(20)。</p></blockquote><p>一般配合zerofill使用，顾名思义，zerofill就是用‘0’填充的意思，也就是在数字位不够的空间用字符“0”填满。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table class2(id,int(8) zerofill,name varchar(128),teacher varchar(64));</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="/images/MySql.assets/image-20211019171847340.png" alt="image-20211019171847340"></p><p>​    超过显示位数则不会补零</p><p><img src="/images/MySql.assets/image-20211019172153390.png" alt="image-20211019172153390"></p><h6 id="（2）UNSIGNED-无符号"><a href="#（2）UNSIGNED-无符号" class="headerlink" title="（2）UNSIGNED(无符号)"></a>（2）UNSIGNED(无符号)</h6><blockquote><p>如果需要在字段里面保存非负数或者需要较大的上限值时，可以用此选项，它的取值范围是正常值的下限取 0，上限取原值的 2 倍，例如，tinyint 有符号范围是-128～+127，而无符号范围是 0～255。如果一个列指定为 zerofill，则 MySQL 自动为该列添加 UNSIGNED 属性。 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table class2(id int unsigned,name varchar(128),teacher varchar(64));</span><br></pre></td></tr></table></figure><p>添加一个zerofill属性。</p><p><img src="/images/MySql.assets/image-20211019182633019.png" alt="image-20211019182633019"></p><h6 id="3-AUTO-INCREMENT"><a href="#3-AUTO-INCREMENT" class="headerlink" title="(3)AUTO_INCREMENT"></a>(3)AUTO_INCREMENT</h6><blockquote><p>在需要产生唯一标识符或顺序值时，可利用此属性，这个属性只用于整数类型。AUTO_INCREMENT 值一般从 1 开始，每行增加 1。 一个表中最多只能有一个 AUTO_INCREMENT列 。对于任何想要使用 AUTO_INCREMENT 的列，应该定义为 NOT NULL，并定义为 <strong>PRIMARY KEY 或定义为 UNIQUE 键</strong>(不能有重复的)。 例如，可按下列任何一种方式定义 AUTO_INCREMENT 列： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class8(id integer auto_increment PRIMARY KEY , name varchar(128), teacher varchar(64) );         #创建表class8， id 具有自增长属性</span><br><span class="line"></span><br><span class="line">mysql&gt; create table class9(id integer auto_increment UNIQUE , name varchar(128), teacher varchar(64) );         #创建表class9， id 具有自增长属性</span><br></pre></td></tr></table></figure><p><strong>设置的类型可以不指定值</strong>，但要在value前进行一个声明，声明一下哪个需要手动设定。</p><p>插入的第一个元素如果不指定的话就从1开始，指定的话，后面的元素不指定，就前一个的基础上+1。</p><p><strong>如下图所示。</strong></p><p><img src="/images/MySql.assets/image-20211019201436096.png" alt="image-20211019201436096"></p><h5 id="浮点类型和定点数类型"><a href="#浮点类型和定点数类型" class="headerlink" title="浮点类型和定点数类型"></a>浮点类型和定点数类型</h5><blockquote><p>数据表中用浮点数类型和定点数类型来表示小数。浮点数类型包括单精度浮点数（FLOAT型）和双精度浮点数（DOUBLE型）。定点数类型就是DECIMAL型。下面从这三种类型的字节数、取值范围等方面进行对比，如下表所示。</p></blockquote><p><img src="/images/MySql.assets/image-20211025081911859.png" alt="image-20211025081911859"></p><p><strong>三种类型的区别</strong>：<br>float是单精度浮点型，double是双精度浮点型，decimal是定点型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class10 (f1 float, do1 double, de1 decimal);  #创建表class10</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211025083153820.png" alt="image-20211025083153820"></p><hr><p>MySQL 浮点型和定点型可以用类型名称后加<strong>（M，D）</strong>来表示，M表示该值的总共长度，D表示小数点后面的长度，M和D又称为精度和标度，如float(7,4)的 可显示为-999.9999，MySQL保存值时进行四舍五入(<strong>当数的长度超过所设置精度</strong>)，如果插入999.00009，则结果为999.0001。</p><p>对于decimal,M是最大位数（精度），范围是1到65。可不指定，默认值是10。D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，<strong>默认值是0</strong>。</p><p>FLOAT和DOUBLE在不指定精度时，默认会按照实际的精度来显示，而DECIMAL在不指定精度时，默认整数为10，小数为0,即(10, 0)。</p><hr><p><strong>注意</strong>：</p><blockquote><p>当我们需要存储小数，并且有精度要求，比如存储金额时，通常会考虑使用DECIMAL字段类型!!!</p></blockquote><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h5><blockquote><p>日期与时间类型是为了方便在数据库中存储日期和时间而设计的，数据库有多种表示日期和时间的数据类型。其中，YEAR类型表示年，DATE类型表示日期，TIME类型表示时间，DATETIME和TIMESTAMP表示日期和时间。下面从这5种日期与时间类型的字节数、取值范围和零值等方面进行对比，如下表所示。</p></blockquote><p><img src="/images/MySql.assets/image-20211025091542570.png" alt="image-20211025091542570"></p><blockquote><p>每种日期与时间类型都有一个有效范围。如果插入的值超过了这个范围，系统就会报错，并将零值插入到数据库中。不同的日期与时间类型均有不同的零值.</p><p>插入日期时间时，日期年月日和时间时分秒可以使用 “<em><strong>*: - _ /*</strong></em> ”中的任意字符来分隔,如果单独插入时间，则会报错！！！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table test(e_data date,e_datatime datetime,e_timestamp timestamp,e_time time,e_year year)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test value(&#39;2021-10-25&#39;,&#39;2021-10-25 9:13:00&#39;,&#39;2021-10-25 9:13:00&#39;,&#39;9:13:00&#39;,&#39;2021&#39;);</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211025091829886.png" alt="image-20211025091829886"></p><hr><p><strong>常用的时间函数</strong>：</p><p><strong>CURDATE()</strong>  - 获得当前的DATE, 可直接插入DATE 类型中.</p><p><strong>NOW()</strong> - 获得当前的DATETIME, 可直接插入DATETIME 和TIMESTAMP类型中.</p><p><strong>TIME()</strong> - 获取参数给定时间串中的时分秒，可直接插入TIME 类型中.</p><p><strong>YEAR()</strong> - 获取参数给定时间串中的年份，可直接插入YEAR类型中.</p><p>MONTH() 、DAY()、HOUR()、MINUTE()、SECOND() 获取参数给定时间串中的月、日、时、分、秒值.</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into date_example values(CURDATE(), NOW(), NOW(), time(NOW()), YEAR(NOW()) );</span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><h6 id="CHAR类型和VARCHAR类型"><a href="#CHAR类型和VARCHAR类型" class="headerlink" title="CHAR类型和VARCHAR类型"></a>CHAR类型和VARCHAR类型</h6><blockquote><p>CHAR类型和VARCHAR类型都在创建表时指定了最大长度，其基本形式如下：</p><p>字符串类型（M）</p><p>其中，“字符串类型”参数指定了数据类型为CHAR类型还是VARCHAR类型；M参数指定了该字符串的最大长度为M。例如，CHAR(4)就是数据类型为CHAR类型，其最大长度为4。</p><p><strong>CHAR类型的长度是固定的</strong>，在创建表时就指定了。其长度可以是0~255的任意值。例如，CHAR(100)就是指定CHAR类型的长度为100。CHAR 存储值时，它们会用空格右填充到指定的长度。</p><p><strong>VARCHAR类型的长度是可变的</strong>，在创建表时指定了最大长度。定义时，其最大值可以取0~65535之间的任意值。指定VARCHAR类型的最大值以后，其长度可以在0到最大长度之间。例如，VARCHAR(100)的最大长度是100，但是不是每条记录都要占用100个字节，而是在这个最大值范围内使用多少就分配多少。VARCHAR类型实际占用的空间为字符串的实际长度加1或2，这样即可有效节约系统的空间。</p></blockquote><p><img src="/images/MySql.assets/image-20211025103822831.png" alt="image-20211025103822831"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;   #选择数据库test </span><br><span class="line">mysql&gt; create table char_example(e_char char(5), v_char varchar(5)); #创建数据库表</span><br><span class="line">mysql&gt; insert into char_example values(&#39;12345&#39;,&#39;12345&#39;);  #正常插入数据</span><br><span class="line">mysql&gt; insert into char_example values(&#39;1 2  &#39;,&#39;1 2  &#39;);   #char类型会屏蔽后面隐藏的空格，varchar 不会</span><br><span class="line">mysql&gt;select concat(&#39;(&#39;,e_char, &#39;)&#39;), concat(&#39;(&#39;,v_char, &#39;)&#39;)  from char_example ; #让char 后面屏蔽的空格原型毕露 </span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211025111412107.png" alt="image-20211025111412107"></p><p><strong>使用建议</strong>：</p><ol><li>char一定会使用指定的空间，varchar是根据数据来定空间。</li><li>char的数据查询效率比varchar高：varchar是需要通过后面的记录数来计算。</li><li>  如果确定数据一定是占指定长度，那么使用char类型。</li><li>如果不确定数据到底有多少，那么使用varchar类型。</li><li> 如果数据长度超过255个字符而在65535之内，直接使用varchar。</li><li> 如果字符串尾部要保留空格，<strong>必须</strong>选择varchar。</li></ol><h6 id="TEXT类型"><a href="#TEXT类型" class="headerlink" title="TEXT类型"></a>TEXT类型</h6><blockquote><p>TEXT类型是一种特殊的字符串类型，包括TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT，其长度和存储空间的对比下表所示:</p></blockquote><p><img src="/images/MySql.assets/image-20211025112721787.png" alt="image-20211025112721787"></p><blockquote><p>各种TEXT类型的区别在于允许的长度和存储空间不同。因此，在这几种TEXT类型中，根据需求选取既能满足需要又节省空间的类型即可。</p></blockquote><p><strong>注意</strong>：</p><ol><li>以上各类型<strong>无须指定长度</strong>！ </li><li><strong>允许的长度是指实际存储的字节数</strong>，而不是实际的字符个数，比如假设一个中文字符占两个字节，那么TEXT 类型可存储65535/2 = 32767个中文字符，而varchar(100)可存储100个中文字符，实际占200个字节，但varchar(65535) 并不能存储65535个中文字符，因为已超出表达范围。</li></ol><p><strong>使用建议</strong>：</p><ol><li>char长度固定，即每条数据占用等长字节空间，适合用在身份证号码、手机号码等。超过255字节的只能用varchar或者text。</li><li>varchar可变长度，可以设置最大长度，适合用在长度可变的属性。</li><li>text不设置长度，当不知道属性的最大长度来时，适合用text,能用varchar的地方不用text；</li><li>如果都可以选择，按照查询速度，<strong>char最快</strong>，<strong>varchar次之</strong>，<strong>text最慢</strong>。(跟数据库的设计有关，不同的类型有不同的特性。实现不用的功能都是有代价的。)</li></ol><h6 id="字符串类型选择练习"><a href="#字符串类型选择练习" class="headerlink" title="字符串类型选择练习"></a>字符串类型选择练习</h6><blockquote><p>创建一个用户信息表，用来存储用户的如下信息：姓名，手机号码，家庭地址，个人简介，性别，年龄，身份证号。数据库表名可定义为userinfo, 同时增加一个列id 用来作为每一条记录的唯一标识，并设为主键，自加！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table userinfo (</span><br><span class="line"> id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT ‘主键’,</span><br><span class="line"> name   varchar(64) DEFAULT NULL COMMENT ‘姓名’,</span><br><span class="line"> mobile  char(11)  DEFAULT NULL COMMENT ‘手机号码’,</span><br><span class="line"> address varchar(128) DEFAULT NULL COMMENT ‘居住地址’,</span><br><span class="line"> description text  DEFAULT NULL COMMENT ‘个人简介-不知道具体的范围，不常更新用text’,</span><br><span class="line"> sex     char(1)  DEFAULT NULL COMMENT ‘性别 - 男或女’,</span><br><span class="line"> age     tinyint unsigned DEFAULT 0 COMMENT ‘年龄’,</span><br><span class="line"> idno    char(18) DEFAULT NULL COMENT ‘身份证号码’</span><br><span class="line">);   </span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211025154434847.png" alt="image-20211025154434847"></p><p><img src="/images/MySql.assets/image-20211025160948593.png" alt="image-20211025160948593"></p><hr><p><strong>设计数据库内容的时候就想好它的使用场景</strong>。</p><hr><h6 id="ENUM和SET类型"><a href="#ENUM和SET类型" class="headerlink" title="ENUM和SET类型"></a>ENUM和SET类型</h6><p><strong>ENUM类型</strong></p><blockquote><p>ENUM类型又称为枚举类型。在创建表时，ENUM类型的取值范围以列表的形式指定，其基本形式如下：</p><p>属性名  ENUM(‘值1’,  ‘值2’, …, ‘值n’)</p><p>其中，“属性名”参数指字段的名称，“值n”参数表示列表中的第n个值。ENUM类型的值只能取列表中的一个元素。其取值列表中最多能有65535个值。如果数据值列表在255个以内，那么一个字节就够，如果超过255但是小于65535，那么系统采用两个字节保存。列表中的每个值独有一个顺序排列的编号，MySQL中存入的是这个编号，而不是列表中的值。默认编号从1开始！</p><p>Enum(‘男’,’女’,‘选择保密’)  # ‘男’=&gt;1  ‘女’=&gt;2  ‘选择保密’=&gt; 3</p></blockquote><p><img src="/images/MySql.assets/image-20211025161901977.png" alt="image-20211025161901977"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;   #选择数据库test </span><br><span class="line">mysql&gt; create table enum_example (e_enum enum(&#39;男&#39;,&#39;女&#39;,&#39;选择保密&#39;) ); #创建表 </span><br><span class="line">mysql&gt; insert into enum_example values(&#39;男&#39;);  #插入记录,必须是enum 选项中的值</span><br><span class="line">mysql&gt; insert into enum_example values(1);  #插入记录可以用数值表示</span><br><span class="line">mysql&gt;select e_enum + 0  from enum_example; #查询enum 选项对应的整数值（是当前表中已经存的内容，对应enum类型中的数值）</span><br></pre></td></tr></table></figure><p>如果ENUM类型加上了NOT NULL属性，其默认值为取值列表的第一个元素。如果不加NOT NULL属性，ENUM类型将允许插入NULL，而且NULL为默认值。</p><hr><p> <strong>SET类型</strong></p><blockquote><p>在创建表时，SET类型的取值范围就以列表的形式指定了，其基本形式如下：</p><p>属性名  SET(‘值1’,  ‘值2’, …, ‘值n’)</p><p>其中，属性名参数指字段的名称，“值n”参数表示列表中的第n个值，这些值末尾的空格将会被系统直接删除。其基本形式与ENUM类型一样。SET类型的值可以取列表中的一个元素或者多个元素的组合。取多个元素时，不同元素之间用逗号隔开。SET类型的值最多只能是由64个元素构成的组合。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;   #选择数据库test </span><br><span class="line">mysql&gt; create table set_example (interest set(&#39;足球&#39;,&#39;追剧&#39;,&#39;篮球&#39;,&#39;撩妹&#39;) ); #创建表 </span><br><span class="line">mysql&gt; insert into set_example values( &#39;足球,撩妹&#39; ); #插入记录,必须是enum 选项中的值</span><br><span class="line">mysql&gt; insert into enum_example values(9);  #插入相应位效果等同，9 &#x3D;&gt;1001 选择1,4</span><br><span class="line">mysql&gt;select interest+0 from set_example;  #以整数的方式查询</span><br></pre></td></tr></table></figure><hr><p><strong>注意</strong>:对应二进制位计算的顺序是反过来的。</p><p>例：<br>选足球，其他的不选</p><p>足球 追剧 篮球 撩妹</p><p>1      0      0       0   </p><p>与正常顺序的二进制不同，正常算结果为8</p><p>在mysql的顺序计算就是1，反过来了。</p><hr><p><img src="/images/MySql.assets/image-20211025174638158.png" alt="image-20211025174638158"></p><h5 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h5><p>二级制数据和文本数据在mysql中的最大差距在于:</p><ul><li>二进制类型存储原始的二进制数据(如图片，视频，exe文件等)。文本类型(TEXT)用来存储字符字符串(如由英文字符、中文字符或其它语言字符组成的字符串)。</li><li>二进制类型没有字符集，并且排序和比较基于列值字节的数值。而TEXT类型有字符集，并且根据字符集的校对规则对值进行排序和比较。</li></ul><blockquote><p>二进制类型是存储二进制数据的数据类型，包括BINARY、VARBINARY、BIT、TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。二进制类型之间的对比如下表所示。</p></blockquote><p><img src="/images/MySql.assets/image-20211025180137037.png" alt="image-20211025180137037"></p><h6 id="BINARY和VARBINARY"><a href="#BINARY和VARBINARY" class="headerlink" title="BINARY和VARBINARY"></a>BINARY和VARBINARY</h6><p>BINARY类型和VARBINARY类型都是在创建表时指定最大长度，其基本形式如下：<br><strong>类型M</strong></p><blockquote><p>其中，“字符串类型”参数指定数据类型为BINARY类型还是VARBINARY类型；M参数指定该二进制数的最大字节长度为M。这与CHAR类型和VARCHAR类型相似。例如，BINARY(10)就是指数据类型为BINARY类型，其最大长度为10。</p><p>BINARY类型的长度是<strong>固定</strong>的，在创建表时就指定了，<strong>不足最大长度的空间由″\0″补全</strong>。例如，BINARY(50)就是指定BINARY类型的长度为50。</p><p>VARBINARY类型的长度是<strong>可变</strong>的，在创建表时指定了最大的长度，其长度可以在0到最大长度之间，在这个最大值范围内使用多少就分配多少。</p></blockquote><p> <strong>例如</strong>：<br>都存ab</p><p><img src="/images/MySql.assets/image-20211025182844160.png" alt="image-20211025182844160"></p><p><strong>查</strong>：<br><img src="/images/MySql.assets/image-20211025192213889.png" alt="image-20211025192213889"></p><h6 id="BIT类型"><a href="#BIT类型" class="headerlink" title="BIT类型"></a>BIT类型</h6><p>BIT类型在创建表时指定最大长度，其基本形式如下:<br> <strong>BIT(M)</strong></p><blockquote><p>其中，“M”指定该二进制数的最大存储长度为M，M的最大值为64。例如，BIT(4)就是指数据类型为BIT类型，长度为4。若字段的类型BIT(4)存储的数据是0~15，因为变成二进制之后15的值为1111，则其长度为4。如果插入的值为16，其二进制数为10000，长度为5，超过了最大长度，因此大于16的数是不能插入BIT(4)类型字段中的。</p></blockquote><p><strong>注意</strong>：</p><ul><li>插入数据时，使用 b‘位串’的方式插入相应值!</li><li>查询时,可以使用 bin() 、oct() 、hex() 函数讲字段的值转成相应的二进制、八进制和十六进制。</li></ul><hr><p>(二进制位串高位0会省略)</p><hr><h6 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h6><p><img src="/images/MySql.assets/image-20211025194404200.png" alt="image-20211025194404200"></p><ol><li>以上各类型无需指定长度。</li><li>允许的长度是指实际存储的字节数，不用考虑字符编码。</li></ol><hr><p><strong>使用建议</strong>：</p><ol><li>binary长度固定，即每条数据占用等长字节空间；保存长度不超过255字节的二进制数据。</li><li>varbinary可变长度，可以设置最大长度,最大长度65535；适合用在长度可变的二进制数据。</li><li>blob不设置长度， 当不知道属性的最大长度时，适合用blob， 能用varbinary的地方不用blob。</li><li>如果都可以选择，按照查询速度： <strong>binary最快</strong>， <strong>varbinary次之</strong>，<strong>blob最慢</strong>。</li></ol><h5 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h5><p>JASON类型</p><p>SPATIAL数据类型</p><p>(略)</p><h4 id="列的完整性约束"><a href="#列的完整性约束" class="headerlink" title="列的完整性约束"></a>列的完整性约束</h4><p>完整性约束条件是对字段进行限制，要求用户对该属性进行的操作符合特定的要去，如果不满足完整性约束条件，数据库系统将不再执行用户的操作。下表为完整性约束条件。</p><p><img src="/images/MySql.assets/image-20211025201051406.png" alt="image-20211025201051406"></p><h5 id="设置表字段的主键约束-PRIMARY-KEY-PK"><a href="#设置表字段的主键约束-PRIMARY-KEY-PK" class="headerlink" title="设置表字段的主键约束(PRIMARY KEY,PK)"></a>设置表字段的主键约束(PRIMARY KEY,PK)</h5><blockquote><p>主键是表的一个特殊字段，<strong>能唯一标识该表中的每条信息</strong>。主键和记录的关系，如同身份证和人的关系。<strong>主键用来标识每个记录</strong>，每个记录的主键值都不同。身份证用来表明人的身份，每个人都具有唯一的身份证号。设置表的主键是指在创建表时设置表的某个字段为该表的主键。</p><p>主键的主要目的是帮助数据库管理系统<strong>以最快的速度查找到表的某一条信息</strong>。主键必须满足的条件就是<strong>主键必须是唯一的</strong>，表中任意两条记录的主键字段的值不能相同，并且是非空值。<strong>主键可以是单一的字段，也可以是多个字段的组合。</strong></p></blockquote><hr><p><strong>主键是唯一的</strong></p><hr><h6 id="单字段主键"><a href="#单字段主键" class="headerlink" title="单字段主键"></a>单字段主键</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">单字段主键的语法规则如下：</span><br><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType PRIMARY KEY, ......</span><br><span class="line">);</span><br><span class="line">或</span><br><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType , ......</span><br><span class="line">PRIMARY KEY(propType）</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database school;   #创建数据库school</span><br><span class="line">mysql&gt; use school;   #选择数据库school </span><br><span class="line">mysql&gt; create table class(id int PRIMARY KEY, name varchar(128), teacher varchar(64));         #创建表class</span><br><span class="line">mysql&gt; desc class ;  #查询表class 的定义, describe class 效果等同</span><br><span class="line">mysql&gt; show create table class ;  #同样可以实现查询表class 的定义</span><br><span class="line">mysql&gt; insert into class VALUES(1,&#39;一班&#39;,&#39;s1&#39;);  #插入成功</span><br><span class="line">mysql&gt; insert into class VALUES(1,&#39;二班&#39;,&#39;s2&#39;);  #因主键约束，插入失败</span><br></pre></td></tr></table></figure><p><strong>MySQL支持给主键设置名字</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType , ......</span><br><span class="line">CONSTRAINT pk_name PRIMARY KEY(propType）</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="多字节主键"><a href="#多字节主键" class="headerlink" title="多字节主键"></a>多字节主键</h6><p><strong>主键是由多个属性组合而成时</strong>，在属性定义完之后统一设置主键。语法规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(  </span><br><span class="line">    propName1 propType , </span><br><span class="line">    propName2 propType , </span><br><span class="line">    ......                     </span><br><span class="line">[CONSTRAINT pk_name]PRIMARY KEY(propName1, propName2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>例如</strong>：<img src="/images/MySql.assets/image-20211026143246285.png" alt="image-20211026143246285"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class3(id int, name varchar(128), teacher varchar(64), CONSTRAINT id_pk PRIMARY KEY(id, name));         #创建表class3,设置联合主键</span><br><span class="line">mysql&gt; insert into class VALUES(1,&#39;一班&#39;,&#39;S1&#39;);  #插入成功</span><br><span class="line">mysql&gt; insert into class VALUES(1,&#39;一班&#39;,&#39;S2&#39;);    #因联合主键约束，插入失败</span><br></pre></td></tr></table></figure><h5 id="设置表字段的外键约束-FORENIGN-KEY-FK"><a href="#设置表字段的外键约束-FORENIGN-KEY-FK" class="headerlink" title="设置表字段的外键约束(FORENIGN KEY,FK)"></a>设置表字段的外键约束(FORENIGN KEY,FK)</h5><p>(<strong>就是外部的约束</strong>)</p><blockquote><p>外键是表的一个特殊字段，外键约束是为了保证多个表（通常为两个表）之间的参照完整性，即构建两个表的字段之间的参照关系。</p><p>设置外键约束的两个表之间具有父子关系，即子表中某个字段的取值范围由父表决定。例如，表示一个班级和学生关系，即每个班级有多个学生。首先应该有两个表：班级表和学生表，然后学生表有一个表示班级编号的字段no，其依赖于班级表的主键，这样字段no就是学生表的外键，通过该字段班级表和学生表建立了关系。</p></blockquote><p>​    <img src="/images/MySql.assets/image-20211026150301435.png" alt="image-20211026150301435"></p><p>在具体设置外键约束时，<strong>设置外键约束的字段必须依赖于数据库中已经存在的父表的主键</strong>，同时外键可以为空（NULL）。</p><p>设置表中某字段的外键约束非常简单，可以在MySQL数据库管理系统中通过SQL语句FOREIGN KEY来实现，其语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename_1(  </span><br><span class="line">    propName1 propType , </span><br><span class="line">    propName2 propType , </span><br><span class="line">    ......                     </span><br><span class="line">[CONSTRAINT fk_name]FOREIGN KEY(propName1) REFERENCES table2_name(table2_column)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><p><strong>例如</strong>：学生表的外键(班级id字段)依赖于父类班级表的主键(id),插入的学生信息班级id必须是父类班级表主键中有的。否则就会插入失败。</p><p><img src="/images/MySql.assets/image-20211026152949789.png" alt="image-20211026152949789"></p><hr><p><strong>并且</strong>，<strong>外键是可以为空的</strong>，不为空一定要受父类表<strong>主键的约束</strong>。(父类表一定要有主键，否则不能为子类表创建外键。)</p><hr><h5 id="设置列的非空约束-NOT-NULL-NK"><a href="#设置列的非空约束-NOT-NULL-NK" class="headerlink" title="设置列的非空约束(NOT  NULL,NK)"></a>设置列的非空约束(NOT  NULL,NK)</h5><blockquote><p>当数据库表中的某个字段上的内容不希望设置为NULL时，可以使用NK约束进行设置。NK约束在创建数据库表时为某些字段上加上“NOT NULL”约束条件，保证所有记录中的该字段都有值。如果在用户插入的记录中该字段为空值，那么数据库管理系统会报错。</p><p>设置表中某字段的NK约束非常简单，查看帮助文档可以发现，在MySQL数据库管理系统中是通过SQL语句NOT NULL来实现的，其语法形式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType NOT NULL , ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database school;   #创建数据库school</span><br><span class="line">mysql&gt; use school;   #选择数据库school </span><br><span class="line">mysql&gt; create table class(id int, name varchar(128) NOT NULL, teacher varchar(64));         #创建表class</span><br><span class="line">mysql&gt; desc class ;  #查询表class 的定义, describe class 效果等同 </span><br><span class="line">mysql&gt; show create table class ;  #同样可以实现查询表class 的定义</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211026165416585.png" alt="image-20211026165416585"></p><p>这个NULL的YES or  NO,意思是是否可以为空。(可以为空也就是没有设置非空约束)</p><h5 id="设置表字段唯一约束-UNIQUE-UK"><a href="#设置表字段唯一约束-UNIQUE-UK" class="headerlink" title="设置表字段唯一约束(UNIQUE,UK)"></a>设置表字段唯一约束(UNIQUE,UK)</h5><blockquote><p><strong>当数据库表中某个字段上的内容不允许重复时</strong>，可以使用UK约束进行设置。UK约束在创建数据库时为某些字段加上“UNIQUE”约束条件，保证所有记录中该字段上的值不重复。如果在用户插入的记录中该字段上的值与其他记录中该字段上的值重复，那么数据库管理系统会报错。</p><p>设置表中某字段的UK约束非常简单，可以在MySQL数据库管理系统中通过SQL语句UNIQUE来实现，其语法形式如下：</p></blockquote><p>(该列被设为主键了，就没必要再设置UNIQUE了，因为主键就是不可重复，为了区分表中的每一行数据。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType UNIQUE, ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>unique 约束允许约束的字段出现多个空值NULL，不算重复。(mysql8.0)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class(id int, name varchar(128) UNIQUE, teacher varchar(64));         #创建表class</span><br></pre></td></tr></table></figure><h5 id="设置表字段值自动增加-AUTO-INCREMENT"><a href="#设置表字段值自动增加-AUTO-INCREMENT" class="headerlink" title="设置表字段值自动增加(AUTO_INCREMENT)"></a>设置表字段值自动增加(AUTO_INCREMENT)</h5><blockquote><p>AUTO_INCREMENT是MySQL唯一扩展的完整性约束，当向数据库表中插入新记录时，字段上的值会自动生成唯一的ID。在具体设置AUTO_INCREMENT约束时，<strong>一个数据库表中只能有一个字段使用该约束</strong>，<strong>该字段的数据类型必须是整数类型</strong>。由于设置AUTO_INCREMENT约束后的字段会生成唯一的ID，因此该字段也经常会同时设置成PK主键。</p><p>设置表中某字段值的自动增加约束非常简单，可以在MySQL数据库管理系统中通过SQL语句AUTO_INCREMENT来实现，其语法形式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType AUTO_INCREMENT, ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>在上述语句中，tablename参数表示所要设置非空约束的字段名字，propName参数为属性名，propType为属性类型，propName字段要设置自动增加约束。默认情况下，字段propName的值从1开始增加，每增加一条记录，<strong>记录中该字段的值就会在前一条记录(或已存在的最大值（包括曾经存在的）)的基础上加1</strong>。</p></blockquote><hr><p>(<strong>自增的列类型，需要被设置成主键。</strong>)如下图所示:</p><p><img src="/images/MySql.assets/image-20211026172630406.png" alt="image-20211026172630406"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class(id int PRIMARY KEY AUTO_INCREMENT, name varchar(128) UNIQUE, teacher varchar(64));         #创建表class,设置字段id为自增长</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>默认是在上一个的数据的基础上+1</strong></p><hr><p><strong>注意</strong>：mysql8中，AUTO_INCREMENT必须设为键(主键、外键和唯一键),否则会报错。</p><hr><p> <strong>小细节</strong>：受外键约束的一个列设置为自增，其实是没用的，无法根据外键限制自己增加，就是没用。</p><hr><h5 id="设置表字段的默认值-DEFAULT"><a href="#设置表字段的默认值-DEFAULT" class="headerlink" title="设置表字段的默认值(DEFAULT)"></a>设置表字段的默认值(DEFAULT)</h5><blockquote><p>当为数据库表中插入一条新记录时，如果没有为某个字段赋值，数据库系统就会自动为这个字段插入默认值。为了达到这种效果，可通过SQL语句关键字DEFAULT来设置。</p><p>设置数据库表中某字段的默认值非常简单，可以在MySQL数据库管理系统中通过SQL语句DEFAULT来实现，其语法形式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propName propType DEFAULT defaultvalue, ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>如果没有设置，则默认为空。</strong></p><h5 id="调整列的完整性约束"><a href="#调整列的完整性约束" class="headerlink" title="调整列的完整性约束"></a>调整列的完整性约束</h5><h6 id="修改主键PK、外键FK和-唯一键UK"><a href="#修改主键PK、外键FK和-唯一键UK" class="headerlink" title="修改主键PK、外键FK和 唯一键UK"></a>修改主键PK、外键FK和 唯一键UK</h6><p><strong>新增</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table [table_name] add constraint [constraint_name] [unique key| primary key|foreign key] ([column_name])</span><br></pre></td></tr></table></figure><hr><p><strong>删除</strong></p><ol><li> 通过如下命令查询键值的约束名:</li></ol>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index或keys from 表名;     </span><br></pre></td></tr></table></figure><ol start="2"><li>执行如下命令删除</li></ol><p><strong>主键</strong>： alter table 表名 drop primary key; (主键只有一个。直接通过限制名删除)</p><p><strong>外键或唯一键</strong>:alter table 表名 drop index 约束名;</p><hr><p><strong>修改</strong>:先删除再新增。</p><hr><h6 id="修改默认值DEFAULT、自增长和非空NK"><a href="#修改默认值DEFAULT、自增长和非空NK" class="headerlink" title="修改默认值DEFAULT、自增长和非空NK"></a>修改默认值DEFAULT、自增长和非空NK</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 列名 类定义；</span><br></pre></td></tr></table></figure><h4 id="表索引"><a href="#表索引" class="headerlink" title="表索引"></a>表索引</h4><h5 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h5><p>帮助我们快速找到想要的内容。</p><blockquote><p>索引是一种特殊的数据库结构，可以用来快速查询数据库表中的特定记录，是提高数据库性能的重要方式。MySQL中，所有的数据类型都可以被索引。</p><p>通过索引，查询数据时可以不必读完记录的所有信息，而只是查询索引列，否则数据库系统将读取每条记录的所有信息进行匹配。。使用索引可以在很大程度上提高数据库的查询速度，有效地提高了数据库系统的性能。</p></blockquote><h6 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h6><ul><li>普通索引</li><li>唯一性索引</li><li>全文索引</li><li>单列索引</li><li>空间索引</li><li>等</li></ul><h6 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h6><blockquote><p>数据库底层索引实现主要有两种存储类型，B树(BTREE)和哈希(HASH)索引，InnoDB和MyISAM 使用BTREE索引；而MEMORY 存储引擎可以使用BTREE 和HASH 索引，默认用BTREE.在没有指定的情况下，数据库使用的引擎是 InnoDB。 </p></blockquote><h6 id="索引优点"><a href="#索引优点" class="headerlink" title="索引优点"></a>索引优点</h6><p>可以提高检索数据的速度。</p><h6 id="索引缺点"><a href="#索引缺点" class="headerlink" title="索引缺点"></a>索引缺点</h6><blockquote><p>创建和维护索引需要耗费时间，耗费时间的数量随着数据量的增加而增加；索引需要占用物理空间，每一个索引要占一定的物理空间；增加、删除和修改数据时，要动态地维护索引，造成数据的维护速度降低了。</p></blockquote><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><blockquote><p>索引可以提高查询的速度，但是会影响插入记录的速度，因为向有索引的表中插入记录时，数据库系统会按照索引进行排序，这样就降低了插入记录的速度，<strong>插入大量记录时的速度影响更加明显</strong>。这种情况下，最好的办法是先删除表中的索引，然后插入数据，<strong>插入完成后再创建索引。</strong></p></blockquote><h5 id="创建和查看索引"><a href="#创建和查看索引" class="headerlink" title="创建和查看索引"></a>创建和查看索引</h5><blockquote><p>创建索引是指在某个表的一列或多列上建立一个索引，以便提高对表的访问速度。创建索引有3种方式，分别是创建表的时候创建索引、在已经存在的表上创建索引和使用ALTER TABLE语句来创建索引。</p></blockquote><h5 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h5><p>就是在创建索引的时候<strong>不附加任何限制条件</strong>(唯一、非空等限制)，给类型的索引可以创建在任何数据类型的字段上。</p><p><strong>创建表时定义索引</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propname1 type1,</span><br><span class="line">    propname2 type2,</span><br><span class="line">    ……</span><br><span class="line">    propnamen type..n,</span><br><span class="line">     INDEX | KEY</span><br><span class="line">    [indexname] (propnamen [(length)] [ ASC | DESC ] ) );</span><br></pre></td></tr></table></figure><blockquote><p>其中，参数INDEX和KEY是用来指定字段为索引的，两者选择其中之一就可以了，作用是一样的；</p><p>参数indexname是索引名字，可省略；</p><p>参数propnamen是索引对应的字段的名称，该字段必须为前面定义好的字段；</p><p>参数length是可选参数，其指索引的长度，必须是字符串类型才可以使用；</p><p>参数ASC和DESC都是可选参数，ASC表示升序排列，DESC表示降序排列，如果不指定，则为升序。</p></blockquote><p><strong>代码示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database school;   #创建数据库school  </span><br><span class="line">mysql&gt; use school;   #选择数据库school  </span><br><span class="line">mysql&gt; create table class(id int, name varchar(128) UNIQUE, teacher varchar(64), INDEX index_no(id DESC));       #创建表class, 并建立为id 字段索引  </span><br><span class="line">mysql&gt; show create table class;  #查看表结构 </span><br><span class="line">mysql&gt; insert into class values(1, &#39;一班&#39;, &#39;Martin&#39;);  # 插入记录1 </span><br><span class="line">mysql&gt; insert into class values(1, &#39;二班&#39;, &#39;Rock&#39;);   # 插入记录2 </span><br><span class="line">mysql&gt; select * from class where id &gt; 0 ;   #根据id查询记录，结果将降序排列  </span><br></pre></td></tr></table></figure><p> <strong>或者</strong>，在已存在的表上面创建索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD INDEX | KEY indexname  </span><br><span class="line">     (propname [(length)] [ASC|DESC]);  </span><br></pre></td></tr></table></figure><p><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table class1 add index index_id(id DESC);</span><br></pre></td></tr></table></figure><h5 id="查询索引执行情况"><a href="#查询索引执行情况" class="headerlink" title="查询索引执行情况"></a>查询索引执行情况</h5><p><strong>EXPLAIN</strong> 查询语句</p><p><img src="/images/MySql.assets/image-20211101165612056.png" alt="image-20211101165612056"></p><blockquote><p>在上述语句中，参数tablename是需要创建索引的表；关键字IDNEX或KEY用来指定创建普通索引；参数indexname用来指定所创建的索引名；参数propname用来指定索引所关联的字段的名称；参数length用来指定索引的长度；参数ASC用来指定升序排序；参数DESC用来指定降序排序。</p></blockquote><p><strong>输出结果</strong>:<br>key: 实际使用的索引。如果为NULL，则没有使用索引。</p><p>possible_keys:显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><p>key_len：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。此值越短越好！</p><h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><p>所谓唯一索引，就是在创建索引时，限制索引的<strong>字段值必须是唯一的</strong>。</p><p>通过该类型的索引可以比普通索引更快速地查询某条记录。</p><hr><p><strong>创建表时定义索引</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propname1 type1,</span><br><span class="line">    ……</span><br><span class="line">    propnamen type..n,</span><br><span class="line">    UNIQUE INDEX | KEY [indexname] (propnamen [(length)] [ ASC | DESC ] ) );  </span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table class(id int,name varchar(128) UNIQUE,teachar varchar(64),UNIQUE INDEX name_index (name(32)));</span><br></pre></td></tr></table></figure><hr><p><strong>补充</strong></p><p><strong>%为通配符，例如%班。</strong></p><p><strong>索引的数据量很小，便于核对查询是否有重复的。</strong></p><p><strong>对于已经设置UNIQUE约束的字段，在设置UNIQUE KEY(唯一约束)是多余的。</strong></p><hr><p><strong>注意</strong>：</p><blockquote><p>参数UNIQUE INDEX和UNIQUE KEY是用来指定字段为索引的，两者选择其中之一即可；</p><p>参数indexname是索引名字，可省略；</p><p>参数propnamen是索引对应的字段的名称，该字段必须为前面定义好的字段<strong>且必须定义为 UNIQUE 约束</strong>；</p><p>参数length是可选参数，其指索引的长度，必须是字符串类型才可以使用；</p><p>参数ASC和DESC都是可选参数，ASC表示升序排列，DESC表示降序排列，如果不指定，则为升序。</p></blockquote><p>**已存在的表上创建索引    **</p><p> <strong>方法1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX indexname  </span><br><span class="line">    ON tablename (propname [(length)] [ASC|DESC]);  </span><br></pre></td></tr></table></figure><p><strong>方法2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD UNIQUE INDEX | KEY indexname (propname [(length)] [ASC|DESC]);  </span><br></pre></td></tr></table></figure><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>全文索引主要对字符串类型建立基于分词的索引，主要是基于CHAR、VARCHAR和TEXT的字段上，以便能够更加快速地查询数据量较大的字符串类型的字段。</p><p><strong>全文索引以词为基础的</strong>，<strong>MySQL默认的分词是所有非字母和数字的特殊符号都是分词符。</strong></p><p>MySQL从3.23.23版本开始支持全文索引，MySQL5.6以前只能在存储引擎为MyISAM的数据表上创建全文索引,5.6之后InnoDB开始支持全文索引(5.7之后支持中文全文索引) 。在默认情况下，全文索引的搜索执行方式为不区分大小写，如果全文索引所关联的字段为二进制数据类型，就以区分大小写的搜索方式执行。</p><hr><p><strong>创建表时定义索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propname1 type1,</span><br><span class="line">    propname2 type2,</span><br><span class="line">    ……</span><br><span class="line">    propnamen type..n,</span><br><span class="line">    FULLTEXT INDEX | KEY</span><br><span class="line">    [indexname] (propnamen [(length)] ) );</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database school;   #创建数据库school  </span><br><span class="line">mysql&gt; use school;   #选择数据库school  </span><br><span class="line">mysql&gt;create table class(id int, name varchar(128) UNIQUE, teacher varchar(64),comment varchar(1024),FULLTEXT INDEX index_comm(comment));       #创建表class, 并建立为comment 字段为全文索引  </span><br><span class="line">mysql&gt; insert into class values(1,&#39;1班&#39;,&#39;Martin&#39;,&#39;我是一个兵，来自老百姓!&#39;);  # 插入记录1 </span><br><span class="line">mysql&gt; insert into class values(2,&#39;2班&#39;,&#39;Rock&#39;,&#39;此班主任毕业自唐僧系&#39;);   # 插入记录2 </span><br><span class="line">mysql&gt; insert into class values(3,&#39;3班&#39;,&#39;Janny&#39;,&#39;I&#39;&#39;m Miss Zhang.&#39;);   #插入记录3  </span><br><span class="line">mysql&gt; select * from class where match(comment) AGAINST(&#39;我是一个兵&#39;);#利用全文检索索引快速查询记录</span><br></pre></td></tr></table></figure><p><strong>查找</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from tablename where match(propnamen)against(&#39;内容&#39;)；</span><br></pre></td></tr></table></figure><p><strong>已经存在的表上创建索引</strong></p><p><strong>方法1:执行create语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX indexname</span><br><span class="line">   ON tablename( propname1 [ ( length ) ] ); </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table class(id int, name varchar(128) UNIQUE, teacher varchar(64));       #创建表class, 并建立为id 字段索引  </span><br><span class="line">mysql&gt; create FULLTEXT index index_teacher on class(teacher );  #追加全文索引 </span><br></pre></td></tr></table></figure><p><strong>方法2:执行ALTER TABLE语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">ADD FULLTEXT INDEX|KEY indexname(propname [(length)]);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table class add fulltext index name_index(teacher);</span><br></pre></td></tr></table></figure><h5 id="MySQL8中文分词支持"><a href="#MySQL8中文分词支持" class="headerlink" title="MySQL8中文分词支持"></a>MySQL8中文分词支持</h5><p>配置文件my.ini（Windows 10默认路径: C:\ProgramData\MySQL\MySQL Server 8.0） 中增加如下配置项，同时重启MySQL80 服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ngram_token_size&#x3D;2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql&gt; create table class(id int, name varchar(128) UNIQUE, teacher varchar(64),comment varchar(1024),FULLTEXT INDEX index_des(comment) with parser   ngram);       #创建表class, 并建立为comment 字段为全文索引  </span><br></pre></td></tr></table></figure><p><strong>这样对相关词进行检索也可以查到了。</strong></p><h5 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h5><p>多列索引，是指在创建索引时所关联的字段不是一个字段，而是多个字段，虽然可以通过所关联的字段进行查询，<strong>但是只有查询条件中使用了所关联字段中的第一个字段，多列索引才会被使用。</strong></p><p><strong>创建表时定义索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename(</span><br><span class="line">    propname1 type1,</span><br><span class="line">    ……</span><br><span class="line">    propnamen type..n,</span><br><span class="line">    INDEX | KEY [indexname] (propname1 [(length)] [ ASC | DESC ],</span><br><span class="line">                             Propname2 [(length)] [ ASC | DESC ], </span><br><span class="line">                              ... ...                               </span><br><span class="line">                             Propnamen [(length)] [ ASC | DESC ]) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例如</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table class(id int, name varchar(128) UNIQUE, teacher varchar(64), INDEX index_mult_columns(id, teacher));  </span><br></pre></td></tr></table></figure><p><strong>就是在单个索引上增加了个索引列。</strong></p><hr><p><strong>已存在的表上创建索引</strong></p><p><strong>方法1:执行create语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE  INDEX indexname</span><br><span class="line">    ON tablename( propname1 [(length)] [ ASC | DESC ],  </span><br><span class="line">                   Propname2 [(length)] [ ASC | DESC ],   </span><br><span class="line">                              ... ...                                </span><br><span class="line">                         Propnamen [(length)] [ ASC | DESC ]  ); </span><br></pre></td></tr></table></figure><p><strong>方法2:执行ALTER TABLE 语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">   ADD INDEX|KEY indexname(propname1 [(length)] [ ASC | DESC ],  </span><br><span class="line">                  Propname2 [(length)] [ ASC | DESC ],              </span><br><span class="line">                             ... ...                                          </span><br><span class="line">                        Propnamen [(length)] [ ASC | DESC ]  ); </span><br></pre></td></tr></table></figure><hr><h5 id="隐藏索引"><a href="#隐藏索引" class="headerlink" title="隐藏索引"></a>隐藏索引</h5><p>MySQL 8开始支持<strong>隐藏索引</strong>。隐藏索引提供了更人性化的数据库操作。</p><p>隐藏索引，顾名思义，<strong>让索引暂时不可见</strong>，<strong>不会被优化器使用</strong>。默认情况下索引是可见的。隐藏索引可以用来测试索引的性能。<strong>验证索引的必要性时不需要删除索引，可以先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。</strong></p><p>（**测试索引性能    **）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ALTER  INDEX  index_name INVISIBLE;  #隐藏索引</span><br><span class="line">ALTER TABLE tablename ALTER  INDEX  index_name VISIBLE;    #取消隐藏</span><br></pre></td></tr></table></figure><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><p>所谓删除索引，就是删除表中已经创建的索引。之所以要删除索引，是因为这些索引会降低表的更新速度，影响数据库的性能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX indexname ON tablename;</span><br></pre></td></tr></table></figure><p><strong>修改索引</strong>：先删除后增加。</p><h5 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h5><p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。</p><p><strong>1.选择唯一性索引</strong></p><p>唯一性索引的值是唯一的，可以更快速地通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段，为该字段建立唯一性索引可以很快确定某个学生的信息，如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><p><strong>2.为经常需要排序、分组和联合的操作的字段建立索引</strong></p><p>经常需要使用ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间，如果为其建立索引，可以有效地避免排序操作。</p><p><strong>3.为经常作为查询条件的字段建立索引</strong></p><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度，为这样的字段建立索引可以提高整个表的查询速度。</p><p><strong>4.限制索引的数目</strong></p><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大，修改表时，对索引的重构和更新很麻烦。</p><p><strong>5.尽量使用数据量少的索引</strong></p><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间多。</p><p><strong>6.尽量使用前缀来索引</strong></p><p>如果索引的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间，如果只检索字段前面的若干字符，这样可以提高检索速度。</p><p><strong>7.删除不再使用或者很少使用的索引</strong></p><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h3 id="表的插入"><a href="#表的插入" class="headerlink" title="表的插入"></a>表的插入</h3><p><strong>插入数据记录是常见的数据操作</strong>，可以显示向表中增加的新的数据记录。在MySQL中可以通过“INSERT INTO”语句来实现插入数据记录，该SQL语句可以通过如下4种方式使用：</p><ul><li>插入完整数据记录、</li><li>插入部分数据记录、</li><li>插入多条数据记录和</li><li>插入JSON结构的数据记录（略）。</li></ul><h4 id="插入完整数据记录"><a href="#插入完整数据记录" class="headerlink" title="插入完整数据记录"></a>插入完整数据记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSERT INTO tablename(field1, field2, field3, ..., fieldn) VALUES(value1, value2, value3, ..., valuen); </span><br></pre></td></tr></table></figure><p><strong>tablename(xxx)省略</strong></p><p><strong>缩写为</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename VALUES(value1, value2, value3, ..., valuen);</span><br></pre></td></tr></table></figure><p>tablename表示所要插入完整记录的表名，</p><p>参数fieldn表示表中的字段名字，</p><p>参数valuen表示所要插入的数值，</p><p>并且参数fieldn与参数valuen一一对应。</p><hr><h4 id="插入部分数据记录"><a href="#插入部分数据记录" class="headerlink" title="插入部分数据记录"></a>插入部分数据记录</h4><p>在插入完整数据记录的基础上指定要添加字段的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename(field1, field2, field3, ..., fieldn) VALUES(value1, value2, value3, ..., valuen);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 如果域<strong>没有设定默认值</strong>，也<strong>没有设定为自增长</strong>，则插入记录时<strong>必须插入值</strong>。</p><h4 id="插入多条数据记录"><a href="#插入多条数据记录" class="headerlink" title="插入多条数据记录"></a>插入多条数据记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename(field1, field2, field3, ..., fieldn) </span><br><span class="line">VALUES(value11, value12, value13, ..., value1n)，   </span><br><span class="line">(value21, value22, value23, ..., value2n)，          </span><br><span class="line">... ....                                             </span><br><span class="line">(valuen1, valuen2, valuen3, ..., valuenn);           </span><br></pre></td></tr></table></figure><p>每条要插入的数据都要按着tablename(x,)所指定的插入数据个数。</p><h3 id="更新表中的数据记录"><a href="#更新表中的数据记录" class="headerlink" title="更新表中的数据记录"></a>更新表中的数据记录</h3><p>(更新就是修改)</p><p>更新数据记录是数据操作中常见的操作，可以更新表中已经存在数据记录中的值。在MySQL中可以通过<strong>UPDATE</strong>语句来实现更新数据记录，该SQL语句可以通过如下几种方式使用：</p><p><strong>更新特定数据记录、更新所有数据记录、更新JSON结构的数据记录。</strong></p><h4 id="更新特定数据记录"><a href="#更新特定数据记录" class="headerlink" title="更新特定数据记录"></a>更新特定数据记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tablename SET field1 &#x3D; value1, field2 &#x3D; value2, field3 &#x3D; value3, ..., fieldn &#x3D; valuen) WHERE CONDITION;   </span><br></pre></td></tr></table></figure><p>上述语句中：</p><p>参数tablename表示所要更新数据记录的表名，</p><p>参数field表示表中所要更新数值的字段名字，</p><p>参数valuen表示更新后的数值，</p><p>参数CONDITION<strong>指定更新满足条件的特定数据记录</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update class set teacher &#x3D; &#39;zyx&#39; where teacher &#x3D; &#39;zxx&#39;; </span><br><span class="line">#通过teacher 字段匹配更新记录   </span><br><span class="line">或   </span><br><span class="line">mysql&gt; update class set teacher &#x3D; &#39;zyx&#39; where id &#x3D; 2;  </span><br><span class="line">#通过id(其他)字段匹配更新记录</span><br></pre></td></tr></table></figure><hr><p><strong>个人理解:</strong></p><p><strong>可以将满足指定条件的数据记录都进行修改。</strong></p><p><strong>就是说要根据满足field和value(对应的字段和它的值)所进行更新(修改)。</strong></p><hr><h4 id="更新所有记录"><a href="#更新所有记录" class="headerlink" title="更新所有记录"></a>更新所有记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tablename SET field1 &#x3D; value1, field2 &#x3D; value2, field3 &#x3D; value3, ..., fieldn &#x3D; valuen)  WHERE CONDITION;      </span><br><span class="line">    或</span><br><span class="line">UPDATE tablename SET field1 &#x3D; value1, field2 &#x3D; value2, field3 &#x3D; value3, ..., fieldn &#x3D; valuen) ；</span><br></pre></td></tr></table></figure><p>在上述语句中：</p><p>参数tablename表示所要更新数据记录的表名，</p><p>参数field表示表中所要更新数值的字段名字，</p><p>参数valuen表示更新后的数值，</p><p>参数CONDITION表示满足表tablename中的所有数据记录，或不使用关键字WHERE语句。</p><p><strong>例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> update class set teacher &#x3D; &#39;xx&#39; ;  #把所有记录的teacher列改成xx       </span><br><span class="line">       或   </span><br><span class="line">mysql&gt; update class set teacher &#x3D; &#39;xx&#39; where 1&#x3D;1;  </span><br></pre></td></tr></table></figure><h3 id="删除表中的数据记录"><a href="#删除表中的数据记录" class="headerlink" title="删除表中的数据记录"></a>删除表中的数据记录</h3><p>删除数据记录是数据操作中常见的操作，可以删除表中已经存在的数据记录。在MySQL中可以通过DELETE语句来删除数据记录，该SQL语句可以通过以下几种方式使用：<strong>删除特定数据记录、删除所有数据记录</strong>。</p><h4 id="删除特定数据记录"><a href="#删除特定数据记录" class="headerlink" title="删除特定数据记录"></a>删除特定数据记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tablename WHERE CONDITION; </span><br></pre></td></tr></table></figure><p>在上述语句中，参数tablename表示所要删除数据记录的表名，参数<strong>CONDITION指定删除满足条件的特定数据记录</strong>。</p><h4 id="删除所有数据记录"><a href="#删除所有数据记录" class="headerlink" title="删除所有数据记录"></a>删除所有数据记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tablename WHERE CONDITION;      </span><br><span class="line">或</span><br><span class="line">DELETE FROM tablename；</span><br></pre></td></tr></table></figure><p>在上述语句中，为了删除所有的数据记录,</p><p>参数CONDITION需要满足表tablename中所有数据记录，如id&gt;0; </p><p>或者无关键字WHERE语句。</p><h3 id="练习-设计游戏用户信息表"><a href="#练习-设计游戏用户信息表" class="headerlink" title="练习:设计游戏用户信息表"></a>练习:设计游戏用户信息表</h3><blockquote><p>游戏玩家访问游戏客户端，通过客户端界面输入用户名和密码,</p><p>在游戏玩家点击”确认”后，客户端连接至数据库服务器对用户名和密码进行确认， </p><p>如果验证成功，则 玩家可以进入大厅，如果失败，则不允许进入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> create table users (</span><br><span class="line"> id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#39;主键&#39;,</span><br><span class="line"> username   varchar(64)  NOT NULL UNIQUE COMMENT &#39;用户名&#39;,</span><br><span class="line">  </span><br><span class="line">    加上下面的user_auths表，所以将password字段从users表中剥离</span><br><span class="line">（ password   varchar(32)  NOT NULL COMMENT &#39;密码&#39;,）</span><br><span class="line">     </span><br><span class="line"> nickname   varchar(64)  DEFAULT NULL COMMENT &#39;昵称&#39;,</span><br><span class="line"> mobile      char(11)     DEFAULT NULL COMMENT &#39;手机号码&#39;,</span><br><span class="line"> age         tinyint(3)    unsigned DEFAULT 18 COMMENT &#39;年龄&#39;,</span><br><span class="line"> idno        char(18)     DEFAULT NULL COMMENT &#39;身份证号码&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>作用1:验证用户身份</strong></p><p><strong>作用2:保存用户信息</strong></p><p><strong>更好的设计是分成2个表，用户信息表和用户验证表</strong></p><p><strong>基于以下三个方面考虑</strong>：</p><p><strong>1.面向对象考虑</strong></p><p>用户信息和用户验证是两种“对象”</p><p><strong>2.性能方面考虑</strong></p><p>登录验证的时候列较少，加快查询速度。</p><p><strong>3.安全方面考虑</strong></p><p>防止在查询用户信息时，将用户密码也直接查出来，容易被恶意攻击和进行恶意操作。</p><p>添加如下表:</p><p><strong>用户验证表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create  table user_auths(</span><br><span class="line">userid int(11) unsigned NOT NULL COMMENT &#39;外键,对应users表中的id&#39;,</span><br><span class="line">username   varchar(64)  NOT NULL UNIQUE COMMENT &#39;用户名&#39;,</span><br><span class="line">password varchar(32) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">FOREIGN KEY(userid) REFERENCES users(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">可以md5(&#39;xxx&#39;)进行加密</span><br></pre></td></tr></table></figure><p><strong>可以理解为users表用来输入查询个人信息，user_auths表用来验证(注册、登录)。</strong></p><hr><p><strong>数据量大的项目必须分表！</strong></p><hr><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p><strong>查询数据是指从数据库中获取所需要的数据。</strong></p><p>如Jack 要达到验证用户名和密码的目的，就需要从数据库已保存的用户表中读取当前用户的密码进行验证，以验明正身！保存查询数据是数据库操作中常用且重要的操作。</p><p><strong>用户可以根据自己对数据的需求，使用不同的查询方式，获得不同的数据。</strong></p><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>在MySQL中可以通过SQL语句来实现基本数据查询，SQL语句可以通过如下多种使用：</p><ul><li>查询所有字段数据</li><li>查询指定字段数据</li><li>避免重复数据查询</li><li>对结果进行排序和分组等查询。、</li></ul><p><strong>SELECT语句</strong>来查询数据，根据查询条件的不同，数据库系统会找到不同的数据，通过SELECT语句可以很方便地获取所需的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1 field2 … fieldn</span><br><span class="line">    FROM tablename</span><br><span class="line">    [WHERE CONDITION1]</span><br><span class="line">    [GROUP BY fieldm [HAVING CONDITION2]]</span><br><span class="line">    [ORDER BY fieldn [ASC|DESC]]；</span><br></pre></td></tr></table></figure><p>filed1~fieldn参数表示需要查询的字段名；</p><p>tablename参数表示表的名称；</p><p>CONDITION1参数表示查询条件；</p><p>fieldm参数表示按该字段中的数据进行分组；</p><p>CONDITION2参数表示满足该表达式的数据才能输出；</p><p>fieldn参数指按该字段中数据进行排序。</p><p>排序方式由ASC和DESC两个参数指出；</p><p>ASC参数表示按升序的顺序进行排序，是默认参数；</p><p>DESC参数表示按降序的顺序进行排序。</p><p>**(<em>号可以代替所有的字段)</em>*</p><h4 id="列出表的所有字段"><a href="#列出表的所有字段" class="headerlink" title="列出表的所有字段"></a>列出表的所有字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename;  </span><br></pre></td></tr></table></figure><p>filed1~fieldn参数表示需要查询的字段名；</p><p>tablename参数表示表的名称。</p><h4 id="符号表示所有字段"><a href="#符号表示所有字段" class="headerlink" title="*符号表示所有字段"></a>*符号表示所有字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename;  </span><br></pre></td></tr></table></figure><p>查询所有数据。</p><p>‘*’符号方式的优势比较明显，即可<strong>用该符号代替表中的所有字段</strong>，但是这种方式不够灵活，<strong>只能按照表中字段的固定顺序显示</strong>，不能随便改变字段的顺序。</p><h4 id="查询指定字段数据"><a href="#查询指定字段数据" class="headerlink" title="查询指定字段数据"></a>查询指定字段数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field FROM tablename; </span><br></pre></td></tr></table></figure><p><strong>如果关键字SELECT后面的字段不包含在所查询的表中，那么MySQL会报错。</strong></p><p>只显示该字段的一列数据。</p><h4 id="DISTINCT查询"><a href="#DISTINCT查询" class="headerlink" title="DISTINCT查询"></a>DISTINCT查询</h4><p>实现查询不重复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT field1,field2,…,fieldn FROM tablename; </span><br></pre></td></tr></table></figure><p>可以多个字段组合查询。</p><hr><p>例如两个字段组合查询，有两条数据中，其中一个字段相同，一个不同，那这两个就不是重复的，显示两个。反之，两个字段都相同，那就是重复的，只显示一个。</p><hr><h4 id="IN查询"><a href="#IN查询" class="headerlink" title="IN查询"></a>IN查询</h4><p> 关键字IN可以实现判断字段的数值是否在指定集合中，该关键字的具体语句形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename WHERE filedn IN(value1,value2,value3,…,valuen);   </span><br></pre></td></tr></table></figure><p>参数fieldn表示名称为tablename的表中的字段名，</p><p>参数valuen表示集合中的值，通过关键字IN来判断字段fieldm的值是否在集合（value1,value2,value3,…,valuen）中，如果字段fieldm的值在集合中，就满足查询条件，该记录会被查询出来，否则不会被查询出来。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from class where name in (&#x27;1班&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211108092025134.png" alt="image-20211108092025134"></p><p><strong>使用NOT IN可以反向查询，显示对应字段值之外的值。</strong>相当于C++中的!取反。</p><hr><p><strong>查询时慎用NULL</strong></p><blockquote><p>在具体使用关键字IN时，查询的集合中如果存在NULL，NULL对应的数据查不出来，其它字段对应的数据可以正常查询出来；</p><p>但如果使用关键字NOT IN，查询的集合中如果存在NULL，则不会查询到任何的结果。</p></blockquote><h4 id="BETWEEN-AND查询"><a href="#BETWEEN-AND查询" class="headerlink" title="BETWEEN AND查询"></a>BETWEEN AND查询</h4><p>当我们需要查询指定范围内的数据（如： id 从0 到 100）的时候，MySQL提供了关键字BETWEEN AND，用来实现判断字段的数值是否在指定范围内的条件查询。该关键字的具体语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename WHERE fieldm BETWEEN minvalue AND maxvalue  </span><br></pre></td></tr></table></figure><p>参数fieldn表示名称为tablename的表中的字段名，通过关键字BETWEEN和AND来设置字段field的取值范围，如果字段field的值在所指定的范围内，那么满足查询条件，该记录会被查询出来，否则不会被查询出来。</p><p>BETWEEN minvalue AND maxvalue，表示的是一个范围间的判断过程，<strong>只针对数字类型</strong>。</p><hr><p><strong>符合范围内的数据查询</strong></p><p>通过关键字BETWEEN 和 AND设置查询范围。</p><p><strong>代码示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class where chinese between  80 and 90 ;  #查询成绩表中语文成绩在80 和 90 之间的学员记录 </span><br></pre></td></tr></table></figure><p><strong>不符合范围的数据记录查询</strong></p><p>通过关键字NOT来实现反向查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   SELECT name,chinese   </span><br><span class="line">FROM grade WHERE Chinese NOT BETWEEN 85 AND 90; </span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,chinese from grade where chinese &lt;85 or chinese &gt;90;</span><br></pre></td></tr></table></figure><h4 id="LIKE模糊查找"><a href="#LIKE模糊查找" class="headerlink" title="LIKE模糊查找"></a>LIKE模糊查找</h4><p>当我们只想用字符串中间的一部分特征查找含有特征字串的信息时，MySQL提供了关键字LIKE来实现模糊查询，需要使用<strong>通配符</strong>，具体语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename WHERE fieldm LIKE value;    </span><br></pre></td></tr></table></figure><p>参数tablename表示表名，</p><p>参数fieldn表示表中的字段名字，通过关键字LIKE来判断字段field的值是否与value字符串匹配，如果相匹配，则满足查询条件，该记录就会被查询出来；否则就不会被查询出来。</p><hr><p>MySQL中，字符串必须加上单引号（’’）和双引号（″″）。由于关键字LIKE可以实现模糊查询，因此该关键字后面的字符串参数除了可以使用完整的字符串外，还可以包含通配符。</p><hr><table><thead><tr><th>符号</th><th>功能描述</th></tr></thead><tbody><tr><td>-</td><td>该通配符能匹配单个字符</td></tr><tr><td>%</td><td>该通配符可以匹配任意长度的字符串，既可以是0个字符、1个字符，也可以是很多字符。</td></tr></tbody></table><p><img src="/images/MySql.assets/image-20211108113404454.png" alt="image-20211108113404454"></p><p>同样的，使用NOT关键字可以查询除了这个模糊之外的数据。</p><p>在对应查询字段前加上!是同样的效果。</p><hr><p><strong>利用模糊查找同样可以实现between的效果</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">select* from grade where english like &#x27;9_&#x27;;</span><br><span class="line">查询english在<span class="number">90</span><span class="number">-99</span>之间的记录</span><br></pre></td></tr></table></figure><h4 id="对排序结果进行排序"><a href="#对排序结果进行排序" class="headerlink" title="对排序结果进行排序"></a>对排序结果进行排序</h4><p>在MySQL中，从表中查询出的数据可能是无序的，或者其排列顺序不是用户所期望的顺序，为了使查询结果的顺序满足用户的要求，可以使用关键字<strong>ORDER BY</strong>对记录进行排序，其语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2, field3, …, fieldn  FROM tablename ORDER BY fieldm [ASC|DESC] </span><br></pre></td></tr></table></figure><p>参数tablename表示所要进行排序的表名，</p><p>参数fieldn表示表中的字段名字，参数fieldm表示按照该字段进行排序；ASC表示按升序进行排序；DESC表示按降序进行排序。默认的情况下按ASC进行排序。</p><hr><p><strong>注意</strong>:<br><strong>如果存在一条记录字段的值为空值（NULL）</strong>，那么按升序排序时，含空值的记录将最先显示，可以理解为空值是该字段的最小值；按降序排列时，字段为空值的记录将最后显示。</p><p><strong>例如</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from grade order by chinese;# 按照语文成绩排序</span><br></pre></td></tr></table></figure><h4 id="简单分组查询"><a href="#简单分组查询" class="headerlink" title="简单分组查询"></a>简单分组查询</h4><p>在具体使用统计函数时，都是针对表中所有记录数或指定特定条件（WHERE子句）的数据记录进行统计计算。在现实应用中，经常会先把所有数据记录进行分组，再对这些分组后的数据记录进行统计计算。</p><p>MySQL通过SQL语句GROUP BY来实现，分组数据查询语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT function()[,filed ]</span><br><span class="line">FROM tablename WHERE CONDITION GROUP BY field;</span><br></pre></td></tr></table></figure><p>参数field表示某字段名，通过该字段对名称为tablename的表的数据记录进行分组。</p><hr><p><strong>依据该字段的不同名字进行分组</strong></p><hr><p><strong>五个统计函数</strong></p><p>1.统计数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OUNT(*)：该种方式可以实现对表中记录进行统计,不管表字段中包含的是NULL值还是非NULL值。</span><br><span class="line">COUNT(field):该种方式可以实现对指定字段的记录进行统计,在具体统计时将忽略NULL值。</span><br></pre></td></tr></table></figure><p>2.统计计算平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该函数只有一种使用方式。</span><br><span class="line">AVG(field)使用方式:该种方式可以实现对指定字段的平均值进行计算,在具体统计时将忽略NULL值。</span><br></pre></td></tr></table></figure><p>3.统计计算求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该函数只有一种使用方式。</span><br><span class="line">SUM(field)使用方式:该种方式可以实现计算指定字段值之和,在具体统计时将忽略NULL值。</span><br></pre></td></tr></table></figure><p>4.统计最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该函数只有一种使用方式。</span><br><span class="line">MAX(field)使用方式:该种方式可以实现计算指定字段值中的最大值,在具体统计时将忽略NULL值。</span><br></pre></td></tr></table></figure><p>5.统计最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该函数只有一种使用方式。</span><br><span class="line">MIN(field)使用方式:该种方式可以实现计算指定字段值中的最小值,在具体统计时将忽略NULL值。</span><br></pre></td></tr></table></figure><p><strong>代码示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(math), class_id id from grade group by class_id;</span><br></pre></td></tr></table></figure><h4 id="统计分组"><a href="#统计分组" class="headerlink" title="统计分组"></a>统计分组</h4><p>如果想显示每个分组中的字段，可以通过函数GROUP_CONCAT()来实现。该函数可以实现显示每个分组中的指定字段，函数的具体语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(field)</span><br><span class="line"> FROM tablename WHERE CONDITION GROUP BY field;</span><br></pre></td></tr></table></figure><p><strong>代码示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select class_id,count(*),group_concat(name) from grade group by class_id;</span><br></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><h4 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h4><p>联合多个表来实现查询。</p><p>在MySQL中内连接数据查询通过“INNER JOIN…ON”语句来实现，语法形式如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename1 INNER JOIN tablename2 [INNER JOIN tablenamen] ON CONDITION</span><br></pre></td></tr></table></figure><p>其中：<br>参数fieldn表示要查询的字段名，来源于所连接的表tablename1和tablename2，关键字INNER JOIN表示表进行内连接，</p><p>参数CONDITION表示进行匹配的条件。</p><p><strong>例如</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class  inner join student  on class.id &#x3D; student.class_id;  #查询class 表和student 表中班级字段相同的记录并进行内连接  </span><br></pre></td></tr></table></figure><p>无所谓两个表的前后顺序。</p><p><strong>也可以通过起别名进行链接查询。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from class as a inner join student as b where a.id &#x3D; b.class_id; #同上，使用别名查询</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2, ...,fieldn [AS] otherfieldn </span><br><span class="line">FROM tablename1 [AS] othertablename1, ...,</span><br><span class="line">  Tablenamen [AS] othertablenamen ... where othertablename1.fieldx &#x3D; othertablenamen.fieldx ... ;</span><br></pre></td></tr></table></figure><p>其中，参数tablename<em>为表原来的名字，参数othertablename</em>为新表名，之所以要为表设置新的名字，是为了让SQL语句代码更加直观、更加人性化和实现更加复杂的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t1.id,t1.name,t1.sex,t1.class_id from student AS t1 inner join class t2 on  t1.class_id &#x3D; t2.id;</span><br></pre></td></tr></table></figure><h5 id="自链接"><a href="#自链接" class="headerlink" title="自链接"></a>自链接</h5><p>就是表与其自身进行连接。</p><p>例如在一个学生表中找到小花的同班同学。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from student s1 inner join student s2 on s1.class_id &#x3D; s2.class_id and s1.name &#x3D; &#39;小花&#39;and s2.name !&#x3D;&#39;小花&#39;;</span><br></pre></td></tr></table></figure><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><p>内连接查询中的等值连接就是在关键字ON后的匹配条件中通过等于关系运算符(=)来实现等值条件。</p><p>例如:将班级表和学生表连接到一起，条件是班级的id和学生的班级id相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from class as a inner join student as b where a.id &#x3D; b.class_id;</span><br></pre></td></tr></table></figure><h5 id="不等值连接"><a href="#不等值连接" class="headerlink" title="不等值连接"></a>不等值连接</h5><p>同等值连接，只不过运算符不同。</p><p>内连接查询中的不等连接就是在关键字ON后的匹配条件中通过除了等于关系运算符来实现不等条件外，还可以使用关系运算符，包含“&gt;”“&gt;=”“&lt;”“&lt;=”和“!=”等运算符号。</p><h4 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h4><p>当我们在查询数据时，要求返回所操作表中至少一个表的所有数据记录，通过SQL语句“OUTER JOIN…ON”来实现。外连接数据查询语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn FROM tablename1 LEFT|RIGHT [OUTER] JOIN tablename2</span><br><span class="line"> ON CONDITION</span><br></pre></td></tr></table></figure><p>参数fieldn表示所要查询的字段名字，来源于所连接的表tablename1和tablename2，</p><p>关键字OUTER JOIN表示表进行外连接，</p><p>参数CONDITION表示进行匹配的条件。</p><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>就是指新关系中执行匹配条件时，以关键字<strong>LEFT JOIN</strong>(outer可以省略)左边的表为参考表。<strong>左连接的结果包括LEFT OUTER字句中指定的左表的所有行</strong>，而不仅仅是连接列所匹配的行，如果左表的某行在右表中没有匹配行，则在相关联的结果行中，右表的所有选择列表均为空值。</p><hr><p><strong>就是</strong>,left join左边的表中所有数据都会显示，而left join表右边的值根据on 后面的条件进行保留匹配。</p><hr><p><strong>例如:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from class as a left join student as b on a.id &#x3D; b.class_id;</span><br></pre></td></tr></table></figure><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>同左外连接，只是肯定显示(保留)的是right join的右边表。</p><hr><p>无论是哪种查询方式，先写的表的字段在前面显示。</p><hr><h4 id="合并查询数据记录"><a href="#合并查询数据记录" class="headerlink" title="合并查询数据记录"></a>合并查询数据记录</h4><p>在MySQL中通过关键字UNION来实现合并操作，即可以通过其将多个SELECT语句的查询结果合并在一起，组成新的关系。在MySQL软件中，合并查询数据记录可通过SQL语句UNION来实现，具体语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1,field2,…,fieldn  FROM tablename1</span><br><span class="line">    UNION | UNION ALL</span><br><span class="line">    SELECT field1,field2,…,fieldn  FROM tablename2</span><br><span class="line">    UNION | UNION ALL  SELECT field1,field2,…,fieldn ;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>多个选择语句select 的列数相同就可以合并,union和union all的主要区别是union all是把结果集直接合并在一起，而union 是将union all后的结果再执行一次distinct，去除重复的记录后的结果。</p><p><strong>前后的字段个数相同</strong></p><p><strong>例如</strong>：将class表中的老师和student表中的学生整合到一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select teacher from class union all select name  from student;</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211121123500746.png" alt="image-20211121123500746"></p><p><strong>字段显示优化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select teacher as person from class union all select name as person from student;</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211121123631571.png" alt="image-20211121123631571"></p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>所谓子查询，是指在一个查询中嵌套了其他的若干查询，即在一个SELECT查询语句的WHERE或FROM子句中包含另一个SELECT查询语句。在查询语句中，外层SELECT查询语句称为主查询，WHERE子句中的SELECT查询语句被称为子查询，也被称为嵌套查询。</p><p>通过子查询可以实现多表查询，该查询语句中可能包含IN、ANY、ALL和EXISTS等关键字，除此之外还可能包含比较运算符。理论上，子查询可以出现在查询语句的任意位置，但是在实际开发中子查询经常出现在WHERE和FROM子句中。</p><h5 id="带比较运算符的子查询"><a href="#带比较运算符的子查询" class="headerlink" title="带比较运算符的子查询"></a>带比较运算符的子查询</h5><p>子查询可以使用比较运算符。这些比较运算符包括=、!=、&gt;、&gt;=、&lt;、&lt;=和&lt;&gt;等。其中，&lt;&gt;与!=是等价的。比较运算符在子查询中使用得非常广泛，如查询分数、年龄、价格和收入等。</p><p><strong>示例</strong>：查询云云的班主任是谁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select teacher from class where id &#x3D; (select class_id from student where name &#x3D;&#39;云云&#39;); # 查询在class表中，那个老师教的班级和student表中云云的班级相同</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：使用比较运算符时，select子句获得的数据不能大于1条。</p><h5 id="带有关键字IN的子查询"><a href="#带有关键字IN的子查询" class="headerlink" title="带有关键字IN的子查询"></a>带有关键字IN的子查询</h5><p>用途：一个查询语句的条件可能在另一个Select语句的结果中，这时候就可以使用IN /  NOT IN 关键字。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select teacher from class where id in (select class_id from student where name like &#39;小%&#39;);# 查询名字是小什么的班主任都是谁</span><br></pre></td></tr></table></figure><h5 id="带关键字EXISTS的子查询"><a href="#带关键字EXISTS的子查询" class="headerlink" title="带关键字EXISTS的子查询"></a>带关键字EXISTS的子查询</h5><p>​        关键字EXISTS表示存在，后面的参数是一个任意的子查询，系统对子查询进行运算以判断它是否返回行；如果至少返回一行，那么EXISTS的结果为true，此时外层语句将进行查询；如果子查询没有返回任何行，那么EXISTS返回的结果是<strong>false，此时外层语句将不进行查询。</strong></p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select* from class where id &#x3D; 102 and exists(select* from student where class_id &#x3D; 102); # 如果102班存在学生记录，就查询102班的班级信息</span><br></pre></td></tr></table></figure><h5 id="带关键字ANY的子查询"><a href="#带关键字ANY的子查询" class="headerlink" title="带关键字ANY的子查询"></a>带关键字ANY的子查询</h5><p>​        关键字ANY表示满足其中任一条件。使用关键ANY时，<strong>只要满足内层查询语句返回的结果中的任何一个就可以通过该条件来执行外层查询语句。</strong></p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id,name,chinese+math+english as total from grade where chinese+english+math &gt;&#x3D; ANY(select score from scholarship);</span><br><span class="line">#查询能获得将学金的同学记录</span><br></pre></td></tr></table></figure><h5 id="带关键字ALL的子查询"><a href="#带关键字ALL的子查询" class="headerlink" title="带关键字ALL的子查询"></a>带关键字ALL的子查询</h5><p>类似带关键字ANY的子查询，内层查询语句要全部满足条件才能执行外部查询语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,chinese+math+english as total from grade where chinese + english + math &gt;&#x3D; ALL(select score from scholarship);</span><br></pre></td></tr></table></figure><h2 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h2><p>例如:每个班抽出几个学生组成一个临时班级。</p><p>视图是从一个或多个表中导出来的表，是一种虚拟存在的表。视图就像一个窗口，通过这个窗口可以看到系统的专门提供的数据，这样用户就可以不看整个数据库表中的数据，而只关心对自己有用的数据。</p><p>视图可以使用户的操作更方便，并且可以保障数据库系统的安全性。</p><h3 id="为什么要使用视图"><a href="#为什么要使用视图" class="headerlink" title="为什么要使用视图"></a>为什么要使用视图</h3><p>为了提高复杂的SQL语句的复用性和表的操作的安全性，MySQL数据库管理系统提供了视图特性。所谓视图，<strong>本质上是一种虚拟表</strong>，其内容与真实的表相似，包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储数据值的形式存在，行和列数据来自定义视图的查询所引用的基本表，并且在具体引用视图时动态生成。</p><p>视图使程序员只关心感兴趣的某些特定数据和他们所负责的特定任务。这样程序员只能看到视图中所定义的数据，而不是视图所引用表中的数据，从而提高数据库中数据的安全性。</p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>虽然视图可以被看成是一种虚拟表，但是其物理上是不存在的，即MySQL并没有专门的位置为视图存储数据。根据视图的概念可以发现其数据来源于查询语句，因此创建视图的基本语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE[OR REPLACE] VIEW viewname[columnlist] AS SELECT statement; </span><br></pre></td></tr></table></figure><p><strong>查看用户权限创建视图的权限</strong></p><p>创建视图需要登陆用户有相应的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,Select_priv,Create_view_priv from mysql.user;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为学生表创建视图</span><br><span class="line">CREATE VIEW view_student AS select id,class_id,name from student;</span><br><span class="line">#查看视图</span><br><span class="line">desc view_student;</span><br><span class="line">#根据视图进行查询</span><br><span class="line">select* from view student;</span><br></pre></td></tr></table></figure><p>通过视同只允许查询者查看允许查看的那几个字段。</p><p>也可以修改视图中对应字段的值，就相当于更新了对应表中对应字段的值。</p><hr><p><strong>在多表上创建视图(联合多个表创建视图)</strong><br>不能联合重复名字的字段。用as起别名解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE[OR REPLACE] VIEW viewname[columnlist] AS SELECT statement                  </span><br></pre></td></tr></table></figure><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_student_class AS select student.id, student.name, class.name as class_name,  class.teacher from class inner join student  on class.id &#x3D; student.class_id;</span><br><span class="line"># class.id &#x3D;&#x3D; student.class_id 班级id和学生对应的班级id相同的数据。</span><br></pre></td></tr></table></figure><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><p>更新视图是指通过视图来插入（INSERT）、更新（UPDATE）和删除（DELETE）表中的数据。因为视图实质是一个虚拟表，其中没有数据，通过视图更新时都是转换到基本表更新。更新视图时，只能更新权限范围内的数据，超出范围就不能更新了。</p><p>更新视图就是对原来的表进行更新。</p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update view_student set name&#x3D;&#39;小花花&#39; where name&#x3D;&#39;小花&#39;; #通过视图更新小花为小花花</span><br></pre></td></tr></table></figure><p><strong>不能更新的情况</strong></p><ol><li><p>视图中包含SUM()、COUNT()、MAX()和MIN()等函数</p></li><li><p>视图中包含UNION、UNION ALL、DISTINCT、GROUP BY和HAVING等关键字</p></li><li><p>视图对应的表存在没有默认值的列，而且该列没有包含在视图里</p></li><li><p>包含子查询的视图</p></li><li><p>其他特殊情况</p></li></ol><p>**就是，在视图视角下，准备输入的这条插入语句是否可以在原来的表情况下完成插入，能插入就能在当前视图下插入(更新视图)**。</p><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>修改视图是指修改数据库中存在的视图，当基本表的某些字段发生变化的时候，可以通过修改视图来保持与基本表的一致性。ALTER语句来修改视图。</p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view view_student_class as select id,class_id ,name1,sex from student;</span><br></pre></td></tr></table></figure><p><strong>追加视图</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view view_student_class AS select student.id,student.name1,class.name,class.id as class_id,class.teacher from class inner join student on class.id &#x3D; student.class_id;</span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>删除数据库中已经存在的视图。</p><p>删除是视图时，只能删除视图的定义，不会删除数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW viewname;</span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器（TRIGGER）是由事件来触发某个操作。这些事件包括INSERT语句、UPDATE语句和DELETE语句。当数据库系统执行这些事件时，就会激活触发器执行相应的操作。MySQL从5.0.2版本开始支持触发器。</p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>CREATE TRIGGER来实现创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE trigger trigger_name BEFORE|AFTER trigger_EVENT ON TABLE_NAME FOR EACH ROW trigger_STMT           </span><br></pre></td></tr></table></figure><p>参数trigger_name表示要创建的触发器名；</p><p>参数BEFORE和AFTER指定了触发器执行的时间，前者在触发器事件之前执行触发器语句，后者在触发器事件之后执行触发器语句；</p><p>参数trigger_EVENT表示触发事件，即触发器执行条件，包含DELETE、INSERT和UPDATE语句；参数TABLE_NAME表示触发事件的操作表名；参数FOR EACH ROW表示任何一条记录上的操作满足触发事件都会触发该触发器；</p><p>参数trigger_STMT表示激活触发器后被执行的语句。执行语句中如果要引用更新记录中的字段，<strong>对于INSERT语句,只有NEW是合法的</strong>，表示当前已插入的记录；<strong>对于DELETE语句，只有OLD才合法，表示当前删除的记录；而UPDATE语句可以和NEW（更新后）以及OLD（更新前）同时使用。</strong></p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create trigger tri_insert_student after insert on student for each row update class set count&#x3D;count+1 where class.id &#x3D; NEW.class_id; #创建触发器，新增学员班级人数增1</span><br><span class="line"></span><br><span class="line">create trigger tri_delete_student after delete on student for each row update class set count&#x3D;count-1 where id &#x3D; OLD.class_id; </span><br><span class="line">#创建触发器，删除学员班级人数减1</span><br></pre></td></tr></table></figure><p><strong>触发器包含多条语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE   trigger trigger_name BEFORE|AFTER trigger_EVENT  ON TABLE_NAME FOR EACH ROW                                 </span><br><span class="line">BEGIN                                                        </span><br><span class="line">trigger_STMT                                                 </span><br><span class="line">END       </span><br></pre></td></tr></table></figure><p>在上述语句中，比“只有一条执行语句的触发器”语法多出来两个关键字BEGIN和END，在这两个关键字之间是所要执行的多个执行语句的内容，执行语句之间用分号隔开。</p><p>在MySQL中，一般情况下用“;”符号作为语句的结束符号，可是在创建触发器时，需要用到“;”符号作为执行语句的结束符号。为了解决该问题，可以使用关键字DELIMITER语句。<strong>例如，“DELIMITER $$”可以将结束符号设置成“$$”。</strong></p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger tri_delete_student after delete on student for each row </span><br><span class="line">      BEGIN                                    </span><br><span class="line">       Delete from grade where id &#x3D; OLD.id;  #删除成绩表中的记录                                                        </span><br><span class="line">       update class set count&#x3D;count-1 where id &#x3D; OLD.class_id; #更新班级表中的记录   </span><br><span class="line">       END;                                    </span><br><span class="line">       $$          </span><br></pre></td></tr></table></figure><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TRIGGER;</span><br></pre></td></tr></table></figure><p>执行完“SHOW TRIGGERS”语句后会显示一个列表，在该列表中会显示出所有触发器的信息。其中，参数Trigger表示触发器的名称；参数Event表示触发器的激发事件；参数Table表示触发器对象触发事件所操作的表；参数Statement表示触发器激活时所执行的语句；参数Timing表示触发器所执行的时间。</p><p><strong>示例</strong>：<br><img src="/images/MySql.assets/image-20211125162851920.png" alt="image-20211125162851920"></p><p><strong>从系统表查看触发器</strong></p><p>在MySQL中，在系统数据库information_schema中存在一个存储所有触发器信息的系统表triggers，因此查询该表格的记录也可以实现查看触发器功能。系统表triggers的表结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  use information_schema;   #选择数据库information_schema                  </span><br><span class="line">mysql&gt;  select * from triggers;                                                        </span><br><span class="line">mysql&gt;  select * from triggers where trigger_name&#x3D;’tri_delete_student’; #查询系统表triggers中的触发器    </span><br></pre></td></tr></table></figure><p><strong>删除触发器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TRIGGERS triggers_name;</span><br></pre></td></tr></table></figure><h2 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><p>创建存储过程和函数是指将经常使用的一组SQL语句组合在一起，并将这些SQL语句当作一个整体存储在MySQL服务器中。存储程序可以分为存储过程和函数。在MySQL中创建存储过程使用的语句CREATE PROCEDURE。其语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE procedure_name([proc_param[,…]])   routine_body    </span><br></pre></td></tr></table></figure><p>在上述语句中，参数procedure_name表示所要创建的存储过程名字，参数proc_param表示存储过程的参数，参数routine_body表示存储过程的SQL语句代码，可以用BEGIN…END来标志SQL语句的开始和结束。</p><p>proc_param中每个参数的语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[IN|OUT|INOUT] param_name type</span><br></pre></td></tr></table></figure><p>在上述语句中，每个参数由三部分组成，分别为输入/输出类型、参数名和参数类型。其中，输入/输出类型有三种类型，分别为IN（表示输入类型）、OUT（表示输出类型）、INOUT（表示输入/输出类型）。param_name表示参数名；type表示参数类型，可以是MySQL软件所支持的任意一个数据类型。</p><p><strong>示例</strong>：</p><p>删除一名学生同时删除对应的成绩表中的信息，并将对应班级表中的人数-1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create PROCEDURE  proc_delete_student (IN sid int )                                   </span><br><span class="line">        BEGIN </span><br><span class="line">         declare cid  int ;   #定义变量cid                            </span><br><span class="line">         Select class_id into cid from student where id &#x3D; sid;    #通过查询语句设置变量      </span><br><span class="line"> #根据输入的学生在student表拿到该学生对应的班级id，并将这个班级id存储到cid中，用于下面的操作。</span><br><span class="line">         delete from grade where id &#x3D; sid;  #删除成绩表中的记录  </span><br><span class="line">         delete from student where id &#x3D; sid;   #删除学生表中的记录                                                    </span><br><span class="line">         update class set count&#x3D;count-1 where id &#x3D; cid; #更新班级表中的记录   </span><br><span class="line">        END;                                                                        </span><br><span class="line">        ##     </span><br></pre></td></tr></table></figure><p><strong>调用存储过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call proc_delete_student(3);# 删除学生的id号。</span><br></pre></td></tr></table></figure><p><strong>注意：上述代码并没有对合法性进行检查，是有出现错误的风险的！！！</strong></p><h4 id="在存储过程中使用变量"><a href="#在存储过程中使用变量" class="headerlink" title="在存储过程中使用变量"></a>在存储过程中使用变量</h4><p>在存储过程和函数中，可以定义和使用变量。用户可以使用关键字DECLARE来定义变量，然后为变量赋值。这些变量的作用范围是在BEGIN…END程序段中。</p><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE var_name[,…] type [DEFAULT value]   </span><br></pre></td></tr></table></figure><p>其中，关键字DECLARE是用来声明变量的；</p><p>参数var_name是变量的名称，可以同时定义多个变量；</p><p>参数type用来指定变量的类型；</p><p>DEFAULT value子句将变量默认值设置为value，没有使用DEFAULT子句时，默认值为NULL。</p><p>定义变量cid，数据类型为INT型，默认值为10，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE cid INT DEFAULT 10;  </span><br></pre></td></tr></table></figure><h5 id="为变量赋值"><a href="#为变量赋值" class="headerlink" title="为变量赋值"></a>为变量赋值</h5><p>关键字SET用来为变量赋值；</p><p>参数var_name是变量的名称；</p><p>参数expr是赋值表达式。</p><p>一个SET语句可以同时为多个变量赋值，各个变量的赋值语句之间用逗号隔开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE cid INT DEFAULT 10;  </span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set tmp_id &#x3D; 88;</span><br></pre></td></tr></table></figure><p>还可以使用SELECT…INTO语句为变量赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_name[,…] INTO var_name[,…]   </span><br><span class="line"></span><br><span class="line">FROM table_name WHERE condition     </span><br></pre></td></tr></table></figure><p>参数col_name表示查询的字段名称；</p><p>参数var_name是变量的名称；</p><p>参数table_name指表的名称；</p><p>参数condition指查询条件。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create procedure  query_student_class_info (IN sid int, OUT cname varchar(128), OUT ccount  int)                                   </span><br><span class="line">       BEGIN   </span><br><span class="line">           declare tmp_name varchar(128);</span><br><span class="line">           declare tmp_count int;</span><br><span class="line">           declare tmp_cid  int;</span><br><span class="line">           select class_id into tmp_cid from student where id &#x3D; sid;         </span><br><span class="line">           select name, count into tmp_name, tmp_count from class where id &#x3D; tmp_cid;</span><br><span class="line">           set cname &#x3D; tmp_name, ccount &#x3D; tmp_count;</span><br><span class="line">        END;    </span><br><span class="line">        $$    </span><br></pre></td></tr></table></figure><p><strong>调用存储过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class query_student_class_info(4,@name,@count);</span><br><span class="line"># 显示</span><br><span class="line">select name,count;</span><br></pre></td></tr></table></figure><h4 id="光标的使用"><a href="#光标的使用" class="headerlink" title="光标的使用"></a>光标的使用</h4><p>查询语句<strong>可能查询出多条记录</strong>，在存储过程和函数中使用光标来逐条读取查询结果集中的记录。有些书上将光标称为游标。光标的使用包括声明光标、打开光标、使用光标和关闭光标。<strong>光标必须声明在处理程序之前，并且声明在变量和条件之后。</strong></p><h5 id="声明光标"><a href="#声明光标" class="headerlink" title="声明光标"></a>声明光标</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE cursor_name CURSOR         </span><br><span class="line">FOR select_statement;                  </span><br></pre></td></tr></table></figure><p>参数cursor_name表示光标的名称；</p><p>参数select_statement表示SELECT语句的内容。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create procedure  query_student (IN sid int, OUT cname varchar(128), OUT class_id  int )                                 </span><br><span class="line">       BEGIN                                                  </span><br><span class="line">           DECLARE cur_student CURSOR                     </span><br><span class="line">               FOR SELECT name, class_id FROM  student;    </span><br><span class="line">        END;                                                  </span><br><span class="line">        $$      </span><br></pre></td></tr></table></figure><p>上面的字段中，光标的名称为cur_student;</p><p>select语句部分是从表student中查询出字段name和class_id的值。</p><h5 id="打开光标"><a href="#打开光标" class="headerlink" title="打开光标"></a>打开光标</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name;</span><br></pre></td></tr></table></figure><h5 id="使用光标"><a href="#使用光标" class="headerlink" title="使用光标"></a>使用光标</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name </span><br><span class="line">INTO var_name[var_name] </span><br></pre></td></tr></table></figure><p>参数cursor_name表示光标的名称；</p><p>参数var_name表示将光标中的SELECT语句查询出来的信息存入该参数中。var_name必须在声明光标之前就定义好。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> create procedure query_student (IN sid int, OUT cname varchar(128), OUT cid int)                            </span><br><span class="line">        BEGIN                               </span><br><span class="line">            declare tmp_name varchar(128);  #必须定义在声明光标之前 </span><br><span class="line">            declare tmp_cid  int;                     </span><br><span class="line">            declare  done int default 0;               </span><br><span class="line">            declare cur_student CURSOR FOR SELECT name, class_id FROM  student where id &#x3D; sid;                 </span><br><span class="line">            declare continue handler for not found set done &#x3D; 1; #将结束标志绑定到游标上                           </span><br><span class="line">            open  cur_student;                         </span><br><span class="line">            select done;                               </span><br><span class="line">            fetch cur_student into tmp_name, tmp_cid;   </span><br><span class="line">            select done;                               </span><br><span class="line">            select tmp_name, tmp_cid; #打印从光标中获取到的值                 </span><br><span class="line">            close cur_student;                         </span><br><span class="line">            set cname &#x3D; tmp_name, cid &#x3D; tmp_cid;       </span><br><span class="line">         END;                                                                              </span><br><span class="line">mysql&gt; ##    </span><br></pre></td></tr></table></figure><h4 id="流程控制的使用"><a href="#流程控制的使用" class="headerlink" title="流程控制的使用"></a>流程控制的使用</h4><h5 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h5><p>IF语句用来进行条件判断。根据条件执行不同的语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF search_condition THEN statement_list       </span><br><span class="line">[ELSEIF search_condition THEN statement_list] ...</span><br><span class="line">[ELSE statement_list]                           </span><br><span class="line">END  IF                                      </span><br></pre></td></tr></table></figure><p>参数search_condition表示条件判断语句；参数statement_list表示不同条件的执行语句。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> create procedure proc_test_if (IN input int, OUT output int)</span><br><span class="line">        begin</span><br><span class="line">            if input&gt;20 then set input&#x3D;input+1;</span><br><span class="line">            elseif input&#x3D;20 then  set input&#x3D;input+2;</span><br><span class="line">            else  set input &#x3D; input+3;</span><br><span class="line">            end if;</span><br><span class="line"></span><br><span class="line">            set output &#x3D; input;</span><br><span class="line">        end; </span><br><span class="line">mysql&gt;  $$             </span><br></pre></td></tr></table></figure><h5 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h5><p>CASE语句可以实现比IF语句更复杂的条件判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE case_value                                  </span><br><span class="line">WHEN when_value THEN statement_list            </span><br><span class="line">[ WHEN when_value THEN statement_list ]          </span><br><span class="line">[ELSE statement_list]                               </span><br><span class="line">END CASE                                         </span><br></pre></td></tr></table></figure><p>其中，参数case_value表示条件判断的变量；</p><p>参数when_value表示变量的取值；</p><p>参数statement_list表示不同when_value值的执行语句。</p><p>类似IF ELSE语句。</p><p><strong>示例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  create procedure proc_test_case3 (IN input int, OUT output int)</span><br><span class="line">       begin</span><br><span class="line">       case input</span><br><span class="line">            when 30 then set output&#x3D;input+1;</span><br><span class="line">            when 20 then  set output&#x3D;input+2;</span><br><span class="line">            else  set output &#x3D; input+3;</span><br><span class="line">            end case;      </span><br><span class="line">        end; </span><br><span class="line">##    </span><br></pre></td></tr></table></figure><p><strong>case语句要是确定的值，不能像IF语句一样是一个范围。</strong></p><h5 id="LOOP语句"><a href="#LOOP语句" class="headerlink" title="LOOP语句"></a>LOOP语句</h5><p>LOOP语句可以使某些特定的语句重复执行，实现一简单的循环。</p><p>LOOP语句本身没有停止循环，只有遇到LEVEA语句等才能停止循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] LOOP             </span><br><span class="line">statement_list                  </span><br><span class="line">END LOOP [end_label]          </span><br></pre></td></tr></table></figure><p>参数begin_label和参数end_label分别表示循环开始和结束的标志，这两个标志必须相同，而且都可以省略；</p><p>参数statement_list表示需要循坏执行的语句。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_num:LOOP                 </span><br><span class="line">     SET @count &#x3D; @count + 1; </span><br><span class="line">END LOOP add_num;            </span><br></pre></td></tr></table></figure><p>该示例循环执行count加1的操作。因为没有跳出循环的语句，这个循环成了一个死循环。LOOP循环都以END LOOP结束。</p><h5 id="LEVEA语句"><a href="#LEVEA语句" class="headerlink" title="LEVEA语句"></a>LEVEA语句</h5><p>LEAVE语句主要用于跳出循环控制，其语法形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LEAVE label          </span><br></pre></td></tr></table></figure><p>其中，参数label表示循环的标志。</p><p><strong>相当于C/C++中的break</strong></p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add_num: LOOP             </span><br><span class="line">SET @count&#x3D;@count + 1;</span><br><span class="line">Select @count;</span><br><span class="line">IF @count &#x3D; 100 THEN </span><br><span class="line">    LEAVE add_num;     </span><br><span class="line">END IF;</span><br><span class="line">END LOOP add_num;         </span><br></pre></td></tr></table></figure><p>该示例循环执行count值加1的操作。当count的值等于100时，LEAVE语句跳出循环。</p><p><strong>示例1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create procedure proc_test_loop(IN input int,OUT output int)</span><br><span class="line">     begin</span><br><span class="line">     add_num:LOOP</span><br><span class="line">     set input &#x3D; input +1;</span><br><span class="line">     if input&#x3D;100 then</span><br><span class="line">      LEAVE add_num;</span><br><span class="line">     end if;</span><br><span class="line">     end loop add_num;</span><br><span class="line">     set output &#x3D; input;</span><br><span class="line">     select input,output;</span><br><span class="line">     end;</span><br><span class="line">     ##</span><br></pre></td></tr></table></figure><p><strong>示例2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create procedure proc_test_loop1(IN input int,OUT output int)</span><br><span class="line">      begin</span><br><span class="line">      set @count &#x3D;1;&#x2F;&#x2F;会话变量，只在当前窗口生效</span><br><span class="line">      add_num:LOOP</span><br><span class="line">      set @count &#x3D; @count +1;</span><br><span class="line">      if @count &#x3D;100 then leave add_num ;</span><br><span class="line">      select @count;</span><br><span class="line">      end if;</span><br><span class="line">      end LOOP add_num;</span><br><span class="line">      end ;</span><br><span class="line">      ##</span><br></pre></td></tr></table></figure><h5 id="ITERATE语句"><a href="#ITERATE语句" class="headerlink" title="ITERATE语句"></a>ITERATE语句</h5><p>ITERATE语句也是用来跳出循环的语句，但是ITERATE语句是跳出本次循环，然后直接进入下一次循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITERATE label  </span><br></pre></td></tr></table></figure><p>参数label表示循环的标志。</p><p><strong>类似于C/C++中的continue</strong></p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create procedure proc_test_proc(IN input int,OUT output int)</span><br><span class="line">     begin</span><br><span class="line">      add_num1:LOOP</span><br><span class="line">     if input&gt;10 then iterate add_num1;</span><br><span class="line">     else set output &#x3D; input+100;</span><br><span class="line">   leave add_num1;</span><br><span class="line">     end if;</span><br><span class="line">     end LOOP add_num1;</span><br><span class="line">     end;</span><br><span class="line">     ##</span><br></pre></td></tr></table></figure><p>上述示例中，输入大于10的数就会陷入死循环。</p><h5 id="REPEAT语句"><a href="#REPEAT语句" class="headerlink" title="REPEAT语句"></a>REPEAT语句</h5><p>REPEAT语句是有条件控制的循环语句。当满足特定条件时，就会跳出循环语句。</p><p><strong>先执行再判断条件。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] REPEAT        </span><br><span class="line">statement_list;       </span><br><span class="line">UNTIL search_condition </span><br><span class="line">END REPEAT [end_label]     </span><br></pre></td></tr></table></figure><p>参数statement_list表示循环的执行语句；</p><p>参数search_condition表示结束循环的条件，满足该条件时循环结束。</p><p><strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create procedure proc_test_repeat2(IN input int,OUT output int)</span><br><span class="line">      begin</span><br><span class="line">      REPEAT</span><br><span class="line">      set input &#x3D; input + 1;</span><br><span class="line">      UNTIL input &gt;100</span><br><span class="line">      END REPEAT;</span><br><span class="line">      set output &#x3D; input;</span><br><span class="line">      end;</span><br><span class="line">      ##</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：结束条件后不用加；</p><h5 id="WHILE语句"><a href="#WHILE语句" class="headerlink" title="WHILE语句"></a>WHILE语句</h5><p>WHILE语句也是有条件控制的循环语句，但WHILE语句和REPEAT语句是不一样的。WHILE语句是当满足条件时执行循环内的语句。</p><p><strong>先判断条件再执行语句。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] WHILE search_condition DO   </span><br><span class="line">        Statement_list                      </span><br><span class="line">END WHILE [end_label]                     </span><br></pre></td></tr></table></figure><p>其中，参数statement_condition表示循环执行的条件，满足该条件时循环执行；参数statement_list表示循环的执行语句。</p><p>​    <strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE @count&lt;100 DO       </span><br><span class="line">SET @count &#x3D; @count + 1;</span><br><span class="line">END WHILE;    </span><br></pre></td></tr></table></figure><h5 id="流程控制综合运用"><a href="#流程控制综合运用" class="headerlink" title="流程控制综合运用"></a>流程控制综合运用</h5><p><strong>示例</strong>：<strong>循环访问光标操作，访问光标中的所有记录。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">reate procedure query_all_students (IN sid int, OUT cname varchar(128), OUT cid int)                                                                                    </span><br><span class="line">        BEGIN                                                                             </span><br><span class="line">            declare tmp_name varchar(128);    #必须定义在声明光标之前                                                                                             </span><br><span class="line">            declare tmp_cid  int;                                                           </span><br><span class="line">            declare  done int default 0;                                                                                                                                                </span><br><span class="line">            declare cur_student CURSOR FOR SELECT name, class_id FROM  student ;                                                                                      </span><br><span class="line">            declare continue handler for not found set done &#x3D; 1; #将结束标志绑定到游标上                                                                             </span><br><span class="line">            open  cur_student;                                                             </span><br><span class="line">            read_loop:LOOP      #循环读取                                                                   </span><br><span class="line">                fetch cur_student into tmp_name, tmp_cid;                                                                                                                              </span><br><span class="line">                IF done&#x3D;1 then                                                              </span><br><span class="line">                    Leave read_loop;                                                                  </span><br><span class="line">                END IF;                                                                     </span><br><span class="line">                select tmp_name, tmp_cid;         #打印从光标中获取到的值                                                                                       </span><br><span class="line">            END LOOP read_loop;                                                                                </span><br><span class="line">            close cur_student;                                                              </span><br><span class="line">            set cname &#x3D; tmp_name, cid &#x3D; tmp_cid;                                               END;  </span><br><span class="line">           ##                </span><br></pre></td></tr></table></figure><hr><p><strong>示例</strong>：<strong>在学生表中插入一条记录，并返回记录的自增长id</strong>。</p><blockquote><p><strong>返回记录的自增长最新id,select last_insert_id();</strong></p><p><strong>而不是用select max(id) from student;避免多用户对数据库进行操作的情况。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  use school;   #选择数据库school                                                                                                                         </span><br><span class="line">mysql&gt; DELIMITER $$                                                                                </span><br><span class="line">mysql&gt; create procedure fetch_insert_student_id (IN p_name varchar(128), in p_class_id int, IN p_sex char(1), OUT rid int)                                                                                    </span><br><span class="line">        BEGIN                                                                             </span><br><span class="line">            Insert into student (name, class_id, sex) values(p_name, p_class_id, p_sex);                                                                                </span><br><span class="line">            select last_insert_id() as rid;                                                                                                                     </span><br><span class="line">         END;                                                                              </span><br><span class="line">mysql&gt;  $$                                                                               </span><br><span class="line">mysql&gt;  DELIMITER ;         </span><br></pre></td></tr></table></figure><p><strong>从第二个示例不难看出，存储结构就是对一些语句的整合。</strong></p><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><p>存储过程创建以后，用户可以通过SHOW STATUS语句来查看存储过程的状态，也可以通过SHOW CREATE语句来查看存储过程的定义。用户也可以通过查询information_schema数据库下的Routines表来查看存储过程的信息。</p><p><strong>查看存储过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS  [ like ‘pattern’ ] ;  </span><br></pre></td></tr></table></figure><p>参数PROCEDURE表示查询存储过程；</p><p>参数LIKE ‘pattern’用来匹配存储过程的名称。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show procedure status like &#39;%student%&#39;##</span><br></pre></td></tr></table></figure><p> <strong>查看存储过程的定义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE proc_name    </span><br></pre></td></tr></table></figure><p>参数PROCEDURE表示查询存储过程；</p><p>参数proc_name表示存储过程的名称。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create procedure fetch_insert_student_id##</span><br></pre></td></tr></table></figure><p><strong>查看存储过程的信息</strong></p><p>存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.Routines</span><br><span class="line">               Where ROUTINE_NAME &#x3D; ‘proc_name’;</span><br></pre></td></tr></table></figure><p>字段ROUTINE_NAME是Routines 存储存储过程和函数的列名称；</p><p>参数proc_name表示存储过程或函数的名称。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *from information_schema.Routines where ROUTINE_NAME &#x3D; &#39;fetch_insert_student_id&#39;##</span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRPO PROCEDURE proc_name;</span><br></pre></td></tr></table></figure><p>关键字DROP PROCEDURE用来表示实现删除存储过程，</p><p>参数proc_name表示所要删除的存储过程名称。</p><h2 id="数据库的存储引擎"><a href="#数据库的存储引擎" class="headerlink" title="数据库的存储引擎"></a>数据库的存储引擎</h2><h3 id="什么是存储引擎"><a href="#什么是存储引擎" class="headerlink" title="什么是存储引擎"></a>什么是存储引擎</h3><p>​    MySQL中存在多种存储引擎的概念。简而言之，<strong>存储引擎就是指表的类型</strong>。在具体开发时，为了提高MySQL数据库管理系统的使用效率和灵活性，可以根据实际需要来选择存储引擎。因为存储引擎指定了表的类型，即如何存储和索引数据、是否支持事务等，同时存储引擎也决定了<strong>表在计算机中的存储方式</strong>。</p><h3 id="MySQL支持的引擎"><a href="#MySQL支持的引擎" class="headerlink" title="MySQL支持的引擎"></a>MySQL支持的引擎</h3><p><strong>查看存储引擎</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES</span><br></pre></td></tr></table></figure><p><img src="/images/MySql.assets/image-20211126173227774.png" alt="image-20211126173227774"></p><p><strong>查看当前默认存储引擎</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;default_storage_engine&#39;;  </span><br></pre></td></tr></table></figure><h4 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h4><p>nnoDB是MySQL数据库的一种存储引擎。InnoDB给MySQL的表提供了事务、回滚、崩溃修复能力和多版本并发控制的事务安全。MySQL从3.23.34a开始就包含InnoDB存储引擎。InnoDB是MySQL第一个提供外键约束的表引擎，而且InnoDB对事务处理的能力也是MySQL对其他存储引擎所无法与之比拟的(<strong>保证数据的安全</strong>)。</p><p>MySQL 5.6版本之后，除系统数据库之外，默认的存储引擎由MyISAM改为InnoDB，MySQL 8.0版本在原先的基础上将系统数据库的存储引擎也改为了InnoDB。</p><p>InnoDB存储引擎中支持自动增长列AUTO_INCREMENT。自动增长列的值不能为空，且值必须唯一。MySQL中规定自增列必须为主键。在插入值时，如果自动增长列不输入值，那么插入的值为自动增长后的值；如果输入的值为0或空（NULL），那么插入的值也为自动增长后的值；如果插入某个确定的值，且该值在前面没有出现过，那么可以直接插入。</p><p>InnoDB存储引擎中支持外键（FOREIGN KEY）。外键所在的表为子表，外键所依赖的表为父表。父表中被子表外键关联的字段必须为主键。当删除、更新父表的某条信息时，子表也必须有相应的改变。</p><p><strong>InnoDB存储引擎的优势在于提供了良好的事务管理、崩溃修复能力和并发控制；缺点是其读写效率稍差，占用的数据空间相对比较大。</strong></p><h4 id="MylSAM存储引擎"><a href="#MylSAM存储引擎" class="headerlink" title="MylSAM存储引擎"></a>MylSAM存储引擎</h4><p>MyISAM存储引擎是MySQL中常见的存储引擎，曾是MySQL的默认存储引擎。MyISAM存储引擎是基于ISAM存储引擎发展起来的。MyISAM增加了很多有用的扩展。</p><p>MyISAM存储引擎的表存储成3个文件。文件的名字与表名相同，或站名包括frm、MYD和MYI。其中，frm为扩展名的文件存储表的结构；MYD为扩展名的文件存储数据，是MYData的缩写；MYI为扩展名的文件存储索引，是MYIndex的缩写。</p><p>基于MyISAM存储引擎的表支持3种存储格式，包括静态型、动态型和压缩型。其中，静态型为MyISAM存储引擎的默认存储格式，其字段是固定长度的；动态型包含变长字段，记录的长度不是固定的；压缩型需要使用myiampack工具创建，占用的磁盘空间较小。</p><p><strong>MyISAM存储引擎的优势在于占用空间小，处理速度快；缺点是不支持事务的完整性和并发性。</strong></p><p>MEMORY存储引擎</p><p>MEMORY存储引擎是MySQL中一类特殊存储引擎。其使用存储在内存中的内容来创建表，而且所有数据也放在内存中。这些特性都与InnoDB存储引擎、MyISAM存储引擎不同。</p><p>每个基于MEMORY存储引擎的表实际对应一个磁盘文件，该文件的文件名与表名相同，类型为frm类型，该文件中只存储表的结构，而其数据文件都是存储在内存中的。这样有利于数据的快速处理，提供整个表的处理效率。值得注意的是，服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要使用了，可以释放这些内存，甚至可以删除不需要的表。</p><p>MEMORY存储引擎默认使用哈希（HASH）索引。其速度要比使用B型树（BTREE）索引快。如果读者希望使用B型树索引，可以在创建索引时选择使用。</p><p>MEMORY表的大小是受到限制的。表的大小主要取决于两个参数，分别是max_rows和max_heap_table_size。其中，max_rows可以在创建表时指定；max_heap_table_size的大小默认为16MB，可以按需要进行扩大。<strong>因此，其存在于内存中的特性，这类表的处理速度非常快。但是，其数据易丢失，生命周期短。基于这个缺陷，选择MEMORY存储引擎时需要特别小心。</strong></p><h4 id="选择存储引擎"><a href="#选择存储引擎" class="headerlink" title="选择存储引擎"></a>选择存储引擎</h4><p>在具体使用MySQL数据库管理系统时，选择一个合适的存储引擎是非常复杂的问题。因为每种存储引擎都有自己的特性、优势和应用场合，所以不能随便选择存储引擎。为了能够正确地选择存储引擎，必须掌握各种存储引擎的特性。</p><p>下面从存储引擎的事务安全、存储限制、空间使用、内存使用、插入数据的速度和对外键的支持等角度来比较InnoDB、MyISAM和MEMORY。</p><p><img src="/images/MySql.assets/image-20211126175817656.png" alt="image-20211126175817656"></p><hr><p>表锁：一个用户一个用户的用，当某一位用户插入数据时，直接“占据”表的所有位置，其他用户不许插入。</p><p>行锁:一个用户只“占据”他要插入数据的那一行。</p><p>相关联想:上厕所，你只锁住了你的那个坑位，而不是锁住厕所的大门。</p><p><strong>就是：是否允许多个用户同时更新一个表。</strong></p><hr><p>个简单的循环，LOOP语句本身没有停止循环，只有遇到LEAVE </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="MySQL" scheme="https://doraemon-hub-art.github.io/categories/MySQL/"/>
    
    
    <category term="-MySQL" scheme="https://doraemon-hub-art.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
