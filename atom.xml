<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://doraemon2.xyz/atom.xml" rel="self"/>
  
  <link href="http://doraemon2.xyz/"/>
  <updated>2021-09-29T03:55:10.134Z</updated>
  <id>http://doraemon2.xyz/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++STL容器知识点小结</title>
    <link href="http://doraemon2.xyz/2021/09/29/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/29/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/</id>
    <published>2021-09-29T02:16:05.000Z</published>
    <updated>2021-09-29T03:55:10.134Z</updated>
    
    <content type="html"><![CDATA[<p>STL标准模板库</p><p>STL主要分为分为三类：</p><ul><li>algorithm（算法） -  对数据进行处理（解决问题) 步骤的有限集合</li><li>container（容器） -  用来管理一组数据元素</li><li> Iterator (迭代器） -  可遍历STL容器内全部或部分元素”的对象</li></ul><p>容器和算法通过迭代器可以进行无缝地连接。在STL中几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。</p><p>STL 最早源于惠普实验室，早于C++存在，但是C++引入STL概念后，STL就成为C++的一部分，因为它被内建在你的编译器之内，不需要另行安装。</p><p>STL被组织为下面的13个头文件:</p><table><thead><tr><th>&lt; algorithm &gt;</th><th>&lt; memory &gt;</th></tr></thead><tbody><tr><td>&lt; deque &gt;</td><td>&lt; numeric &gt;</td></tr><tr><td>&lt; functional &gt;</td><td>&lt; queue &gt;</td></tr><tr><td>&lt; iterator &gt;</td><td>&lt; set &gt;</td></tr><tr><td>&lt; vector &gt;</td><td>&lt; stack &gt;</td></tr><tr><td>&lt; list &gt;</td><td>&lt; utility &gt;</td></tr><tr><td>&lt; map &gt;</td><td></td></tr></tbody></table><hr><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>在实际的开发过程中，数据结构本身的重要性完全不逊于算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。</p><p>经典的数据结构数量有限，但是在项目实战中，我们常常重复着一些为了存放不同数据类型而实现顺序表、链表等结构而重复编写的代码，这些代码都十分相似，只是为了适应不同数据类型的变化而在细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模板，STL容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，避免重复编码。</p><p>容器部分主要有由&lt; vector &gt;,&lt; list &gt;,&lt; deque &gt;,&lt; set &gt;,&lt; map &gt;,&lt; stack &gt; 和&lt; queue &gt;组成。</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210927103557400.png" alt="image-20210927103557400"></p><p><strong>容器的访问方式:</strong><br>下标访问、迭代器访问(iterator)</p><p><strong>容器的存储将原来的数据拷贝一份(存放指针即可解决这个问题)。</strong>给这个类定义一个拷贝构造函数，看是否调用即可验证。</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector是一个将元素置于动态数组中加以管理的容器。</p><p>vector可以随机存取元素，支持索引值直接存取， 用[]操作符或at()方法对元素进行操作。</p><p>vector尾部添加或移除元素非常快速。但是在中部或头部插入元素或移除元素<strong>比较费时</strong>。</p><p><strong>容量capacity要比真是的数据个数size大1。</strong></p><hr><p>当使用vector的默认构造函数(vector&lt; int &gt;v1)，不能直接通过下标访问，空间还没开辟。</p><h4 id="vector带参构造函数"><a href="#vector带参构造函数" class="headerlink" title="vector带参构造函数"></a>vector带参构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt; <span class="keyword">int</span> &gt;v2(存储元素个数，默认存储元素的数值);</span><br><span class="line">例如:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v2(<span class="number">10</span>);</span><br><span class="line">构造时就分配空间，同时插入默认元素<span class="number">0</span></span><br><span class="line">指定容器中存储的元素个之后，此时该<span class="built_in">vector</span>的容量和大小相等。</span><br><span class="line">(用默认<span class="built_in">vector</span>的默认构造函数之后再往里面push_back的话，<span class="built_in">vector</span>会自动开辟空间<span class="number">4</span>个<span class="number">4</span>个的扩容。)</span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v3(v2);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(v3.begin.() + x,v3.end());</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> test[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4(test, test + <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2.assign(<span class="number">2</span>,<span class="number">888</span>);<span class="comment">//改变vector中的元素个数和元素值</span></span><br><span class="line">v2.assign(v3.begin(),v3.end());<span class="comment">//使用迭代器赋值</span></span><br><span class="line">v2.assign(test,test+<span class="number">3</span>);<span class="comment">//使用指针赋值 </span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = v3;<span class="comment">//调用赋值运算</span></span><br></pre></td></tr></table></figure><h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><p>vector会自动扩充存储大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v2.resize(<span class="number">4</span>);<span class="comment">//重新调整v2容器大小，多余的被抹除。不够的以0填充。</span></span><br><span class="line"></span><br><span class="line">v2.resize(<span class="number">18</span>,<span class="number">666</span>);<span class="comment">//扩充v2大小，以666填充</span></span><br><span class="line"></span><br><span class="line">如果原来大小就是这么大，则不会发生变化。</span><br></pre></td></tr></table></figure><h4 id="尾部的添加和删除"><a href="#尾部的添加和删除" class="headerlink" title="尾部的添加和删除"></a>尾部的添加和删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">v2.pop_back();</span><br></pre></td></tr></table></figure><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下标访问</span><br><span class="line">    v2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">at</span><br><span class="line">    v2.at(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">接口返回引用</span><br><span class="line">    v2.front();<span class="comment">//取到第一个元素</span></span><br><span class="line">v2.end();<span class="comment">//取到最后一个元素</span></span><br></pre></td></tr></table></figure><h4 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入单个元素</span></span><br><span class="line">v2.insert(迭代器,插入的数值);</span><br><span class="line"><span class="comment">//插入多个元素</span></span><br><span class="line">v2.insert(v2.begin(),<span class="number">3</span>,<span class="number">888</span>);<span class="comment">//在开始的位置插入三个888</span></span><br><span class="line">v2.insert(v2.begin(),v3.begin(),v3.end());<span class="comment">//将v3的内容从v2开始插入进去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入单个元素的时候返回值是一个迭代器</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把整个vector干掉</span></span><br><span class="line">v2.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//干掉的单个元素</span></span><br><span class="line">v2.erase(v2.begin()+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//干掉多个元素</span></span><br><span class="line">v2.erase(v2.begin(),b2.begin()+<span class="number">1</span>);<span class="comment">//不包括结尾，“左闭右开”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除单个元素返回值也是个迭代器</span></span><br></pre></td></tr></table></figure><hr><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>deque是“double-ended queue”的缩写，和vector一样都是STL的容器，唯一不同的是：</p><p><strong>deque是双端数组，而vector是单端的。</strong></p><p><strong>Deque 特点</strong>：</p><ul><li> deque在接口上和vector非常相似，在许多操作的地方可以直接替换。</li><li>deque可以随机存取元素（支持索引值直接存取，用[]操作符或at()方法）</li><li>deque头部和尾部添加或移除元素都非常快速, 但是在中部安插元素或移除元素比较费时。</li></ul><p>使用时，包含头文件：#include &lt; deque &gt;  </p><p>(deque使用多个数组实现)</p><p><strong>对比</strong>：</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210927155900584.png" alt="image-20210927155900584"></p><p>多数操作同vector</p><p><strong>deuqe可以快速在头部和尾部进行添加或者移除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.push_back(element);<span class="comment">//容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.push_front(element);<span class="comment">//容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.pop_back();        <span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">deque</span>.pop_front();    <span class="comment">//删除容器第一个数据</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的数据存取"><a href="#deque的数据存取" class="headerlink" title="deque的数据存取"></a>deque的数据存取</h4><ol><li><p>使用下标操作 deqIntA[0] = 100;</p></li><li><p>使用at 方法 如: deqIntA.at(2) = 100;</p></li><li><p>接口返回的引用 deqIntA.front() 和 deqIntA.back()  </p><p>注意：  第一和第二种方式必须注意越界</p></li></ol><hr><p><strong>end()返回的是一个指向最后一个元素之后位置的迭代器，就类似于字符串结束符。</strong></p><hr><h4 id="deque与迭代器"><a href="#deque与迭代器" class="headerlink" title="deque与迭代器"></a>deque与迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.begin();  <span class="comment">//返回容器中第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.end();  <span class="comment">//返回容器中最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.rbegin();  <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.rend();  <span class="comment">//返回容器中倒数最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.cbegin();  <span class="comment">//返回容器中第一个元素的常量迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.cend();  <span class="comment">//返回容器中最后一个元素之后的常量迭代器。</span></span><br></pre></td></tr></table></figure><hr><p>常量迭代器只能访问呢元素，不能修改元素。</p><hr><h4 id="deque的赋值"><a href="#deque的赋值" class="headerlink" title="deque的赋值"></a>deque的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.assign(beg,end);    <span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。注意该区间是左闭右开的区间。</span></span><br><span class="line"><span class="built_in">deque</span>.assign(n,elem);  <span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line"><span class="built_in">deque</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">deque</span> &amp;deq);<span class="comment">//重载等号操作符 </span></span><br><span class="line"><span class="built_in">deque</span>.swap(deq);  <span class="comment">// 将deque与本身的元素互换</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的大小"><a href="#deque的大小" class="headerlink" title="deque的大小"></a>deque的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.resize(num);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.resize(num, elem);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><hr><h4 id="deque的插入"><a href="#deque的插入" class="headerlink" title="deque的插入"></a>deque的插入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.insert(pos,elem);  <span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.insert(pos,n,elem);  <span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.insert(pos,beg,end);  <span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值</span></span><br></pre></td></tr></table></figure><h4 id="deque的删除"><a href="#deque的删除" class="headerlink" title="deque的删除"></a>deque的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>.clear();   <span class="comment">//移除容器的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.erase(beg,end); <span class="comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>.erase(pos);   <span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br></pre></td></tr></table></figure><p><strong>注意迭代器遍历删除</strong></p><p>删除一个元素该位置的元素是会前移的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator it = deqIntA.begin(); it!=deqIntA.end();)&#123;</span><br><span class="line"><span class="keyword">if</span>(*it == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//接收-返回指向下一个位置的迭代器</span></span><br><span class="line">it = deqIntA.erase(it);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>list是一个<strong>双向链表容器</strong>，可高效地进行插入删除元素。</p><p><strong>List 特点：</strong></p><ul><li> list不可以随机存取元素，所以不支持at.(position)函数与[]操作符。可以对其迭代器执行++，但是不能这样操作迭代器：it+3。</li></ul><p>  <strong>即：</strong>list的迭代器不能加数字，但可以通过多次自增达到效果。</p><ul><li>使用时包含 #include &lt; list &gt;   </li></ul><h4 id="list对象的默认构造"><a href="#list对象的默认构造" class="headerlink" title="list对象的默认构造"></a>list对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>同样采用模板类实现,对象的默认构造形式：<span class="built_in">list</span>&lt;T&gt; listT;  如：</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lstInt;       <span class="comment">//定义一个存放int的list容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">float</span>&gt; lstFloat;     <span class="comment">//定义一个存放float的list容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; lstString;    <span class="comment">//定义一个存放string的list容器。</span></span><br></pre></td></tr></table></figure><p>注意：尖括号内还可以设置指针类型或自定义类型。</p><hr><p>vector的内存空间是预先分配的。</p><p>list不存在capacity方法，所以它并没有提前分配空间。</p><hr><h4 id="list对象的带参数构造"><a href="#list对象的带参数构造" class="headerlink" title="list对象的带参数构造"></a>list对象的带参数构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：<span class="built_in">list</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line">方式二：<span class="built_in">list</span>(n,elem);    <span class="comment">//构造函数将n个elem拷贝给本身。</span></span><br><span class="line"></span><br><span class="line">方式三：<span class="built_in">list</span>(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst); <span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h4 id="list头尾的添加移除操作"><a href="#list头尾的添加移除操作" class="headerlink" title="list头尾的添加移除操作"></a>list头尾的添加移除操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.push_back(elem);  <span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop_back();      <span class="comment">//删除容器中最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.push_front(elem);   <span class="comment">//在容器开头插入一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop_front();      <span class="comment">//从容器开头移除第一个元素</span></span><br></pre></td></tr></table></figure><h4 id="list的数据存取"><a href="#list的数据存取" class="headerlink" title="list的数据存取"></a>list的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.front();   <span class="comment">//返回第一个元素。</span></span><br><span class="line"><span class="built_in">list</span>.back();  <span class="comment">//返回最后一个元素。</span></span><br></pre></td></tr></table></figure><h4 id="list与迭代器"><a href="#list与迭代器" class="headerlink" title="list与迭代器"></a>list与迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.begin();     <span class="comment">//返回容器中第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.end();      <span class="comment">//返回容器中最后一个元素之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.rbegin();     <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.rend();     <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.cbegin();  <span class="comment">//返回容器中第一个元素的常量迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.cend();  <span class="comment">//返回容器中最后一个元素之后的常量迭代器。</span></span><br></pre></td></tr></table></figure><h4 id="list的赋值"><a href="#list的赋值" class="headerlink" title="list的赋值"></a>list的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.assign(beg,end);   <span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.assign(n,elem);  <span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">list</span> &amp;lst);<span class="comment">//重载等号操作符。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.swap(lst);  <span class="comment">// 将lst与本身的元素互换。</span></span><br></pre></td></tr></table></figure><h4 id="list的大小"><a href="#list的大小" class="headerlink" title="list的大小"></a>list的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ist.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.resize(num);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.resize(num, elem);  <span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure><h4 id="list的插入"><a href="#list的插入" class="headerlink" title="list的插入"></a>list的插入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.insert(pos,elem);  <span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(pos,n,elem);  <span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(pos,beg,end);  <span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br></pre></td></tr></table></figure><h4 id="list的删除"><a href="#list的删除" class="headerlink" title="list的删除"></a>list的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.clear();<span class="comment">//移除容器的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.erase(beg,end);  <span class="comment">//**删除****[beg,end)**区间的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.erase(pos);   <span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br><span class="line"></span><br><span class="line">lst.remove(elem);  <span class="comment">//删除容器中所有与elem值匹配的元素。</span></span><br></pre></td></tr></table></figure><p><strong>vector和deque中没有remove操作</strong></p><h4 id="list的反序排列"><a href="#list的反序排列" class="headerlink" title="list的反序排列"></a>list的反序排列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l <span class="built_in">list</span>.reverse();   <span class="comment">//反转链表，比如list包含1, 2, 3, 4, 5五个元素，运行此方法后，list就包含5, 4, 3, 2, 1元素。</span></span><br></pre></td></tr></table></figure><h3 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set/multiset"></a>set/multiset</h3><h4 id="set-multiset容器概念"><a href="#set-multiset容器概念" class="headerlink" title="set/multiset容器概念"></a>set/multiset容器概念</h4><p>set和multiset是一个<strong>集合</strong>容器，其中set所包含的元素是唯一的，集合中的元素按一定的顺序排列。set采用<strong>红黑树</strong>变体的数据结构实现，红黑树属于平衡二叉树。在插入操作和删除操作上比vector快。在n个数中查找目标数的效率是 log2 n 。</p><hr><p>C++11新特性:变参模板、完美转发和empalce——<a href="https://blog.csdn.net/qq_51604330/article/details/120517535?spm=1001.2014.3001.5501">C++11新特性:变参模板、完美转发和emplace</a></p><hr><h4 id="红黑树定义"><a href="#红黑树定义" class="headerlink" title="红黑树定义"></a>红黑树定义</h4><p>是每个节点都带有颜色属性（颜色为红色或黑色）的自平衡二叉查找树，满足下列性质：</p><ol><li>节点是红色或黑色</li><li>根节点是黑色</li><li>所有叶子节点都是黑色节点(NULL)</li><li>每个红色节点必须有两个黑色的子节点。(从每个叶子到根的所有路径上不能有两个连续的红色节点。</li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</li></ol><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210928091221639.png" alt="image-20210928091221639"></p><h4 id="set-和-multiset-特点"><a href="#set-和-multiset-特点" class="headerlink" title="set 和 multiset 特点"></a>set 和 multiset 特点</h4><ol><li>set中元素插入过程是按排序规则插入(自动排序)，所以<strong>不能指定插入位置</strong>。</li><li>set不可以直接存取元素。（不可以使用at.(pos)与[]操作符）。</li><li>multiset与set的区别：set支持唯一键值，每个元素值只能出现一次；而multiset中<strong>同一值可以出现多次</strong>。</li><li>不可以直接修改set或multiset容器中的元素值，因为该类容器是自动排序的。<strong>如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素。</strong></li></ol><p>头文件 #include &lt; set &gt;  </p><h4 id="set-multiset对象的默认构造"><a href="#set-multiset对象的默认构造" class="headerlink" title="set/multiset对象的默认构造"></a>set/multiset对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; setInt;        <span class="comment">//一个存放int的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span>&gt; setFloat;      <span class="comment">//一个存放float的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; setString;     <span class="comment">//一个存放string的set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; mulsetInt;       <span class="comment">//一个存放int的multi set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">float</span>&gt; multisetFloat;    <span class="comment">//一个存放float的multi set容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="built_in">string</span>&gt; multisetString;   <span class="comment">//一个存放string的multi set容器。</span></span><br></pre></td></tr></table></figure><h4 id="set-multiset-对象的带参构造函数"><a href="#set-multiset-对象的带参构造函数" class="headerlink" title="set/multiset 对象的带参构造函数"></a>set/multiset 对象的带参构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;s); <span class="comment">//拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>(beg,end);   <span class="comment">//将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>(<span class="keyword">const</span> <span class="built_in">multiset</span> &amp;s); <span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure><h4 id="set对象的拷贝构造与赋值"><a href="#set对象的拷贝构造与赋值" class="headerlink" title="set对象的拷贝构造与赋值"></a>set对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);    <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">set</span> &amp;st);<span class="comment">//重载等号操作符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.swap(st);  <span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><hr><p>仿函数(函数对象)——<a href="https://blog.csdn.net/qq_51604330/article/details/120533423">C++仿函数(函数对象)</a>（STL重点）</p><hr><h4 id="set的插入和pair的用法"><a href="#set的插入和pair的用法" class="headerlink" title="set的插入和pair的用法"></a>set的插入和pair的用法</h4><p>pair表示一个<strong>对组</strong>，它将两个值视为一个单元，把两个值捆绑在一起。</p><p>pair&lt;T1,T2&gt;用来存放的两个值的类型，可以不一样，也可以一样，如T1为int，T2为float。T1,T2也可以是自定义类。</p><p>pair.first是pair里面的第一个值，是T1类型。</p><p>pair.second是pair里面的第二个值，是T2类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>容器的insert的返回值是一个对组</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="keyword">bool</span> &gt;ret = s1.insert(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*(ret.first)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ret.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">first返回插入元素的迭代器,*它得到的就是这个数值</span><br></pre></td></tr></table></figure><h4 id="set与迭代器"><a href="#set与迭代器" class="headerlink" title="set与迭代器"></a><strong>set与迭代器</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.insert(elem);   <span class="comment">//在容器中插入元素。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.begin();     <span class="comment">//返回容器中第一个数据的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.end();      <span class="comment">//返回容器中最后一个数据之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.rbegin();     <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.rend();     <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br></pre></td></tr></table></figure><p>注意循环遍历删除的时候it++的位置。</p><h4 id="set-multiset的大小"><a href="#set-multiset的大小" class="headerlink" title="set/multiset的大小"></a>set/multiset的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.size();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.empty();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><p>注意事项： 它们没有resize 方法</p><h4 id="set-multiset的删除"><a href="#set-multiset的删除" class="headerlink" title="set/multiset的删除"></a>set/multiset的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.clear(); <span class="comment">//清除所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(pos);   <span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(beg,end); <span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.erase(elem);   <span class="comment">//删除容器中值为elem的元素。</span></span><br></pre></td></tr></table></figure><p><strong>删除区间内的某个或某些元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">setInt是用<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;声明的容器，假设它内部现已包含按顺序的<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>元素。</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator itBegin=setInt.begin();</span><br><span class="line"></span><br><span class="line">++ itBegin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator itEnd=setInt.begin();</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">++ itEnd;</span><br><span class="line"></span><br><span class="line">setInt.erase(itBegin,itEnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时容器setInt包含按顺序的1, 4, 5, 6四个元素。</span></span><br></pre></td></tr></table></figure><p><strong>删除容器中第一个元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.erase(setInt.begin());</span><br></pre></td></tr></table></figure><p><strong>删除容器中值为x的元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.erase(<span class="number">5</span>); </span><br></pre></td></tr></table></figure><p><strong>删除setInt的所有元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInt.clear();<span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure><h4 id="set-multiset的查找"><a href="#set-multiset的查找" class="headerlink" title="set/multiset的查找"></a>set/multiset的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>.find(elem);  <span class="comment">//查找elem元素，返回指向elem元素的迭代器。</span></span><br><span class="line"><span class="comment">//find是否查找到元素，可以通过返回的迭代器和容器的end()方法进行比较。end()就相当于字符串结束符，返回最后一个元素后面位置的迭代器。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.count(elem);  <span class="comment">//返回容器中值为elem的元素个数。对set来说，要么是0，要么是1。对multiset来说，值可能大于1。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.lower_bound(elem);  <span class="comment">//返回第一个&gt;=elem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.upper_bound(elem);  <span class="comment">//  返回第一个&gt;elem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.equal_range(elem);<span class="comment">//返回multiset容器中与elem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。这个函数返回两个迭代器，而这两个迭代器被封装在pair中。</span></span><br><span class="line"> <span class="comment">//例如 1 2 3 3 3 4 返回的是[3,6);</span></span><br></pre></td></tr></table></figure><h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h3><p>map是标准的<strong>关联式</strong>容器，一个map里存储的元素是一个键值对序列，叫做(key,value)键值对。它提供基于key快速检索数据的能力。</p><ol><li><p>map中<strong>key值是唯一的</strong>。集合中的元素按一定的顺序排列。元素插入过程是按排序规则插入，所以不能指定插入位置。</p></li><li><p>map底层的具体实现是采用红黑树变体的平衡二叉树的数据结构。在插入操作、删除和检索操作上比vector快很多。</p></li><li><p>map可以直接存取key所对应的value，支持[]操作符，如map[key]=value。</p><p>#include <map></p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(<span class="number">18</span>,<span class="string">&quot;xiaohua&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>multimap与map的区别</strong></p><p>map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符。</p><h4 id="map-multimap对象的默认构造"><a href="#map-multimap对象的默认构造" class="headerlink" title="map/multimap对象的默认构造"></a>map/multimap对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>/<span class="built_in">multimap</span>采用模板类实现，对象的默认构造形式：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;T1,T2&gt; mapTT; </span><br><span class="line"></span><br><span class="line"><span class="built_in">multimap</span>&lt;T1,T2&gt;  multimapTT;  </span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; mapA;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">float</span>&gt; mapB;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中T1,T2还可以用各种指针类型或自定义类型</span></span><br></pre></td></tr></table></figure><h4 id="map和multimap对象的带参数构造"><a href="#map和multimap对象的带参数构造" class="headerlink" title="map和multimap对象的带参数构造"></a>map和multimap对象的带参数构造</h4><p>方式一：map(beg,end);   //将[beg, end)区间中的元素拷贝给本身。</p><p>方式二：map(const map &amp;mapObject); //拷贝构造函数。</p><h4 id="map的插入与迭代器"><a href="#map的插入与迭代器" class="headerlink" title="map的插入与迭代器"></a>map的插入与迭代器</h4><p>map.insert(…);   //往容器插入元素，返回pair&lt;iterator,bool&gt;</p><p><strong>map中插入元素的四种方式</strong>：</p><p>假设  map&lt;int, string&gt; mapStu;</p><p>方式一、通过pair的方式插入对象</p><p>mapStu.insert(  pair&lt;int,string&gt;(1,”张三”)  );</p><p><strong>例如:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;王小花&quot;</span>));</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::iterator,<span class="keyword">bool</span>&gt;ret = m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;李小花&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (ret.second == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功啦&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二、通过pair的方式插入对象</p><p>mapStu.inset(make_pair(2, “李四”));</p><p>方式三、通过value_type的方式插入对象</p><p>mapStu.insert(  map&lt;int,string&gt;::value_type(3,”王五”)  );</p><p>方式四、通过数组的方式插入值</p><p>如果键值对已经存在则覆盖原值。</p><p>mapStu[4] = “赵六”;</p><p>mapStu[4] = “赵四”;覆盖赵六</p><p>mapStu[5] = “小七”；</p><p>(没有数值默认初始化)    </p><p><strong>注意：</strong> </p><p> 前三种方法，采用的是insert()方法，该方法<strong>返回值为pair&lt;iterator,bool&gt;</strong></p><p>此三种方式插入重复的键值会插入均会失败。 </p><p> 第四种方法非常直观，但碰到相同的键时会进行覆盖操作。比如插入key 为4的键值时，先在mapStu中查找主键为4的项，若不存在，则将一个键为4，值为默认初始化值的对组插入到mapStu中，然后再将值修改成“赵六”。若发现已存在4这个键，则修改这个键对应的value。</p><p>string strName = mapStu[8];  //取值操作或插入操作</p><p>l只有当mapStu存在8这个键时才是正确的取操作，否则会自动插入一个实例，键为8，值为默认构造时的初始化值。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.begin();  <span class="comment">//返回容器中第一个数据的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.end();  <span class="comment">//返回容器中最后一个数据之后的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.rbegin();  <span class="comment">//返回容器中倒数第一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.rend();  <span class="comment">//返回容器中倒数最后一个元素的后面的迭代器。</span></span><br></pre></td></tr></table></figure><h4 id="map-multimap-排序"><a href="#map-multimap-排序" class="headerlink" title="map/multimap 排序"></a>map/multimap 排序</h4><p><strong>参数</strong></p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210928201038963.png" alt="image-20210928201038963"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;T1,T2,less&lt;T1&gt; &gt;  mapA;  <span class="comment">//该容器是按键的升序方式排列元素。未指定函数对象，默认采用less&lt;T1&gt;函数对象。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;T1,T2,greater&lt;T1&gt;&gt; mapB;  <span class="comment">//该容器是按键的降序方式排列元素。</span></span><br><span class="line"></span><br><span class="line">less&lt;T1&gt;与greater&lt;T1&gt;  可以替换成其它的函数对象functor。</span><br><span class="line"></span><br><span class="line">可编写自定义函数对象以进行自定义类型的比较，使用方法与<span class="built_in">set</span>构造时所用的函数对象一样。</span><br></pre></td></tr></table></figure><h4 id="map对象的拷贝构造与赋值"><a href="#map对象的拷贝构造与赋值" class="headerlink" title="map对象的拷贝构造与赋值"></a>map对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(<span class="keyword">const</span> <span class="built_in">map</span> &amp;mp);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">map</span> &amp;mp);<span class="comment">//重载等号操作符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.swap(mp);<span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure><h4 id="map的大小"><a href="#map的大小" class="headerlink" title="map的大小"></a>map的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.size();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.empty();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h4 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.clear();<span class="comment">//删除所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(pos);<span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(beg,end);<span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(key);   <span class="comment">//删除容器中key为key的对组,返回删除的对组个数，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.erase(key_type *first, key_type *last)  <span class="comment">//删除数组指定的半闭半开的区间中 特定的key对应的所有队组</span></span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">int</span> range[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="map-multimap的查找"><a href="#map-multimap的查找" class="headerlink" title="map/multimap的查找"></a>map/multimap的查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>.find(key);  查找键key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回<span class="built_in">map</span>.end();</span><br><span class="line"><span class="comment">//因为multimap中可以存在重复的键值，所以用循环迭代器查找的时候，可以输入具有相同键值的元素。</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;m1;</span><br><span class="line">m1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(<span class="number">18</span>, <span class="string">&quot;sb&quot;</span>));</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator it = m1.find(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">if</span> (it != m1.end())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="comment">//这个比count控制循环更灵活实用性更强</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.count(key);  <span class="comment">//返回容器中键值为key的对组个数。对map来说，要么是0，要么是1;对multimap来说，值&gt;=0。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.lower_bound(keyElem);  <span class="comment">//返回第一个key&gt;=keyElem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.upper_bound(keyElem);  <span class="comment">//  返回第一个key&gt;keyElem元素的迭代器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.equal_range(keyElem);<span class="comment">//返回容器中key与keyElem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。（multimap重复元素）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">最后一个的代码示例</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mul1;</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;甲&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">2</span>, <span class="string">&quot;乙&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">2</span>, <span class="string">&quot;丙&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&quot;丁&quot;</span>));</span><br><span class="line">mul1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">4</span>, <span class="string">&quot;卯&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回的是两个玩意，所以要对组接收</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator,<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator&gt; RecvPari = mul1.equal_range(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (RecvPari.first != mul1.end())<span class="comment">//就相当于对组与对组对比</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注意对应map的元素存放在对组中</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*RecvPari.first).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (RecvPari.second != mul1.end())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//存放value在该对组的第二位</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*RecvPari.second).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出乙和丁</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><h4 id="queue简介"><a href="#queue简介" class="headerlink" title="queue简介"></a>queue简介</h4><ol><li>queue是队列容器，是一种“先进先出”的容器。</li><li>默认情况下<strong>queue是利用deque容器</strong>实现的一种容器。</li><li>它只允许在队列的前端（front）进行删除操作，而在队列的后端（back）进行插入操作</li><li>#include <queue>  </li></ol><p>默认用deque容器实现</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210929092413249.png" alt="image-20210929092413249"></p><p>可以显式指定类型来控制用什么容器实现</p><p>例如:（注意作为内置容器的容器是否与queue兼容）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><h4 id="queue对象的默认构造"><a href="#queue对象的默认构造" class="headerlink" title="queue对象的默认构造"></a>queue对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>采用模板类实现，<span class="built_in">queue</span>对象的默认构造形式：<span class="built_in">queue</span>&lt;T&gt; queT; 如：</span><br><span class="line"> </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; queueInt;       <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">float</span>&gt; queueFloat;   <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; queueString;   <span class="comment">//一个存放string的queue容器。</span></span><br><span class="line"></span><br><span class="line">...  </span><br><span class="line">注意： 尖括号内还可以设置指针类型或自定义类型。</span><br></pre></td></tr></table></figure><h4 id="queue-对象的带参构造"><a href="#queue-对象的带参构造" class="headerlink" title="queue 对象的带参构造"></a>queue 对象的带参构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; queueList; <span class="comment">//内部使用list 来存储队列元素的queue 容器.</span></span><br><span class="line"></span><br><span class="line">错误: <span class="built_in">queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; queueList; <span class="comment">//内部不能使用vector来存储队列元素</span></span><br></pre></td></tr></table></figure><h4 id="queue的push-与pop-方法"><a href="#queue的push-与pop-方法" class="headerlink" title="queue的push()与pop()方法"></a>queue的push()与pop()方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(elem);  <span class="comment">//往队尾添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.pop();    <span class="comment">//从队头处移除队首元素</span></span><br></pre></td></tr></table></figure><h4 id="queue对象的拷贝构造与赋值"><a href="#queue对象的拷贝构造与赋值" class="headerlink" title="queue对象的拷贝构造与赋值"></a>queue对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">queue</span> &amp;que);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h4 id="queue的数据存取"><a href="#queue的数据存取" class="headerlink" title="queue的数据存取"></a>queue的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.back();  <span class="comment">//返回最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.front();  <span class="comment">//返回第一个元素</span></span><br><span class="line"></span><br><span class="line">可以通过这两个接口修改容器对应内容，因为返回的是引用</span><br><span class="line"> </span><br><span class="line">存放自定义对象的时候考虑<span class="built_in">queue</span>.emplace</span><br></pre></td></tr></table></figure><h4 id="queue的大小"><a href="#queue的大小" class="headerlink" title="queue的大小"></a>queue的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.empty();  <span class="comment">//判断队列是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>.size();    <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h4 id="优先级队列priority-queue"><a href="#优先级队列priority-queue" class="headerlink" title="优先级队列priority_queue"></a>优先级队列priority_queue</h4><p><strong>优先队列</strong>： 它的入队顺序没有变化，但是出队的顺序是根据优先级的高低来决定的。<strong>优先级高的优先出队。</strong></p><p><strong>默认值越大优先级越大。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">priority_queue</span>(<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;);<span class="comment">//值越小优先级越大</span></span><br><span class="line"><span class="built_in">priority_queue</span>(<span class="keyword">int</span>,<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;);<span class="comment">//值越小优先级越大</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>stack是堆栈容器，是一种”先进后出的容器”。</p><p>默认基于deque容器实现的容器。</p><p>(如果用vector实现，在前面删除元素涉及到元素的移动，效率不如deque，一般情况下不建议使用vector。)</p><h4 id="stack对象的默认构造"><a href="#stack对象的默认构造" class="headerlink" title="stack对象的默认构造"></a>stack对象的默认构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>采用模板类实现， <span class="built_in">stack</span>对象的默认构造形式： <span class="built_in">stack</span> &lt;T&gt; stkT;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stkInt;       <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">float</span>&gt; stkFloat;   <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; stkString;   <span class="comment">//一个存放string的stack容器。  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br></pre></td></tr></table></figure><h4 id="stack的push-与pop-方法"><a href="#stack的push-与pop-方法" class="headerlink" title="stack的push()与pop()方法"></a>stack的push()与pop()方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(elem);  <span class="comment">//往栈头添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>.pop();     <span class="comment">//从栈头移除第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例:</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkInt;  </span><br><span class="line">stkInt.push(<span class="number">1</span>);</span><br><span class="line">stkInt.push(<span class="number">2</span>);</span><br><span class="line">stkInt.pop();  </span><br><span class="line">stkInt.push(<span class="number">3</span>);</span><br><span class="line">此时stkInt存放的元素是<span class="number">1</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="stack对象的拷贝构造与赋值"><a href="#stack对象的拷贝构造与赋值" class="headerlink" title="stack对象的拷贝构造与赋值"></a>stack对象的拷贝构造与赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);   <span class="comment">//拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><h4 id="stack的数据存取"><a href="#stack的数据存取" class="headerlink" title="stack的数据存取"></a>stack的数据存取</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top(); <span class="comment">//返回最后一个压入栈元素</span></span><br><span class="line"><span class="comment">//返回的是引用可以修改值</span></span><br></pre></td></tr></table></figure><h4 id="stack的大小"><a href="#stack的大小" class="headerlink" title="stack的大小"></a>stack的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>.size();    <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>C++11新增</p><h4 id="array容器概念"><a href="#array容器概念" class="headerlink" title="array容器概念"></a>array容器概念</h4><p>array是将元素置于一个固定数组中加以管理的容器。</p><p>array可以随机存取元素,支持索引值直接存取，用[]操作符或at()方法对元素进行操作，也可以使用迭代器访问</p><p>不支持动态的新增删除操作</p><p>array可以完全替代C语言中的数组，使操作数组元素更加安全！</p><h4 id="array对象的构造"><a href="#array对象的构造" class="headerlink" title="array对象的构造"></a>array对象的构造</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>采用模板类实现，<span class="built_in">array</span>对象的默认构造形式(涉及非类型参数-数值类模板)</span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;T，10&gt;  arrT;  <span class="comment">//10 为数值型模板参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1;   <span class="comment">//一个存放int的array容器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">float</span>, 6&gt; a2;  <span class="comment">//一个存放float的array容器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;student, 6&gt; a3; <span class="comment">//一个存放student的array容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;; <span class="comment">//定义时同时初始化</span></span><br></pre></td></tr></table></figure><h4 id="array的赋值"><a href="#array的赋值" class="headerlink" title="array的赋值"></a>array的赋值</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a2.assign(<span class="number">0</span>);<span class="comment">//改变原来array中的所有元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>, 6&gt; a2 ;</span><br></pre></td></tr></table></figure><h4 id="array的大小"><a href="#array的大小" class="headerlink" title="array的大小"></a>array的大小</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>.size();  <span class="comment">//返回容器中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>.max_size(); <span class="comment">//返回容器中最大的元素个数，与size 等同</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">array</span>.empty();  <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h4 id="array的数据存取"><a href="#array的数据存取" class="headerlink" title="array的数据存取"></a>array的数据存取</h4><ol><li>使用下标操作 a1[0] = 100;</li><li>使用at 方法 如: a1.at(2) = 100;</li><li> 接口返回的引用 a2.front() 和 a2.back()</li><li>返回内建数组的指针 a1.data()  </li></ol><p><strong>注意：  第一和第二种方式必须注意越界</strong></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><strong>注意：</strong>任何时候在模板(template)中使用一个嵌套从属类型名称, 需要在前一个位置, 添加关键字。</p><p>(写模板的时候注意)</p><p>例如:</p><p><img src="/images/C++STL%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93.assets/image-20210929112319934.png" alt="image-20210929112319934"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span> <span class="built_in">list</span>&lt;T&gt;::const_iterator citor;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;STL标准模板库&lt;/p&gt;
&lt;p&gt;STL主要分为分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;algorithm（算法） -  对数据进行处理（解决问题) 步骤的有限集合&lt;/li&gt;
&lt;li&gt;container（容器） -  用来管理一组数据元素&lt;/li&gt;
&lt;li&gt; Iterator </summary>
      
    
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-STL" scheme="http://doraemon2.xyz/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++仿函数(函数对象)</title>
    <link href="http://doraemon2.xyz/2021/09/28/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1)/"/>
    <id>http://doraemon2.xyz/2021/09/28/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1)/</id>
    <published>2021-09-28T08:43:10.000Z</published>
    <updated>2021-09-28T09:07:29.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仿函数-函数对象"><a href="#仿函数-函数对象" class="headerlink" title="仿函数(函数对象)"></a>仿函数(函数对象)</h1><p>研究set/multiset容器的排序原理。</p><p>当我们构造一个存放int类型的set容器时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br></pre></td></tr></table></figure><p>系统会自动帮我们设定并调用一个函数，自动调用头文件functional中的仿函数(一个类中重载了()实现了对比的操作，从而完成了排序)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>,less&lt;<span class="keyword">int</span>&gt;&gt; s1;</span><br></pre></td></tr></table></figure><p>less函数对象实现比较，为排序提供依据。（升序）<br>greater（降序）</p><p><strong>functional中，如图</strong></p><p><img src="/images/C++%E4%BB%BF%E5%87%BD%E6%95%B0(%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1).assets/image-20210928153035870.png" alt="image-20210928153035870"></p><p><strong>手动实现:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> _age):age(_age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Student&amp; right) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &lt; right.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> Student&amp; right) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &gt; right.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Student() &#123; &#125; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Student,greater&lt;Student&gt;&gt; setStu;</span><br><span class="line">setStu.insert(<span class="number">19</span>);</span><br><span class="line">setStu.insert(<span class="number">20</span>);</span><br><span class="line">setStu.insert(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Student&gt;::iterator it = setStu.begin(); it != setStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;getAge()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类将()运算符重载为成员函数，这个类就称为函数对象类，这个类的对象就是函数对象。函数对象是一个对象，但是使用的形式看起来像函数调用，实际上也执行了函数调用，因而得名。——<a href="http://c.biancheng.net/view/354.html">C++函数对象详解 </a></p><p><strong>实现自己的less(greater)达到效果：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuncStudent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Student&amp; left, <span class="keyword">const</span> Student&amp; right)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> left.getAge() &gt; right.getAge();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Student,FuncStudent&gt; setStu;</span><br><span class="line"><span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">setStu.insert(s1);</span><br><span class="line">setStu.insert(s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Student,FuncStudent&gt;::iterator it = setStu.begin(); it != setStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it-&gt;getAge()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>仿函数(函数对象)概念</strong></p><ol><li>尽管函数指针被广泛用于实现函数回调，但C++还提供了一个重要的实现回调函数的方法，那就是函数对象。回调函数解释——<a href="https://cloud.tencent.com/developer/article/1373683#:~:text=%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1,%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BC%95%E7%94%A8%E3%80%82">回调函数</a></li><li>functor，翻译成函数对象，伪函数，它是是重载了“()”操作符的普通类对象。从语法上讲，它与普通函数行为类似。</li><li>functional头文件中包含的 greater&lt;&gt;与less&lt;&gt;就是函数对象。</li></ol><p><strong>set/setmulti容器就是调用函数对象的operator()方法去比较两个值的大小，从而实现的排序。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;仿函数-函数对象&quot;&gt;&lt;a href=&quot;#仿函数-函数对象&quot; class=&quot;headerlink&quot; title=&quot;仿函数(函数对象)&quot;&gt;&lt;/a&gt;仿函数(函数对象)&lt;/h1&gt;&lt;p&gt;研究set/multiset容器的排序原理。&lt;/p&gt;
&lt;p&gt;当我们构造一个存放int类型</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11新特性:变参模板、完美转发和emplace</title>
    <link href="http://doraemon2.xyz/2021/09/27/C++11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace/"/>
    <id>http://doraemon2.xyz/2021/09/27/C++11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace/</id>
    <published>2021-09-27T13:06:35.000Z</published>
    <updated>2021-09-27T13:12:49.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11新特性：变参模板、完美转发和emplace"><a href="#C-11新特性：变参模板、完美转发和emplace" class="headerlink" title="C++11新特性：变参模板、完美转发和emplace"></a>C++11新特性：变参模板、完美转发和emplace</h1><p>使得 emplace 可以接受任意参数，这样就可以适用于任意对象的构建。</p><hr><p><strong>《C++Primer》</strong>:<br>新标准引入了三个是新成员——emplace、emplace_front和emplace_back,这些操作构造而不是拷贝元素。这些操作分别对应着，insert、push_front、push_back，允许我们将元素放置在容器头部、一个指定位置之前或容器尾部。</p><p>当我们调用push或insert成员函数时，我们将元素类型的对象传递给它们，这些对象被拷贝到容器中。而当我们调用一个emplace成员函数时，则是将参数传递给元素类型的构造函数。emplace成员使用这些参数在容器管理的内存空间中直接构造元素。</p><hr><p><strong>问题代码如下</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> age, <span class="keyword">const</span> <span class="keyword">char</span>* name) :age(age), name(name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;有参构造函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="keyword">const</span> Student&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">age = other.age;</span><br><span class="line">name = other.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数被调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; vectStu;</span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="comment">//1.先定义再插入</span></span><br><span class="line"><span class="comment">//Student s1(18, &quot;老王&quot;);</span></span><br><span class="line"><span class="comment">//这样插入实际上是vector拷贝了一份s1放到了它自己里面，所以会执行一个有参构造和一个拷贝构造</span></span><br><span class="line"><span class="comment">//vectStu.push_back(s1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.插入临时变量</span></span><br><span class="line">vectStu.push_back(Student(<span class="number">19</span>, <span class="string">&quot;老张&quot;</span>));<span class="comment">//效果同上</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将对应的学生对象直接放入容器中会调用拷贝构造函数，拷贝一份放入容器中，<strong>引起了性能问题</strong>。</p><p> <strong>用变参模板和完美转发来解决这个问题。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vectStu.emplace_back(<span class="number">20</span>, <span class="string">&quot;小花&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/C-11%E6%96%B0%E7%89%B9%E6%80%A7-%E5%8F%98%E5%8F%82%E6%A8%A1%E6%9D%BF%E3%80%81%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91%E5%92%8Cemplace.assets/image-20210927200858360.png" alt="image-20210927200858360"></p><p>变参模板——就是()中的参数。与该类有参构造函数参数相同。</p><p>完美转法——用上面这个参数私底下去调用该类的构造函数，构造一个对象放入到容器中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vectStu.emplace_back();<span class="comment">//相当于push_back</span></span><br><span class="line">vectStu.emplace();<span class="comment">//相当于insert</span></span><br></pre></td></tr></table></figure><p>如果发现还会出现多次调用情况，那是因为先放入了一个元素，然后由于空间不够，又重新开辟了一块新的空间，并且将原来的数据拷贝了过来。</p><p>这就是为什么vector容器在中间插入、删除元素挺费时的原因。</p><p><strong>补充:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不同容器相关用法有所不同</span><br><span class="line">    类似于 <span class="built_in">deque</span> <span class="built_in">list</span>中</span><br><span class="line">    还可以这样用</span><br><span class="line">    emplace_front();</span><br><span class="line">...</span><br><span class="line">    直接用emplace()——相当于insert</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-11新特性：变参模板、完美转发和emplace&quot;&gt;&lt;a href=&quot;#C-11新特性：变参模板、完美转发和emplace&quot; class=&quot;headerlink&quot; title=&quot;C++11新特性：变参模板、完美转发和emplace&quot;&gt;&lt;/a&gt;C++11新特性：变</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-C++11" scheme="http://doraemon2.xyz/tags/C-11/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++异常处理知识点总结</title>
    <link href="http://doraemon2.xyz/2021/09/26/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/26/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-26T13:10:08.000Z</published>
    <updated>2021-09-26T13:13:40.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-handling-mechanism"><a href="#Exception-handling-mechanism" class="headerlink" title="Exception handling mechanism"></a>Exception handling mechanism</h1><hr><p>就是它要这个类型数值，你给它一个不合格的，反馈给你看错误提示。</p><hr><p><strong>异常</strong>是一种程序控制机制，与函数机制互补。</p><p>函数是一种以栈结构展开的上下函数衔接的程序控制系统。</p><p>异常是另一种控制结构,它可以在出现“意外”时中断当前函数,并以某种机制（类型匹配）回馈给隔代的调用者相关的信息。</p><hr><p><strong>C++ Primer中关于异常的解释：(p172)</strong></p><hr><p><strong>异常是指存在于运行时的反常行为，这些行为超出了函数正常功能的范围。</strong></p><p>典型的异常包括失去数据库链接以及遇到意外输入等。</p><p>处理反常行为可能是纯设计所有系统中最难的一部分。</p><hr><h2 id="通过返回值实现异常处理机制"><a href="#通过返回值实现异常处理机制" class="headerlink" title="通过返回值实现异常处理机制"></a>通过返回值实现异常处理机制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现文件的二进制拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp1 = <span class="literal">NULL</span>, * fp2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rb 只读方式打开一个二进制文件，只允许读取数据</span></span><br><span class="line">fopen_s(&amp;fp1, src, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wb 以只写的方式打开或新建一个二进制文件，只允许写数据。</span></span><br><span class="line">fopen_s(&amp;fp2, dest, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> readlen, writelen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果读到数据，则大于0</span></span><br><span class="line"><span class="keyword">while</span> ((readlen = fread(buffer, <span class="number">1</span>, BUFSIZE, fp1)) &gt; <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">writelen = fwrite(buffer, <span class="number">1</span>, readlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (readlen != writelen) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = copyfile(<span class="string">&quot;dest.txt&quot;</span>, <span class="string">&quot;src.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (ret) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开源文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开目标文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;拷贝文件时失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出现未知的情况!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throw-amp-try-catch实现异常处理机制"><a href="#throw-amp-try-catch实现异常处理机制" class="headerlink" title="throw &amp; try-catch实现异常处理机制"></a>throw &amp; try-catch实现异常处理机制</h2><p>对上面的代码加以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo 15-15  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile2</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">char</span>* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp1 = <span class="literal">NULL</span>, * fp2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fopen_s(&amp;fp1, src, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fopen_s(&amp;fp2, dest, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buffer[BUFSIZE];</span><br><span class="line"><span class="keyword">int</span> readlen, writelen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((readlen = fread(buffer, <span class="number">1</span>, BUFSIZE, fp1)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">writelen = fwrite(buffer, <span class="number">1</span>, readlen, fp2);</span><br><span class="line"><span class="keyword">if</span> (readlen != writelen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> - <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyfile1</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">char</span>* src)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> copyfile2(dest, src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line">ret = copyfile1(<span class="string">&quot;dest.txt&quot;</span>, <span class="string">&quot;src.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">int</span> error) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出现异常啦！%d\n&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">string</span>* error) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;捕捉到字符串异常：%s\n&quot;</span>, error-&gt;c_str());</span><br><span class="line"><span class="keyword">delete</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解释</strong>：<br><strong>thorw——抛出异常</strong>：<br>程序的异常检测部分使用throw表达式引发一个异常。throw表达式包括关键字throw和紧随其后的一个表达式，这个表达式的类型就是抛出的异常类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> 表达式;</span><br></pre></td></tr></table></figure><p><strong>try——捕捉异常</strong>:</p><p>try语句块一开始是关键字try,随后紧跟一个快，这个块就像大多数一样式花括号括起来的语句序列。</p><p>跟在try块之后的是一个或多个catch子句。</p><p>catch字句包括三个部分：关键字catch、括号内一个(可能是未命名的)对象的声明(称作异常声明——就是上面抛出来的异常类型)以及一个块。</p><p>从哪调用忘拿抛，try。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    xxx</span><br><span class="line">    这里写可能抛出异常的程序段。-出现异常直接进入到<span class="keyword">catch</span></span><br><span class="line">    xxx,如果上面的这条语句执行了异常，那么这行就不会被执行。 </span><br><span class="line">&#125;<span class="keyword">catch</span>(异常处理类型 xxx(可写可不写))&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(...)&#123;&#125; <span class="comment">//接受所有异常</span></span><br></pre></td></tr></table></figure><p>如果抛出的异常类型没有对应捕捉的方式，则会直接中断程序(调用abort)。</p><p>得到的异常可以不处理继续抛出去。<strong>即</strong>：处理不了的异常，我们可以在catch的最后一个分支，使用throw语法，继续向调用者throw。</p><h2 id="异常接口声明"><a href="#异常接口声明" class="headerlink" title="异常接口声明"></a>异常接口声明</h2><p>可以在函数声明中列出可能抛出的所有异常类型，加强程序的课读性。声明了这几种，那就只能抛出这几种。如果抛出没有声明的异常类型，程序有可能直接终止。</p><p><strong>如下所示：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span> <span class="params">(xxx,xxx)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">float</span>, <span class="built_in">string</span> *, <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure><p>如果没有包含异常接口的声明，此函数可以抛出任何类型的异常。</p><p>如果一个函数不想抛出任何异常,用throw()来声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(xxx,xxx)</span> <span class="title">throw</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="异常类型和声明周期"><a href="#异常类型和声明周期" class="headerlink" title="异常类型和声明周期"></a>异常类型和声明周期</h2><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926171925746.png" alt="image-20210926171925746"></p><p>throw字符串类型char*,实际上抛出的是指针，而且前面修饰指针的const也要严格进行匹配。</p><p><strong>抛出类对象异常</strong>:<br>可以抛出一个匿名对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> classname();</span><br></pre></td></tr></table></figure><p>这里编译器指定给我们生成了一个匿名对象。</p><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926174726826.png" alt="image-20210926174726826"></p><p>所以我们可以直接抛出一个匿名的对象，并且用引用接收这个匿名对象。</p><p><img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210926175202336.png" alt="image-20210926175202336"></p><p><strong>抛出类异常类型最佳方式是抛出匿名对象，并用引用接收。</strong></p><p><strong>用指针接收记得释放掉。</strong></p><p><strong>注意：引用和普通的形参传值不能共存。</strong></p><h2 id="异常与继承"><a href="#异常与继承" class="headerlink" title="异常与继承"></a>异常与继承</h2><p>异常也是类，我们可以创建自己的异常类。</p><p><strong>案例解释：</strong></p><hr><p>案例：设计一个数组类容器 Vector，重载[]操作，数组初始化时，对数组的个数进行有效检查 </p><p>1） index&lt;0 抛出异常errNegativeException </p><p>2） index = 0 抛出异常 errZeroException</p><p>3）index&gt;1000抛出异常errTooBigException </p><p>4）index&lt;10 抛出异常errTooSmallException </p><p>5）errSizeException类是以上类的父类，实现有参数构造、并定义virtual void printError()输出错误。</p><hr><p><strong>代码实现</strong>：</p><p>Vector.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;err.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Vector(<span class="keyword">int</span> len = <span class="number">128</span>);</span><br><span class="line">Vector(<span class="keyword">const</span> Vector&amp; other);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)<span class="keyword">const</span>;</span><br><span class="line">Vector&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other);</span><br><span class="line">~Vector();</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Vector&amp; other);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>* m_base;</span><br><span class="line"><span class="keyword">int</span> m_len;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">Vector::Vector(<span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">errNegativeException <span class="title">err</span><span class="params">(len)</span></span>;</span><br><span class="line"><span class="keyword">throw</span> &amp;err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">errZeroException err(len);</span><br><span class="line"><span class="keyword">throw</span> &amp;err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &gt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">errTooBigException  err(len);</span><br><span class="line"><span class="keyword">throw</span>&amp; err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (len &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">errTooSmallException err(len);</span><br><span class="line"><span class="keyword">throw</span>  &amp;err;</span><br><span class="line">&#125;</span><br><span class="line">m_len = len;</span><br><span class="line">m_base = <span class="keyword">new</span> <span class="keyword">int</span>[m_len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector::Vector(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">m_len = other.m_len;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_base = <span class="keyword">new</span> <span class="keyword">int</span>[m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_len; i++)</span><br><span class="line">&#123;</span><br><span class="line">m_base[i] = other.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector::~Vector()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Vector::GetLength</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; Vector::<span class="keyword">operator</span>[](<span class="keyword">int</span> index)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_base[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; other.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; other.m_base[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">os &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vector&amp; Vector::<span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_base;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_len = other.m_len;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_base = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_base[i] = other.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Vector <span class="title">v</span><span class="params">(<span class="number">1111</span>)</span></span>;</span><br><span class="line"><span class="comment">//上面没有问题才会执行到下面的这个for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多态实现父类指针指向子类对象</span></span><br><span class="line"><span class="keyword">catch</span> (errSizeException* err)</span><br><span class="line">&#123;</span><br><span class="line">err-&gt;printError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*catch (errNegativeException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errNegativeException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errZeroException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errZeroException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errTooBigException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errTooBigException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">catch (errTooSmallException&amp; err)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;errTooSmallException&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>err.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">1) index&lt;0 抛出异常errNegativeException</span></span><br><span class="line"><span class="comment">2）index = 0 抛出异常 errZeroException</span></span><br><span class="line"><span class="comment">3）index&gt;1000抛出异常errTooBigException</span></span><br><span class="line"><span class="comment">4）index&lt;10 抛出异常errTooSmallException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">errSizeException类是以上类的父类，实现有参数构造、并定义virtual void printError()输出错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errSizeException</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errSizeException(<span class="keyword">int</span> size):m_size(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errNegativeException</span>:</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errNegativeException(<span class="keyword">int</span> size):errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errNegativeException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errZeroException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errZeroException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errZeroException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errTooBigException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errTooBigException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errTooBigException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errTooSmallException</span> :</span><span class="keyword">public</span> errSizeException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">errTooSmallException(<span class="keyword">int</span> size) :errSizeException(size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;errTooSmallException size:&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：重载下标引用操作符需要返回引用、这样才可修改内部数据。这样操作的才是那他的内部数据。</strong></p><hr><p><strong>补充:</strong><br>匿名对象不同于创建临时对象。</p><p><strong>typename()</strong>;——<strong>创建临时对象</strong>，它的生命到下一行就结束了。</p><hr><h2 id="异常处理的基本思想"><a href="#异常处理的基本思想" class="headerlink" title="异常处理的基本思想"></a>异常处理的基本思想</h2><p>C++的异常处理机制使得异常的<strong>引发</strong>和异常的<strong>处理</strong>不必在同一个函数中，这样底层的函数可以着重解决具体问题，而不必过多的考虑异常的处理。上层调用者可以再适当的位置设计<strong>对不同类型异常</strong>的处理。</p><p>异常是专门针对抽象编程中的一系列错误进行处理的，C++中不能借助函数机制实现异常，因为栈结构的本质是先进后出，依次访问，无法进行跳跃，但错误处理的特征却是遇到错误信息就想要转到若干级之上进行重新尝试。</p><p>(多级调用时可以直接<strong>越级提示</strong>)</p><h2 id="标准库异常"><a href="#标准库异常" class="headerlink" title="标准库异常"></a>标准库异常</h2><p> <img src="/images/C++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/%E6%A0%87%E5%87%86%E5%BA%93%E5%BC%82%E5%B8%B8.png"></p><p><strong>代码示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">int</span> age )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">249</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> out_of_range(<span class="string">&quot;年龄过大&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">m_age = age;</span><br><span class="line">m_space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"><span class="keyword">int</span>* m_space;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Student* s = <span class="keyword">new</span> Student(<span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (out_of_range &amp;e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (bad_alloc&amp; e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Exception-handling-mechanism&quot;&gt;&lt;a href=&quot;#Exception-handling-mechanism&quot; class=&quot;headerlink&quot; title=&quot;Exception handling mechanism&quot;&gt;&lt;/a&gt;Ex</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++模板知识点总结</title>
    <link href="http://doraemon2.xyz/2021/09/26/C++%E6%A8%A1%E6%9D%BF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/26/C++%E6%A8%A1%E6%9D%BF%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-26T04:07:04.000Z</published>
    <updated>2021-09-26T04:08:27.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="function-template"><a href="#function-template" class="headerlink" title="function template"></a>function template</h2><p>函数模板就是建立一个通用的函数，其函数类型和形参类型不具体指定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。</p><p>template&lt; typename T &gt;(class和typename都行)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数类型自动推导</span><br><span class="line">    Max(x,y);</span><br><span class="line">显示类型调用</span><br><span class="line">    Max&lt;<span class="keyword">int</span>&gt;(x,y);</span><br></pre></td></tr></table></figure><hr><p><strong>template function</strong></p><p>调用函数模板，编译器私底下会 根据传过来的变量创建对应的函数，将它具体化。——这就是通过编译生成的模板函数。</p><hr><p><strong>小结：</strong></p><ol><li>我们注意到，函数模板和函数重载似乎很类似，当他们两个并存时，如果参数类型和普通函数更匹配，就调用普通函数。</li><li>不存在普通函数，函数模板会隐式类型转换吗？<strong>不会。不提供隐式的类型转换，必须是严格的匹配。</strong></li><li>如果显式的调用函数模板，则使用&lt;&gt;类型列表。</li><li>如果函数模板会产生更好的匹配，使用函数模板。</li><li>当所传参数需要隐式类型转换时，优先调用普通函数。</li><li>函数模板也可以重载。</li><li>编译器并不是把函数模板处理成能够处理任意类型的函数。</li><li>编译器从函数模板通过具体的参数类型产生不用的函数。</li></ol><hr><h2 id="class-template"><a href="#class-template" class="headerlink" title="class template"></a>class template</h2><p><strong>类模板创建对象，必须显式指定类型。</strong></p><hr><p>类模板用于实现类所需数据的类型参数化。</p><p>类模板在表示支持多种数据结构显得特别重要，这些数据结构的表示和算法不受所包含的元素类型的影响。</p><hr><p><strong>类模板与继承</strong>：</p><p>1.父类是一般类，子类时模板类，和普通继承类似。</p><p>2.子类是一般类，父类是模板类， 继承时必须在子类中实例化父类参数。</p><p><strong>例如</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(T t = <span class="number">0</span>) :t(t)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">getT</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(<span class="keyword">int</span> b = <span class="number">0</span>) :A&lt;<span class="keyword">int</span>&gt;(b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.父类和子类都是模板时，子类的虚拟类型可以传递到父类中。</p><hr><p><strong>类模板的写法注意</strong>：</p><ol><li> 写在类外面时，要加参数列表， 并且要声明模板(class name&lt; 参数列表 &gt;)</li><li> 类模板定义和声明分开写，包含主函数的.cpp 要包含”该类声明的.cpp”</li></ol><hr><p><strong>书写实例</strong>：<br>(就是基本上只要在类外写定义的有类名的位置后面都要写上&lt; T &gt;，除了构造析构函数，其实写上也没事，只是警告让用新的书写形式。)</p><p>(不建议使用太多的友元函数)</p><p><strong>类模板和友元函数</strong>：</p><p>在类外实现成员函数要先声明一下模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(T a= <span class="number">0</span>);</span><br><span class="line"><span class="function">T&amp; <span class="title">getT</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">A <span class="keyword">operator</span>+(<span class="keyword">const</span> A&amp; other);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">~A();</span><br><span class="line"><span class="comment">//友元函数在类中声明也要加上模板的声明</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> A&lt;T&gt; <span class="title">addA</span><span class="params">(<span class="keyword">const</span> A&lt;T&gt;&amp; a, <span class="keyword">const</span> A&lt;T&gt;&amp; b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">A&lt;T&gt;::A(T a) : t(a)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">A&lt;T&gt;::~A()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">A&lt;T&gt; A&lt;T&gt;::<span class="keyword">operator</span>+(<span class="keyword">const</span> A&lt;T&gt;&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">A&lt;T&gt; tmp;</span><br><span class="line">tmp.t = <span class="keyword">this</span>-&gt;t + other.t;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> A&lt;T&gt;::print()<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; A&lt;T&gt;::getT()<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">A&lt;T&gt; <span class="title">addA</span><span class="params">(<span class="keyword">const</span> A&lt;T&gt;&amp; a, <span class="keyword">const</span> A&lt;T&gt;&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A&lt;T&gt; temp;</span><br><span class="line">temp.t = a.t + b.t;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">a.print();</span><br><span class="line"></span><br><span class="line"><span class="function">A&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">200</span>)</span></span>;</span><br><span class="line">A&lt;<span class="keyword">int</span>&gt;temp = addA&lt;<span class="keyword">int</span>&gt;(a,b);</span><br><span class="line">temp.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小结</strong>：</p><ol><li>类模板内部声明友元函数，也要声明一下模板先。</li><li>类模板成员函数内部从创建的对象别忘了加&lt; T &gt;。</li><li>友元函数调用，函数名后也要显示指定类型。</li></ol><hr><p><strong>类模板和static数据成员</strong></p><p>类外赋初值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> A&lt;T&gt;::count = <span class="number">666</span>;</span><br></pre></td></tr></table></figure><p><strong>虚拟类型T被实例化的类型不同，所调用的内容也不同。</strong></p><p>注意以下代码的静态变量变化即可了解。</p><p><strong>同意类模板的虚拟类型T被实例化的类型相同，静态变量是同一个。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A&lt;<span class="keyword">int</span>&gt;a(<span class="number">100</span>);</span><br><span class="line">A&lt;<span class="keyword">int</span>&gt;b(<span class="number">200</span>);</span><br><span class="line">a.count = <span class="number">888</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">A&lt;<span class="keyword">float</span>&gt;c(<span class="number">1.0</span>);</span><br><span class="line">A&lt;<span class="keyword">float</span>&gt;d(<span class="number">2.0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d.count &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>静态成员数据也可以使用虚拟类型参数。</strong></p><p><strong>效果同上。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> T count;</span><br></pre></td></tr></table></figure><hr><p><strong>小补充：</strong></p><p>类的成员函数不能调用我们下面成员函数重载的运算符。(貌似)</p><hr><p> 类模板重载左移 在声明中加一个&lt; T &gt;，让编译通过。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; &lt;T&gt;(ostream&amp; out, <span class="keyword">const</span> Vector&lt;T&gt;&amp; object);</span><br></pre></td></tr></table></figure><hr><p>(自定义)容器中放入类，该类需要有默认构造函数。</p><p><strong>自定义容器中存放自定义类对象，该容器重载了&lt;&lt;,想要按照下标cout&lt;&lt;,那么该类也要重载&lt;&lt;。</strong></p><hr><p><strong>练习：实现一个自定义Vector类</strong></p><p>Vector.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>  T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; &lt;T&gt;(ostream&amp; out, <span class="keyword">const</span> Vector&lt;T&gt;&amp; object);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Vector(<span class="keyword">int</span> size = <span class="number">128</span>); </span><br><span class="line">Vector(<span class="keyword">const</span> Vector&amp; object); </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>;</span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index);</span><br><span class="line">Vector&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; object);</span><br><span class="line">~Vector(); /</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* m_base;</span><br><span class="line"><span class="keyword">int</span> m_len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vector.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="keyword">const</span> Vector&lt;T&gt;&amp; object) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; object.m_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">out &lt;&lt; object.m_base[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::Vector(<span class="keyword">int</span> size)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">m_len = size;</span><br><span class="line">m_base = <span class="keyword">new</span> T[m_len];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::Vector(<span class="keyword">const</span> Vector&lt;T&gt;&amp; object) </span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line">m_len = object.m_len;</span><br><span class="line">m_base = <span class="keyword">new</span> T[m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_len; i++) </span><br><span class="line">     &#123;</span><br><span class="line">m_base[i] = object.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> Vector&lt;T&gt;::getLength() </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; Vector&lt;T&gt;::<span class="keyword">operator</span>[](<span class="keyword">int</span> index) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_base[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;&amp; Vector&lt;T&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&lt;T&gt;&amp; object)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_base != <span class="literal">NULL</span>) </span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_base = <span class="literal">NULL</span>;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_len = object.m_len;</span><br><span class="line">m_base = <span class="keyword">new</span> T[m_len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_len; i++) </span><br><span class="line">      &#123;</span><br><span class="line">m_base[i] = object.m_base[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Vector&lt;T&gt;::~Vector()</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (m_base != <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_base;</span><br><span class="line">m_base = <span class="literal">NULL</span>;</span><br><span class="line">m_len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Vector.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student() &#123;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">name = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="keyword">int</span> _age, <span class="built_in">string</span> _name):name(_name),age(_age)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Student() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Student&amp; stu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> Student&amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(<span class="number">18</span>, <span class="string">&quot;张四&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector&lt;Student&gt; <span class="title">myStudent</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">myStudent[<span class="number">0</span>] = s1;</span><br><span class="line">myStudent[<span class="number">1</span>] = s2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myStudent.getLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myStudent[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vector&lt;int&gt; myVector(10);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; myVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//myVector[i] = i;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; myVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; myVector[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vector&lt;int&gt;MyintVector(myVector);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; myVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; MyintVector[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vector&lt;float&gt;MyFloatVector(10);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; MyFloatVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//MyFloatVector[i] = i * 0.1f;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; MyFloatVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; MyFloatVector[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//myVector = MyintVector;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; myVector.getLength(); i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; MyintVector[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;——————————————&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; MyintVector;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Template&quot;&gt;&lt;a href=&quot;#Template&quot; class=&quot;headerlink&quot; title=&quot;Template&quot;&gt;&lt;/a&gt;Template&lt;/h1&gt;&lt;h2 id=&quot;function-template&quot;&gt;&lt;a href=&quot;#function-tem</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识复习</title>
    <link href="http://doraemon2.xyz/2021/09/24/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
    <id>http://doraemon2.xyz/2021/09/24/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-09-24T12:45:57.000Z</published>
    <updated>2021-09-27T01:58:10.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace_命名空间"></a>namespace_命名空间</h1><p><strong>C++避免名字冲突</strong>——使用命名空间。</p><p><strong>例如</strong>:<br>不同命名空间中的同一个变量，所对应的内容不同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> China &#123;</span><br><span class="line">    <span class="keyword">double</span>  population = <span class="number">14.1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> capital = <span class="string">&quot;北京&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> XiaoRiben &#123;</span><br><span class="line">    <span class="keyword">double</span> population = <span class="number">1.27</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> capital = <span class="string">&quot;东京&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; China::capital &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; XiaoRiben::capital &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cout是标准命名空间std已经定义好的</strong>。</p><p><strong>或者用using namespace xxx;使用对应的命名空间</strong>。</p><p><strong>就算using namespace xxx了一个命名空间，我们仍然可以通过xxx::来使用其它的命名空间。</strong></p><p><strong>或者只指定使用某个命名空间中的一个变量，using namespace China::capital;</strong></p><p>之后出现的capital都是China这个命名空间对应的数据。</p><h1 id="software-生成过程"><a href="#software-生成过程" class="headerlink" title="software_生成过程"></a>software_生成过程</h1><p>源程序.cpp——》预处理——》源程序a.cpp——》编译——》汇编程序a.s——》汇编——》二进制程序a.o——》链接+C++库文件——》可执行文件.exe</p><p><strong>VS智能补全ctrl+j</strong></p><h1 id="data-type-数据类型"><a href="#data-type-数据类型" class="headerlink" title="data type_数据类型"></a>data type_数据类型</h1><p><strong>不同的数据类型</strong></p><ol><li>表示的意义不同</li><li>占用内存不同</li><li>表示的范围不同</li><li>使用方法不同</li></ol><h1 id="variable-变量"><a href="#variable-变量" class="headerlink" title="variable_变量"></a>variable_变量</h1><p>无符号整型,对应的范围是其有符号的两倍,0~有符号对应的两倍.</p><p>unsigned int 可以简写成unsigned</p><p><strong>无符号数不能表示负数。</strong></p><p>如果强行用无符号数表示负数，实际存储的是这个负数对应的补码。</p><p>即该负数 + “对应类型的<strong>模值</strong>(最大值)</p><p><img src="/images/01.assets/image-20210910165006949.png" alt="image-20210910165006949"></p><hr><p>16位系统中一个int能存储的数据的范围为-32768<del>32767，而unsigned  int能存储的数据范围则是0</del>65535，在计算机中，整数是以补码形式存放的。  无符号整型和有符号整型运算依据表示数据的最大值来定，二者数据运算先将有符号整型转换成无符号整型再通过无符号数运算规则来计算。</p><p><a href="https://cn.bing.com/search?pc=U528&q=UNSINGNED+int%E8%8C%83%E5%9B%B4&form=U528DF">链接</a></p><hr><p> <strong>注意</strong>:1 和 ‘1’的区别,’1’对应的ASCII码值是49</p><hr><p>float在内存中的存储方式**-符号位-阶码-尾数**</p><p><img src="/images/01.assets//image-20210910120315511.png" alt="image-20210910120315511"></p><p><strong>阶码</strong>——指数+127</p><p><strong>符号位</strong>——尾数 * 2^(阶码-127)</p><p><img src="/images/01.assets/image-20210910120414883.png" alt="image-20210910120414883"></p><p>double在内存中的存储方式与float类似</p><p>带小数的默认常量都是double类型。</p><p>3.14f——强制指定是float类型</p><p><strong>可以用科学计数法来表示浮点型的常量</strong>：</p><p>1.75E5 or  1.75 e5</p><p>就是1.75成10的5次方。</p><h1 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h1><p>默认输出6位。</p><p>修改精度——cout.precision(精度-小数点前后都算上);</p><p>修改小数点后位数——cout.flags(cout.fixed);定点法</p><p>取消顶点法——cout.unsetf(cout.fixed)</p><hr><p>C语言清空输入缓冲区——fflush(stdin);</p><hr><h1 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h1><p>当输入缓冲区为空时，程序才会暂停，让用户输入数据。</p><p>输入回车之后，数据全部送到输入缓冲区。</p><p>输入数据时，前面的数据输入错误，导致后面的数据都不能输入。</p><p>ctrl+z——文件结束符</p><hr><p>输入判断：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">cin</span>.fail())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;提示&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>.clear();<span class="comment">//清除cin的错误标志</span></span><br><span class="line">    <span class="built_in">cin</span>.sync();<span class="comment">//清空输入缓冲区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="getch"><a href="#getch" class="headerlink" title="getch()"></a>getch()</h1><p>cmd窗口没有回显。</p><h1 id="constant-常量"><a href="#constant-常量" class="headerlink" title="constant_常量"></a>constant_常量</h1><p><strong>几进制每一位就有几种可能</strong></p><p><img src="/images/01.assets/image-20210910123101789.png" alt="image-20210910123101789"></p><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p><img src="/images/01.assets/image-20210910165957817.png" alt="image-20210910165957817"></p><p>遇到空格 回车 文件结束符结束。</p><p>字符串的比较 ——本质是字符串中字符的比较</p><p>例如:</p><p>“19” &gt; “123”</p><p>“1230” &gt; “123”</p><p>下标方式也可以访问string字符串中的字符。</p><p><strong>注意</strong>：C风格的不同字符串赋值方式，是否需要显示 指定/0不同。 </p><hr><p><strong>拓展</strong></p><p><img src="/images/01.assets/image-20210910173841795.png" alt="image-20210910173841795"></p><hr><h1 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>,addr);</span><br><span class="line"><span class="comment">//从标准输入设备cin,读取一行字符串，保存到字符串变量addr中，</span></span><br><span class="line"><span class="comment">//直到遇到回车符，不包括回车符。</span></span><br></pre></td></tr></table></figure><h1 id="array"><a href="#array" class="headerlink" title="array"></a>array</h1><p>数组中的各个成员时连续存储在内存中的。8个依次相连的邻居。</p><p>没指定数值，就是0。</p><p>(我发现数组并不能重新对数组整体以{}的形式重新赋值。)</p><p><strong>特殊写法</strong>——定义时仅指定部分成员。(乱序方式)。<strong>C编译器支持</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; [<span class="number">4</span>] = <span class="number">2</span>,[<span class="number">5</span>] = <span class="number">3</span> ,[<span class="number">3</span>] = <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="Bit-operation-位运算"><a href="#Bit-operation-位运算" class="headerlink" title="Bit operation_位运算"></a>Bit operation_位运算</h1><p>  内存的基本单位是字节，一个字节8个比特位。</p><p>位与&amp; 位或| 位非~ </p><p>左移&lt;&lt; 右移&gt;&gt;</p><p><strong>向左移动n个位置，就等同于乘以2的n次方</strong></p><p>右移相反。</p><hr><p><strong>1和0与1进行按位与结果都是1</strong></p><p><strong>1和0与0进行按位与结果都是0</strong></p><p><strong>如何将一个数的最后四位变成0110？</strong></p><p>要先将一个数的最后四位变成0，就将这个数与~15进行按位与运算</p><p>，然后再与6进行按位或运算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">a = a &amp; (~<span class="number">15</span>);</span><br><span class="line">a = a | <span class="number">6</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br></pre></td></tr></table></figure><h1 id="priority-优先级"><a href="#priority-优先级" class="headerlink" title="priority_优先级"></a>priority_优先级</h1><p><strong>comma expression_逗号表达式</strong></p><p><strong>逗号表达式的优先级最低</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =  <span class="number">4</span> * <span class="number">5</span>, <span class="number">3</span> + <span class="number">5</span>,<span class="number">10</span>/<span class="number">2</span>;<span class="comment">//20</span></span><br><span class="line">a = (<span class="number">4</span> * <span class="number">5</span>, <span class="number">3</span> + <span class="number">5</span>,<span class="number">10</span>/<span class="number">2</span>);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><hr><p><img src="/images/01.assets/image-20210910203614907.png" alt="image-20210910203614907"></p><h1 id="Cast-type-强制类型转换"><a href="#Cast-type-强制类型转换" class="headerlink" title="Cast type _强制类型转换"></a>Cast type _强制类型转换</h1><p>超出的ASCII码——<a href="https://zhidao.baidu.com/question/539081989.html">链接</a></p><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p><img src="/images/01.assets/image-20210910204934215.png" alt="image-20210910204934215"></p><h1 id="loop-循环"><a href="#loop-循环" class="headerlink" title="loop_循环"></a>loop_循环</h1><p>循环次数已经确定的情况，用for循环更方便。</p><p><strong>do while</strong>——先执行一次，然后根据条件判断，是否进行下一轮循环。</p><hr><p>简单思路提供——将一个问题拆分成多个小问题</p><p><img src="/images/01.assets/image-20210911094653167.png" alt="image-20210911094653167"></p><hr><p><img src="/images/01.assets/image-20210911104651137.png" alt="image-20210911104651137"></p><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">防卫式声明，防止头文件重复包含</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> xxx</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xxx</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vs独有</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once </span></span><br></pre></td></tr></table></figure><h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><p><strong>默认参数</strong></p><p>C语言不支持默认参数</p><p> 默认参数要写到其他参数后面。**</p><p><strong>函数重载</strong></p><p>C++可以实现使用同名函数【函数重载】来实现功能类似的多个不同函数。</p><p>区分不同函数</p><p>1.参数个数不用，2.参数类型不同</p><p>(与返回值类型无关)</p><h1 id="function-stack-space-函数栈空间"><a href="#function-stack-space-函数栈空间" class="headerlink" title="function stack  space_函数栈空间"></a>function stack  space_函数栈空间</h1><p><img src="/images/01.assets/image-20210911152434069.png" alt="image-20210911152434069"></p><p>每个函数都会在栈空间中分配到一块内存来给它使用。</p><p>这块内存区域就叫做栈帧。</p><p>当定义的数组过大，超过了栈空间的大小时， 访问它最后的位置，程序就会崩掉。</p><h1 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h1><p><img src="/images/01.assets/image-20210911154900641.png" alt="image-20210911154900641"></p><p><strong>缺点</strong>：使用内联函数的程序，会变得”臃肿”，消耗调用函数的栈空间。</p><p><strong>使用场合</strong>：内联函数的使用场合应该是十分简单，执行很快的几条语句。</p><p>这个函数的使用频率非常高，比如在一个循环中被使用千万次的使用。</p><h1 id="recursion-递归"><a href="#recursion-递归" class="headerlink" title="recursion_递归"></a>recursion_递归</h1><p><strong>在函数内部 ，直接或间接调用自己</strong>。</p><p><strong>一定要定义一个结束条件</strong>。</p><p>逐个返回到函数的调用处。</p><h1 id="Static-library-静态库"><a href="#Static-library-静态库" class="headerlink" title="Static library_静态库"></a>Static library_静态库</h1><p>windows桌面项目——》lib——》生成解决方案</p><h1 id="array-数组"><a href="#array-数组" class="headerlink" title="array_数组"></a>array_数组</h1><p><strong>为了提高可读性</strong>，尽量不要让编译器自动推导。</p><p>越简单的越好——软件工程</p><h1 id="defence-code-防御式编程"><a href="#defence-code-防御式编程" class="headerlink" title="defence code_防御式编程"></a>defence code_防御式编程</h1><p> 保证我们能对出现的错误进行处理</p><ol><li>对输入进行体检</li><li>对非预期错误使用断言]</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arssert.h&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="pointer"><a href="#pointer" class="headerlink" title="pointer"></a>pointer</h1><p>建议初始化指针为NULL，避免访问非法数据。</p><p>不同类型的指针，所对应的步长不同。</p><p><strong>区分</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* xxx;——不能更改对应地址的值(指向常量的指针)</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>* xxx;——不能更改对应地址的值,同上</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> xxx;——不能更改指向的地址(常量指针)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> xxx;——都不能修改</span><br></pre></td></tr></table></figure><p>const在谁后面就不能修改谁。</p><p><strong>二级指针——什么时候要传</strong></p><p>理解：指针的地址要用二级指针来存。</p><p>直接使用二级指针名字，得到的是它里面存的一级指针的地址。</p><p>就像直接使用一级指针名字，得到的是它里面存的变量的地址一样。</p><p>指针要一级一级指向。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">temp</span><span class="params">(<span class="keyword">int</span>** p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> boy = <span class="number">25</span>;</span><br><span class="line">*p1 = &amp;boy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* pTemp = <span class="literal">NULL</span>;</span><br><span class="line">temp(&amp;pTemp);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *pTemp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指向多维数组的指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">数组</span><br><span class="line">    <span class="keyword">int</span> arrt[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">3</span>] = <span class="literal">NULL</span>;</span><br><span class="line">p = a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (*(p+i))[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指向数组的指针就是二级指针。</p><p>**传递二级指针 **</p><p>因为传递的是指针数组的名字，传递过来的就是这个指针数组的首元素的地址，它的首元素有同样是个指针， 所以用 二级指针接收。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> **p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> *p[<span class="number">3</span>] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">test(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[<span class="number">2</span>];是指针数组，里面存的是地址(指针)</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">2</span>];是数组指针，指向一个有<span class="number">2</span>个变量的指针。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/tianya_lu/article/details/103695496">链接</a></p><p><strong>对比记忆</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> **p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//数组指针——指向数组——存放的是一个数组的地址</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">3</span>] = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p[<span class="number">0</span>]+<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//2</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p[<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针数组——存放指针</span></span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">3</span>] = &#123; <span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>* p2[<span class="number">2</span>];</span><br><span class="line">p2[<span class="number">0</span>] = a2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p2[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//传递二级指针的是指针数组——存放指针才是指针的指针</span></span><br><span class="line">test(p2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>void指针不允许进行加减运算</p><p><strong>其它类型的指针都可以隐式自动转换成void类型指针，反之则需要强制转换。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">void</span>* p = arr;</span><br><span class="line"><span class="keyword">char</span>  a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="keyword">char</span>* p1 = (<span class="keyword">char</span> *)p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<strong>释放时指针的位置要和原来创建时候指向的位置相同。</strong>)</p><h1 id="function-pointer"><a href="#function-pointer" class="headerlink" title="function_pointer"></a>function_pointer</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;wuhu&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*fc)();<span class="comment">//与上面函数声明的返回值个参数类型一致</span></span><br><span class="line">fc = &amp;test;</span><br><span class="line"><span class="comment">//两种调用方式 </span></span><br><span class="line">(*fc)();</span><br><span class="line">fc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference-引用"><a href="#reference-引用" class="headerlink" title="reference_引用"></a>reference_引用</h1><p>已有变量名的别名，操作的是这个名字所对应内存的数据。</p><p>1.<strong>本质——C++编译器到底在背后做了什么？</strong></p><p>int &amp;b = a ;——》 int* const b = &a;</p><p>2.<strong>引用有没有自己的空间</strong>？</p><p>引用是有自己的空间的。</p><p>3.<strong>同一内存空间可以取多个别名</strong></p><p>（当我们使用一些引用语法的时候，无需关心编译器背后是如何作用的，但当我们分析奇怪语法现象的时候，我们才会关系C++编译器是怎么去做的）</p><h1 id="pointer-reference"><a href="#pointer-reference" class="headerlink" title="pointer reference"></a>pointer reference</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* p = &amp;a;</span><br><span class="line"><span class="keyword">int</span>*&amp; q = p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *q;</span><br></pre></td></tr></table></figure><p>可以代替二级指针。</p><h1 id="constant-reference"><a href="#constant-reference" class="headerlink" title="constant reference"></a>constant reference</h1><p>const Type&amp; name;</p><p>只能通过这个别名读这个变量的值，不能去修改它。</p><p><strong>用字面常量初始化常量引用</strong>——<strong>没有意义</strong></p><p>const int&amp; b = 10;</p><p>int c = b;</p><h1 id="file-operator"><a href="#file-operator" class="headerlink" title="file_operator"></a>file_operator</h1><p>file&gt;&gt;形式读取文件，会自动换行。</p><h1 id="memory-branch"><a href="#memory-branch" class="headerlink" title="memory branch"></a>memory branch</h1><p><strong>stack</strong>:由编译器自动分配释放，存放函数的参数值，局部变量等。</p><p><strong>heap</strong>:由coder分配释放。</p><p><strong>static</strong>:全局变量和静态变量是存放在一起的，在程序编译时分配。当一个变量前加上static后，加定它在一个函数中，那么在这个函数 执行完毕之后 ，它的变量并不会变回初始化的那个值，而是变成了当前函数执行完毕后，该变量变成的值，并且该变量在函数外部无法访问。如果定义为了全局静态变量，则在程序范围内都可以访问到。(只局限于这个源文件)</p><p><strong>文字常量区</strong>：存放常量字符串。</p><p><strong>程序代码区</strong>：存放函数体(包括类的成员函数、全局函数)的二进制代码。</p><h1 id="dynamic-momory"><a href="#dynamic-momory" class="headerlink" title="dynamic momory"></a>dynamic momory</h1><p><strong>内存拷贝函数</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memcpy</span><span class="params">(<span class="keyword">void</span>* dest,<span class="keyword">const</span> <span class="keyword">void</span>* src,<span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>从原来的scr所指向的内存的起始位置，拷贝n个字节到目标dest所指的内存起始位置中。</p><p> <strong>注意</strong>：目的地要new出来大小。</p><hr><p><strong>提示</strong>：</p><ol><li>可以输入多少就new多少空间</li><li>malloc开辟内存得到的指针是void*的</li><li>64位win10 heap限制是2G，根本就不用担心，因为我们使用不到这么多内存。</li><li>C++保留mallo和free为了向下兼容</li><li>基础类型malloc,new,delete,free不可以混搭</li></ol><hr><p>开辟空间并初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* sb = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *sb;</span><br></pre></td></tr></table></figure><h1 id="Variable-storage-mode"><a href="#Variable-storage-mode" class="headerlink" title="Variable storage mode"></a>Variable storage mode</h1><p><strong>寄存器变量——</strong></p><p><strong>register</strong>:C++中的register已经优化，如果打印register变量的地址，编译器会自动降级。</p><p>不能定义成全局变量。</p><p><strong>auto——</strong></p><p>注意看 C++的特性</p><p><strong>static——</strong></p><p>静态，静态变量只能被初始化一次。</p><p><strong>exterb——</strong></p><p>比static更全局，A.cpp中的可以在B.cpp中使用。</p><p> <strong>实际使用中，定义到.cpp文件中，否则定义到.h文件中，可能会有多个全局变量了。</strong></p><h1 id="define"><a href="#define" class="headerlink" title="define"></a>define</h1><ul><li>提高代码可读性</li><li>提高程序效率</li></ul><h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><p>结构体变量作为参数，传值是值传递。</p><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><p>同一类型变量的几种可能。(int)</p><p>将很多define集成到一起。</p><p>从0开始，逐渐递增，第二个元素在前面的基础上+1；</p><p>调用自动++，切换下一个元素。</p><h1 id="OPP-amp-OOP"><a href="#OPP-amp-OOP" class="headerlink" title="OPP&amp;OOP"></a>OPP&amp;OOP</h1><p><strong>面向过程编程OPP：Procedure Oriented Programming，是一种以事物为中心的编程思想。主要关注“怎么做”，即完成任务的具体细节。</strong></p><p><strong>面向对象编程OOP：Object Oriented Programming，是一种以对象为基础的编程思想。主要关注“谁来做”，即完成任务的对象。</strong></p><p><strong>面向过程</strong>：<br>根据程序的执行过程来设计软件的所有细节。</p><p>缺点：<br>开发大型项目时，越来越难把控，甚至失去控制。</p><p><strong>面向对象</strong>：</p><p>大型项目必备。</p><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><p><strong>什么是对象？</strong><br>特定类的具体实例。</p><p><strong>对象和普通的变量有什么区别？</strong></p><p>一个对象就是一个特殊变量，但是有丰富的功能和用法。</p><h1 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h1><p>构造函数也可以重载。</p><p> <strong>种类</strong>：</p><ol><li><p>默认构造函数</p><p>一般当数据成员全部使用了“类内初始值”，才使用”合成的默认构造函数”。</p></li><li><p>自定义的构造函数</p></li><li><p>拷贝构造函数</p><p>深浅拷贝。 </p><p>调用时机——函数传参，不是引用方式。函数返回类型是类，而且不是引用类型。对象数组的初始化列表中，使用对象。</p></li><li><p>赋值构造函数</p></li></ol><hr><p><strong>指针</strong>——一定要记住开辟空间</p><p><strong>new了一定要delete，尽量开辟大一点的空间。</strong></p><p><strong>返回值要注意连用情况。</strong></p><p><strong>简单的实例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Human()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">&quot;未知的&quot;</span>;</span><br><span class="line">addr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(addr, <span class="string">&quot;未知的&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Human(<span class="keyword">const</span> <span class="built_in">string</span> namedtor,<span class="keyword">const</span> <span class="keyword">char</span>*addrdtor)</span><br><span class="line">&#123;</span><br><span class="line">name = namedtor;</span><br><span class="line">addr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(addr, addrdtor);</span><br><span class="line">&#125;</span><br><span class="line">~Human()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetAddr</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeAddr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* tempChange)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(addr, tempChange);</span><br><span class="line">&#125;</span><br><span class="line">Human&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Human&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (&amp;other == <span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">name = other.name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(addr, other.addr);</span><br><span class="line">&#125;</span><br><span class="line">Human(<span class="keyword">const</span> Human&amp; other)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = other.name;</span><br><span class="line">addr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;addr, other.addr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">char</span>* addr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Human <span class="title">h1</span><span class="params">(<span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;China&quot;</span>)</span></span>;</span><br><span class="line">h1.GetAddr();</span><br><span class="line">h1.ChangeAddr(<span class="string">&quot;japan&quot;</span>);</span><br><span class="line">h1.GetAddr();</span><br><span class="line"><span class="function">Human <span class="title">h2</span><span class="params">(h1)</span></span>;</span><br><span class="line">h2.GetAddr();</span><br><span class="line">Human h3;</span><br><span class="line">h3 = h1;</span><br><span class="line">h3.GetAddr();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="static-class-members"><a href="#static-class-members" class="headerlink" title="static class members"></a>static class members</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count ;</span><br><span class="line">.....</span><br><span class="line">   对类的静态成员进行初始化</span><br><span class="line"><span class="keyword">int</span> Human::count =<span class="number">0</span>;</span><br><span class="line">加了<span class="keyword">const</span>可以直接在类内初始化</span><br><span class="line">    所有的成员函数都可以访问静态数据成员。</span><br><span class="line">    不能通过类名访问静态数据成员</span><br></pre></td></tr></table></figure><h1 id="static-class-function-members"><a href="#static-class-function-members" class="headerlink" title="static class function members"></a>static class function members</h1><p>类的静态成员函数。</p><p>例如上面静态成员计算一个数量。</p><p>直接用类调用他的函数即可。</p><p>对象可以直接访问静态成员函数。</p><p>在类的静态成员函数内部不能直接访问this指针和对象的数据成员。</p><p>只能访问类的静态数据成员。</p><h1 id="const-class-member"><a href="#const-class-member" class="headerlink" title="const class member"></a>const class member</h1><p>C++11可以在类内给const修饰的变量赋值。</p><p><strong>或者</strong></p><p>在类构造函数的初始化列表赋值。</p><p>在构造函数中初始化。</p><h1 id="const-class-function-member"><a href="#const-class-function-member" class="headerlink" title="const class function member"></a>const class function member</h1><p>const修饰的成员函数不能修改任何数据成员。</p><p>const修饰的对象只能调用const的成员函数。</p><hr><p><strong>一个小问题</strong>——<br>const修饰的对象，能否修改其类内数据？<br>答案是不能，const修饰的对象只能调用const的成员函数，修改对象数据的内类函数，肯定不能加const修饰，所以它不能修改其类数据。</p><p><strong>不改变对象数据的成员函数，+const来修饰</strong>。</p><hr><h1 id="combination-组合"><a href="#combination-组合" class="headerlink" title="combination_组合"></a>combination_组合</h1><h1 id="polymerization-聚合"><a href="#polymerization-聚合" class="headerlink" title="polymerization_聚合"></a>polymerization_聚合</h1><p><strong>最好头文件不包含头文件</strong></p><p>聚合不是组成关系，被包含的对象，也可能被其他对象包含。</p><p> 拥有者，不需要对被拥有的对象的声明周期负责。</p><p><strong>代码示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Cpu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;VoiceBox.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ceshi</span><span class="params">(VoiceBox* box)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Computer <span class="title">MyComputer</span><span class="params">(<span class="string">&quot;intel&quot;</span>, <span class="string">&quot;i9&quot;</span>, <span class="number">512</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line">MyComputer.addVoiceBox(box);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">VoiceBox box;</span><br><span class="line">ceshi(&amp;box);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加了这一行pause说明程序还没执行完，电脑被销毁了，但是它的音响还在，我拔下来就能插到其他地方去。</span></span><br><span class="line"><span class="comment">//之前显示音响被销毁，是因为程序执行完了。</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="summary-1"><a href="#summary-1" class="headerlink" title="summary_1"></a>summary_1</h1><p><strong>常量最好定义成宏</strong></p><p><strong>构造函数初始化列表，写在定义中</strong></p><p><strong>再次强调，const对象只能调用const方法</strong></p><p><strong>vector——push_back,将值拷贝过去，实际上是两个东西，拷贝了 一份。</strong></p><p><strong>const修饰的对象传引用时，起的别名也要是const修饰的</strong></p><p><strong>非const修饰的对象，可以传递到const修饰的引用参数</strong></p><p><strong>静态方法里面只能调用静态方法以及该类的静态成员</strong></p><p><strong>非static方法叫做——实例方法</strong></p><p><strong>从现实生活中把握C++——模拟现实</strong></p><h1 id="Inheritance-and-Derive-继承与派生"><a href="#Inheritance-and-Derive-继承与派生" class="headerlink" title="Inheritance and Derive_继承与派生"></a>Inheritance and Derive_继承与派生</h1><p>父亲——<strong>派生</strong>——儿子</p><p>儿子——<strong>继承</strong>——父亲</p><p><strong>继承和派生本质上是相同的，只是从不同的角度出发。</strong></p><p><strong>父类的所有成员函数以及数据成员都会被子类继承</strong></p><p> <strong>先调用父类的构造函数，再调用子类的构造函数。</strong></p><hr><p><strong>先调用父类的构造函数用来初始化从父类继承来的数据。</strong></p><p>再调用自己的构造函数，用来初始化自己定义的数据。</p><p>没有体现父类的构造函数 ，就会自动调用父类的默认构造函数。</p><hr><p><strong>子类想要访问父类的数据：</strong></p><ol><li>将父类成员数据改成——protected属性</li><li>通过继承父类中的成员函数来的获得。</li></ol><hr><p><strong>子类中有父类中相同的成员函数，优先调用子类自己的，找不到再去父类里面找，还找不到，那就失败。</strong></p><hr><p><strong>成员函数，不占用对象的内存空间，但是也被子类继承了。</strong></p><p> <strong>先分布从父类继承的数据成员，再分布子类自己定义的数据成员。</strong></p><h1 id="Access-rights-访问权限"><a href="#Access-rights-访问权限" class="headerlink" title="Access rights_访问权限"></a>Access rights_访问权限</h1><p><strong>public:</strong><br>外部可以直接访问，可以通过对象来访问这个成员。</p><p><strong>private:</strong><br>外部不可以访问，类内访问。</p><p><strong>protected:</strong></p><p>和private十分相似，唯一区别，如下所示：</p><p>如果在设计类的时候，父类的成员，希望它的成员希望，可以被自己的子类派生类直接访问，但是又不想被外部直接访问，那就可以把这些成员定义为protected。</p><h1 id="Inheritance-ways-继承方式"><a href="#Inheritance-ways-继承方式" class="headerlink" title="Inheritance ways_继承方式"></a>Inheritance ways_继承方式</h1><p><strong>public:</strong><br>完全继承父类，父类的成员，之前是什么属性的，继承过来还是什么属性的。访问权限。</p><p><strong>private:</strong></p><p>继承过来，访问权限都变成private。</p><p><strong>protected:</strong><br>public变protected,其他不变。</p><hr><p><strong>继承方式的不同，影响外部通过子类访问父类成员。</strong></p><hr><p><strong>调用父类的构造函数：</strong></p><ol><li>在子类的构造函数中 ，显式调用父类的构造函数。(例如:初始值列表)</li><li>没有显示调用父类构造函数，那么会自动调用父类的默认构造函数。</li></ol><hr><p><strong>调用顺序</strong>：</p><p>静态类数据成员的构造函数——》父类的构造函数——》非静态数据成员的构造函数——》自己的构造函数。</p><p>(类的静态成员)静态对象只创建一次。(构造函数、析构函数只执行一次。)</p><hr><p>当子类以public方式继承父类时，子类的对象可以代替父类对象处理。</p><p>即：形参为基类对象时，实参可以是派生类对象。</p><p>反过来父类不能代替子类。</p><hr><p><strong>子类型关系具有单项传递性</strong>：</p><p>C类是B类的子类型， B类是A类的子类型，所以C类是A类的子类型。</p><hr><p><strong>子类型的应用：</strong></p><ol><li>父类指针可以指向子类对象（配合多态实现子类的方法）</li><li>子类对象可以初始化基类引用(效果同上)</li><li>父类的对象可以被赋值为子类对象</li></ol><h1 id="multiple-inheritance-多重继承"><a href="#multiple-inheritance-多重继承" class="headerlink" title="multiple inheritance_多重继承"></a>multiple inheritance_多重继承</h1><p>多继承/多重继承：<br>一个派生类可以有两个或多个积累。</p><p>多重继承在中小型项目中较少使用。</p><h1 id="multiple-inheritance-Ambiguity-多重继承二义性"><a href="#multiple-inheritance-Ambiguity-多重继承二义性" class="headerlink" title="multiple inheritance Ambiguity_多重继承二义性"></a>multiple inheritance Ambiguity_多重继承二义性</h1><hr><p>多个父类中有相同成员函数，子类调用时加上类名来区分。指定基类来使用。</p><p>子类.父类::方法();</p><p>或者子类重新定义这个方法，在里面使用基类名进行限定来调用对应的基类的方法。</p><hr><p>一个类有两个子类， 这两个子类又是一个子类的父类。</p><p>容易产生二义性。共同的基类被继承，有两份数据，产生访问歧义。</p><p>解决方案——<strong>使用虚继承</strong></p><hr><p><strong>virtual public</strong></p><p>相同的数据只取一份</p><hr><h1 id="file-operate"><a href="#file-operate" class="headerlink" title="file operate"></a>file operate</h1><p><strong>iostream</strong>-input-output</p><p>C++的IO流：向设备写数据/从设备读数据</p><p><strong>设备</strong>：文件、控制台、特定的数据类型(stringstream)。</p><p> <img src="/images/01.assets/image-20210919181606706.png" alt="image-20210919181606706"></p><p><strong>open ways</strong></p><table><thead><tr><th>模式标志</th><th>描述</th></tr></thead><tbody><tr><td>ios::in</td><td>读方式打开文件</td></tr><tr><td>ios::out</td><td>写方式打开文件</td></tr><tr><td>ios::trunc</td><td>如果此文件已经存在，就会在打开文件之前把文件长度截断为0</td></tr><tr><td>ios::app</td><td>尾部最佳方式(在尾部写入)</td></tr><tr><td>ios::ate</td><td>文件打开后，定位到文件尾</td></tr><tr><td>ios::binary</td><td>二进制方式(是文本方式)</td></tr></tbody></table><p>以上打开方式可以用 | 组合起来使用。</p><hr><p><strong>文本文件和二进制文件</strong></p><p><strong>区别</strong>：</p><p>文本文件——写数字1，实际写入的是’1’</p><p>二进制文件——写数字1，实际写入的是整数1(0001)</p><p>​                        写字符’R’，实际输入的还是’R’</p><p><strong>二进制读写</strong>——<a href="http://c.biancheng.net/view/7603.html">C++ read()和write()读写二进制文件（超级详细）</a></p><p><strong>按指定格式读写数据</strong></p><p><strong>按指定格式写文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(<span class="string">&quot;user.txt&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cin</span>.eof())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">stringstream</span> s;</span><br><span class="line">s &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; s.str();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span><span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定格式读文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(<span class="string">&quot;user.txt&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">getline(ifs, line);</span><br><span class="line"><span class="keyword">if</span> (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sscanf_s(line.c_str(), <span class="string">&quot;姓名:%s 年龄:%d &quot;</span>, name, <span class="keyword">sizeof</span>(name), &amp;age);</span><br><span class="line">cout &lt;&lt; name &lt;&lt; &#x27;\t\t\t&#x27; &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>seekg</strong>——设置输入流的位置</p><p><strong>tellg</strong>——返回该输入流的当前位置(距离文件起始位置的偏移量)</p><p><strong>seekp</strong>——设置该输出流的位置</p><hr><p>提高代码的健壮性和可读性,宏定义可以解决很多麻烦，名称写死，在大型项目中可能是致命的。</p><p><img src="/images/%E5%A5%87%E7%89%9B%E5%AD%A6%E9%99%A2C++/01.assets/image-20210920104049004.png" alt="image-20210920104049004"></p><hr><p> cin.ignore(count, c);</p><p>从输入流中提取并丢弃字符，直到遇到下列三种情况</p><p>1.提取的字符达到了参数count指定的数量</p><p>2.在输入序列中遇到文件结束（EOF）</p><p>3.输入序列中的下一个字符为参数c指定的字符（这个字符会被提取并丢弃）</p><p>count常常取：</p><p>std::numeric_limits&lt; std::streamsize &gt;::max()  相当于IO流的最大字符个数</p><p>常见用法：（把标准输入缓冲区cin的所有数据都清空）</p><p>cin.ignore(std::numeric_limits<streamsize>::max(), ‘\n’);</p><hr><p><strong>从文中读取数据进行大小的比较，可以先读取一个数字，然后把各项数值都设为它，然后一个一个的往下读。</strong></p><hr><h1 id="friend-function"><a href="#friend-function" class="headerlink" title="friend function"></a>friend function</h1><p><strong>某个类需要实现某种功能，但是这个类自身因为某种原因，无法自己实现，需要借助“外力”才能实现。</strong></p><hr><p>全局函数做友元函数</p><p>一个类的成员函数作为另外一个类的友元函数</p><hr><p><strong>C++开发中，能不用全局函数就不用全局函数。</strong></p><p><strong>尽可能的用类的概念来做。</strong></p><hr><h1 id="frend-class"><a href="#frend-class" class="headerlink" title="frend class"></a>frend class</h1><p><strong>这个类都是友元，这里面的所有成员函数都可以访问另一个类里面的私有成员。</strong></p><p><strong>就相当与把这个类里面的所有成员函数都声明为另一个类的友元函数。</strong></p><hr><p><strong>友元类、友元函数，使用friend关键字进行声明即可，与访问权限无关。</strong></p><p><strong>放到private、protect、public任意区域内</strong></p><hr><h1 id="Operator-overloading"><a href="#Operator-overloading" class="headerlink" title="Operator overloading"></a>Operator overloading</h1><ol><li><strong>使用成员函数进行运算符重载</strong></li><li><strong>使用非成员函数进行运算符重载</strong></li></ol><hr><p><strong>两种方式的选择：</strong></p><ol><li>一般情况下，单目运算符，使用成员函数重载更方便(不用写参数)。</li><li>一般情况下，双目运算符，使用友元函数更直观。</li></ol><p>例如：<br>100 + person 只能通过友元来实现。</p><p>person + 100友元函数和成员函数都可以实现。</p><p><strong>注意</strong>:</p><p>C++规定运算符重载的操作对象至少有一个不是标准类型，而是用户自定义的类型。</p><p><strong>特殊情况：</strong></p><p>（1）= （） [] -&gt; 不能重载为类的友元函数。否则可能和C++的其他规则矛盾，只能使用成员函数形式进行重载。</p><p>（2）如果运算符的第一个操作数要求使用隐式类型转换，则必须为友元函数（成员函数方式的第一个参数是this指针）</p><hr><p> <strong>如果新得到的结果放到了已经有的空间位置上，就OK。——返回引用</strong></p><hr><p><strong>注意重载赋值运算符的连用情况。</strong></p><hr><p> []也可以重载,宏定义(枚举)使得程序更加健壮，尽可能的不要在代码中写裸常量。</p><p>最好在编写代码的时候让编译器来帮我们找出错误，这样能减少很多麻烦。</p><p>相比与C风格的字符串，string风格的字符串更加优雅。</p><p>string中的c_str(),返回一个指向与本字符串内容相同的char类型指针。 </p><hr><p><strong>类型转换函数——operatoir type()const</strong></p><hr><p><strong>类类型转普通类型</strong></p><p>例如：</p><p>Boy boy1(“王小花”，15);</p><p>int a = boy1;</p><p><strong>operator int()const</strong></p><hr><p><strong>常量类型调常量方法。</strong>——const对象只能调const方法。如果找不到合适的const方法就会出问题。</p><hr><p><strong>类类型转类类型</strong>：</p><ol><li>调用对应的只有一个参数的构造函数</li><li>也可以使用类型转换函数</li></ol><p>使用对应的构造函数更合适。</p><hr><p><strong>构造函数的参数列表的初值，只在类内声明的时候写，如果定义和声明都写了，就会报错——重定义默认参数。</strong></p><hr><h1 id="polymorphism"><a href="#polymorphism" class="headerlink" title="polymorphism"></a>polymorphism</h1><p><strong>多态的本质：</strong><br>形式上，使用统一的父类指针做一般性处理，但是实际执行时，这个指针可以指向子类对象，形式上，原本调用父类的方法，但是实际上会调用子类的同名方法。</p><p><strong>注意：</strong><br>程序执行时，父类指针指向父类对象，或子类对象的时候，在形式上是无法分辨的！</p><p>只有通过多态机制，才能执行真正对应的方法。</p><hr><h2 id="virtual-function"><a href="#virtual-function" class="headerlink" title="virtual function"></a>virtual function</h2><p>(这个小标题的内容已再上一篇文章单独出)</p><p>(<strong>补充</strong>：函数指针的概念)——<a href="https://blog.csdn.net/zj1131190425/article/details/92065897">链接</a></p><p><strong>例如:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> (*ps)(<span class="keyword">int</span>);ps指针指向的函数，返回值是doble 参数是<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>在函数声明的返回类型之前加virtual。</p></li><li><p>并且只在函数的声明中添加virtual,在该成员函数的实现中不用加。</p></li></ul><hr><h2 id="虚函数的继承"><a href="#虚函数的继承" class="headerlink" title="虚函数的继承"></a>虚函数的继承</h2><ul><li>如果某个成员函数被声明成虚函数，那么他的子类，以及子类中的子类 ，所计继承的这个成员函数，也自动是虚函数。</li><li>如果在子类中重写这个虚函数，可以不用再加virtual,但仍然建议加上virtual，提高代码的可读性。</li></ul><hr><h2 id="虚函数原理——虚函数表"><a href="#虚函数原理——虚函数表" class="headerlink" title="虚函数原理——虚函数表"></a>虚函数原理——虚函数表</h2><p>对应虚函数的类，该类的对象所占内存大小为，数据成员的大小+一个指向虚函数表指针 (4字节)。</p><p><strong>例如</strong>：如下所示Father类所创建的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非func4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Father::z = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father father;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(father)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>结果为12</strong>，两个int的数据成员4+4一共占了8个字节，再加上一个虚函数表指针(4个字节)，一共是12个字节</p><p>( 如果该类中没有虚函数，就没有虚函数表指针，也就少4个字节)</p><p><strong>如下图所示</strong>:</p><p><img src="/images/01.assets/image-20210923162312616.png" alt="image-20210923162312616"></p><p><img src="/images//01.assets/image-20210923175606957.png" alt="image-20210923175606957"></p><p><strong>思考</strong>：它尽然是个指针，那我们就能通过这个指针来访问它所指向内存所对应的内容。</p><p>(先存的是虚函数表指针，然后才是数据成员。)</p><p><strong>所以说</strong>，对象地址就是虚函数表地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>*)&amp;father&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>强转成指针。</p><p><strong>接着</strong>，取出虚函数表的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* vptr = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)(&amp;father);</span><br></pre></td></tr></table></figure><p>为了编译器能通过，前面加上int*。</p><p><strong>然后</strong>，就找到了虚函数，并执行方法。</p><p>为了便于调用，这里定义个函数指针类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">func_t</span>)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>func_t指针，指向参数为void，返回值为void的函数。</p><p>调用虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((<span class="keyword">func_t</span>)*(vptr))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">1</span>))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">2</span>))();</span><br></pre></td></tr></table></figure><p><strong>调用成功</strong>。</p><p>接着调用x,y两个数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>取到地址，转成int整数，加上偏移量，通过编译器加上(int*),再解引用，得到里面的值。</p><p>(+上偏移量要先转成int)</p><p><strong>多态的使用</strong>：<strong>父类指针指向子类对象</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father* father1 = &amp;son;</span><br><span class="line">father1-&gt;Func1();<span class="comment">//调用对应的func1函数，son中的</span></span><br></pre></td></tr></table></figure><h2 id="使用继承的虚函数表"><a href="#使用继承的虚函数表" class="headerlink" title="使用继承的虚函数表"></a>使用继承的虚函数表</h2><p>在上面的基础上，为Father类添加一个派生类。并且对Father的func1进行重写，再添加一个它独有的func5,声明为虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Func5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/01.assets/image-20210923180943284.png" alt="image-20210923180943284"></p><p><strong>同上面通过使用指向虚函数表的指针来访问对应的内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取到这个地址的内容，然后通过自定义指针类型转换，调用该函数,加()</span></span><br><span class="line">((<span class="keyword">func_t</span>) * (vptr + i))();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问两个成员</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子类虚函数表"><a href="#子类虚函数表" class="headerlink" title="子类虚函数表"></a>子类虚函数表</h2><ol><li><p>直接复制父类的虚函数表</p><p><img src="/images/01.assets/image-20210924120520593.png" alt="image-20210924120520593"></p></li><li><p>如果子类重写了父类的某个虚函数，那么就在这个虚函数表中进行相应的替换</p><p><img src="/images/01.assets/image-20210924121032927.png" alt="image-20210924121032927"></p></li><li><p>如果子类中添加的新的虚函数，就把这个虚函数添加到虚函数表中(尾部添加)</p></li></ol><img src="/images/01.assets/image-20210924121136461-163248758506719.png" alt="image-20210924121136461"  /><h2 id="使用多重继承的虚函数表"><a href="#使用多重继承的虚函数表" class="headerlink" title="使用多重继承的虚函数表"></a>使用多重继承的虚函数表</h2><p><strong>在上面的基础上再添加一个Mother类</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//便于测试，所以权限定为public</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">500</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此时的Son类对象</strong></p><p>vs编译器中把子类自己的虚函数放到了第一个父类的虚函数表最后</p><p><img src="/images/01.assets/image-20210924123011972.png" alt="image-20210924123011972"></p><p><strong>同样通过指针访问对应的虚函数表内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Son son;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;son &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第一个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr1 = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)&amp;son;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr1 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x y </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span> + <span class="number">4</span> * i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二盒个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr2 = (<span class="keyword">int</span>*)*((<span class="keyword">int</span>*)&amp;son + <span class="number">3</span>);<span class="comment">//取出来的是指向第二个虚函数表的指针 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr2 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">16</span> + i * <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小补充</strong>：</p><p><strong>对象地址+偏移量</strong></p><p>转化int类型 + 对应的字节个数</p><p>转化int*类型 + 走几步(几个步长)</p><hr><h2 id="虚函数的修饰"><a href="#虚函数的修饰" class="headerlink" title="虚函数的修饰"></a>虚函数的修饰</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p><strong>final</strong>——C++11更新</p><p>1.用来修饰类，让该类不能被继承。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi2</span> <span class="keyword">final</span>:</span>XiaoMi</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi3</span> :</span>XiaoMi3<span class="comment">//报错——XiaoMI2不能被继承</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>补充</strong>:C++默认继承方式为private)</p><p>2.用来修饰虚函数，使得该虚函数在子类中，不得被重写。但是还可以使用。</p><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>override仅能修饰虚函数。</p><p>只能用在函数的声明，函数的实现不要写。</p><p><strong>作用</strong>：</p><ol><li>提示程序的阅读者，这个函数是重写父类的功能。</li><li>防止程序员在重写父类的函数时，把函数名写错。</li></ol><h2 id="父类的虚析构函数"><a href="#父类的虚析构函数" class="headerlink" title="父类的虚析构函数"></a>父类的虚析构函数</h2><p>把father类的析构函数定义为virtual时，并且对父类的指针执行delete操作时, 就是对该指针使用”<strong>动态析构</strong>“。</p><p>如果这个指针指向的是子类对象，那么会先调用该子类的析构函数，再调用父类的析构函数。</p><p>如果指向的是父类对象，那么只调用父类的析构函数。 </p><p><strong>注意</strong>：<br>为了防止内存泄露，最好在基类的虚构函数上添加virtual关键字，使基类析构函数为虚函数。</p><h2 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h2><p><strong>什么时候使用纯虚函数</strong>？</p><p>某些类，现实项目和实现角度吗，都<strong>不需要实例化</strong>(不需要创建它的对象)。</p><p>这个类中定义的某些成员函数只是为了提供一个形式上的接口，准备让自子类来做具体的实现。</p><p>此时这个函数就可以定义为”<strong>纯虚函数</strong>“，包含纯虚函数的类，就叫做<strong>抽象类</strong>(不能创建对象)。</p><p>继承该抽象类的子类如果不重写这个纯虚函数，那么它也是不能创建对象的。</p><p><strong>用法</strong>：<br>virtual  +函数  = 0</p><p><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Shape(<span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">~Shape()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Circle(<span class="keyword">float</span> radius = <span class="number">0</span>, <span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>) :Shape(color), r(radius)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">&#125;</span><br><span class="line">~Circle()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">float</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Circle <span class="title">c1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.area() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>纯虚函数的注意事项</strong>：<br>父类声明为某纯虚函数之后,它的子类：</p><ol><li>实现这个纯虚函数</li><li>继续把这个纯虚函数声明为纯虚函数，这个子类也称为抽象类</li><li>不对这个纯虚函数做任何处理，等效于上一种情况(不推荐)</li></ol><hr><p><strong>重复提示注意——代码尽量不要写裸常量</strong></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;namespace-命名空间&quot;&gt;&lt;a href=&quot;#namespace-命名空间&quot; class=&quot;headerlink&quot; title=&quot;namespace_命名空间&quot;&gt;&lt;/a&gt;namespace_命名空间&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;C++避免名字冲突&lt;/str</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++虚函数知识点总结</title>
    <link href="http://doraemon2.xyz/2021/09/24/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/09/24/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-24T10:00:08.000Z</published>
    <updated>2021-09-27T01:58:26.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p><strong>注意</strong>：</p><ul><li><p>在函数声明的返回类型之前加virtual。</p></li><li><p>并且只在函数的声明中添加virtual,在该成员函数的实现中不用加。</p></li></ul><hr><h2 id="虚函数的继承"><a href="#虚函数的继承" class="headerlink" title="虚函数的继承"></a>虚函数的继承</h2><ul><li>如果某个成员函数被声明成虚函数，那么他的子类，以及子类中的子类 ，所计继承的这个成员函数，也自动是虚函数。</li><li>如果在子类中重写这个虚函数，可以不用再加virtual,但仍然建议加上virtual，提高代码的可读性。</li></ul><hr><h2 id="虚函数原理——虚函数表"><a href="#虚函数原理——虚函数表" class="headerlink" title="虚函数原理——虚函数表"></a>虚函数原理——虚函数表</h2><p>对应虚函数的类，该类的对象所占内存大小为，数据成员的大小+一个指向虚函数表指针 (4字节)。</p><p><strong>例如</strong>：如下所示Father类所创建的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;虚函数func3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;非func4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Father::z = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father father;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(father)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>结果为12</strong>，两个int的数据成员4+4一共占了8个字节，再加上一个虚函数表指针(4个字节)，一共是12个字节</p><p>( 如果该类中没有虚函数，就没有虚函数表指针，也就少4个字节)</p><p><strong>如下图所示</strong>:</p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923162312616.png" alt="image-20210923162312616"></p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923175606957.png" alt="image-20210923175606957"></p><p><strong>思考</strong>：它尽然是个指针，那我们就能通过这个指针来访问它所指向内存所对应的内容。</p><p>(先存的是虚函数表指针，然后才是数据成员。)</p><p><strong>所以说</strong>，对象地址就是虚函数表地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>*)&amp;father&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>强转成指针。</p><p><strong>接着</strong>，取出虚函数表的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* vptr = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)(&amp;father);</span><br></pre></td></tr></table></figure><p>为了编译器能通过，前面加上int*。</p><p><strong>然后</strong>，就找到了虚函数，并执行方法。</p><p>为了便于调用，这里定义个函数指针类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">func_t</span>)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>func_t指针，指向参数为void，返回值为void的函数。</p><p>调用虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((<span class="keyword">func_t</span>)*(vptr))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">1</span>))();</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr + <span class="number">2</span>))();</span><br></pre></td></tr></table></figure><p><strong>调用成功</strong>。</p><p>接着调用x,y两个数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;father+ <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>取到地址，转成int整数，加上偏移量，通过编译器加上(int*),再解引用，得到里面的值。</p><p>(+上偏移量要先转成int)</p><p><strong>多态的使用</strong>：<strong>父类指针指向子类对象</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father* father1 = &amp;son;</span><br><span class="line">father1-&gt;Func1();<span class="comment">//调用对应的func1函数，son中的</span></span><br></pre></td></tr></table></figure><h2 id="使用继承的虚函数表"><a href="#使用继承的虚函数表" class="headerlink" title="使用继承的虚函数表"></a>使用继承的虚函数表</h2><p>在上面的基础上，为Father类添加一个派生类。并且对Father的func1进行重写，再添加一个它独有的func5,声明为虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Father</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func1()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Func5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Son Func5&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210923180943284.png" alt="image-20210923180943284"></p><p><strong>同上面通过使用指向虚函数表的指针来访问对应的内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取到这个地址的内容，然后通过自定义指针类型转换，调用该函数,加()</span></span><br><span class="line">((<span class="keyword">func_t</span>) * (vptr + i))();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问两个成员</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子类虚函数表"><a href="#子类虚函数表" class="headerlink" title="子类虚函数表"></a>子类虚函数表</h2><ol><li><p>直接复制父类的虚函数表</p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924120520593.png" alt="image-20210924120520593"></p></li><li><p>如果子类重写了父类的某个虚函数，那么就在这个虚函数表中进行相应的替换</p><p><img src="/images/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924121032927.png" alt="image-20210924121032927"></p></li><li><p>如果子类中添加的新的虚函数，就把这个虚函数添加到虚函数表中(尾部添加)</p></li></ol><img src="/images/C++虚函数知识点总结.assets/image-20210924121136461.png" alt="image-20210924121136461" style="zoom:;" /><h2 id="使用多重继承的虚函数表"><a href="#使用多重继承的虚函数表" class="headerlink" title="使用多重继承的虚函数表"></a>使用多重继承的虚函数表</h2><p><strong>在上面的基础上再添加一个Mother类</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handle3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Monther handle3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//便于测试，所以权限定为public</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">500</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>此时的Son类对象</strong></p><p>vs编译器中把子类自己的虚函数放到了第一个父类的虚函数表最后</p><p><img src="/imges/C++%E8%99%9A%E5%87%BD%E6%95%B0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.assets/image-20210924123011972.png" alt="image-20210924123011972"></p><p><strong>同样通过指针访问对应的虚函数表内容</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Son son;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;son &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第一个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr1 = (<span class="keyword">int</span>*)*(<span class="keyword">int</span>*)&amp;son;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr1 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x y </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">4</span> + <span class="number">4</span> * i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二盒个虚函数表指针</span></span><br><span class="line"><span class="keyword">int</span>* vptr2 = (<span class="keyword">int</span>*)*((<span class="keyword">int</span>*)&amp;son + <span class="number">3</span>);<span class="comment">//取出来的是指向第二个虚函数表的指针 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">((<span class="keyword">func_t</span>)*(vptr2 + i))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(<span class="keyword">int</span>*)((<span class="keyword">int</span>)&amp;son + <span class="number">16</span> + i * <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小补充</strong>：</p><p><strong>对象地址+偏移量</strong></p><p>转化int类型 + 对应的字节个数</p><p>转化int*类型 + 走几步(几个步长)</p><hr><h2 id="虚函数的修饰"><a href="#虚函数的修饰" class="headerlink" title="虚函数的修饰"></a>虚函数的修饰</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p><strong>final</strong>——C++11更新</p><p>1.用来修饰类，让该类不能被继承。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi2</span> <span class="keyword">final</span>:</span>XiaoMi</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi3</span> :</span>XiaoMi3<span class="comment">//报错——XiaoMI2不能被继承</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>补充</strong>:C++默认继承方式为private)</p><p>2.用来修饰虚函数，使得该虚函数在子类中，不得被重写。但是还可以使用。</p><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>override仅能修饰虚函数。</p><p>只能用在函数的声明，函数的实现不要写。</p><p><strong>作用</strong>：</p><ol><li>提示程序的阅读者，这个函数是重写父类的功能。</li><li>防止程序员在重写父类的函数时，把函数名写错。</li></ol><h2 id="父类的虚析构函数"><a href="#父类的虚析构函数" class="headerlink" title="父类的虚析构函数"></a>父类的虚析构函数</h2><p>把father类的指针定义为virtual时，并且对父类的指针执行delete操作时, 就是对该指针使用”动态析构”。</p><p>如果这个指针指向的是子类对象，那么会先调用该子类的析构函数，再调用父类的析构函数。</p><p>如果指向的是父类对象，那么只调用父类的析构函数。 </p><p><strong>注意</strong>：<br>为了防止内存泄露，最好在基类的虚构函数上添加virtual关键字，使基类析构函数为虚函数。</p><h2 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h2><p><strong>什么时候使用纯虚函数</strong>？</p><p>某些类，现实项目和实现角度吗，都<strong>不需要实例化</strong>(不需要创建它的对象)。</p><p>这个类中定义的某些成员函数只是为了提供一个形式上的接口，准备让自子类来做具体的实现。</p><p>此时这个函数就可以定义为”<strong>纯虚函数</strong>“，包含纯虚函数的类，就叫做<strong>抽象类</strong>(不能创建对象)。</p><p>继承该抽象类的子类如果不重写这个纯虚函数，那么它也是不能创建对象的。</p><p><strong>用法</strong>：<br>virtual  +函数  = 0</p><p><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Shape(<span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">~Shape()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Circle(<span class="keyword">float</span> radius = <span class="number">0</span>, <span class="keyword">const</span> <span class="built_in">string</span>&amp; color = <span class="string">&quot;White&quot;</span>) :Shape(color), r(radius)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">&#125;</span><br><span class="line">~Circle()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">float</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Circle <span class="title">c1</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.area() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>纯虚函数的注意事项</strong>：<br>父类声明为某纯虚函数之后,它的子类：</p><ol><li>实现这个纯虚函数</li><li>继续把这个纯虚函数声明为纯虚函数，这个子类也称为抽象类</li><li>不对这个纯虚函数做任何处理，等效于上一种情况(不推荐)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚函数&quot;&gt;&lt;a href=&quot;#虚函数&quot; class=&quot;headerlink&quot; title=&quot;虚函数&quot;&gt;&lt;/a&gt;虚函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在函数声明的返回类型之前加virtual。&lt;/p&gt;
&lt;/l</summary>
      
    
    
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>位图算法</title>
    <link href="http://doraemon2.xyz/2021/09/19/%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
    <id>http://doraemon2.xyz/2021/09/19/%E4%BD%8D%E5%9B%BE%E7%AE%97%E6%B3%95/</id>
    <published>2021-09-19T08:33:30.000Z</published>
    <updated>2021-09-19T08:37:02.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位图算法"><a href="#位图算法" class="headerlink" title="位图算法"></a>位图算法</h1><p><strong>已空间换时间</strong>。</p><p>很多不重复的整数，其中最大值不超过40亿，最小值是0，要求判断某个指定的整数，是否在这个集合中。</p><p>使用2个字节，表示16个数，的状态(有或者没有)</p><p><strong>上面为表示的数，下面为该数的个数。</strong></p><table><thead><tr><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p> <strong>例如：要表示1,13,4,5,6</strong></p><table><thead><tr><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p><strong>要表示40亿个数</strong></p><p>4000000000/8 = 500000000字节</p><p>500000000字节/1024=  488281K</p><p> 488281k/1024 = 476.837M</p><p><strong>单位换算</strong></p><p> 1字节==  8比特位</p><p>1K == 1024字节</p><p>1M == 1024K</p><p><strong>代码实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//初始化容器内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span>* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tempN = len * <span class="number">8</span>;<span class="comment">//40亿个数——40亿个位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假定需求:这个容器中存的是40亿以前能被3整数的数</span></span><br><span class="line"><span class="comment">//就将他对应的比特位改成1(默认是0——memset())</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempN; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到这个数对应的字节</span></span><br><span class="line"><span class="keyword">char</span>* p = data + (i / <span class="number">8</span>);</span><br><span class="line"><span class="comment">//找到对应的位，并且将对应的位改成1</span></span><br><span class="line">*p = *p | (<span class="number">1</span> &lt;&lt; (i % <span class="number">8</span>));<span class="comment">//解释如下:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何将这个数对应的位(在比特位中的第几位数)改成1？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对1进行左移操作,这个数 % 8等于多少</span></span><br><span class="line"><span class="comment">(就是该数与该字节的最右侧中间间隔了几个位)，</span></span><br><span class="line"><span class="comment">1就左移几位，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后和这个字节进行按位或操作，例如</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">i = 12;</span></span><br><span class="line"><span class="comment">//上面是对应的数,下面是对应比特位的数</span></span><br><span class="line"><span class="comment">15 14 13 12 11 10 9 8</span></span><br><span class="line"><span class="comment">0  0  0  0  0  0  0 0 </span></span><br><span class="line"><span class="comment">与   1 &lt;&lt; (i % 8)  进行按位或操作</span></span><br><span class="line"><span class="comment">0  0  0  1  0  0  0 0</span></span><br><span class="line"><span class="comment">得到</span></span><br><span class="line"><span class="comment">15 14 13 12 11 10 9 8</span></span><br><span class="line"><span class="comment">0  0  0  1  0  0  0 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位图算法实现</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span>* data,<span class="keyword">int</span> len,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到对应的字节</span></span><br><span class="line"><span class="keyword">char</span>* p = data + value / <span class="number">8</span>;</span><br><span class="line"><span class="comment">//找到对应的位，并判断是否存在</span></span><br><span class="line"><span class="keyword">bool</span> ret = *p &amp; (<span class="number">1</span> &lt;&lt; (value % <span class="number">8</span>));<span class="comment">//解释如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对1进行的左移操作同上</span></span><br><span class="line"><span class="comment">然后将这个所在的字节与1左移后的值，进行按位与</span></span><br><span class="line"><span class="comment">1 &amp; 1 = 1</span></span><br><span class="line"><span class="comment">1 &amp; 0 = 0</span></span><br><span class="line"><span class="comment">0 &amp; 0 = 0</span></span><br><span class="line"><span class="comment">0 &amp;1 = 0；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">4000000000</span>;<span class="comment">//这个40亿代表40个数(80亿个比特位)</span></span><br><span class="line"><span class="keyword">int</span> len = n / <span class="number">8</span> + <span class="number">1</span>;<span class="comment">//40亿个数对应的字节个数</span></span><br><span class="line"><span class="keyword">char</span>* data = <span class="keyword">new</span> <span class="keyword">char</span>[len];<span class="comment">//创建对应字节个数这么大的一个数组(容器)</span></span><br><span class="line"><span class="built_in">memset</span>(data, <span class="number">0</span>, len);<span class="comment">//容器清0</span></span><br><span class="line">init(data, len);<span class="comment">//往容器中存数据</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输入测试</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要查找的数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (check(data, len, a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;被找到啦&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;找不到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位图算法&quot;&gt;&lt;a href=&quot;#位图算法&quot; class=&quot;headerlink&quot; title=&quot;位图算法&quot;&gt;&lt;/a&gt;位图算法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;已空间换时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多不重复的整数，其中最大值不超过40亿，最小值是0，要求判</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>侯捷C++面向对象高级编程(上)笔记</title>
    <link href="http://doraemon2.xyz/2021/09/09/%E4%BE%AF%E6%8D%B7C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0/"/>
    <id>http://doraemon2.xyz/2021/09/09/%E4%BE%AF%E6%8D%B7C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-09T07:47:43.000Z</published>
    <updated>2021-09-28T00:53:09.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面向对象，就是将数据和处理这些数据的函数包在一起。数据只有这个函数能够看到，不会和其他的混杂在一起。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c++ <span class="class"><span class="keyword">class</span> -&gt;</span>  c <span class="class"><span class="keyword">struct</span> + 更多的特性</span></span><br></pre></td></tr></table></figure><p>C++的结构几乎等同于class。</p><h1 id="C-Programs代码基本形式"><a href="#C-Programs代码基本形式" class="headerlink" title="C++ Programs代码基本形式"></a>C++ Programs代码基本形式</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.h(header files)</span><br><span class="line">.cpp </span><br></pre></td></tr></table></figure><p>延伸文件名(extension file name)不一定是.h Or .cpp,也可能是.hpp或者其他甚至无扩展名。</p><h2 id="头文件写法"><a href="#头文件写法" class="headerlink" title="头文件写法"></a>头文件写法</h2><p><strong>防止头文件重复包含</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906123808403.png" alt="image-20210906123808403"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _XXX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _XXX_</span></span><br></pre></td></tr></table></figure><h2 id="头文件布局"><a href="#头文件布局" class="headerlink" title="头文件布局"></a>头文件布局</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前置声明</span><br><span class="line">类——声明</span><br><span class="line">类——定义-功能实现</span><br></pre></td></tr></table></figure><h1 id="class1——complex"><a href="#class1——complex" class="headerlink" title="class1——complex"></a>class1——complex</h1><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906160932608.png" alt="image-20210906160932608"></p><h2 id="inline——内联函数"><a href="#inline——内联函数" class="headerlink" title="inline——内联函数"></a>inline——内联函数</h2><p>增加了 inline 关键字的函数称为“内联函数”。内联函数和普通函数的区别在于：当编译器处理调用内联函数的语句时，不会将该语句编译成函数调用的指令，而是直接将整个函数体的代码插人调用语句处，就像整个函数体在调用处被重写了一遍一样。(<a href="http://c.biancheng.net/view/199.html">链接</a>)</p><p>inline是C++关键字，在函数声明或定义中，函数返回类型前加上关键字inline，即可以把函数指定为内联函数。这样可以解决一些频繁调用的函数大量消耗栈空间（栈内存）的问题。关键字inline必须与函数定义放在一起才能使函数成为内联函数，仅仅将inline放在函数声明前面不起任何作用。inline是一种“用于实现”的关键字，而不是一种“用于声明”的关键字。(<a href="https://baike.baidu.com/item/inline/10566989">链接</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> 函数返回值类型 函数名()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class访问级别-access-level"><a href="#class访问级别-access-level" class="headerlink" title="class访问级别(access level)"></a>class访问级别(access level)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>——放所有函数(几乎)</span><br><span class="line"><span class="keyword">private</span>——数据</span><br><span class="line"><span class="keyword">protected</span>——受保护的(暂时不说)</span><br></pre></td></tr></table></figure><p>数据一定要通过类中的函数来传递出去(或者被设定)。除非这些数据是public,但我们要避免的就是这种。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906162631950.png" alt="image-20210906162631950"></p><h2 id="构造函数-ctors"><a href="#构造函数-ctors" class="headerlink" title="构造函数(ctors)"></a>构造函数(ctors)</h2><ol><li>与类名相同</li><li>可以有默认参数</li><li>没有返回类型</li></ol><h2 id="构造函数特有语法"><a href="#构造函数特有语法" class="headerlink" title="构造函数特有语法"></a>构造函数特有语法</h2><p>（充分运用特殊写法）</p><p><strong>注意</strong>：括号中要有接收参数double r ,double i </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//一个变量的赋值使用有两个阶段，</span></span><br><span class="line">    <span class="comment">//1.初始化</span></span><br><span class="line">    <span class="comment">//2.赋值，使用</span></span><br><span class="line">    <span class="comment">//如果不用构造函数的特殊写法，就相当于跳过了初始化，直接在函数中赋值了</span></span><br><span class="line">      <span class="built_in">complex</span>(<span class="keyword">double</span> r = <span class="number">0</span>,<span class="keyword">double</span> i = <span class="number">0</span>):re(r),im(i)</span><br><span class="line">          <span class="comment">//传进来的两个数赋到类内变量中</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test(<span class="keyword">int</span> c,<span class="keyword">int</span> d):a(c),b(d)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FanHui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">s1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1.FanHui() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与构造函数对应的析构函数，不带指针的类，大多不用写析构函数。</p><p>构造函数可以有很多个——overloading(重载)，同名的函数可以同时存在(在编译器看来其实不同名)，函数重载长长发生在构造函数上，但是这种不行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">complex</span>(<span class="keyword">double</span> r = <span class="number">0</span>,<span class="keyword">double</span> i = <span class="number">0</span>):re(r),im(i)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">complex</span>():re(<span class="number">0</span>),im(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="构造函数放到private"><a href="#构造函数放到private" class="headerlink" title="构造函数放到private?"></a>构造函数放到private?</h2><p>什么情况会这样做？</p><p>不允许外接创建对象，那这个类有什么用呢？‘</p><p><strong>例</strong>:设计模式中的<strong>Singleton</strong>(单体)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> A&amp; <span class="title">gentInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup()&#123;......&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A&amp; <span class="title">A::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量成员函数const-member-functions"><a href="#常量成员函数const-member-functions" class="headerlink" title="常量成员函数const member functions"></a>常量成员函数const member functions</h2><p>class里面的函数分为会改变数据内容的，和不会改变数据内容的，不会改变数据的内容的函数<strong>加const</strong>。</p><p>加不加const看传进来的参数经过这一系列运算会不会发生改变。(全局函数同理)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span><span class="keyword">const</span></span>&#123;    <span class="keyword">return</span> re;&#125;</span><br></pre></td></tr></table></figure><p><strong>该加const的位置一定要加const</strong>——创建类对象前面加了const</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906170251208.png" alt="image-20210906170251208"></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p><strong>首先考虑传引用，注意看是否可以传引用。</strong></p><p><strong>pass by value</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正常参数传递 类型 名称</span><br></pre></td></tr></table></figure><p><strong>pass by reference (to const)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是传引用,相当于传指针。效果也同样相同    <span class="keyword">const</span> <span class="built_in">complex</span>&amp;   ————传引用加<span class="keyword">const</span>防止被修改</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p><strong>首先考虑传引用，注意看是否可以传引用。</strong></p><p><strong>return by value</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型</span><br></pre></td></tr></table></figure><p><strong>return by reference (to const)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引用</span><br></pre></td></tr></table></figure><p><strong>什么时候不能返回引用</strong></p><p>如果新得到的结果放到了已经有的空间位置上，就OK。(如图)</p><p>但是，将两个已有的数据加在一起，不能放到原来已经有的位置上，这时候就需要在函数中创建一个新的变量用来接收的这个新得到的值，这时候不能返回这个新创建的变量，因为局部变量( local变量)在函数结束之后就消失了。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906174311493.png" alt="image-20210906174311493"></p><h2 id="友元friend"><a href="#友元friend" class="headerlink" title="友元friend"></a>友元friend</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906173119933.png" alt="image-20210906173119933"></p><h2 id="同一个class的各个object互为友元"><a href="#同一个class的各个object互为友元" class="headerlink" title="同一个class的各个object互为友元"></a>同一个class的各个object互为友元</h2><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906173635470.png" alt="image-20210906173635470"></p><h2 id="操作符重载operator-overloading-成员函数"><a href="#操作符重载operator-overloading-成员函数" class="headerlink" title="操作符重载operator overloading(成员函数)"></a>操作符重载operator overloading(成员函数)</h2><p><strong>操作符重载通过成员函数或者非成员函数实现</strong>。</p><p>c++中操作符就是一种函数，因为它可以重新定义。</p><p>所有的成员函数都带着一个隐藏dispointer,指向调用者。</p><p><strong>传递者无需知道接收者是以reference形式接收</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906194143586.png" alt="image-20210906194143586"></p><h2 id="操作符重载operator-overloading-非成员函数"><a href="#操作符重载operator-overloading-非成员函数" class="headerlink" title="操作符重载operator overloading(非成员函数)"></a>操作符重载operator overloading(非成员函数)</h2><p>为了应对client_使用者的不同用法，我们这里给出3种写法。</p><p><strong>注意到</strong>：运算的数写的位置不同，所重载的版本不同。</p><p>并且这几个绝对不可return by reference,因为他们返回的必定是local object，不是赋值给了已经存在的空间位置上，而是从这个函数中创建出一个complex，然后将它返回。 </p><p><strong>是从哪里创建的呢？</strong></p><p><strong>这里有个特殊语法</strong>：</p><p><strong>typename()</strong>;——<strong>创建临时对象</strong>，它的生命到下一行就结束了。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906195013096.png" alt="image-20210906195013096"></p><p><strong>重载返回值的特殊情况</strong>：</p><p>注意到连用情况，在本次重载&lt;&lt;运算符中，如果client_user按照标准库中的cout使用方式连用，那么我们重载所设置的返回值就还得是个ostream类型，因为它从左向右运算，完成第一个之后，得到的类型还得是ostream类型才能接受这个&lt;&lt;。</p><p><strong>但是</strong>,如果client_user不连用，只是cout&lt;&lt;xxx;那么本次运算之后的返回值是什么就无所谓了，我们可以填个void,并且注意，没有return。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210906202138200.png" alt="image-20210906202138200"></p><h1 id="complex类实现过程"><a href="#complex类实现过程" class="headerlink" title="complex类实现过程"></a>complex类实现过程</h1><p><strong>注意</strong>：成员函数实现重载，作用在运算符左边。传进来的参数是另一个。</p><p><strong>简单实现</strong>：</p><p><strong>MyComplex.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> mycomplex</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mycomplex</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComplex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyComplex(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>) :re(r), im(i) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span><span class="keyword">const</span><span class="comment">//得到实部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span><span class="keyword">const</span><span class="comment">//得到虚部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> im;</span><br><span class="line">&#125;</span><br><span class="line">MyComplex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> MyComplex&amp; c);<span class="comment">//一个复数加到另一个复数上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MyComplex&amp; c);<span class="comment">//判断两个复数是否相等</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re, im;</span><br><span class="line"><span class="comment">//在函数前加friend变为友元函数，写在这里，这个函数就能取到这个类的私有数据了。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> MyComplex&amp; <span class="title">GetBody1</span><span class="params">(MyComplex* ths, <span class="keyword">const</span> MyComplex&amp; tempC)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个虚数的实部和虚部加到另一个上</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> MyComplex&amp; <span class="title">GetBody1</span><span class="params">(MyComplex* ths, <span class="keyword">const</span> MyComplex&amp; tempC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ths-&gt;re += tempC.re;</span><br><span class="line">ths-&gt;im += tempC.im;</span><br><span class="line"><span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个虚部进行相加</span></span><br><span class="line"><span class="comment">/*为什么要把对两个复数的运算操作写成成员函数？</span></span><br><span class="line"><span class="comment">因为可以利用到this指针，书写简单*/</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex&amp; MyComplex::<span class="keyword">operator</span>+=(<span class="keyword">const</span> MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> GetBody1(<span class="keyword">this</span>, c1);<span class="comment">//注意到this是个指向调用者的指针，所以上面的GetBody1的参数1类型要写MyComplex*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载&lt;&lt;运算符，在屏幕上打印输出负数</span></span><br><span class="line"><span class="keyword">inline</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp; os,<span class="keyword">const</span> MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> os &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; c1.real() &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; c1.imag() &lt;&lt; <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个复数类的相加运算，并且加到一个新的复数类上</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> + (<span class="keyword">const</span>  MyComplex&amp; c1,<span class="keyword">const</span> MyComplex&amp; c2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(c1.real() + c2.real(), c1.imag() + c2.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个复数和一个double数进行运算</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> + (MyComplex&amp; c1, <span class="keyword">double</span> x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  MyComplex(c1.real() + x, c1.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对这个复数进行取反</span></span><br><span class="line"><span class="keyword">inline</span> MyComplex <span class="keyword">operator</span> - (MyComplex&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(-c1.real(), -c1.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两个复数是否相等</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> MyComplex::<span class="keyword">operator</span> == (<span class="keyword">const</span> MyComplex&amp; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;im == c.im &amp;&amp; <span class="keyword">this</span>-&gt;re == c.re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到一个复数的共轭复数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> MyComplex <span class="title">GetRatherImag</span><span class="params">(<span class="keyword">const</span> MyComplex&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MyComplex(c.real(),-c.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyComplex.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mycomplex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MyComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">MyComplex <span class="title">c2</span><span class="params">(<span class="number">-1</span>, <span class="number">-2</span>)</span></span>;</span><br><span class="line"><span class="function">MyComplex <span class="title">cTemp1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 + c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; -c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1 += c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (c1 == c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; GetRatherImag(c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1 = c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="class2——string"><a href="#class2——string" class="headerlink" title="class2——string"></a>class2——string</h1><p>class带指针，我们就不能用默认的拷贝构造函数，应该自己写。</p><p>因为拷贝了指针，这两个指针指向的是同一块内容空间。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210907204221502.png" alt="image-20210907204221502"></p><h2 id="class-with-pointer-members"><a href="#class-with-pointer-members" class="headerlink" title="class with pointer  members"></a>class with pointer  members</h2><p>只要了类带着指针，就要写拷贝构造和拷贝赋值，析构函数。——Big Three三个特殊函数。</p><p><strong>class里面有指针，多半是要动态内存分配。</strong></p><p>因为传递的是指针，创建的这两个class中的data就是一个指针，如果就使用编译器的否拷贝构造函数。</p><p>那么就会使得这两个指针指向的是同一块内存空间。</p><p>并且会导致另一块没有指针指向的内存空间引起<strong>memory leak</strong>(内存泄漏)。</p><p>——这就是我们所说的<strong>浅拷贝</strong>。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210907210003827.png" alt="image-20210907210003827"></p><h2 id="深-amp-浅拷贝ctor-function"><a href="#深-amp-浅拷贝ctor-function" class="headerlink" title="深&amp;浅拷贝ctor function"></a>深&amp;浅拷贝ctor function</h2><p> 引出——<strong>深拷贝</strong>，我们coder所要写的这个(copy ctor)拷贝构造函数。</p><p>因为它的名字和类名相同，所以他是构造函数，并且它的参数传递的是它本身这种类型，所以叫做copy ctor。</p><p>拷贝构造应该做什么?<br>为传进来的这个蓝本创建足够的空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> </span><br><span class="line">String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data)+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_data,str.m_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//以下两行代码意思完全相同</span></span><br><span class="line"><span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">String s2 = s1;</span><br></pre></td></tr></table></figure><h2 id="copy-assignment-operator——拷贝赋值函数"><a href="#copy-assignment-operator——拷贝赋值函数" class="headerlink" title="copy assignment operator——拷贝赋值函数"></a>copy assignment operator——拷贝赋值函数</h2><p>将原来的内容清空，开辟一块与另一块内存一样大的空间，然后将另一块的内容复制到这块来。</p><p>self assignment——检测自我赋值</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908182935320.png" alt="image-20210908182935320"></p><h1 id="string类的实现过程"><a href="#string类的实现过程" class="headerlink" title="string类的实现过程"></a>string类的实现过程</h1><p>(不管什么函数就都加inline就完事了，编译器会做决策)</p><p><strong>MyString.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> myString</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> myString<span class="comment">//注意防卫式声明的名字不能和类名相同！</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>);<span class="comment">//接收什么样的初值</span></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">MyString(<span class="keyword">const</span> MyString&amp; str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝赋值</span></span><br><span class="line">MyString&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; str); <span class="comment">//看函数返回出来的结果要放到什么地方去，来决定是否可以Return by reference</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(指针指向c字符的字符串是C语言风格的字符串)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回字符串丢到cout</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">get_str</span><span class="params">()</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~MyString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* m_data;<span class="comment">//放一根指针，动态分配</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MyString::MyString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* cstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cstr != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cstr) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, cstr);<span class="comment">//将传进来的内容拷贝到新分配到的空间中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//没有初值也要来一个空间</span></span><br><span class="line"><span class="comment">//放/0,就是——所谓空字符串也要有一个最后的结束符</span></span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">*m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> MyString::~MyString()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] m_data;<span class="comment">//arry new 配 arry delete</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MyString::MyString</span><span class="params">(<span class="keyword">const</span> MyString&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> MyString&amp; MyString::<span class="keyword">operator</span> = (<span class="keyword">const</span> MyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意参数中的&amp; 和if中str前的&amp; ，他们两个的意义是不同的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑到是否进行自我赋值</span></span><br><span class="line"><span class="comment">//来源端和目的端是否相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str)<span class="comment">//取地址得到的是一根指针</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> m_data;</span><br><span class="line"><span class="comment">//清理掉之后重新分配一个够大的空间</span></span><br><span class="line">m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑到连串情况(类似于之前MyComplex中cout&lt;&lt;连用的情况)</span></span><br><span class="line"><span class="comment">//所以返回MySring&amp; </span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !MyString</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MyString.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//MyString s1(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; s1.get_str();</span></span><br><span class="line"><span class="built_in">string</span> stemp = &#123;&#125;;</span><br><span class="line"><span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.get_str() &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(s2.get_str()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(stemp) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">s3</span><span class="params">(<span class="string">&quot;在&quot;</span>)</span></span>;</span><br><span class="line">s2 = s3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.get_str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆、栈、内存管理"><a href="#堆、栈、内存管理" class="headerlink" title="堆、栈、内存管理"></a>堆、栈、内存管理</h1><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>是存在于某个作用域的一块内存空间memory space。</p><p>调用函数，就会形成一个stack,用来存放它的参数，以及返回地址。</p><p><strong>Stack object</strong>的生命周期在作用域结束之后就结束了。 会被自动清理。</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>即——System Heap，是指由操作系统提供的一个global内存空间，由coder负责分配。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">complex</span> <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;<span class="built_in">complex</span> *p =  <span class="keyword">new</span> <span class="built_in">complex</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>**Static  object **在作用域结束之后仍然存在，直到整个程序结束 ，析构函数才被调用。</p><h2 id="New"><a href="#New" class="headerlink" title="New"></a>New</h2><p><strong>new完记得Delete。</strong></p><p>调用New，先分配一块内存空间，然后再调用构造函数。</p><p><strong>例如</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用</span><br><span class="line">MyComplex *pc = <span class="keyword">new</span> MyComplex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">之后</span><br><span class="line">我们可以理解为</span><br><span class="line">实际上编译器转化为了<span class="number">3</span>条语句</span><br><span class="line">    </span><br><span class="line">    分配内存-相当于调用<span class="built_in">malloc</span>(n)</span><br><span class="line"><span class="keyword">void</span>* temp = <span class="keyword">operator</span> <span class="keyword">new</span>(sozeof(MyComplex));</span><br><span class="line">pc = <span class="keyword">static_cast</span>&lt;MyComplex*&gt;(temp);<span class="comment">//转型</span></span><br><span class="line">pc-&gt;MyComplex::MyComplex(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//调用构造函数</span></span><br></pre></td></tr></table></figure><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p><strong>先调用析构函数，再释放内存。</strong>与New相反</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> pc;</span><br><span class="line"></span><br><span class="line">Complex::~Complex(pc);</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;</span><br><span class="line">（即 调用<span class="built_in">free</span>）</span><br></pre></td></tr></table></figure><h2 id="arry-new"><a href="#arry-new" class="headerlink" title="arry new"></a>arry new</h2><p>arry new一定要搭配arry delete</p><p>即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String *str = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span>[] p;<span class="comment">//调用三次dtor</span></span><br></pre></td></tr></table></figure><p>否则会造成内存泄漏。</p><p><strong>注意泄漏的是哪个位置</strong>。</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908193839238.png" alt="image-20210908193839238"></p><h1 id="static-静态"><a href="#static-静态" class="headerlink" title="static_静态"></a>static_静态</h1><p>C与C++的static有两种用法：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B">面向过程</a>程序设计中的static和<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">面向对象程序设计</a>中的static。前者应用于普通变量和函数，不涉及类；后者主要说明static在类中的作用。——<a href="https://baike.baidu.com/item/static/9598919">链接</a></p><p>在有的情况，例如银行的利率，我们就可以将它设置为静态static类型，因为每个人看到的利率都是一样的，只有一份。</p><p>静态函数没有dispointer，所以它只能处理静态的数据。</p><p><strong>静态的数据一定要在class外定义</strong>。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> m_rate;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_rate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_rate = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">double</span> Account::m_rate = <span class="number">8.0</span>;</span><br></pre></td></tr></table></figure><p>调用静态函数有两种方式</p><ol><li>通过object对象调用</li><li>通过class name调用</li></ol><p><strong>有时我们的class只希望创建一个对象</strong></p><p>只有有人调用到这个函数，这个对象才会诞生。</p><p>没人用，这个唯一的对象就不会产生。only one forever</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A&amp; <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup()&#123;&#125;;             </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A&amp; <span class="title">A::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="cout补充"><a href="#cout补充" class="headerlink" title="cout补充"></a>cout补充</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908213824015.png" alt="image-20210908213824015"></p><h1 id="class-template-类模板"><a href="#class-template-类模板" class="headerlink" title="class template_类模板"></a>class template_类模板</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908214533298.png" alt="image-20210908214533298"></p><h1 id="function-template-函数模板"><a href="#function-template-函数模板" class="headerlink" title="function template_函数模板"></a>function template_函数模板</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210908214827122.png" alt="image-20210908214827122"></p><p> 函数模板不必明确的指出来传入的类型，编译器会进行推导。</p><p>与运算符重载相互搭配。</p><p>(C++标准库里的算法都是function template形式)</p><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><ol><li>using directive_打开全部封锁</li><li>using declaration_一条一条声明</li><li>啥也不写，每条都得std::xx</li></ol><h1 id="class-Composition-复合"><a href="#class-Composition-复合" class="headerlink" title="class Composition_复合"></a>class Composition_复合</h1><p>a has b </p><p>(标注库中的很多容器就是复合)</p><p>例如：将deque容器改装成 queue——adapter_改造</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909085401344.png" alt="image-20210909085401344"></p><p><strong>构造由内而外——</strong>包饺子</p><p><strong>析构由内而外</strong>——剥桔子</p><h1 id="class-Delegation-委托"><a href="#class-Delegation-委托" class="headerlink" title="class Delegation_委托"></a>class Delegation_委托</h1><p>Composition by reference</p><p><strong>编译防火墙</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909091044631.png" alt="image-20210909091044631"></p><h1 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance_继承"></a>Inheritance_继承</h1><p>is a</p><p><strong>构造由内而外——</strong>包饺子</p><p><strong>析构由内而外</strong>——剥桔子</p><p>继承——子类会有父类的part</p><p><strong>主要搭配virtual用</strong></p><h1 id="Inheritance-with-virtual-functions"><a href="#Inheritance-with-virtual-functions" class="headerlink" title="Inheritance with virtual functions"></a>Inheritance with virtual functions</h1><p>在成员函数前+virtual。</p><p>数据和函数都可以被继承下来，只不过函数继承的是调用权。</p><p><strong>成员函数分为三种</strong>：</p><ol><li>non-virtual 函数:你不希望子类(dericed class) 重新定义(override覆写——之能用在虚函数被重新定义)</li><li>virtual函数:你希望被dericed class override,并且它已有默认定义。</li><li>pure virtual函数:你希望dericed class<strong>一定</strong>要override,且它没有默认定义</li></ol><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909094754866.png" alt="image-20210909094754866"></p><p>子类对象可以调用父类函数</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909122137728.png" alt="image-20210909122137728"></p><p>(例如MFC框架)</p><p><strong>只有应用程序本身知道如何读取自己的文件(格式)</strong></p><h1 id="Inheritance-Composition下的构造和析构"><a href="#Inheritance-Composition下的构造和析构" class="headerlink" title="Inheritance + Composition下的构造和析构"></a>Inheritance + Composition下的构造和析构</h1><p><strong>当一个类继承了另一个类，并且又复合了一个类，那么他们的构造函数和析构函数的调用顺序是什么样的呢？</strong></p><p>test.h</p><p><strong>这里面的Person3继承了Person1,复合了Person2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person1(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person2(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span>:</span>Person1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person3(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person3()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">Person2 p2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !Test</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person3 testTemp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909124703540.png" alt="image-20210909124703540"></p><p><strong>如果一个类继承了一个父类，并且这个父类中复合了一个类呢，那么他的构造函数和析构函数的调用顺序是如何的呢？</strong></p><p>这里的Person1继承了Person3,Person3复合了Person2</p><p><strong>test.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">ifndef</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person2(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 2的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person3(<span class="keyword">int</span> r = <span class="number">0</span>):m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person3()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 3的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">Person2 p2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span> :</span><span class="keyword">public</span> Person3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person1(<span class="keyword">int</span> r = <span class="number">0</span>) :m_age(r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 1的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !Test</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;test.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person1 tempTEST;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果如图</strong>：</p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909125648963.png" alt="image-20210909125648963"></p><h1 id="Delegation-Inheritance-委托-继承"><a href="#Delegation-Inheritance-委托-继承" class="headerlink" title="Delegation  +  Inheritance 委托+继承"></a>Delegation  +  Inheritance 委托+继承</h1><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909130434009.png" alt="image-20210909130434009"></p><p>(面向对象问题——准备class来解决问题)</p><p><strong>Composite</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909132300696.png" alt="image-20210909132300696"></p><p><strong>Prototype</strong></p><p><img src="/images/%E4%BE%AF%E6%8D%B7C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E4%B8%8A)%E7%AC%94%E8%AE%B0.assets/image-20210909152011127.png" alt="image-20210909152011127"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;面向对象，就是将数据和处理这些数据的函数包在一起。数据只有这个函数能够看到，不会和其他的混杂在一起。&lt;/p&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【网络编程】异步选择模型</title>
    <link href="http://doraemon2.xyz/2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%BC%82%E6%AD%A5%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/"/>
    <id>http://doraemon2.xyz/2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%BC%82%E6%AD%A5%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-09-04T12:56:28.000Z</published>
    <updated>2021-09-04T12:57:32.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步选择模型"><a href="#异步选择模型" class="headerlink" title="异步选择模型"></a>异步选择模型</h1><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p><strong>核心</strong>:消息队列，操作系统为每个窗口创建一个消息队列，并且维护，我们想要使用消息队列，那就要创建一个窗口。</p><p><strong>第一步</strong>：将我们的socket，绑定在一个消息上，并且投递给操作系统。</p><p><strong>WSAAsyncSelect</strong></p><p><strong>第二步</strong>：取消息分类处理，</p><p>该模型只能用于windows,windows处理用户操作的核心就是消息队列。但是思想是通用的。</p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p><strong>第一步</strong>：创建窗口结构体——WNDCLASSEX</p><p><strong>第二步</strong>：注册窗口结构体——RegisterClassEx</p><p><strong>第三步</strong>：创建窗口——CreateWindowEx</p><p><strong>第四步</strong>：显示窗口——ShowWindow</p><p><strong>第五步</strong>：消息循环——GetMessage</p><p>​                            ——TranslateMessage</p><p>​                            ——DispatchMessage</p><p><strong>第六步</strong>：回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;//窗口</span></span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建窗口结构体</span></span><br><span class="line">WNDCLASSEX wc;</span><br><span class="line">wc.cbClsExtra = <span class="number">0</span>;<span class="comment">//窗口结构体额外的一块空间,一般用不到</span></span><br><span class="line">wc.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">wc.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wc.hbrBackground = <span class="literal">NULL</span>;</span><br><span class="line">wc.hCursor = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIcon = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIconSm = <span class="literal">NULL</span>;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line"></span><br><span class="line">wc.lpfnWndProc = WinBackProc;</span><br><span class="line"></span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;mYwinDows&quot;</span>;</span><br><span class="line">wc.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wc.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口结构体</span></span><br><span class="line">RegisterClassEx(&amp;wc);<span class="comment">//窗口类变量地址</span></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="comment">//窗口句柄</span></span><br><span class="line">HWND hwnd = CreateWindowEx(WS_EX_OVERLAPPEDWINDOW, <span class="string">L&quot;mYwinDows&quot;</span>, <span class="string">L&quot;WuHu&quot;</span>, WS_OVERLAPPEDWINDOW, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hwnd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新窗口</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环！-窗口上的任何操作都会产生消息，然后被装进消息队列中。</span></span><br><span class="line"><span class="comment">//只要窗口在，就得不停的在窗口上取消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息结构体——装消息</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))<span class="comment">//点击关闭窗口，GetMessage会返回0，循环退出,两个范围填0——接收所有消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//翻译消息</span></span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line"><span class="comment">//分发消息，到具体位置分类处理</span></span><br><span class="line">DispatchMessageW(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (msgID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, msgID, wparaw, lparam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网络库 头文件 </span><br><span class="line">打开网络库</span><br><span class="line">校验版本</span><br><span class="line">创建SOCKET</span><br><span class="line">绑定地址与端口</span><br><span class="line">开始监听</span><br><span class="line"></span><br><span class="line">异步选择</span><br></pre></td></tr></table></figure><h3 id="异步选择"><a href="#异步选择" class="headerlink" title="异步选择"></a>异步选择</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAAsyncSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">  HWND   hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">  u_int  wMsg,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">long</span>   lEvent</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketServer, hwnd, UM_ASYNCSELECTMSG, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"> closesocket(socketServer);</span><br><span class="line"> WSACleanup();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>绑定事件与socket并且投递出去。</p><h3 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h3><p>服务器socket</p><h3 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h3><p>窗口句柄，绑定到哪个窗口上。</p><p>本质：就是窗口的ID,编号。</p><h3 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h3><p>消息编号，自定义消息。</p><p>本质：就是一个数。</p><h3 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h3><p>消息类型。跟WSASelectEvent一模一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FD_ACCEPT</span><br><span class="line">    有客户端连接，与服务器socket绑定</span><br><span class="line">FD_WRITE</span><br><span class="line">    可以给客户端发信，与客户端socket绑定，会在accept后立即主动产生该信号，可以说明，客户端连接成功，即可随时send</span><br><span class="line">FD_READ</span><br><span class="line">    有客户端发来消息，与客户端socket绑定，可多个属性并列 用 | </span><br><span class="line">FD_CLOSE</span><br><span class="line">    客户端下线了，与客户端socket绑定，包含强制下线，正常下线。</span><br><span class="line">FD_CONNECT</span><br><span class="line">    客户端一方，给服务器绑定这个</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    取消事件监视</span><br><span class="line">    WSAAsyncSelect（.....FD_ACCEPT | FD_READ）;投递多个消息用按位或</span><br><span class="line">    WSAAsyncSelect（...<span class="number">.0</span>,<span class="number">0</span>）;取消消息托管</span><br><span class="line">FD_OOB</span><br><span class="line">   带外数据,一般不使用</span><br><span class="line">FD_QOS  </span><br><span class="line">    套接字服务质量状态发生变化消息通知</span><br><span class="line">    WSAIoctl，得到服务质量信息</span><br><span class="line">     <span class="keyword">char</span> strOut[<span class="number">2048</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD nLen = <span class="number">2048</span>;</span><br><span class="line">WSAIoctl(socketServer, SIO_QOS, <span class="number">0</span>, <span class="number">0</span>, strOut, nLen, &amp;nLen, <span class="literal">NULL</span>, <span class="literal">NULL</span>);   </span><br><span class="line">FD_GROUP_QOS</span><br><span class="line">    windows保留 </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">重叠I/O模型中</span><br><span class="line">FD_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">    想要接收指定目标的路由接口更改通知。</span><br><span class="line">    数据到达对方的所经过的线路改变了，由于是动态优化选择</span><br><span class="line">    要通过此函数WSAIoctl注册之后，才可以</span><br><span class="line">    SIO_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">FD_ADDRESS_ LIST_CHANGE</span><br><span class="line">    想要接收套接字地址族的本地地址列表更改通知。</span><br><span class="line">    要通过此函数WSAIoctl注册之后，才可以有效</span><br><span class="line">    服务器链接了很多客户端，服务器就记录着所有的客户端的地址信 息，就相当于一个列表，发生变化，会得到相关的信号。</span><br><span class="line">    SIO_ADDRESS_ LIST_CHANGE</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UM_ASYNCSELECTMSG WM_USER+1<span class="comment">//这个数以上的数系统还没有使用，这样不会引起冲突</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include&lt;windows.h&gt;//窗口</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SOCKET数组——用于释放</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SOCK_COUNT 1024</span></span><br><span class="line">SOCKET g_sockall[MAX_SOCK_COUNT];</span><br><span class="line"><span class="comment">//记住socket个数</span></span><br><span class="line"><span class="keyword">int</span> g_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPreInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建窗口结构体</span></span><br><span class="line">WNDCLASSEX wc;</span><br><span class="line">wc.cbClsExtra = <span class="number">0</span>;<span class="comment">//窗口结构体额外的一块空间,一般用不到</span></span><br><span class="line">wc.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">wc.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">wc.hbrBackground = <span class="literal">NULL</span>;</span><br><span class="line">wc.hCursor = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIcon = <span class="literal">NULL</span>;</span><br><span class="line">wc.hIconSm = <span class="literal">NULL</span>;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line"></span><br><span class="line">wc.lpfnWndProc = WinBackProc;</span><br><span class="line"></span><br><span class="line">wc.lpszClassName = <span class="string">&quot;mYwinDows&quot;</span>;</span><br><span class="line">wc.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">wc.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册窗口结构体</span></span><br><span class="line">RegisterClassEx(&amp;wc);<span class="comment">//窗口类变量地址</span></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="comment">//窗口句柄</span></span><br><span class="line">HWND hwnd = CreateWindowEx(WS_EX_OVERLAPPEDWINDOW, <span class="string">&quot;mYwinDows&quot;</span>, <span class="string">&quot;WuHu&quot;</span>, WS_OVERLAPPEDWINDOW, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hwnd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示窗口</span></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新窗口</span></span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************************************************************</span></span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WSASYSNOTREADY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;重启下电脑试试，或者检查网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAVERNOTSUPPORTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请更新网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEINPROGRESS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新启动&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEPROCLIM:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请尝试关掉不必要的软件，以为当前网络运行提供充足资源&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (socketServer == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">si</span>;</span></span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//**********************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketServer, hwnd, UM_ASYNCSELECTMSG, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"> closesocket(socketServer);</span><br><span class="line"> WSACleanup();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_sockall[g_count] = socketServer;</span><br><span class="line">g_count++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息循环！-窗口上的任何操作都会产生消息，然后被装进消息队列中。</span></span><br><span class="line"><span class="comment">//只要窗口在，就得不停的在窗口上取消息</span></span><br><span class="line"><span class="comment">//消息结构体——装消息</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))<span class="comment">//点击关闭窗口，GetMessage会返回0，循环退出,两个范围填0——接收所有消息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//翻译消息</span></span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line"><span class="comment">//分发消息，到具体位置分类处理</span></span><br><span class="line">DispatchMessageW(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(g_sockall[i]);</span><br><span class="line">&#125;</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;<span class="comment">//x坐标是左侧竖着的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="comment">//一次取一个</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WinBackProc</span><span class="params">(HWND hwnd, UINT msgID, WPARAM wparaw, LPARAM lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HDC hdc = GetDC(hwnd);</span><br><span class="line"><span class="comment">//分类处理</span></span><br><span class="line"><span class="keyword">switch</span> (msgID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> UM_ASYNCSELECTMSG:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//MessageBox(NULL,L&quot;有信号啦&quot;,L&quot;提示&quot;,MB_OK);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取socket</span></span><br><span class="line">SOCKET sock = (SOCKET)wparaw;</span><br><span class="line"><span class="comment">//获取消息</span></span><br><span class="line"><span class="keyword">if</span> (HIWORD(lparam) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (WSAECONNABORTED == HIWORD(lparam))</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;close&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;close&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="comment">//关闭socket上的消息</span></span><br><span class="line">WSAAsyncSelect(sock, hwnd, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//后两个参数置零就是把这个socket上的消息取消了。</span></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line">closesocket(sock);</span><br><span class="line"><span class="comment">//记录数组中删除该socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sock == g_sockall[i])</span><br><span class="line">&#123;</span><br><span class="line">g_sockall[i] = g_sockall[g_count - <span class="number">1</span>];</span><br><span class="line">g_count--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体消息</span></span><br><span class="line"><span class="keyword">switch</span> (LOWORD(lparam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FD_ACCEPT:</span><br><span class="line">&#123;</span><br><span class="line">TextOut(hdc,<span class="number">0</span>, x, <span class="string">&quot;accept&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;accept&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line">SOCKET socketClient = accept(sock, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//如果是一个无效的SOCKET</span></span><br><span class="line"><span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将客户端投递给消息队列</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAAsyncSelect(socketClient, hwnd, UM_ASYNCSELECTMSG, FD_READ | FD_WRITE | FD_CLOSE))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketClient);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录</span></span><br><span class="line">g_sockall[g_count] = socketClient;</span><br><span class="line">g_count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_READ:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//走read,肯定传过来的是客户端的socket</span></span><br><span class="line"></span><br><span class="line"> TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;read&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;read&quot;</span>));</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == recv(sock, str, <span class="number">1023</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">TextOut(hdc, <span class="number">60</span>, x, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_WRITE:</span><br><span class="line"><span class="comment">//当客户端成功连接上服务器后，他会先后产生两个消息，</span></span><br><span class="line">                <span class="comment">//accept和write,同事件选择模型</span></span><br><span class="line"><span class="comment">//与选择模型逻辑相同，事件选择模型基于事件，异步选择模型基于消息队列</span></span><br><span class="line"><span class="comment">//队列是有序的，理论起来操作更方便一些。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//send也可以写在accept中，以做提示</span></span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;write&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;write&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FD_CLOSE:</span><br><span class="line">TextOut(hdc, <span class="number">0</span>, x, <span class="string">&quot;close&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;close&quot;</span>));</span><br><span class="line">x += <span class="number">15</span>;</span><br><span class="line"><span class="comment">//关闭socket上的消息</span></span><br><span class="line">WSAAsyncSelect(sock, hwnd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//后两个参数置零就是把这个socket上的消息取消了。</span></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line">closesocket(sock);</span><br><span class="line"><span class="comment">//记录数组中删除该socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sock == g_sockall[i])</span><br><span class="line">&#123;</span><br><span class="line">g_sockall[i] = g_sockall[g_count - <span class="number">1</span>];</span><br><span class="line">g_count--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE:<span class="comment">//初始化-只执行一次</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">PostQuitMessage(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReleaseDC(hwnd,hdc);</span><br><span class="line"><span class="keyword">return</span> DefWindowProc(hwnd, msgID, wparaw, lparam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">客户端socket</span><br><span class="line">    (SOCKET)wParam</span><br><span class="line">产生的错误码</span><br><span class="line">    HIWORD(lParam)</span><br><span class="line">具体的消息种类</span><br><span class="line">    LOWORD(lParam)</span><br><span class="line">窗口上打印数据</span><br><span class="line">    textout</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>每个窗口维护一定的消息，然后创建多线程，每个线程一个窗口，每个窗口投递一定数量的客户端。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在一次处理过程中，客户端产生多次send，服务器会产生多次接收消息，第一次接收消息会收完所有信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事件选择模型和异步选择模型是解决select模型中select()同步阻塞的问题的。</p><p>重叠I/O模型和完成端口模型将recv(send)操作变成异步的 ，从而这个网络模型没有阻塞。全都顺利执行下来，且执行效率非常高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步选择模型&quot;&gt;&lt;a href=&quot;#异步选择模型&quot; class=&quot;headerlink&quot; title=&quot;异步选择模型&quot;&gt;&lt;/a&gt;异步选择模型&lt;/h1&gt;&lt;h2 id=&quot;逻辑&quot;&gt;&lt;a href=&quot;#逻辑&quot; class=&quot;headerlink&quot; title=&quot;逻辑&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="网络编程" scheme="http://doraemon2.xyz/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-网络编程" scheme="http://doraemon2.xyz/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【网络编程】事件选择模型</title>
    <link href="http://doraemon2.xyz/2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E4%BA%8B%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/"/>
    <id>http://doraemon2.xyz/2021/09/04/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E4%BA%8B%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-09-04T03:47:05.000Z</published>
    <updated>2021-09-04T03:53:52.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件选择模型"><a href="#事件选择模型" class="headerlink" title="事件选择模型"></a>事件选择模型</h1><h2 id="windows处理用户行为的两种方式"><a href="#windows处理用户行为的两种方式" class="headerlink" title="windows处理用户行为的两种方式"></a>windows处理用户行为的两种方式</h2><h3 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h3><p><strong>核心</strong>：消息队列</p><p><strong>处理过程</strong>：所有的用户操作，比如点鼠标，按键盘，对软件进行的各种操作……等等，所有操作均依次按顺序被记录，装进一个队列。不同的操作对应着不同的编号。</p><p><strong>特点</strong>：消息队列由操作系统维护，用户进行操作，然后把消息读取出来，分类处理。<strong>有先后顺序</strong>。动态的。</p><p><strong>异步选择模型就是基于这个消息的</strong>。</p><h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3><p><strong>核心</strong>：事件集合</p><p><strong>处理过程</strong>:根据需求我们为用户的特定操作绑定一个事件，事件由我们自己调用API创建，需要多少创建多少。</p><p>将时间投递给系统，系统就帮我们监视着，所以不能无限创建，太多了系统运行就卡了。</p><p>如果操作发生了，比如用户按鼠标了，那么对应的事件就会被置成有信号，也就是类似1变2，用个数来标记。</p><p>直接获取到有信号的时间进行处理。 </p><p><strong>特点</strong>：所有时间都是咱们自己定义的，系统只是帮咱们标记有无信号。<strong>无序</strong>。</p><p><strong>事件选择模型</strong>，就是应用这个。</p><h2 id="事件选择"><a href="#事件选择" class="headerlink" title="事件选择"></a>事件选择</h2><p>整体类似于select</p><ol><li><p>创建一个事件对象(变量)，<strong>WSACreateEvent</strong></p></li><li><p>为每一个事件对象绑定socket以及操作accept,read,close…..</p><p>投递给系统让其监管，<strong>WSAEventSelect</strong></p></li><li><p>查看事件是否有信号，<strong>WSAWaitForMultipleEvents</strong></p></li><li><p>有信号就分类处理，<strong>WSAEnumNetworkEvents</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网路头文件 网络库</span><br><span class="line">打开网络库</span><br><span class="line">    校验版本</span><br><span class="line">    创建SOCKET</span><br><span class="line">    绑定地址与端口</span><br><span class="line">    开始监听 </span><br><span class="line">    </span><br><span class="line">    事件选择</span><br></pre></td></tr></table></figure><h3 id="创建一个事件对象"><a href="#创建一个事件对象" class="headerlink" title="创建一个事件对象"></a>创建一个事件对象</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WSAEVENT WSAAPI <span class="title">WSACreateEvent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSAEVENT eventServer = WSACreateEvent();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">成功-返回一个事件</span><br><span class="line">失败-返回WSA_INVALID_EVENT(无效的事件对象) </span><br><span class="line">    <span class="keyword">if</span> (eventServer == WSA_INVALID_EVENT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是定义了一个事件类型。</p><p>HANDLE(void *通用类型指针),句柄，句柄的本质是ID,内核对象，唯一的标识符。</p><p><strong>内核对象</strong>：<strong>内核对象是系统提供的用户模式下代码与内核模式下代码进行交互的基本接口(百度百科)。</strong></p><p><strong>当调用一个用于创建内核对象的函数时，该函数就返回一个用于标识该对象的**</strong><a href="https://baike.baidu.com/item/%E5%8F%A5%E6%9F%84">句柄</a>**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">内核对象</span><br><span class="line">    由系统在内核申请</span><br><span class="line">    由操作系统访问</span><br><span class="line">    我们不能定位其内容，也不能修改 </span><br><span class="line">    <span class="keyword">void</span>* 通用类型指针</span><br><span class="line">    对内核的保护，对规则的保护，从而使操作系统有序的平稳的，</span><br><span class="line">    有效的运行，而不会随便出问题</span><br><span class="line">    调用函数创建，调用函数释放</span><br><span class="line">    如果我们没有调用释放，那么他可能就一直存在于内核，</span><br><span class="line">    造成内核内存泄漏， 这种只能重启电脑</span><br><span class="line">    内核对象有哪些 socket Kernel Objects</span><br></pre></td></tr></table></figure><h3 id="关闭-释放事件句柄"><a href="#关闭-释放事件句柄" class="headerlink" title="关闭/释放事件句柄"></a>关闭/释放事件句柄</h3><p>不用就要释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSACloseEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSACloseEvent(eventServer);</span><br></pre></td></tr></table></figure><h3 id="指定事件主动置成无信号的"><a href="#指定事件主动置成无信号的" class="headerlink" title="指定事件主动置成无信号的"></a>指定事件主动置成无信号的</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSAResetEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="指定事件主动置成有信号的"><a href="#指定事件主动置成有信号的" class="headerlink" title="指定事件主动置成有信号的"></a>指定事件主动置成有信号的</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WSAAPI WSASetEvent</span><br><span class="line">(</span><br><span class="line">  WSAEVENT hEvent</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="绑定并投递"><a href="#绑定并投递" class="headerlink" title="绑定并投递"></a>绑定并投递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">WSAEventSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">WSAEVENT hEventObject,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> INetworkEvents</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>给事件绑上socket与操作码，并投递给操作系统。</p><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><p>被绑定的socket，最终每个socket都会被绑定一个事件</p><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><p>事件对象，逻辑，就是将参数1和参数2绑定在一起</p><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p>具体事件</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FD_ACCEPT</span><br><span class="line">    有客户端链接，与服务器socket绑定</span><br><span class="line">FD_READ</span><br><span class="line">    有客户端发来消息，与客户端socket绑定，可多个属性并列使用。</span><br><span class="line">FD_CLOSE</span><br><span class="line">    客户端下线，与客户端绑定，包含强制下线</span><br><span class="line">FD_WRITE</span><br><span class="line">    可以给客户端发信，与客户端socket绑定，会在accept之后立即主动产生该信号。可以说明，客户端连接成功。即可随时send</span><br><span class="line">FD_CONNECT</span><br><span class="line">    用在客户端上，给服务器绑定这个。</span><br><span class="line"><span class="number">0</span></span><br><span class="line">    取消事件绑定。</span><br><span class="line">FD_OOB </span><br><span class="line">    带外数据，一般不使用。</span><br><span class="line">FD_QOS </span><br><span class="line">   套接字服务质量状态发生变化。动态变化。</span><br><span class="line">FD_GROUP_QOS</span><br><span class="line">    保留——还没有对其赋值具体意义。    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重叠I/O模型中</span><br><span class="line">    FD_ROUTING_ INTERFACE_CHANGE</span><br><span class="line">    </span><br><span class="line">  FD_ADDRESS_ LIST_CHANGE</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br><span class="line"> <span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketServer, SetEvent, FD_ACCEPT);)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放事件句柄</span></span><br><span class="line">WSACloseEvent(eventServer);</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="询问事件"><a href="#询问事件" class="headerlink" title="询问事件"></a>询问事件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WSAAPI <span class="title">WSAWaitForMultipleEvents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD          cEvents,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> WSAEVENT *lphEvents,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL           fWaitAll,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD          dwTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL           fAlertable</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>获取发生信号的事件。</p><h4 id="参数1-1"><a href="#参数1-1" class="headerlink" title="参数1"></a>参数1</h4><p>事件个数，定义事件列表(数组)个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最大<span class="number">64</span>  WSA_MAXIMUM_WAIT_EVENTS</span><br></pre></td></tr></table></figure><p>可以变大，不像select模型，直接就能变大，因为select模型本身就是个数组，直接遍历即可， 比较直接，而事件选择是按照异步来投放，由系统进行管理，咱们就不能随便修改了，要按照规则来。</p><h4 id="参数2-1"><a href="#参数2-1" class="headerlink" title="参数2"></a>参数2</h4><p>事件列表。</p><h4 id="参数3-1"><a href="#参数3-1" class="headerlink" title="参数3"></a>参数3</h4><p>事件等待方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br><span class="line">    所有事件都产生信号，才返回。</span><br><span class="line">FALSE</span><br><span class="line">    任何一个事件产生信号，立即返回。</span><br><span class="line">   返回值减去WSA_WAIT_EVENT_0表示事件对象的索引，其状态导致函数返回。</span><br><span class="line">     如果在调用期间发出多个事件对象的信号，则这是信号事件对象的数组索引，其中所有信号事件对象的索引值最小。</span><br></pre></td></tr></table></figure><h4 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h4><p>超时间隔，以毫秒为单位。与select参数5意义相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> 等待<span class="number">123</span>秒，超时返回WSA_WAIT_TIMEOUT</span><br><span class="line"><span class="number">0</span>检查事件对象的状态并立即返回。不管有没有信号 </span><br><span class="line">WSA_INFINITE 等待，直到事件发生。</span><br></pre></td></tr></table></figure><h4 id="参数5"><a href="#参数5" class="headerlink" title="参数5"></a>参数5</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TRUE 重叠I/O模型使用</span><br><span class="line">FALSE </span><br></pre></td></tr></table></figure><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">数组下标的运算值，参数<span class="number">3</span>为TRUE 所有时间均有信号</span><br><span class="line">参数<span class="number">3</span>位FALSE 返回值减去WSA_WAIT_EVENT_0==数组中事件的下标</span><br><span class="line">WSA_WAIT_IO_COMPLETION 参数<span class="number">5</span>为TRUE，才会返回这个值WSA_WAIT_TIMEOUT 超时了,<span class="keyword">continue</span>即可。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//询问</span></span><br><span class="line">DWORD nRes = WSAWaitForMultipleEvents(esSet.count, esSet.eventall, FALSE,WSA_INFINITE, FALSE);</span><br><span class="line"><span class="keyword">if</span> (nRes == WSA_WAIT_FAILED)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码%d\n&quot;</span>, WSAGetLastError());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//超时使用</span></span><br><span class="line"><span class="comment">/*if (WSA_WAIT_TIMEOUT == nRes)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">continue;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD nIndex = nRes - WSA_WAIT_EVENT_0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列举事件"><a href="#列举事件" class="headerlink" title="列举事件"></a>列举事件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">WSAEnumNetworkEvents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  SOCKET             s,</span></span></span><br><span class="line"><span class="function"><span class="params">  WSAEVENT           hEventObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPWSANETWORKEVENTS lpNetworkEvents</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>获取事件类型，并将事件上的信号重置，accept,recv,close等</p><p><strong>例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSANETWORKEVENTS NetworkEvents;</span><br><span class="line"><span class="keyword">if</span>(SOCKET_ERROR==WSAEnumNetworkEvents(esSet.sockall[nIndex], esSet.eventall[nIndex], &amp;NetworkEvents))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数1-2"><a href="#参数1-2" class="headerlink" title="参数1"></a>参数1</h4><p>对应的socket</p><h4 id="参数2-2"><a href="#参数2-2" class="headerlink" title="参数2"></a>参数2</h4><p>对应的事件</p><h4 id="参数3-2"><a href="#参数3-2" class="headerlink" title="参数3"></a>参数3</h4><p>触发的事件类型在这里装着。是一个结构体指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">WSANETWORKEVENTS</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">  <span class="keyword">long</span> lNetworkEvents;</span><br><span class="line">    <span class="comment">//具体操作，一个信号可能包含两个信息，以按位或的形式存在</span></span><br><span class="line">  <span class="keyword">int</span>  iErrorCode[FD_MAX_EVENTS];</span><br><span class="line">    <span class="comment">//错误码数组，FD_ACCEPT事件错误码在FD_ACCEPT_BIT下标里</span></span><br><span class="line">    <span class="comment">//没有错误，对应的就是0</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">成功——返回<span class="number">0</span></span><br><span class="line">失败——返回SOCKET_ERROR</span><br></pre></td></tr></table></figure><h3 id="事件分类处理逻辑"><a href="#事件分类处理逻辑" class="headerlink" title="事件分类处理逻辑"></a>事件分类处理逻辑</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lpNetworkEvents-&gt;lNetworkEvents &amp; FD_ACCEPT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (lpNetworkEvents-&gt;iErrorCode[FD_ACCEPT_BIT] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接受链接</span></span><br><span class="line">       <span class="comment">//创建事件</span></span><br><span class="line">       <span class="comment">//投放事件</span></span><br><span class="line">       <span class="comment">//元素增加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>不行有大bug</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> 不太行，有小bug</span><br></pre></td></tr></table></figure><h2 id="有序处理"><a href="#有序处理" class="headerlink" title="有序处理"></a>有序处理</h2><p>优化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = Index; i &lt; EventTotal; i++)</span><br><span class="line"> &#123;</span><br><span class="line">        Index = WSAWaitForMultipleEvents(<span class="number">1</span>, &amp;EventArray[i], TRUE, <span class="number">1000</span>, FALSE);</span><br><span class="line">        <span class="keyword">if</span> ((Index != WSA_WAIT_FAILED) &amp;&amp; (Index != WSA_WAIT_TIMEOUT)) </span><br><span class="line">        &#123;</span><br><span class="line">            WSAEnumNetworkEvents(SocketArray[i], EventArray[i], &amp;NetworkEvents);</span><br><span class="line">            <span class="comment">//分类处理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加事件数量"><a href="#增加事件数量" class="headerlink" title="增加事件数量"></a>增加事件数量</h2><p>当前代码是一组一组投递，一组是64个，由WSAWaitForMultipleEvents这个函数决定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加事件数量————一个一个投，一个大数组就行了，</span><br><span class="line">       ————一组一组投，单线程，一组一组顺序处理就好了。</span><br><span class="line">    创建多线程，每个线程处理一个事件表，最大是<span class="number">64</span></span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">//#define FD_SETSIZE 128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd_es_set</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> count;</span><br><span class="line">SOCKET sockall[WSA_MAXIMUM_WAIT_EVENTS];</span><br><span class="line">WSAEVENT evnetall[WSA_MAXIMUM_WAIT_EVENTS];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd_es_set</span> <span class="title">esSet</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">fun</span><span class="params">(DWORD dwCtrlType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwCtrlType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CTRL_CLOSE_EVENT:</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; esSet.count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(esSet.sockall[i]);</span><br><span class="line">WSACloseEvent(esSet.evnetall[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SetConsoleCtrlHandler(fun, TRUE);</span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">//2.1  //22</span></span><br><span class="line"><span class="comment">//int a = *((char*)&amp;wdVersion);</span></span><br><span class="line"><span class="comment">//int b = *((char*)&amp;wdVersion+1);</span></span><br><span class="line">WSADATA wdScokMsg;</span><br><span class="line"><span class="comment">//LPWSADATA lpw = malloc(sizeof(WSADATA));// WSADATA*</span></span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdScokMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WSASYSNOTREADY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;重启下电脑试试，或者检查网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAVERNOTSUPPORTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请更新网络库&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEINPROGRESS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新启动&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEPROCLIM:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请尝试关掉不必要的软件，以为当前网络运行提供充足资源&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> != HIBYTE(wdScokMsg.wVersion) || <span class="number">2</span> != LOBYTE(wdScokMsg.wVersion))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">//int a = WSAGetLastError();</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">si</span>;</span></span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="comment">//int a = ~0;</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件</span></span><br><span class="line">WSAEVENT eventServer = WSACreateEvent();</span><br><span class="line"><span class="keyword">if</span> (WSA_INVALID_EVENT == eventServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketServer, eventServer, FD_ACCEPT))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放事件句柄</span></span><br><span class="line">WSACloseEvent(eventServer);</span><br><span class="line"><span class="comment">//释放所有socket</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装进去</span></span><br><span class="line">esSet.evnetall[esSet.count] = eventServer;</span><br><span class="line">esSet.sockall[esSet.count] = socketServer;</span><br><span class="line">esSet.count++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//询问</span></span><br><span class="line">DWORD nRes = WSAWaitForMultipleEvents(esSet.count, esSet.evnetall, FALSE, WSA_INFINITE, FALSE);</span><br><span class="line"><span class="keyword">if</span> (WSA_WAIT_FAILED == nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码：%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超时使用</span></span><br><span class="line"><span class="comment">//if (WSA_WAIT_TIMEOUT == nRes)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">DWORD nIndex = nRes - WSA_WAIT_EVENT_0;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到下标对应的具体操作</span></span><br><span class="line">WSANETWORKEVENTS NetworkEvents;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEnumNetworkEvents(esSet.sockall[nIndex], esSet.evnetall[nIndex], &amp;NetworkEvents))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;错误码：%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_ACCEPT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_ACCEPT_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正常处理</span></span><br><span class="line">SOCKET socketClient = accept(esSet.sockall[nIndex], <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketClient)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事件对象</span></span><br><span class="line">WSAEVENT wsaClientEvent = WSACreateEvent();</span><br><span class="line"><span class="keyword">if</span> (WSA_INVALID_EVENT == wsaClientEvent)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketClient);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//投递给系统</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == WSAEventSelect(socketClient, wsaClientEvent, FD_READ | FD_CLOSE | FD_WRITE))</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACloseEvent(wsaClientEvent);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装进结构体</span></span><br><span class="line">esSet.sockall[esSet.count] = socketClient;</span><br><span class="line">esSet.evnetall[esSet.count] = wsaClientEvent;</span><br><span class="line">esSet.count++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept event\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_WRITE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_WRITE_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == send(esSet.sockall[nIndex], <span class="string">&quot;connect success&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;connect success&quot;</span>), <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send faild, error code:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write event\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error code:%d\n&quot;</span>, NetworkEvents.iErrorCode[FD_WRITE_BIT]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_READ)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == NetworkEvents.iErrorCode[FD_READ_BIT])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> strRecv[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == recv(esSet.sockall[nIndex], strRecv, <span class="number">1499</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv faild, error code:%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv data: %s\n&quot;</span>, strRecv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error code:%d\n&quot;</span>, NetworkEvents.iErrorCode[FD_READ_BIT]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NetworkEvents.lNetworkEvents &amp; FD_CLOSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (0 == NetworkEvents.iErrorCode[FD_CLOSE_BIT])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">WSAECONNABORTED;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client close\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client force out: %d\n&quot;</span>, NetworkEvents.iErrorCode[FD_CLOSE_BIT]);</span><br><span class="line"><span class="comment">//清理下线的客户端 套接字  事件</span></span><br><span class="line"><span class="comment">//套接字</span></span><br><span class="line">closesocket(esSet.sockall[nIndex]);</span><br><span class="line">esSet.sockall[nIndex] = esSet.sockall[esSet.count - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line">WSACloseEvent(esSet.evnetall[nIndex]);</span><br><span class="line">esSet.evnetall[nIndex] = esSet.evnetall[esSet.count - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数量减一</span></span><br><span class="line">esSet.count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; esSet.count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(esSet.sockall[i]);</span><br><span class="line">WSACloseEvent(esSet.evnetall[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比select模型"><a href="#对比select模型" class="headerlink" title="对比select模型"></a>对比select模型</h2><p>事件选择模型——异步</p><p>select模型——同步</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件选择模型&quot;&gt;&lt;a href=&quot;#事件选择模型&quot; class=&quot;headerlink&quot; title=&quot;事件选择模型&quot;&gt;&lt;/a&gt;事件选择模型&lt;/h1&gt;&lt;h2 id=&quot;windows处理用户行为的两种方式&quot;&gt;&lt;a href=&quot;#windows处理用户行为的两种方式&quot;</summary>
      
    
    
    
    <category term="网络编程" scheme="http://doraemon2.xyz/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-网络编程" scheme="http://doraemon2.xyz/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【网络编程】select模型</title>
    <link href="http://doraemon2.xyz/2021/08/28/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91select%E6%A8%A1%E5%9E%8B/"/>
    <id>http://doraemon2.xyz/2021/08/28/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91select%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-08-28T06:40:30.000Z</published>
    <updated>2021-08-28T06:42:42.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="select模型"><a href="#select模型" class="headerlink" title="select模型"></a>select模型</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>解决基本c/s模型中，accept，rcev傻等的问题。</p><ul><li>傻等阻塞</li><li>执行阻塞 send recv accept 在执行的复制粘贴的过程中都是阻塞的。</li></ul><p>(网络模型就是解决阻塞问题的)</p></li><li><p>实现多个客户端链接，与多个客户端分别通信。</p></li><li><p>用于服务器，因为客户端就一个socket。</p></li></ol><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网络头文件 网络库</span><br><span class="line">打开网络库</span><br><span class="line">校验版本</span><br><span class="line">创建socket</span><br><span class="line">绑定地址与端口</span><br><span class="line">开始监听</span><br><span class="line"> </span><br><span class="line">select    </span><br></pre></td></tr></table></figure><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><ol><li>每个客户端都有socket,服务器也有自己的socket,将所有的socket装进一个数据结构里，即数组。</li><li>通过select函数，遍历1中的socket数组，当某个socket有相应，select就会通过其参数/返回值反馈出来。</li><li>处理。如果见得到的是服务器socket，那就有客户端链接，调用accept。如果检测到客户端socket,那就是客户端请求通信，调用send或者recv。</li></ol><h3 id="定义一个装客户端的socket结构体"><a href="#定义一个装客户端的socket结构体" class="headerlink" title="定义一个装客户端的socket结构体"></a>定义一个装客户端的socket结构体</h3><h4 id="fd-set"><a href="#fd-set" class="headerlink" title="fd_set"></a>fd_set</h4><p>是网络库中定义好的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">fd_set</span> &#123;</span></span><br><span class="line">    <span class="comment">//几个有效的</span></span><br><span class="line">        u_int fd_count;               <span class="comment">/* how many are SET? */</span></span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">    SOCKET  fd_array[FD_SETSIZE];   <span class="comment">/* an array of SOCKETs */</span></span><br><span class="line">&#125; fd_set;</span><br><span class="line"></span><br><span class="line">默认FD_SERSIZE 是<span class="number">64</span>，重新宏定义要写在网络库前。</span><br><span class="line">尽量不要太大，大用户量应该用更高级的网络模型。</span><br><span class="line">select模型应用就是小用户量访问，几十几百，简单方便。</span><br><span class="line">    </span><br><span class="line">    fd_set socketClient;</span><br></pre></td></tr></table></figure><h4 id="四个参数宏"><a href="#四个参数宏" class="headerlink" title="四个参数宏"></a>四个参数宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FD_ZERO</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_ZERO(set) (((fd_set FAR *)(set))-&gt;fd_count=0)</span></span><br><span class="line">    将定义好的集合清零</span><br><span class="line">    </span><br><span class="line">    FD_ZERO(&amp;socketClient);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FD_SET </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_SET(fd, set) do &#123; \</span></span><br><span class="line">    u_int __i; \</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count; __i++) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] == (fd)) &#123; \</span><br><span class="line">            <span class="keyword">break</span>; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">    <span class="keyword">if</span> (__i == ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count &lt; FD_SETSIZE) &#123; \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] = (fd); \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count++; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">   向集合中添加socket  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FD_CLR</span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> FD_CLR(fd, set) do &#123; \</span></span><br><span class="line">    u_int __i; \</span><br><span class="line">    <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count ; __i++) &#123; \</span><br><span class="line">        <span class="keyword">if</span> (((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] == fd) &#123; \</span><br><span class="line">            <span class="keyword">while</span> (__i &lt; ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count<span class="number">-1</span>) &#123; \</span><br><span class="line">                ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i] = \</span><br><span class="line">                    ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_array[__i+<span class="number">1</span>]; \</span><br><span class="line">                __i++; \</span><br><span class="line">            &#125; \</span><br><span class="line">            ((fd_set FAR *)(<span class="built_in">set</span>))-&gt;fd_count--; \</span><br><span class="line">            <span class="keyword">break</span>; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    从集合中删除某个元素，要手动释放，closesocket(socketServer)</span><br><span class="line">    同链表删除。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FD_ISSET</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> FD_ISSET(fd, set) __WSAFDIsSet((SOCKET)(fd), (fd_set FAR *)(set))</span></span><br><span class="line">    判断集合中是否有某个元素</span><br><span class="line">    有-返回非<span class="number">0</span></span><br><span class="line">    没有-返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">select</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> nfds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *readfds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *writefds,</span></span></span><br><span class="line"><span class="function"><span class="params">    fd_set *exceptfds,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>监视socket集合，如果某个socket发生事件，(链接或者收发数据)，通过返回值以及参数告诉我们。</p><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><p>Ignored忽略，填0，仅为了兼容(向下兼容性)Berkeley sockets。</p><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><p>检查是否有<strong>可读</strong>的scoket。(是否有消息recv/accept/)</p><p>即客户端发来消息了，该socket就会被设置。</p><p>初始化所有的socket,通过select投放给系统，系统将有事件发生的socket再复制回来，调用后，这个参数就只剩下有请求的socket。</p><p>返回有响应的socket。用个中间变量接收。</p><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p>检查是否有<strong>可写</strong>的socket。</p><p>从头到尾遍历出来。</p><p>即，使可以给哪些客户端套接字发消息，即send,只要链接成功建立起来了，该客户端套接字就是可写的。</p><p>初始化所有的socket,通过select投放给系统，系统将可以写的socket在复制回来，调用后，这个参数就是装着可以被send数据的客户端socket。</p><h4 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h4><p>检查套接字上的异常错误，用法同参数23。将所有的socket投放进去。</p><p>得到异常套接字上的具体错误码。</p><p>getsockopt(socket,SOL_SOCKET,SO_ERROR,buf,buflen);</p><h4 id="参数5"><a href="#参数5" class="headerlink" title="参数5"></a>参数5</h4><p>最大等待时间，比如当客户端没有请求时，那么select函数可以等一会儿，一段时间过后，还没有，就继续执行select下面的语句，如果有了，就立刻执行下面的语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TIMEVAL</span><br><span class="line">    tv_sec 秒</span><br><span class="line">    tv_usec 微秒</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span>非阻塞状态，立刻返回</span><br><span class="line">    <span class="number">3</span> <span class="number">4</span>那就再无客户端相应的情况下等待<span class="number">3</span>秒<span class="number">4</span>微秒</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">    select完全阻塞，知道客户端有反应，我才继续</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> 客户端在等待时间内没有反应  处理——<span class="keyword">continue</span>&gt;<span class="number">0</span> 有客户端请求交流了SOCKET_ERROR 发生了错误    得到错误码WSAGetLaseError()</span><br></pre></td></tr></table></figure><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket集合</span><br><span class="line">    socket判断有没有相应的</span><br><span class="line">    返回<span class="number">0</span>，没有，继续挑</span><br><span class="line">    返回&gt;<span class="number">0</span>，有相应</span><br><span class="line">    可读的accept</span><br><span class="line">      recv</span><br><span class="line">    可写的send</span><br><span class="line">    异常的getsockopt</span><br><span class="line">    SOCK_ERROR</span><br></pre></td></tr></table></figure><p>select是阻塞的。</p><p>不等待——执行阻塞</p><p>半等待——执行阻塞+软阻塞</p><p>全等待——执行阻塞+硬阻塞 死等</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>(仅熟悉流程)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//装所有的socket</span></span><br><span class="line">fd_set allSocket;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">fun</span><span class="params">(DWORD dwCtrlType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwCtrlType)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> CTRL_CLOSE_EVENT:</span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; allSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(allSocket.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line">WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//投递一个监视</span></span><br><span class="line"><span class="comment">//关闭事件</span></span><br><span class="line"><span class="comment">//控制台点叉退出</span></span><br><span class="line">SetConsoleCtrlHandler(fun, TRUE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (socketServer == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建服务器socket失败&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绑定错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清零</span></span><br><span class="line">FD_ZERO(&amp;allSocket);</span><br><span class="line"><span class="comment">//把服务器装进去</span></span><br><span class="line">FD_SET(socketServer, &amp;allSocket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//可读</span></span><br><span class="line">fd_set readSocket = allSocket;</span><br><span class="line"><span class="comment">//可写</span></span><br><span class="line">fd_set writeSocket = allSocket;</span><br><span class="line">FD_CLR(socketServer, &amp;writeSocket);</span><br><span class="line">fd_set errorSocket = allSocket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间段</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">st</span>;</span></span><br><span class="line">st.tv_sec = <span class="number">3</span>;</span><br><span class="line">st.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//不用哪个哪个位置就写NULL</span></span><br><span class="line"><span class="keyword">int</span> nRes = select(<span class="number">0</span>, &amp;readSocket, &amp;writeSocket, &amp;errorSocket, &amp;st);</span><br><span class="line"><span class="keyword">if</span> (nRes == <span class="number">0</span>)<span class="comment">//没有响应的socket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nRes &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; errorSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == getsockopt(errorSocket.fd_array[i], SOL_SOCKET, SO_ERROR,str,&amp;len))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法得到错误信息\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(u_int i = <span class="number">0</span>;i&lt;writeSocket.fd_count;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;服务器%d %d:可写\n&quot;, socketServer, writeSocket.fd_array[i]);</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == send(writeSocket.fd_array[i], <span class="string">&quot;ok&quot;</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正常 大于0 socket_error 下线0</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有响应</span></span><br><span class="line"><span class="comment">//遍历socket</span></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; readSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (readSocket.fd_array[i] == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有链接(响应)-accept</span></span><br><span class="line">SOCKET socketClient = accept(socketServer, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (socketClient == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//链接出错</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">FD_SET(socketClient, &amp;allSocket);</span><br><span class="line"><span class="comment">//SEND</span></span><br><span class="line">send(readSocket.fd_array[i], <span class="string">&quot;服务器链接成功!&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;服务器链接成功&quot;</span>),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> strBuf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//客户端socket</span></span><br><span class="line"><span class="keyword">int</span> nRecv = recv(readSocket.fd_array[i], strBuf, <span class="number">1500</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (nRecv == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//客户端下线了</span></span><br><span class="line"><span class="comment">//从集合中去掉</span></span><br><span class="line">SOCKET socketTemp = readSocket.fd_array[i];</span><br><span class="line">FD_CLR(readSocket.fd_array[i],&amp;allSocket);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketTemp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nRecv &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收到了消息</span></span><br><span class="line"><span class="built_in">printf</span>(strBuf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//强制下线10054</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//出错了SOCK_ERROR</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10054</span>:</span><br><span class="line">&#123;</span><br><span class="line">SOCKET socketTemp = readSocket.fd_array[i];</span><br><span class="line">FD_CLR(readSocket.fd_array[i], &amp;allSocket);</span><br><span class="line">closesocket(socketTemp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//发生错误了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放socket集合</span></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; allSocket.fd_count; i++)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(allSocket.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WSACleanup();<span class="comment">//正常关闭</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;select模型&quot;&gt;&lt;a href=&quot;#select模型&quot; class=&quot;headerlink&quot; title=&quot;select模型&quot;&gt;&lt;/a&gt;select模型&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="网络编程" scheme="http://doraemon2.xyz/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-网络编程" scheme="http://doraemon2.xyz/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【网络编程】基于TCP/IP协议的C/S模型</title>
    <link href="http://doraemon2.xyz/2021/08/26/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%9F%BA%E4%BA%8ETCPIP%E5%8D%8F%E8%AE%AE%E7%9A%84CS%E6%A8%A1%E5%9E%8B/"/>
    <id>http://doraemon2.xyz/2021/08/26/%E3%80%90%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E3%80%91%E5%9F%BA%E4%BA%8ETCPIP%E5%8D%8F%E8%AE%AE%E7%9A%84CS%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-08-26T07:45:06.000Z</published>
    <updated>2021-08-29T10:22:00.186Z</updated>
    
    <content type="html"><![CDATA[<p>相关视频——<a href="https://www.bilibili.com/video/BV1cb411w7sZ">C3程序猿-windows网络编程：第一部分tcp/ip</a></p><h1 id="基于TCP-IP协议的C-S模型"><a href="#基于TCP-IP协议的C-S模型" class="headerlink" title="基于TCP/IP协议的C/S模型"></a>基于TCP/IP协议的C/S模型</h1><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p><strong>全称</strong>——Transmission Control Protocol / Internet Protocol</p><p><strong>重要性</strong>——TCP/IP协议是今天互联网的基石，没有这个就上不了网</p><p><strong>概念</strong>——TCP/IP协议族(簇，组，体系），并不是TCP协议和IP协议的总称，指的是整个网络传输体系。而TCP协议和IP协议就是单单的两个协议。</p><p><strong>特点</strong>——<strong>面向可连接的，可靠的，基于数据报的传输协议层</strong>。</p><hr><p>UDP/IP协议——面向非连接的，不可靠的，基于数据报的传输层协议。</p><hr><h2 id="Client-Server客户端-服务器模型"><a href="#Client-Server客户端-服务器模型" class="headerlink" title="Client/Server客户端/服务器模型"></a>Client/Server客户端/服务器模型</h2><p>C/S模型其实是概念层面的，实现层面可以是基于任何的网络协议。</p><p>常见的还有B/S模型——浏览器/服务器模型，基于http/https协议的</p><h2 id="套接字编程与socket编程"><a href="#套接字编程与socket编程" class="headerlink" title="套接字编程与socket编程"></a>套接字编程与socket编程</h2><p>socket中文——套接字</p><p>统称网络编程</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>局域网</li><li>广域网——内网穿透，内网转发</li></ul><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="网络头文件-amp-网络库"><a href="#网络头文件-amp-网络库" class="headerlink" title="网络头文件&amp;网络库"></a>网络头文件&amp;网络库</h3><p>是最底层的网络函数，QT、MFC、WPF等封装好的网络库都是对这些最本质的网络函数的二次封装。</p><p><strong>不区分大小写(windows)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="comment">//第二版的网络库，是一版的升级优化版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">//.lib静态库后缀，是库文件，将.cpp文件编译为二进制文件</span></span><br><span class="line"><span class="comment">//好处:使用时无需编译，直接使用，解决时间</span></span><br><span class="line"><span class="comment">//32位编译环境和64位编译环境都用这个，没有ws2_64</span></span><br></pre></td></tr></table></figure><h3 id="打开网络库"><a href="#打开网络库" class="headerlink" title="打开网络库"></a>打开网络库</h3><p><strong>功能</strong>：</p><p>打开网络库/启动网络库，启动了这个库，库里的函数才能使用，功能才能实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WSAStarp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">WORD wVersionRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">LPWSADATA lpWSAData</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;  </span><br></pre></td></tr></table></figure><h4 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">1</span>-使用哪个版本的网络库-WORD-无符号<span class="keyword">short</span></span><br><span class="line">    WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//主版本号2存在低数据位，副版本号1存在高数据位</span></span><br></pre></td></tr></table></figure><hr><p>（<strong>参数前面有lp传地址</strong>）</p><hr><h4 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">参数<span class="number">2</span>-创建一个结构体，传递给系统，系统将信息放到结构体中，函数调用之后在外面通过结构体查看系统传递给我们的信息。</span><br><span class="line">********************************************************************************</span><br><span class="line">    WSADATA wdSockMsg;</span><br><span class="line">********************************************************************************</span><br><span class="line">其中包括</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> &#123;</span></span><br><span class="line">        WORD                    wVersion;<span class="comment">//我们要使用的版本</span></span><br><span class="line">        WORD                    wHighVersion;<span class="comment">//系统能提供给我们的最高的版本</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span>          iMaxSockets;<span class="comment">//返回可用的socket数量，2版本之后就没用了</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span>          iMaxUdpDg;<span class="comment">//UDP数据报信息的大小，2版本之后就没用了</span></span><br><span class="line">        <span class="keyword">char</span> FAR *              lpVendorInfo;<span class="comment">//供应上特定的信息，2版本呢之后就没用 了</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];<span class="comment">//当前库的描述信息，2.0是第二版的意思</span></span><br><span class="line">        <span class="keyword">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>                    szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>                    szSystemStatus[WSASYS_STATUS_LEN+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">********************************************************************************</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">********************************************************************************</span><br><span class="line">WSAStartup(wdVersion,&amp;wdSockMsg);</span><br><span class="line">********************************************************************************</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当输入的版本不存在</span><br><span class="line">    例如:</span><br><span class="line">    <span class="number">1.3</span> <span class="number">2.3</span>——有主版本，没有副版本 得到主版本的的最大副版本 <span class="number">1.1</span> <span class="number">2.2</span>并使用</span><br><span class="line">    <span class="number">3.1</span> <span class="number">3.3</span>——超过最大版 本号，使用系统能提供的最大版本<span class="number">2.2</span></span><br><span class="line">    <span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.3</span>——主版本是<span class="number">0</span>，不支持请求的套接字版本</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p><strong>每一种错误有它唯一的对应码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回值-成功返回<span class="number">0</span></span><br><span class="line"> -失败返回对应错误的宏</span><br><span class="line">    WSASYSNOTREADY   <span class="number">10091</span> </span><br><span class="line">    底层网络子系统尚未准备好进行网络通信。                      </span><br><span class="line">    系统配置问题，重启下电脑，检查ws2_32库是否存在，或者是否在环境配置目录下</span><br><span class="line">WSAVERNOTSUPPORTED <span class="number">10092</span> </span><br><span class="line"> 此特定Windows套接字实现不提供所请求的Windows套接字支持版本。      </span><br><span class="line">   要使用的版本不支持</span><br><span class="line">WSAEPROCLIM     <span class="number">10067</span>  </span><br><span class="line">    已达到对Windows套接字实现支持的任务数量的限制。                                 Windows Sockets实现可能限制同时使用它的应用程序的数量</span><br><span class="line">WSAEINPROGRESS <span class="number">10036</span>          </span><br><span class="line">   正在阻止Windows Sockets <span class="number">1.1</span>操作。                                                 当前函数运行期间，由于某些原因造成阻塞，会返回在这个错误码，其他操作均禁止</span><br><span class="line">WSAEFAULT       <span class="number">10014</span>          </span><br><span class="line">    lpWSAData参数不是有效指针。                                                                 参数写错了  </span><br></pre></td></tr></table></figure><h3 id="校验版本"><a href="#校验版本" class="headerlink" title="校验版本"></a>校验版本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span></span><br><span class="line">    HIBYTE是高位-副版本</span><br><span class="line">    LOBYTE是低位-主版本</span><br><span class="line">   例如:只要有一个不是<span class="number">2</span>，说明系统不支持我们要的<span class="number">2.2</span>版本</span><br><span class="line"></span><br><span class="line">       前面为主版本，后面为副版本</span><br><span class="line">       要打开<span class="number">2.1</span></span><br><span class="line">HIBYTE(wdSockMsg.wVersion) != <span class="number">1</span> &amp;&amp; LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span></span><br><span class="line">       </span><br><span class="line">       如果版本不对</span><br><span class="line">       WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET <span class="title">socket</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> af,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> protocol</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>例如</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOCKET socketServer = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);</span><br></pre></td></tr></table></figure><h4 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a><strong>什么是socket</strong></h4><p>将底层复杂的协议体系，执行流程，进行封装，封装完的结果，就是一个socket了。</p><p>也就是说，socket是我们调用协议进行通信的操作接口。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>将复杂的协议过程与编程人员分开，我们只需要操作一个简单那的SOCKET就行了，对于底层的协议过程细节，我们完全不用知道，这就大大的方便了我们。</p><p>网络编程难在协议本身的复杂性，简单在我们编程层面完全不用考虑哪些。</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>就是一种数据类型。就是一个整数。</p><p><img src="/images/%E5%9F%BA%E4%BA%8ETCP-IP%E5%8D%8F%E8%AE%AE%E7%9A%84C-S%E6%A8%A1%E5%9E%8B.assets/image-20210823230157616.png" alt="image-20210823230157616"></p><p>socket的值是唯一的，通过这个值找到对应的协议。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>网络通信的函数，全都要使用SOCKET,每个客户端有一个SOCKET，服务器有一个SOCKET，通信的时候，就需要这个SOCKET做参数，跟谁通信，就要传递谁的SOCKET。</p><p>SOCKET是网络封装的精华，写代码就是不停的使用SOCKET这个变量，所以又叫SOCKET编程。</p><h4 id="参数1-1"><a href="#参数1-1" class="headerlink" title="参数1"></a>参数1</h4><p><strong>地址的类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加入你要与好友取得联系，可以通过</span><br><span class="line">    电话、QQ、微信等方式</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AF_INET <span class="number">2</span></span><br><span class="line">    ipv4地址</span><br><span class="line">    Internet协议版本地址系列</span><br><span class="line">    例如:<span class="number">192.168</span><span class="number">.1</span><span class="number">.103</span></span><br><span class="line">        <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>~<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">        <span class="number">4</span>字节，<span class="number">32</span>位的地址</span><br><span class="line">        点分十进制表示法</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AF_INET6 <span class="number">23</span></span><br><span class="line">    ipv6地址</span><br><span class="line">    Internet协议版本地址系列</span><br><span class="line">    例如:<span class="number">2001</span>:<span class="number">0</span>:<span class="number">3238</span>:DFE1:<span class="number">63</span>::FEFB</span><br><span class="line">        <span class="number">16</span>字节，<span class="number">128</span>位地址</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AF_BTH <span class="number">32</span></span><br><span class="line">    蓝牙地址</span><br><span class="line">    例如:<span class="number">6B</span>:<span class="number">2</span>D:BC:A9:<span class="number">8</span>C:<span class="number">12</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AF_IRDA <span class="number">26</span></span><br><span class="line">    红外数据协会(lrDA)地址</span><br></pre></td></tr></table></figure><h4 id="参数2-1"><a href="#参数2-1" class="headerlink" title="参数2"></a>参数2</h4><p><strong>套接字类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCK_STREAM <span class="number">1</span></span><br><span class="line">    提供给带有OOB数据传输机制的顺序，可靠，双向，基于连接的字节流。</span><br><span class="line">    使用TCP作为internet地址系列AF_INET <span class="keyword">or</span> AF_INET6</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCK_DGRAM <span class="number">2</span></span><br><span class="line">    固定(通常很小)最大长度的无连接，不可靠的缓冲区。</span><br><span class="line">    使用UDP作为internet地址系列AF_INET <span class="keyword">or</span> AF_INET6</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_RAW <span class="number">3</span></span><br><span class="line">    提供允许应用程序操作下一个上层协议头的原始套接字。 要操作IPv4标头，必须在套接字上设置IP_HDRINCL套接字选项。 要操作IPv6标头，必须在套接字上设置IPV6_HDRINCL套接字选项。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_RDM <span class="number">4</span></span><br><span class="line">    提供可靠的消息数据报。 这种类型的一个示例是Windows中的实用通用多播（PGM）多播协议实现，通常称为可靠多播节目。仅在安装了可靠多播协议时才支持此类型值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SOCK_SEQPACKET <span class="number">5</span></span><br><span class="line">    提供基于数据报的伪流数据包。</span><br></pre></td></tr></table></figure><h4 id="参数3"><a href="#参数3" class="headerlink" title="参数3"></a>参数3</h4><p><strong>协议类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这个位置写<span class="number">0</span>是什么意思？</span><br><span class="line">    即系统给我们自动选择合适的协议。但不明确。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_TCP</span><br><span class="line">    传输控制协议（TCP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_STREAM时，这是一个可能的值。</span><br><span class="line">    可能的值是什么意思？</span><br><span class="line">    如果有个协议TOP前两个参数也传这样的参数，此时(socket)第三个参数即写成IPPROTO_TOP</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_UDP </span><br><span class="line">    用户数据报协议（UDP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_DGRAM时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_ICMP</span><br><span class="line">    Internet控制消息协议（ICMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_IGMP</span><br><span class="line">    Internet组管理协议（IGMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IPPROTO_RM</span><br><span class="line">    用于可靠多播的PGM协议。 当af参数为AF_INET且类型参数为SOCK_RDM时，这是一个可能的值。 在针对Windows Vista及更高版本发布的Windows SDK上，此协议也称为IPPROTO_PGM。</span><br><span class="line">仅在安装了可靠多播协议时才支持此协议值。</span><br></pre></td></tr></table></figure><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">成功-返回可用的socket</span><br><span class="line">失败-不用了一定要释放掉——closesocket(xxx);</span><br><span class="line">然后再WSACleanup();清理网络库</span><br><span class="line">   注意二者的先后顺序，一定要先释放,然后再清理网路库，</span><br><span class="line">    因为closesocket()是网络库中的函数。</span><br><span class="line">********************************************************************************</span><br><span class="line">失败——返回INVALID_SOCKET</span><br><span class="line">   <span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();<span class="comment">//获取错误码</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//获取错误码——int a = WSAGetLastError();</span></span><br><span class="line">   <span class="comment">//检测在它上面离它最近的错误码    </span></span><br></pre></td></tr></table></figure><h3 id="绑定地址与端口"><a href="#绑定地址与端口" class="headerlink" title="绑定地址与端口"></a>绑定地址与端口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> sockaddr* addr,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> namelen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>给我们的socket绑定端口号和具体地址</p><p><strong>地址</strong>：找到电脑，理论上只有一个。</p><p><strong>端口号</strong>：找到电脑上对应软件的具体功能，每个通信的端口号是唯一的，同一个软件可能占用多个端口号。</p><h4 id="参数1-2"><a href="#参数1-2" class="headerlink" title="参数1"></a>参数1</h4><p>传递上面创建好的socket</p><p>(scoket绑定好地址类型、socket类型，协议类型)</p><p>(bind绑定实质的地址、端口号)</p><h4 id="参数2-2"><a href="#参数2-2" class="headerlink" title="参数2"></a>参数2</h4><p><img src="/images/%E5%9F%BA%E4%BA%8ETCP-IP%E5%8D%8F%E8%AE%AE%E7%9A%84C-S%E6%A8%A1%E5%9E%8B.assets/image-20210824222808154.png" alt="image-20210824222808154"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">        ushort  sa_family;<span class="comment">//地址类型</span></span><br><span class="line">        <span class="keyword">char</span>    sa_data[<span class="number">14</span>];<span class="comment">//端口号 ip地址</span></span><br><span class="line">    <span class="comment">//往一个字符串中赋值端口号和ip地址不好赋所以给出sockaddr_in,与之对应</span></span><br><span class="line">&#125;;<span class="comment">//16个字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">        <span class="keyword">short</span>   sin_family;<span class="comment">//地址类型</span></span><br><span class="line">        u_short sin_port;<span class="comment">//端口号</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>  <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">//ip地址,4字节</span></span><br><span class="line">        <span class="keyword">char</span>    sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;;<span class="comment">//16字节</span></span><br><span class="line"><span class="comment">//两个结构体大小和内存排布一样</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">结构体</span><br><span class="line">    -地址类型</span><br><span class="line">     -ip地址<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>-回送地址 本地回环地址 本地网络测试</span><br><span class="line">      <span class="number">192.168</span>.xxx.xxx- 用户ip地址</span><br><span class="line">     -端口号  就是一个整数，<span class="number">0</span>~<span class="number">65535</span>。<span class="keyword">unsigned</span> <span class="keyword">short</span></span><br><span class="line">    理论上<span class="number">0</span>~<span class="number">65535</span>都可以，但是<span class="number">0</span>~<span class="number">1023</span>为系统保留占用端口号</span><br><span class="line">        <span class="number">21</span>端口分配给FTP(文件传输协议)服务</span><br><span class="line">            <span class="number">25</span>端口分配给SMTP（简单邮件传输协议）服务</span><br><span class="line">            <span class="number">80</span>端口分配给HTTP服务</span><br><span class="line">    所以真正的范围是<span class="number">1024</span>~<span class="number">65535</span></span><br><span class="line">      端口是唯一的。</span><br><span class="line">    打开cmd，输入netstat -ano 查看被使用的所有端口</span><br><span class="line">    netstat -aon|findstr <span class="string">&quot;12345&quot;</span>检查我们要使用的端口是否被占用</span><br><span class="line">    </span><br><span class="line">SOCKETADDR_IN为sockaddr提供方便</span><br><span class="line">创建一个结构体SOCKETADDR_IN</span><br><span class="line">为其中的结构体成员赋值</span><br><span class="line">然后将它强转成sockaddr添加成功</span><br><span class="line"></span><br><span class="line">    SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;<span class="comment">//地址类型</span></span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);<span class="comment">//端口-将输入的unsigned short转换</span></span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127,0,0,1&quot;</span>);<span class="comment">//ip地址</span></span><br><span class="line"></span><br><span class="line">bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-失败 返回宏SOCKET_ERROR</span><br><span class="line">    具体错误码通过WSAGetLastError()获得</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr*)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="开始监听"><a href="#开始监听" class="headerlink" title="开始监听"></a>开始监听</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">listen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> backing</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen(socketServer, SOMAXCONN);</span><br></pre></td></tr></table></figure><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>将套接字置于正在侦听传入连接的状态。</p><h4 id="参数1-3"><a href="#参数1-3" class="headerlink" title="参数1"></a>参数1</h4><p>服务器端的socket,也就是socket函数创建的。</p><h4 id="参数2-3"><a href="#参数2-3" class="headerlink" title="参数2"></a>参数2</h4><p>挂起连接的最大长度。(排队等待区)休息区的长度。</p><p>可以手动设置，可能是2~10，一般是<strong>SOMAXCONN</strong>让系统自己选择最合适的个数。不同系统的环境不一样，所以这个合适的数也都不一样。</p><h4 id="WSAAPI"><a href="#WSAAPI" class="headerlink" title="WSAAPI"></a>WSAAPI</h4><p>调用约定，是给操作系统看的，我们可以忽略它。</p><p>决定-函数名字的编译方式-参数的入栈顺序-函数的调用时间。</p><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-返回宏SOCKET_ERROR</span><br><span class="line">     <span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端socket-接收连接"><a href="#创建客户端socket-接收连接" class="headerlink" title="创建客户端socket/接收连接"></a>创建客户端socket/接收连接</h3><p>将每个客户端的信息都创建成一个socket。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SOCKET WSAAPI <span class="title">accept</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params">sockaddr * addr,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> *addrlen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>accept函数允许在套接字上进行传入连接尝试。</p><p>listen监听客户端来的链接，accept将客户端的信息绑定到一个socket上，也就是给客户端创建一个socket,通过返回值得到客户端socket。</p><p>一次只能创建一个(返回值1个),有几个客户端链接，就要调用几次。</p><h4 id="参数1-4"><a href="#参数1-4" class="headerlink" title="参数1"></a>参数1</h4><p>(服务器socket)</p><h4 id="参数2-4"><a href="#参数2-4" class="headerlink" title="参数2"></a>参数2</h4><p>客户端的地址端口信息结构体，同bind的第二个参数</p><p><strong>意义</strong>:系统帮我们监视着客户端的动态，肯定会记录客户端的信息，也就是IP地址，和端口号，并通过这个结构体记录。</p><p>只是这个我们不用自己填写结构体中的内容，<strong>系统帮我们填写</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建客户端</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientMsg</span>;</span><span class="comment">//客户端信息</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">SOCKET socketClient = accept(socketServer, (struct sockaddr*)&amp;clientMsg, &amp;len);</span><br></pre></td></tr></table></figure><h4 id="参数3-1"><a href="#参数3-1" class="headerlink" title="参数3"></a>参数3</h4><p>参数2的大小</p><hr><p><strong>参数2、3也可以都写成NULL</strong>，那就是不直接得到客户端的地址、端口号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以通过</span><br><span class="line">    getpeername(newSocket, (struct sockaddr*)&amp;sockClient, &amp;nLen);</span><br><span class="line">得到客户端信息</span><br><span class="line">通过</span><br><span class="line">    getsockname(sSocket, (sockaddr*)&amp;addr, &amp;nLen);</span><br><span class="line">得到本地服务器信息</span><br></pre></td></tr></table></figure><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">成功-返回客户端socket</span><br><span class="line">失败-INVALID_SOCKET</span><br><span class="line">    <span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="accept调试"><a href="#accept调试" class="headerlink" title="accept调试"></a>accept调试</h4><p>1.阻塞，同步，当服务器没有客户端链接时，它会一直等待。</p><p>2.多个链接，一次只能连接一个，5个就要循环5次。同时客户端socket也要创建成数组,否则上一个的socket就丢了。</p><h3 id="与客户端收发消息"><a href="#与客户端收发消息" class="headerlink" title="与客户端收发消息"></a>与客户端收发消息</h3><p>消息从谁那来，要发送给谁，就写谁的socket</p><h4 id="收"><a href="#收" class="headerlink" title="收"></a>收</h4><p>得到指定客户端(参数1)发来的消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span> *buf,<span class="comment">//消息，按字节</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> len,<span class="comment">//长度</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketClient, buf, <span class="number">1499</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>本质就是复制。</p><p>数据的接收都是由协议本身做的，也就是socket的底层做的，系统会有一段缓冲区，存储着收到的数据。</p><p>recv的作用就是通过socket找到这个缓冲区，并把数据赋值进参数2。</p><h5 id="参数1-5"><a href="#参数1-5" class="headerlink" title="参数1"></a>参数1</h5><p>客户端的socket,每个客户端对应唯一的socket</p><h5 id="参数2-5"><a href="#参数2-5" class="headerlink" title="参数2"></a>参数2</h5><p>客户端消息的存储空间，是个字符数组，一般是1500字节。</p><p>网络传输的最大单元是1500字节，也就是客户端发过来的数据，一次最大就是1500字节，这是协议规定，很多情况总结出来的最优值。</p><h5 id="参数3-2"><a href="#参数3-2" class="headerlink" title="参数3"></a>参数3</h5><p>想要读取的字节个数。</p><p>一般是参数2的字节数-1，把/0字符串结尾留出来。</p><h5 id="参数4"><a href="#参数4" class="headerlink" title="参数4"></a>参数4</h5><p>数据的读取方式</p><p>一般就写个0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">正常逻辑(自然性质)</span><br><span class="line">    从系统缓冲区里读，读走几个删几个，要不每次都从头开始读。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MSG_PEEK</span><br><span class="line">   读完不删</span><br><span class="line">    不建议使用</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MSG_OOB</span><br><span class="line">    带外数据</span><br><span class="line">    就是传输一段数据，在外带一个额外的特殊数据。(小声bb)</span><br><span class="line">    不建议使用，读数据不行，无法计数。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSG_WAITALL</span><br><span class="line">    直到系统缓冲区字节数满足参数<span class="number">3</span>所请求的字节数，才开始读取。</span><br></pre></td></tr></table></figure><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">返回读出来字节大小，读没了就在recv函数卡着，等着客户端发来数据，即阻塞，同步。死等</span><br><span class="line">客户端下线，返回<span class="number">0</span>。</span><br><span class="line">执行失败，返回SOCKET_ERROR    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="发"><a href="#发" class="headerlink" title="发"></a>发</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">send</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> <span class="keyword">char</span>* buf,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h5><p>向目标发送数据</p><p><strong>本质</strong>：send函数将我们的数据复制粘贴进系统的协议发送缓冲区，计算机伺机发出去。</p><p>传输单元是1500字节。</p><h5 id="参数1-6"><a href="#参数1-6" class="headerlink" title="参数1"></a>参数1</h5><p>目标的socket，每个客户端对应唯一的socket</p><h5 id="参数2-6"><a href="#参数2-6" class="headerlink" title="参数2"></a>参数2</h5><p>给对方发送的字节串。1500</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个大小不同的协议不一样，链路层<span class="number">14</span>字节，ip头<span class="number">20</span>字节，tcp头<span class="number">20</span>字节，数据结尾还要有状态确认，加起来也几十个字节，数据结尾还要要状态确认，加起来也几十个字节，所以实际的数据位，不能写<span class="number">1500</span>个，要留出来，例如<span class="number">1024</span>，或者最多写<span class="number">1400</span>，别多于<span class="number">1400</span>是最好的。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">超过<span class="number">1500</span></span><br><span class="line">    系统会分片处理，比如<span class="number">2000</span>个字节</span><br><span class="line">    系统分成两个包，<span class="number">1400</span>+包头 == <span class="number">1500</span> 假设包头<span class="number">100</span>字节</span><br><span class="line">    <span class="number">600</span>+包头 == <span class="number">700</span></span><br><span class="line">    分两次发送出去</span><br><span class="line">    结果</span><br><span class="line">    系统要分包再打包，再发送，客户端收到之后还得拆包，组合数据，从而增加了系统的工作，降低了效率。</span><br><span class="line">    有的协议，就把分片后的二包直接丢了。</span><br></pre></td></tr></table></figure><h5 id="参数3-3"><a href="#参数3-3" class="headerlink" title="参数3"></a>参数3</h5><p>字节个数。1400</p><h5 id="参数4-1"><a href="#参数4-1" class="headerlink" title="参数4"></a>参数4</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">MSG_OOB 同recv</span><br><span class="line">MSG_DIBTROUTE指定数据不应受路由限制，Windows套接字服务提供程序可以选择忽略此标志。</span><br></pre></td></tr></table></figure><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">成功-返回写入的字节数</span><br><span class="line">失败-返回SOCKET_ERROR</span><br><span class="line">    WSAGetLastError()得到错误码</span><br><span class="line">    根据错误码信息做相应处理</span><br><span class="line">    -重启</span><br><span class="line">    -等待</span><br><span class="line">    -不用理会</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开网络库 </span></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion,&amp;wdSockMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line">SOCKET socketServer = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建服务器socket失败&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();<span class="comment">//获取错误码</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKADDR_IN si;</span><br><span class="line">si.sin_family = AF_INET;<span class="comment">//地址类型</span></span><br><span class="line">si.sin_port = htons(<span class="number">12345</span>);<span class="comment">//端口-将输入的unsigned short转换</span></span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//ip地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketServer, (<span class="keyword">const</span> struct sockaddr *)&amp;si, <span class="keyword">sizeof</span>(si)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;绑定错误&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketServer, SOMAXCONN))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建客户端</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientMsg</span>;</span><span class="comment">//客户端信息</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(clientMsg);</span><br><span class="line">SOCKET socketClient = accept(socketServer, (struct sockaddr*)&amp;clientMsg, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (socketClient == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端链接失败&quot;</span>);</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端链接成功\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//收发消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sValue = send(socketClient, <span class="string">&quot;服务器链接成功&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;服务器链接成功&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketClient, buf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端说:%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">send(socketClient, buf,<span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">closesocket(socketServer);</span><br><span class="line">closesocket(socketClient);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网络库头文件 网络库</span><br><span class="line">    打开网络库</span><br><span class="line">    校验版本</span><br><span class="line">    创建SOCKET</span><br></pre></td></tr></table></figure><h3 id="链接到服务器"><a href="#链接到服务器" class="headerlink" title="链接到服务器"></a>链接到服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> WSAAPI <span class="title">connect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SOCKET s,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">const</span> sockaddr* name,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span>namelen</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverMsg</span>;</span></span><br><span class="line">serverMsg.sin_family = AF_INET;</span><br><span class="line">serverMsg.sin_port = htons(<span class="number">12345</span>);<span class="comment">//转换成网络字节序</span></span><br><span class="line">serverMsg.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//服务器ip地址</span></span><br><span class="line"></span><br><span class="line">connect(socketServer, (struct sockaddr*)&amp;serverMsg, <span class="keyword">sizeof</span>(serverMsg));</span><br></pre></td></tr></table></figure><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>链接服务器并把服务器socket绑定到一起。</p><h4 id="参数1-7"><a href="#参数1-7" class="headerlink" title="参数1"></a>参数1</h4><p>服务器socket</p><h4 id="参数2-7"><a href="#参数2-7" class="headerlink" title="参数2"></a>参数2</h4><p>服务器ip地址端口号结构体</p><h4 id="参数3-4"><a href="#参数3-4" class="headerlink" title="参数3"></a>参数3</h4><p>参数2结构体大小</p><h4 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">成功-返回<span class="number">0</span></span><br><span class="line">失败-返回SOCKET_ERROR</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr><p><strong>客户端与服务器收发消息，一发一接，一发一接，对应。</strong></p><hr><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdSockMsg);</span><br><span class="line"><span class="keyword">if</span> (nRes != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络库打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (HIBYTE(wdSockMsg.wVersion) != <span class="number">2</span> || LOBYTE(wdSockMsg.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;版本不对&quot;</span>);</span><br><span class="line">WSACleanup();<span class="comment">//清理网络库</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建的是服务器的，客户端不用创建自己的socket，因为链接服务器，服务器会创建出来客户端的socket</span></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverMsg</span>;</span></span><br><span class="line">serverMsg.sin_family = AF_INET;</span><br><span class="line">serverMsg.sin_port = htons(<span class="number">12345</span>);<span class="comment">//转换成网络字节序</span></span><br><span class="line">serverMsg.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//服务器ip地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cValue = connect(socketServer, (struct sockaddr*)&amp;serverMsg, <span class="keyword">sizeof</span>(serverMsg));</span><br><span class="line"><span class="keyword">if</span> (cValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收发消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> res = recv(socketServer, buf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">0</span>)<span class="comment">//客户端下线，链接中断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链接中断、客户端下线\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出错了\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;服务器说:%d  %s\n&quot;</span>, res, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="keyword">int</span> sValue = send(socketServer, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (sValue == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>由于accept，recv是阻塞的，做其中一件事，另一件事就做不了，等着接收客户端的消息-recv，这时来了个链接请求-accept无法处理。(没有目标的等待)</p><p>正确的处理方式是——哪个socket有请求就处理谁，得到连接请求，我们就直接accept,得到发来的消息，就recv。(有目的的等待，处理有请求的)</p><p>引出<strong>select模型</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1cb411w7sZ&quot;&gt;C3程序猿-windows网络编程：第一部分tcp/ip&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基于TCP-IP协议的C-S模型&quot;&gt;&lt;a href=&quot;#基于TC</summary>
      
    
    
    
    <category term="网络编程" scheme="http://doraemon2.xyz/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://doraemon2.xyz/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-网络编程" scheme="http://doraemon2.xyz/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(14)【简单】加一(C++)</title>
    <link href="http://doraemon2.xyz/2021/08/21/LeetCode%E5%88%B7%E9%A2%98(14)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8A%A0%E4%B8%80(C++)/"/>
    <id>http://doraemon2.xyz/2021/08/21/LeetCode%E5%88%B7%E9%A2%98(14)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8A%A0%E4%B8%80(C++)/</id>
    <published>2021-08-21T04:51:17.000Z</published>
    <updated>2021-08-21T04:53:13.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/plus-one/solution/">加一</a><br><img src="https://img-blog.csdnimg.cn/36730e8edad74cb8b8f2fee4212a6ef1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//从最后一位开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.size()<span class="number">-1</span>;i&gt;= <span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//最后一位不是9,+1直接return</span></span><br><span class="line">    <span class="comment">//如果此时后一位由9已经变成了0</span></span><br><span class="line">    <span class="comment">//紧着这判断这位不是9，+1直接return,就相当于满10进1</span></span><br><span class="line">        <span class="keyword">if</span>(digits[i]+<span class="number">1</span> != <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            digits[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后一位加上1等于10</span></span><br><span class="line">        <span class="comment">//变成0</span></span><br><span class="line">        digits[i] =<span class="number">0</span>;</span><br><span class="line">                                        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原来容器中全都是9</span></span><br><span class="line">    digits[<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">    digits.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> digits;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>错误示例——越界</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">将容器中数取出来编程对应的一个数，加<span class="number">1</span>然后在求得每位上的数再存到容器中，返回该容器，</span><br><span class="line">但是当原来容器中数过多时，先求出来的数会发生溢出，大于INT_MAX。</span><br><span class="line">所以错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">plusOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> temp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;digits.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =digits.size()<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            n = n*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp1 =  digits[i] * n;</span><br><span class="line">        ret += temp1;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret +=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     digits.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ret)</span><br><span class="line">    &#123;</span><br><span class="line">        temp2 = ret%<span class="number">10</span>;</span><br><span class="line">        digits.push_back(temp2);</span><br><span class="line">        ret /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Tempdigits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!digits.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Tempdigits.push_back(digits.back());</span><br><span class="line">        digits.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  Tempdigits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;加一&quot;&gt;&lt;a href=&quot;#加一&quot; class=&quot;headerlink&quot; title=&quot;加一&quot;&gt;&lt;/a&gt;加一&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目链接&lt;/strong&gt;——&lt;a href=&quot;https://leetcode-cn.com/problems/plus-</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(13)【简单】最大子序和(C++)</title>
    <link href="http://doraemon2.xyz/2021/08/20/LeetCode%E5%88%B7%E9%A2%98(13)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C(C++)/"/>
    <id>http://doraemon2.xyz/2021/08/20/LeetCode%E5%88%B7%E9%A2%98(13)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C(C++)/</id>
    <published>2021-08-20T11:46:53.000Z</published>
    <updated>2021-08-20T11:50:25.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/maximum-subarray/">最大子序和</a></p><p><img src="https://img-blog.csdnimg.cn/c8d97260a62f40cdb6542f7dff1c121a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">最笨的方法:</span><br><span class="line">依次从每个元素开始往后一个一个的相加，加到temp1中，如果比之前的大就存到temp2中，最后得到最大的和。</span><br><span class="line">每轮完重置temp1</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> temp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp2 = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =i;j &lt;nums.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp1  += nums[j];</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(temp1 &gt;= temp2)</span><br><span class="line">            &#123;</span><br><span class="line">                temp2 = temp1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最大子序和&quot;&gt;&lt;a href=&quot;#最大子序和&quot; class=&quot;headerlink&quot; title=&quot;最大子序和&quot;&gt;&lt;/a&gt;最大子序和&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目链接&lt;/strong&gt;——&lt;a href=&quot;https://leetcode-cn.com/pr</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(12)【简单】最长公共前缀(C++)</title>
    <link href="http://doraemon2.xyz/2021/08/18/LeetCode%E5%88%B7%E9%A2%98(12)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80(C++)/"/>
    <id>http://doraemon2.xyz/2021/08/18/LeetCode%E5%88%B7%E9%A2%98(12)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80(C++)/</id>
    <published>2021-08-18T07:25:10.000Z</published>
    <updated>2021-08-20T11:51:22.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a><br><img src="https://img-blog.csdnimg.cn/db1c4c1e85e14b32ab39234dad7b2765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码示例</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//容器为空</span></span><br><span class="line">       <span class="keyword">if</span>(strs.size() == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].size(); i++) </span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.size();j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (strs[j][i] != ch || i &gt; strs[j].size()) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substr(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全都一样</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">垂直比较。</span><br><span class="line">如果容器为空，返回“”</span><br><span class="line"></span><br><span class="line">不为空</span><br><span class="line">以容器中第一个字符串为标准，将它的每个字母和容器中其它字符串的每一个字母做比较，</span><br><span class="line">如果不同或者此时遍历的长度i，已经大于了其他某个字符串的长度，</span><br><span class="line">那么直接返回第一个字符串截取到上一个i,这么长。</span><br><span class="line">substr截取区间为左闭右开。</span><br><span class="line"></span><br><span class="line">容器中字符串全都相等，或者只有一个元素</span><br><span class="line">返回本身（第一个字符串）。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最长公共前缀&quot;&gt;&lt;a href=&quot;#最长公共前缀&quot; class=&quot;headerlink&quot; title=&quot;最长公共前缀&quot;&gt;&lt;/a&gt;最长公共前缀&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目链接&lt;/strong&gt;——&lt;a href=&quot;https://leetcode-cn.co</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(11)【简单】回文数&amp;罗马数字转整数(C++)</title>
    <link href="http://doraemon2.xyz/2021/08/17/LeetCode%E5%88%B7%E9%A2%98(11)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%9B%9E%E6%96%87%E6%95%B0&amp;%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/"/>
    <id>http://doraemon2.xyz/2021/08/17/LeetCode%E5%88%B7%E9%A2%98(11)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%9B%9E%E6%96%87%E6%95%B0&amp;%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/</id>
    <published>2021-08-17T11:49:02.000Z</published>
    <updated>2021-08-17T11:55:21.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a><br><img src="https://img-blog.csdnimg.cn/5eb45e69583646b5ae25cf45da829c73.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x;</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret &gt; INT_MAX / <span class="number">10</span> || ret &lt; INT_MIN / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            ret = ret*<span class="number">10</span> + temp% <span class="number">10</span>;</span><br><span class="line">            temp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><p><strong>反转整数</strong>——<a href="http://doraemon2.xyz/2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/">反转整数</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同反转整数，在此基础上定义临时变量，不要更改原来的x。</span><br></pre></td></tr></table></figure><h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p><strong>题目链接</strong>——<a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a><br><img src="https://img-blog.csdnimg.cn/4288a5cc564443ee81cbc04f7a950e37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>代码示例</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;          </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:    </span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nextnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num = GetNum(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(i == s.size()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret += num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nextnum = GetNum(s[i+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(num&lt;nextnum)</span><br><span class="line">                &#123;</span><br><span class="line">            </span><br><span class="line">                    ret -= num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ret += num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">定义ret为最后的结果</span><br><span class="line"></span><br><span class="line">通过观察罗马数字，得到规律，多个字母拼接的罗马数字，</span><br><span class="line">从左到右依次取每个字母，得到对应的数值，和挨着的下一个字母对应的数值，</span><br><span class="line">如果当前字母对应数值小于下一个字母对应的数字，</span><br><span class="line">那么当前字母对应的数值就变成负的，反之不做改变，</span><br><span class="line">不断加到ret中。</span><br><span class="line">......</span><br><span class="line">其中，到了最后一个字母就不找下一个字母了，直接将它对应的数值加到ret中，</span><br><span class="line">返回结果ret。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回文数&quot;&gt;&lt;a href=&quot;#回文数&quot; class=&quot;headerlink&quot; title=&quot;回文数&quot;&gt;&lt;/a&gt;回文数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目链接&lt;/strong&gt;——&lt;a href=&quot;https://leetcode-cn.com/problems/p</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(10)【简单】反转整数(C++)</title>
    <link href="http://doraemon2.xyz/2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/"/>
    <id>http://doraemon2.xyz/2021/08/16/LeetCode%E5%88%B7%E9%A2%98(10)%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0(C++)/</id>
    <published>2021-08-16T15:23:34.000Z</published>
    <updated>2021-08-17T11:52:05.933Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目链接</strong>:——<a href="https://leetcode-cn.com/problems/reverse-integer/submissions/">反转整数</a><br><img src="https://img-blog.csdnimg.cn/16eb619dbed94644b5fbfa5fa6a32f82.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNjA0MzMw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret =<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(x)</span><br><span class="line">       &#123;</span><br><span class="line">       <span class="comment">//有符号整数溢出</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//如果这个数比最小的数去掉一位要小，或者比最大的数去掉一位要大</span></span><br><span class="line">       <span class="comment">//那么将他*10后得到的最后结果肯定是要大(小)，肯定溢出了。</span></span><br><span class="line">       <span class="comment">//并且要先在*10之前判断，否则就溢出了</span></span><br><span class="line">          <span class="keyword">if</span> (ret &gt; INT_MAX / <span class="number">10</span> || ret &lt; INT_MIN / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">           ret = ret*<span class="number">10</span>+x%<span class="number">10</span>;        </span><br><span class="line">           x /=<span class="number">10</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">INT_MAX和INT_MIN为C++内宏定义,分别表示<span class="keyword">int</span>的最大值和最小值。</span><br><span class="line"></span><br><span class="line"> 定义ret为反转后的数，初始化为<span class="number">0</span></span><br><span class="line">         x%<span class="number">10</span>取到最后一位上的数</span><br><span class="line">         x/<span class="number">10</span>去掉最后一位上的数</span><br><span class="line"></span><br><span class="line">相关解释：</span><br><span class="line"></span><br><span class="line">开始的ret为<span class="number">0</span></span><br><span class="line">x %<span class="number">10</span>将原来x的最后一位取出来，放到ret中，这个数就是ret最终结果的第一位。</span><br><span class="line">现在的ret是这个一位数，</span><br><span class="line"></span><br><span class="line">将它*<span class="number">10</span>，变成几十，ret变成两位数，刚才取出来的这个数到了十位上，个位上是<span class="number">0</span>，</span><br><span class="line">个位就被空了出来，</span><br><span class="line">之前的x已经被去掉了最后一位，现在的x最后一位为原来x的倒数第二位，x %<span class="number">10</span>,取到新的最后一位，</span><br><span class="line">加到ret中，得到新的ret</span><br><span class="line">重复上述步骤:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例: x = <span class="number">123</span></span><br><span class="line">ret =  <span class="number">0</span> * <span class="number">10</span> + <span class="number">123</span> % <span class="number">10</span> = <span class="number">3</span> </span><br><span class="line">x = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">3</span> * <span class="number">10</span> + <span class="number">12</span> % <span class="number">10</span> = <span class="number">30</span> + <span class="number">2</span> = <span class="number">32</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">得到结果</span><br><span class="line">ret = <span class="number">32</span> * <span class="number">10</span> + <span class="number">1</span> % <span class="number">10</span>  = <span class="number">321</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目链接&lt;/strong&gt;:——&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-integer/submissions/&quot;&gt;反转整数&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.cs</summary>
      
    
    
    
    <category term="算法" scheme="http://doraemon2.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
    <category term="-算法" scheme="http://doraemon2.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-LeetCode" scheme="http://doraemon2.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员C++课程笔记总结</title>
    <link href="http://doraemon2.xyz/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C++%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://doraemon2.xyz/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C++%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-13T17:50:09.000Z</published>
    <updated>2021-08-29T10:17:39.340Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>黑马程序员C++视频——</strong><a href="https://www.bilibili.com/video/BV1et411b73Z?p=1">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a></p><hr><p><img src="/img/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><hr><p><strong>笔记列表&amp;对应视频</strong></p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><p><strong>进阶部分(167-263)——</strong><a href="http://doraemon2.xyz/2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/">C++提高编程部分</a></p><p><strong>案例2(264-281)——演讲比赛流程管理系统——</strong><a href="http://doraemon2.xyz/2021/08/11/C++%E5%AE%9E%E7%8E%B0%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现演讲比赛流程管理系统</a></p><p><strong>案例3(282-314)——C++实现机房预约系统——</strong><a href="http://doraemon2.xyz/2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/">C++实现机房预约系统</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;黑马程序员C++视频——&lt;/strong&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1et411b73Z?p=1&quot;&gt;黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="http://doraemon2.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++实现机房预约系统</title>
    <link href="http://doraemon2.xyz/2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://doraemon2.xyz/2021/08/14/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-08-13T17:19:19.000Z</published>
    <updated>2021-08-13T18:00:21.517Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">黑马程序员C++</a>(282-314)</p><p><strong>基础部分(1-83)——</strong><a href="http://doraemon2.xyz/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p><strong>核心部分(84-146)——</strong><a href="http://doraemon2.xyz/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/">C++核心编程部分</a></p><p><strong>案例1(147-166)——职工管理系统——</strong><a href="http://doraemon2.xyz/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">C++实现职工管理系统</a></p><p><strong>进阶部分(167-263)——</strong><a href="http://doraemon2.xyz/2021/08/09/C++%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/">C++提高编程部分</a></p><p><strong>案例2(264-281)——演讲比赛流程管理系统——</strong><a href="https://blog.csdn.net/qq_51604330/article/details/119601992?spm=1001.2014.3001.5501">C++实现演讲比赛流程管理系统</a></p><hr><h1 id="C-实现机房预约系统"><a href="#C-实现机房预约系统" class="headerlink" title="C++实现机房预约系统"></a>C++实现机房预约系统</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183300379.png" alt="image-20210811183300379"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183310002.png" alt="image-20210811183310002"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183402942.png" alt="image-20210811183402942"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183501413.png" alt="image-20210811183501413"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183608553.png" alt="image-20210811183608553"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183620527.png" alt="image-20210811183620527"></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E6%9C%BA%E6%88%BF%E9%A2%84%E7%BA%A6%E7%B3%BB%E7%BB%9F.assets/image-20210811183723618.png" alt="image-20210811183723618"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>globalFile.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADMIN_FILE <span class="meta-string">&quot;admin.txt&quot;</span></span></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STUDENT_FILE <span class="meta-string">&quot;student.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEACHER_FILE <span class="meta-string">&quot;teacher.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMPUTER_FILE <span class="meta-string">&quot;computerRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ORDER_FILE <span class="meta-string">&quot;order.txt&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>computerRoom.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computerRoom</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_ComId;<span class="comment">//机房id号</span></span><br><span class="line"><span class="keyword">int</span> m_ManNum;<span class="comment">//最大容量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Identity.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Indentity</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单——纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> m_UserName;</span><br><span class="line"><span class="built_in">string</span> m_UserPassword;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Student.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;computerRoom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student();</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showMyOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> m_Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>manager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;computerRoom.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> :</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showComputer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleamFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVector</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt;vStu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Teacher&gt;vTea;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测重复 学号、职工号  检测类型</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRepeat</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房信息</span></span><br><span class="line"><span class="built_in">vector</span>&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>teacher.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span><span class="keyword">public</span> Indentity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Teacher(<span class="keyword">int</span> empId, <span class="built_in">string</span> name,<span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//职工号</span></span><br><span class="line"><span class="keyword">int</span> m_EmpId;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>orderFile.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;orderFile.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">OrderFile::OrderFile()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(ORDER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> date;</span><br><span class="line"><span class="built_in">string</span> interval;<span class="comment">//时间段</span></span><br><span class="line"><span class="built_in">string</span> stuId;</span><br><span class="line"><span class="built_in">string</span> stuName;</span><br><span class="line"><span class="built_in">string</span> roomId;</span><br><span class="line"><span class="built_in">string</span> status;<span class="comment">//状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;<span class="comment">//记录条数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; </span><br><span class="line">ifs &gt;&gt; interval &amp;&amp; </span><br><span class="line">ifs &gt;&gt; stuId &amp;&amp; </span><br><span class="line">ifs &gt;&gt; stuName &amp;&amp; </span><br><span class="line">ifs &gt;&gt; roomId &amp;&amp; </span><br><span class="line">ifs &gt;&gt; status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; date &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; interval &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; stuName &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; roomId &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;status &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> key;</span><br><span class="line"><span class="built_in">string</span> value;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos = date.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = date.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = date.substr(pos + <span class="number">1</span>, date.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = interval.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = interval.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = interval.substr(pos + <span class="number">1</span>, interval.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pos = stuId.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = stuId.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = stuId.substr(pos + <span class="number">1</span>, stuId.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = stuName.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = stuName.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = stuName.substr(pos + <span class="number">1</span>, stuName.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = roomId.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = roomId.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = roomId.substr(pos + <span class="number">1</span>, roomId.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos = status.find(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = status.substr(<span class="number">0</span>, pos);</span><br><span class="line">value = status.substr(pos + <span class="number">1</span>, status.size() - pos - <span class="number">1</span>);</span><br><span class="line">m.insert(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小的map容器放到大的map容器中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_orderData.insert(<span class="built_in">make_pair</span>(<span class="keyword">this</span>-&gt;m_Size, m));</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试大map</span></span><br><span class="line"><span class="comment">/*for (map&lt;int, map&lt;string, string&gt;&gt;::iterator it = m_orderData.begin(); it != m_orderData.end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it-&gt;first &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for (map&lt;string, string&gt;::iterator mit = (*it).second.begin(); mit != (*it).second.end(); mit++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; mit-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; mit-&gt;second &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OrderFile::updateOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::out | ios::trunc)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_orderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>manager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::Manager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初识化容器 获取到所有文件中 学生、老师、信息</span></span><br><span class="line"><span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(COMPUTER_FILE, ios::in);</span><br><span class="line"></span><br><span class="line">computerRoom com;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_ManNum)</span><br><span class="line">&#123;</span><br><span class="line">vCom.push_back(com);</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎管理员:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.添加账号——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.查看账号——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——3.查看机房——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——4.清空预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前学生数量:&quot;</span> &lt;&lt; vStu.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前老师数量:&quot;</span> &lt;&lt; vTea.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房数量为:&quot;</span> &lt;&lt; vCom.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您的操作:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::addPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入添加账号的类型&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.添加老师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> fileName;<span class="comment">//操作文件名</span></span><br><span class="line"><span class="built_in">string</span> tip;<span class="comment">//提示id号</span></span><br><span class="line">ofstream ofs;<span class="comment">//文件操作对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> errorTip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fileName = STUDENT_FILE;</span><br><span class="line">tip = <span class="string">&quot;请输入学号&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;学号重复,重新输入!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fileName = TEACHER_FILE;</span><br><span class="line">tip = <span class="string">&quot;请输入职工编号&quot;</span>;</span><br><span class="line">errorTip = <span class="string">&quot;职工号重复,重新输入!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ofs.open(fileName, ios::out | ios::app);</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">bool</span> ret = checkRepeat(id, select);</span><br><span class="line"><span class="keyword">if</span> (ret)<span class="comment">//有重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; errorTip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入密码&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向文件添加数据</span></span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加成功就立即将内容同步到当前容器中</span></span><br><span class="line"><span class="comment">//解决添加一个人，人数翻倍bug,我认为是重复读取</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加学生——同步到当前容器中</span></span><br><span class="line">Student s;</span><br><span class="line">s.m_Id = id;</span><br><span class="line">s.m_UserName = name;</span><br><span class="line">s.m_UserPassword = pwd;</span><br><span class="line">vStu.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加老师——同步到当前容器中</span></span><br><span class="line">Teacher t;</span><br><span class="line">t.m_EmpId = id;</span><br><span class="line">t.m_UserName = name;</span><br><span class="line">t.m_UserPassword = pwd;</span><br><span class="line">vTea.push_back(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用初始化容器接口</span></span><br><span class="line"><span class="comment">//this-&gt;initVector();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*不知道是我漏掉了代码，还是代码本身的小漏洞，连续添加账号会出现显示bug和人员统计数量bug</span></span><br><span class="line"><span class="comment">我认为是重复的vector存储，读取，本人有两种解决方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.如上，去掉结尾的初始化容器，在上面的添加成功后，直接将当前的成员读进vector容器中</span></span><br><span class="line"><span class="comment">2.理论可行，但是我没去实现，在原来的代码基础上，结尾调用初始化容器接口前，清理一下当前容器,vStu.clear();vTea.clear();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这样解决了bug，并且保留了即时同步。:)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学号:&quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot; 姓名:&quot;</span> &lt;&lt; s.m_UserName &lt;&lt; <span class="string">&quot; 密码:&quot;</span> &lt;&lt; s.m_UserPassword &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeacher</span><span class="params">(Teacher&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工号:&quot;</span> &lt;&lt; s.m_EmpId &lt;&lt; <span class="string">&quot; 姓名:&quot;</span> &lt;&lt; s.m_UserName &lt;&lt; <span class="string">&quot; 密码:&quot;</span> &lt;&lt; s.m_UserPassword &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看账号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择查看内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.查看所有学生&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.查看所有老师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;所有学生信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(vStu.begin(), vStu.end(), printStudent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;所老师生信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(vTea.begin(), vTea.end(), printTeacher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::showComputer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房信息如下&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;computerRoom&gt;::iterator it = vCom.begin(); it != vCom.end(); it++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房编号:&quot;</span> &lt;&lt; it-&gt;m_ComId &lt;&lt; <span class="string">&quot; 机房最大容量:&quot;</span> &lt;&lt; it-&gt;m_ManNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::cleamFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(ORDER_FILE, ios::trunc)</span></span>;</span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清空成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::initVector</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取信息 学生 老师 </span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(STUDENT_FILE, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件读取失败&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student s;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_UserName &amp;&amp; ifs &gt;&gt; s.m_UserPassword)</span><br><span class="line">&#123;</span><br><span class="line">vStu.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取信息 老师</span></span><br><span class="line">ifs.open(TEACHER_FILE,ios::in);</span><br><span class="line">Teacher t;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_UserName &amp;&amp; ifs&gt;&gt;t.m_UserPassword)</span><br><span class="line">&#123;</span><br><span class="line">vTea.push_back(t);</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测重复 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Manager::checkRepeat</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == it-&gt;m_EmpId)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>teacher.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Teacher::Teacher(<span class="keyword">int</span> empId, <span class="built_in">string</span> name,<span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpId = empId;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎教师: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录! &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.查看所有预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.审核预约————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录———&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择你的操作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::showAllOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期: 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 学号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 姓名:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态: &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败，审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::validOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;待审核的预约记录如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期: 周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段: &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生编号: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生姓名: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房编号: &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;状态: 审核中 &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要审核的预约记录,0代表返回&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;<span class="comment">//接收用户选择的预约记录</span></span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;<span class="comment">//接收预约结果记录</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入审核结果&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.通过&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.不通过&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;<span class="comment">//-1是因为vector容器下标是从0开始的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不通过</span></span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line">of.updateOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;审核完毕&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Student.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student::Student(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_UserPassword = pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化机房信息</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(COMPUTER_FILE,ios::in);</span><br><span class="line"></span><br><span class="line">computerRoom com;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;com.m_ComId &amp;&amp; ifs &gt;&gt; com.m_ManNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将读取的信息放入到容器中</span></span><br><span class="line">vCom.push_back(com);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::operMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎学生代表:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot;登录!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——1.申请预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——2.查看我的预约—&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——3.查看所有预约—&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——4.取消预约——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——0.注销登录——&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择您的操作:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::applyOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;机房开放时间为周一至周五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入申请预约的时间&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.周一&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.周二&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.周三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.周四&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;5.周五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日期</span></span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//时间段</span></span><br><span class="line"><span class="keyword">int</span> interval = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//机房编号</span></span><br><span class="line"><span class="keyword">int</span> room = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= <span class="number">1</span> &amp;&amp; data &lt;= <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入申请预约的时间段&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.上午&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.下午&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; interval;</span><br><span class="line"><span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择机房&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vCom.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vCom[i].m_ComId &lt;&lt; <span class="string">&quot;号机房容量为:&quot;</span> &lt;&lt; vCom[i].m_ManNum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room;</span><br><span class="line"><span class="keyword">if</span> (room &gt;= <span class="number">1</span> &amp;&amp; room &lt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约成功，审核中！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(ORDER_FILE, ios::app);</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_UserName &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; room &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::showMyOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//string 转 int</span></span><br><span class="line"><span class="comment">//string 利用.c_str()转const char *</span></span><br><span class="line"><span class="comment">//利用atoi (const char * )转 int</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))<span class="comment">//找到自身预约</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> :<span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot;状态:&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败,审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::showAllOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约日期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 学号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 姓名:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态: &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;-1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约失败,审核未通过&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::cancelOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OrderFile of;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无预约记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放下标</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到自身预约的记录</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_orderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//筛选状态</span></span><br><span class="line"><span class="comment">//审核中或预约成功</span></span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span> || of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; index++ &lt;&lt; <span class="string">&quot;、 &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;预约时期:  周&quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 时间段:  &quot;</span> &lt;&lt; (of.m_orderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 机房编号:  &quot;</span> &lt;&lt; of.m_orderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"><span class="built_in">string</span> status = <span class="string">&quot; 状态:  &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(of.m_orderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status += <span class="string">&quot;预约成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; status &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入取消的记录，0代表返回&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select &gt;= <span class="number">0</span> &amp;&amp; select &lt;= v.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">of.m_orderData[v[select - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新文件</span></span><br><span class="line">of.updateOrder();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;已取消预约&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>机房预约系统.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Identity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;globalFile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入教师子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span><span class="params">(Indentity*&amp; teacher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用子菜单界面</span></span><br><span class="line">teacher-&gt;operMenu();</span><br><span class="line"></span><br><span class="line">Teacher* tea = (Teacher*)teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//查看所有预约</span></span><br><span class="line">&#123;</span><br><span class="line">tea-&gt;showAllOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//审核预约</span></span><br><span class="line">&#123;</span><br><span class="line">tea-&gt;validOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> teacher;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入学生子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span><span class="params">(Indentity*&amp; student)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用学生子菜单</span></span><br><span class="line">student-&gt;operMenu();</span><br><span class="line"></span><br><span class="line">Student* stu = (Student*)student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;<span class="comment">//接收用户选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//申请预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;applyOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//查看自身预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;showMyOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>)<span class="comment">//查看所有人预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;showAllOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(select == <span class="number">4</span>)<span class="comment">//取消预约</span></span><br><span class="line">&#123;</span><br><span class="line">stu-&gt;cancelOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//注销登录</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入管理员子菜单界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span><span class="params">(Indentity* &amp;manager)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用管理员子菜单</span></span><br><span class="line">manager-&gt;operMenu();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父类指针转为子类指针，调用子类里其他的接口</span></span><br><span class="line">Manager* man = (Manager*)manager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)<span class="comment">//添加账号</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;添加账号&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;addPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)<span class="comment">//查看账号</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;查看账号&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">3</span>)<span class="comment">//查看机房</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;查看机房&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;showComputer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">4</span>)<span class="comment">//清空预约</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;清空预约&quot; &lt;&lt; endl;</span></span><br><span class="line">man-&gt;cleamFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注销</span></span><br><span class="line"><span class="keyword">delete</span> manager;<span class="comment">//销毁堆区对象</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;注销成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="comment">//文件名 身份类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoginIn</span><span class="params">(<span class="built_in">string</span> fileName, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Indentity * person = <span class="literal">NULL</span>;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(fileName, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备接受用户的信息</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断身份</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的学号:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的职工号:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入用户名:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入密码:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//学生身份验证</span></span><br><span class="line"><span class="keyword">int</span> fId;</span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Student(id, name, pwd);</span><br><span class="line"><span class="comment">//进入学生身份的子菜单</span></span><br><span class="line">studentMenu(person);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//老师身份验证</span></span><br><span class="line"><span class="keyword">int</span> fId;</span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;老师验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Teacher(id, name, pwd);</span><br><span class="line"><span class="comment">//进入老师身份的子菜单</span></span><br><span class="line">teacherMenu(person);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//管理员身份验证</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> fName;</span><br><span class="line"><span class="built_in">string</span> fPwd;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//与用户输入的信息做对比、</span></span><br><span class="line"><span class="keyword">if</span> (fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;管理员验证登录成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> Manager(name, pwd);</span><br><span class="line"><span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line">managerMenu(person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;验证登录失败！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  欢迎使用机房预约系统系统&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t1.学生代表&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t2.老  师&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t3.管理员&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t0.退  出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入您的选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//学生</span></span><br><span class="line">LoginIn(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//老师</span></span><br><span class="line">LoginIn(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//管理员</span></span><br><span class="line">LoginIn(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新选择！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1et411b73Z?p=282&quot;&gt;黑马程序员C++&lt;/a&gt;(282-314)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础部分(1-83)——&lt;/strong&gt;&lt;a href=</summary>
      
    
    
    
    <category term="C++" scheme="http://doraemon2.xyz/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://doraemon2.xyz/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://doraemon2.xyz/tags/C/"/>
    
  </entry>
  
</feed>
