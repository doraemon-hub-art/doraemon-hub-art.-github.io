<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-08T04:30:24.182Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【线性表】之队列</title>
    <link href="http://example.com/2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97/</id>
    <published>2021-06-08T04:27:51.000Z</published>
    <updated>2021-06-08T04:30:24.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列的概念"><a href="#队列的概念" class="headerlink" title="队列的概念"></a>队列的概念</h2><p>队列只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出的FIFO(First in First Out)。</p><p>入队列：进行插入操作的一端称为队尾。</p><p>出队列：进行删除操作的一端称为队头。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%98%9F%E5%88%97.assets/image-20210607194222681.png" alt="image-20210607194222681"></p><p>同样可以使用链表或者数组</p><p>数组：不是适合，队头出数据需要挪动数据。</p><p>链表：适合单链表，单链表头删效率很高。</p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//定义一个新结点</span></span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//依次保存下一个结点，然后删除这个结点</span></span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾入"><a href="#队尾入" class="headerlink" title="队尾入"></a>队尾入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//链接</span></span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//如果插入前是空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">//插到后面</span></span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">        <span class="comment">//称为新的尾巴</span></span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出"><a href="#队头出" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出-1"><a href="#队头出-1" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头数据"><a href="#队头数据" class="headerlink" title="队头数据"></a>队头数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾数据"><a href="#队尾数据" class="headerlink" title="队尾数据"></a>队尾数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回数据个数"><a href="#返回数据个数" class="headerlink" title="返回数据个数"></a>返回数据个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue pq;</span><br><span class="line">QueueInit(&amp;pq);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">1</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">2</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">3</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//为空是假的才成立，进入循环(不为空，进入循环)</span></span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;pq))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取队头的数据然后删除</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, QueueFront(&amp;pq));</span><br><span class="line">QueuePop(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line">QueueDestory(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;h2 id=&quot;队列的概念&quot;&gt;&lt;a href=&quot;#队列的概念&quot; class=&quot;headerlink&quot; title=&quot;队列的概念&quot;&gt;&lt;/a&gt;队列的概</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="-队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>【线性表】之栈</title>
    <link href="http://example.com/2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88/"/>
    <id>http://example.com/2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88/</id>
    <published>2021-06-07T11:17:07.000Z</published>
    <updated>2021-06-08T04:29:53.576Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>顺序表和链表的区别和联系</p><p>顺序表：</p><p>​    优点：空间连续支持随机访问。</p><p>​    缺点：1.中间或前面的插入删除时间复杂度O(N)。</p><p>​               2.增容的代价比较大</p><p>链表(带头双向循环)：</p><p>​    缺点：</p><p>​        以借点为单位存储，不支持随机访问。</p><p>​    优点：</p><p>​            1.任意位置插入删除时间复杂度为O(1)</p><p>​            2.没有增容消耗，按需申请结点空间，不用了直接释放。</p><hr><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈也是线性表，在逻辑上还是挨着放的。</p><p>栈的概念以及结构</p><p>栈：一种特殊的线性表,其只允许在固定的一端进行插入和删除元素操作。<strong>进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。</strong>栈中的数据元素遵守后进先出LIFO(Last In First Out)的原则。</p><p><strong>压栈：</strong>栈的插入操作叫做进栈/压栈/入栈，<strong>入数据在栈顶</strong>。</p><p><strong>出栈：</strong>栈的删除操作叫做出栈。<strong>出数据也在栈顶</strong>。</p><p><img src="/images/%E6%A0%88.assets/image-20210607120710677.png" alt="image-20210607120710677"></p><p><strong>实现方式：</strong></p><ol><li><p>数组实现</p><p><img src="/images/%E6%A0%88.assets/image-20210607120936928.png" alt="image-20210607120936928"></p><p>总结：</p><p>相当于之前顺序表的尾插尾删，用尾做栈顶，非常合适，唯一缺陷就是，空间不够需要增容(影响不大)。</p><p>(顺序表——<a href="https://blog.csdn.net/qq_51604330/article/details/117593583">【线性表】之顺序表_半生瓜のblog-CSDN博客</a>)</p></li><li><p>链表实现</p></li></ol><p><img src="/images/%E6%A0%88.assets/image-20210607121416245.png" alt="image-20210607121416245"></p><p>出数据得找到前一个，这样的话用双向链表更好一些。</p><p>(所以说数据结构并没有规定用什么方法实现，只要能实现就行，对比的就是效率而已。)</p><p>也可以将单链表反过来。</p><p><img src="/images/%E6%A0%88.assets/image-20210607121819132.png" alt="image-20210607121819132"></p><p>总结：</p><p>​    如果用尾插做栈顶，用双向链表更好。</p><p>​    如果用单链表实现，就用头去做栈顶，这样入栈和出栈效率都是O(1)。</p><p>​    整体来说数组的效率更优一些。</p><hr><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">StackDataType* arry;</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果初识的top给0，意味着top指向栈顶的元素的下一个，top给-1，top指向栈顶元素。</p><p>一定不能为空的东西，可以使用断言来处理。OJ题不可以使用断言。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//满了</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line">StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">ps-&gt;top++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">ps-&gt;top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈中元素个数"><a href="#返回栈中元素个数" class="headerlink" title="返回栈中元素个数"></a>返回栈中元素个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小提示:</strong></p><p>上面有的函数只有两行代码，如果直接用里面的那句代码，可以吗？<br>可以，但是不好，通过那句代码访问到，但严格来说你不应该去访问，这是一种耦合，耦合就是一种强关联，<br>调用函数，无需去想top在0还是在-1，只管用就完事了。(有点软件工程的思想)</p><hr><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack ps;</span><br><span class="line">StackInit(&amp;ps);</span><br><span class="line">StackPush(&amp;ps,<span class="number">1</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">2</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;ps))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, StackTop(&amp;ps));</span><br><span class="line"><span class="comment">//取完栈顶的数据，想取下一个，那就得删一下</span></span><br><span class="line">StackPop(&amp;ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">StackDestory(&amp;ps);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;顺序表和链表的区别和联系&lt;/p&gt;
&lt;p&gt;顺序表：&lt;/p&gt;
&lt;p&gt;​    优点：空间连续支持随机访问。&lt;/p&gt;
&lt;p&gt;​    缺</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(5)【链表】环形链表II</title>
    <link href="http://example.com/2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
    <id>http://example.com/2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</id>
    <published>2021-06-05T17:23:30.000Z</published>
    <updated>2021-06-06T04:57:21.338Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环形链表I</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/117334723?spm=1001.2014.3001.5501">LeetCode刷题(3)【链表】【环形链表】&amp;扩展_半生瓜のblog-CSDN博客</a></p><hr><p><strong>环形链表</strong>II</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>这个题写起来不难，但是证明有点麻烦。</p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184927049.png" alt="image-20210605184927049"></p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184933830.png" alt="image-20210605184933830"></p><hr><p>针对这个入口点怎么求，有人给出了一个结论。</p><p>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。（看下面的过程的时候，先别想这个结论，否则会越来越乱的，就先当不知道。）</p><hr><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210606005633219.png" alt="image-20210606005633219"></p><p>fast走的路程是slow走的路程的2倍。</p><p>slow走的路程：slow进环了以后，在一圈之内，fast一定会追上slow。因为slow走了一圈，fast都走两圈了。</p><p>slow进环之前，fast有可能在环里面转了N圈，如果入环之前的长度越长，环很小，N越大， 如果入环前的长度越短，环很大，N就是1，fast只转了1圈。</p><p>fast走的路程： L + C*N + X</p><p>slow走的路程：L + X</p><p>fast = 2*slow</p><p>L + C*N + X = 2(L +X)   </p><p>化简一下得：</p><p>C* N - X = L</p><p>再化简一下得：<br>(N-1)* C + C - X = L </p><p>C - X就是meet点到入口点的距离。</p><p>再看这个结论。</p><p><strong>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。</strong></p><p>理解一下，就是一个指针从meet点出发，转转转了N-1圈，在走了一个C-X到达入口点，发生相遇。</p><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct ListNode *<span class="title">detectCycle</span><span class="params">(struct ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        <span class="comment">//找到相遇点</span></span><br><span class="line">        <span class="keyword">if</span>(fast == slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//相等即为相遇点</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">meet</span> =</span>  slow;</span><br><span class="line">            <span class="comment">//一个指针从meet走，一个指针从head走，他们会在入口点相遇</span></span><br><span class="line">            <span class="keyword">while</span>(head != meet)</span><br><span class="line">            &#123;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                meet = meet-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> meet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;环形链表I&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_51604330/article/details/117334723?spm=1001.2014.3001.5501&quot;&gt;LeetCode刷题(3)</summary>
      
    
    
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(4)移除元素&amp;合并两个有序数组</title>
    <link href="http://example.com/2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-06-05T08:03:54.000Z</published>
    <updated>2021-06-05T08:09:29.345Z</updated>
    
    <content type="html"><![CDATA[<p><strong>移除元素</strong></p><p>典型双指针玩法。</p><p><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p><hr><p>我们都会想到这样的解法：从前面依次往后推，是val就将该数据后面的元素依次覆盖上来，但是这样的时间复杂度是O(n²)，最坏的结果是一个数组中大部分数据都是val。</p><p>所以我们想到另一种解法，以空间换时间 ，另开一个数组，把不是val的数据给新的数组，再把新数组的值拷贝回来。空间复杂度是O(n)。</p><p>但是这个题它不让开辟一个新的数组，所以我们还得换一个思路。</p><hr><p>该思路空间复杂度为O(n),时间复杂度为O(1)。——<strong>双指针解法</strong></p><p>定义两个指针，p1和p2，p1先动，p2后动，如果p1不等于val，就把值传给p2,直到完成一遍遍历，p2的值就是新数组元素的个数。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140450655.png" alt="image-20210605140450655"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140910200.png" alt="image-20210605140910200"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p1和p2都从数组左边出发</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果p1(对应的值)不等于val</span></span><br><span class="line">        <span class="keyword">if</span>(nums[p1] != val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将p1的值赋给p2</span></span><br><span class="line">            nums[p2] = nums[p1];</span><br><span class="line">            <span class="comment">//往后面++</span></span><br><span class="line">            p1++;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p1(对应的值)等于val</span></span><br><span class="line">        <span class="comment">//只有p1走</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是p1在前面开路，p2在后面跟着，同时出发，p1遇到val就跳过，p2就停住,当p1没遇到val的时候将p1的值给p2，（就把p1位置的val值覆盖了）,然后p1，p2都往后走一位……</p><p><strong>合并两个有序数组</strong></p><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605142621467.png" alt="image-20210605142621467"></p><p>可以把num2直接放到num1后面，然后再进行升序排列，只不过效率有点低了。</p><p>所以我们采用下面这种解法。</p><p>num1和num2都从后往前走，取大的往后面放。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155039383.png" alt="image-20210605155039383"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155125941.png" alt="image-20210605155125941"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//题目所给的nums1Size和num2Size没用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end1 = m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end2 = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = m+n<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//end1和end2都还没有结束</span></span><br><span class="line">    <span class="keyword">while</span>(end1 &gt;= <span class="number">0</span> &amp;&amp; end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把他们两个中大的放在后面</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[end1] &gt; nums2[end2])</span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums1[end1];</span><br><span class="line">            end--;</span><br><span class="line">            end1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums2[end2];</span><br><span class="line">            end--;</span><br><span class="line">            end2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果end2先结束，就是num2里面已经没有元素了，那就不需要处理了，因为就是往num1里面放的</span></span><br><span class="line">    <span class="comment">//但是，如果是end1先结束了，还需要处理一下，因为此时num2里面还有元素没有放进num1里面</span></span><br><span class="line">    <span class="keyword">while</span>(end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nums1[end] = nums2[end2];</span><br><span class="line">        end--;</span><br><span class="line">        end2--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;移除元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;典型双指针玩法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-element/&quot;&gt;27. 移除元素 - 力扣（LeetCode） (leetcode</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【线性表】之顺序表</title>
    <link href="http://example.com/2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://example.com/2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</id>
    <published>2021-06-05T05:13:55.000Z</published>
    <updated>2021-06-05T05:34:10.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表(linear list)是n个具有相同特性元素的有限序列 。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串……</p><p>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>它是最简单的数据结构，也是最常用的数据结构——他的作用就是将数据存起来。</p><p>概念：顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p><p>顺序表一般可分为：</p><p>1.静态顺序表：使用定长数据存储。</p><p>2.动态顺序表：使用动态开辟的数组存储。</p><p><strong>下面的代码实现的是动态顺序表</strong></p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SeqListDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SeqListDataType* arry;<span class="comment">//指向动态开辟的数组</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//数组中有效数据的个数(在数组中说就是最后一个数据的下一个位置，因为数组下标是从0开始的)</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//容量空间的大小</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8.assets/image-20210605131238279.png" alt="image-20210605131238279"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInit</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;<span class="comment">//可以一上来就给空间，也可以不给空间</span></span><br><span class="line">ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p>严格来说空间用完之后就要销毁，如果malloc开辟的空间不销毁就会存在内存泄漏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListDestory</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPrint</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arry[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展空间"><a href="#扩展空间" class="headerlink" title="扩展空间"></a>扩展空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果数组满了——有效的数据个数等于空间容量的总大小</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;size == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//要注意如果满了，就进行扩容，在原来基础上*2，但是开始的空间是0，</span></span><br><span class="line"><span class="comment">//0*2还是0,所以开始插入的时候要加一个判断</span></span><br><span class="line"><span class="comment">//如果开始的空间是0，那么就给他赋值4，之后就不是0了，就给他*2</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = ps-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;capacity * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//realloc扩充原来开辟好的空间</span></span><br><span class="line"><span class="comment">//如果原来的空间在原来的地方是空，那就他是直接申请一个新的空间就跟malloc是一样的。</span></span><br><span class="line">SeqListDataType* tmp = (SeqListDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, newCapacity * <span class="keyword">sizeof</span>(SeqListDataType));</span><br><span class="line"><span class="comment">//如果扩容失败，给予提示</span></span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc is fail!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把扩充好的数组传给arry</span></span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity = newCapacity;<span class="comment">//空间容量大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushBack</span><span class="params">(SeqList* ps,SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line">    <span class="comment">//顺序表中的数据要依次存储</span></span><br><span class="line">ps-&gt;arry[ps-&gt;size] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushFront</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//同尾插-空间不够了需要增容</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//从后开始挪</span></span><br><span class="line"><span class="comment">//注意初识条件-结束条件-迭代过程</span></span><br><span class="line"><span class="comment">//先找到最后一个位置</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[<span class="number">0</span>] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopBack</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);<span class="comment">//等于0直接报错，比较粗暴。</span></span><br><span class="line"><span class="comment">//下面这行代码没用，因为了顺序表中具体的数据个数是由size决定的</span></span><br><span class="line"><span class="comment">//把这个位置置 成0，万一这个位置本来就是0呢，或者这个位置的数据类型不是int，是double呢，置成0也不合适，没有意义。</span></span><br><span class="line"><span class="comment">//ps-&gt;arry[ps-&gt;size - 1] = 0;</span></span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopFront</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//检查一下还有没有元素，没有就别删了</span></span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//就是用后面的元素将前面的元素给覆盖了，每次消失的都是第一个，其他的依次向前推</span></span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置插入数据"><a href="#在指定位置插入数据" class="headerlink" title="在指定位置插入数据"></a>在指定位置插入数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInsert</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);<span class="comment">//大于就报错</span></span><br><span class="line"><span class="comment">//思路：先创建空间，利用循环找到pos这个位置，将元素放入数组，size+1</span></span><br><span class="line"><span class="comment">//创建空间</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//找到最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//依次往后推移一位，</span></span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">ps-&gt;capacity++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListErase</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line"><span class="comment">//被删除元素后面的位置</span></span><br><span class="line"><span class="keyword">int</span> start = pos + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFind</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//找到返回下标，找不到返回-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry[i] == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListModity</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;线性表(linear list)是n个具有相同特性元素的有限序列 。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表】单链表的实现</title>
    <link href="http://example.com/2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-06-02T03:13:29.000Z</published>
    <updated>2021-06-02T03:23:49.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.assets/image-20210602112335408.png" alt="image-20210602112335408"></p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>下面的删除和插入都要在先在链表中找到为前提。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置前插入某个数据"><a href="#在指定位置前插入某个数据" class="headerlink" title="在指定位置前插入某个数据"></a>在指定位置前插入某个数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br><span class="line"><span class="comment">//改变头结点的传2级指针，不改变的传1级指针</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在pos前插入某个数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除pos位置的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* plist = <span class="literal">NULL</span>;</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">0</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">2</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">3</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">4</span>);</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line">SLTNode* pos = SLTFind(plist, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明找到了</span></span><br><span class="line">SLTErase(&amp;plist, pos);</span><br><span class="line">&#125;</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.assets/image-202106021123354</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表】带头双向循环链表</title>
    <link href="http://example.com/2021/06/01/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2021/06/01/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</id>
    <published>2021-06-01T11:20:42.000Z</published>
    <updated>2021-06-02T03:14:17.499Z</updated>
    
    <content type="html"><![CDATA[<hr><p>单链表存在的缺陷：</p><p>不能从后往前走,</p><p>找不到他的前驱,</p><p>指定位置 删除  增加 尾删 都要找前一个，时间复杂度都是O(n)</p><hr><p>针对上面的这些缺陷的解决方案——<strong>双向链表</strong>。</p><hr><p>实际中要实现的链表的结构非常多样，以下情况组合起来就有8种链表结构：</p><ol><li>单向、双向</li><li>带头、不带头——带哨兵位的头结点，这个结点不存储有效数据，好处是什么？尾插的判断更方便简单，带头就不需要二级指针了，（带头结点，不需要改变穿过来的指针，也就是意味着不需要传二级指针了。）</li><li>循环、非循环</li></ol><hr><ol><li>无头单向非循环：结构简单，一般不会单独用来存数据，实际中更多是作为其他数据结构的子结构，如哈希桶，图的邻接表等，另外这种数据结构在笔试面试中出现很多。</li><li>带头双向循环链表：结构最复杂，一般用在单独存储数据。实际中使用的链表数据结构，都是带头循环双向链表，另外，这个结构虽然复杂，但是使用代码代码实现的以后会发现结构带来许多优势，实现反而简单了。</li></ol><hr><h1 id="带头双向循环链表"><a href="#带头双向循环链表" class="headerlink" title="带头双向循环链表"></a>带头双向循环链表</h1><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210530182401579.png" alt="image-20210530182401579"></p><h2 id="结构体创建"><a href="#结构体创建" class="headerlink" title="结构体创建"></a>结构体创建</h2><p><strong>结构体创建：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> LSTNodeData;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LSTNodeData data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">prev</span>;</span></span><br><span class="line">&#125;LSTNode;</span><br></pre></td></tr></table></figure><h2 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h2><p><strong>创建结点：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTCreat</span><span class="params">(DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTNode* newnode = (DBLSTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DBLSTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><strong>初始化：</strong></p><p>有个小哨兵位的头结点，并且是一个循环状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//用一个返回值可以 替代二级指针</span></span><br><span class="line">DBLSTNode* phead = DBLSTCreat(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line">phead-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = phead;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p><strong>销毁：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTDestory</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到第一个结点</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur !=phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//保存下一个结点</span></span><br><span class="line">DBLSTNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(phead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>画图有利于双向链表的理解。</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210531122103491.png" alt="image-20210531122103491"></p><hr><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p><strong>打印：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPrint</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果链表是空的会发生错误吗?</span></span><br><span class="line"><span class="comment">//不会。因为phead-&gt;next还是自己。</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;<span class="comment">//这里我容易忘记指向next</span></span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><p><strong>尾插：</strong></p><p>双向带头循环链表，结构虽然复杂了，但是更容易操作了。</p><p>这就是结构设计的优势。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushBack</span><span class="params">(DBLSTNode* phead, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">DBLSTNode* tail = phead-&gt;prev;</span><br><span class="line"><span class="comment">//插入-链接</span></span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = tail;</span><br><span class="line">newnode-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><p> <strong>头插：</strong></p><p>如果插入的时候链表是空的同样不会有影响。</p><p>有first这几个指针先动谁都行，没有first也可以，就是会有顺序要求。</p><p>示例：</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210531170125744.png" alt="image-20210531170125744"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">newnode-&gt;next = phead-&gt;next;</span><br><span class="line">phead-&gt;next-&gt;prev = newnode;</span><br><span class="line">phead-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = phead;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushFront</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//拿到第一个结点</span></span><br><span class="line">DBLSTNode* first = phead-&gt;next;</span><br><span class="line"><span class="comment">//插入-链接</span></span><br><span class="line">phead-&gt;next = newnode;</span><br><span class="line">newnode-&gt;prev = phead;</span><br><span class="line">newnode-&gt;next = first;</span><br><span class="line">first-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><p><strong>头删：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopFront</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//保存第一个和第二个结点</span></span><br><span class="line">DBLSTNode* first = phead-&gt;next;</span><br><span class="line">DBLSTNode* second = first-&gt;next;</span><br><span class="line">phead-&gt;next = second;</span><br><span class="line">second-&gt;prev = phead;</span><br><span class="line"><span class="built_in">free</span>(first);</span><br><span class="line">first = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><p><strong>尾删：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopBack</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到最后的一个结点</span></span><br><span class="line">DBLSTNode* tail = phead-&gt;prev;</span><br><span class="line"><span class="comment">//找到最后一个结点的前一个结点</span></span><br><span class="line">DBLSTNode* tailPrev = tail-&gt;prev;</span><br><span class="line">tailPrev-&gt;next = phead;</span><br><span class="line">phead-&gt;prev = tailPrev;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找位置"><a href="#查找位置" class="headerlink" title="查找位置"></a>查找位置</h2><p><strong>查找位置：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DBLSTNode* <span class="title">DBLSTFind</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//从第一个结点开始往下寻找，找到返回结点</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DBLSTNode* pos = DBLSTFind(phead,x);</span><br><span class="line"><span class="keyword">if</span>(pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除pos位置的值"><a href="#删除pos位置的值" class="headerlink" title="删除pos位置的值"></a>删除pos位置的值</h2><p><strong>删除pos位置的值：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTErase</span><span class="params">(DBLSTNode* pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到pos的前一个</span></span><br><span class="line">DBLSTNode* posPrev = pos-&gt;prev;</span><br><span class="line"><span class="comment">//找到pos的后一个</span></span><br><span class="line">DBLSTNode* posNext = pos-&gt;next;</span><br><span class="line"><span class="comment">//链接pos的前一个和pos的后一个</span></span><br><span class="line">posPrev-&gt;next = posNext;</span><br><span class="line">posNext-&gt;prev = posPrev;</span><br><span class="line"><span class="comment">//释放pos</span></span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">pos = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在pos前插入x"><a href="#在pos前插入x" class="headerlink" title="在pos前插入x"></a>在pos前插入x</h2><p><strong>在pos前插入x：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTInsert</span><span class="params">(DBLSTNode* pos, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//知道pos前的一个结点</span></span><br><span class="line">DBLSTNode* posPrev = pos-&gt;prev;</span><br><span class="line"><span class="comment">//创建新的结点</span></span><br><span class="line">DBLSTNode* newnode = DBLSTCreat(x);</span><br><span class="line"><span class="comment">//将新的结点插入</span></span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;prev = posPrev;</span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">pos-&gt;prev = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回链表的结点数量"><a href="#返回链表的结点数量" class="headerlink" title="返回链表的结点数量"></a>返回链表的结点数量</h2><p><strong>返回链表的结点数量：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DBLSTSize</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//其实就是遍历一遍，找一个计数的</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (cur != phead)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断链表是否为空"><a href="#判断链表是否为空" class="headerlink" title="判断链表是否为空"></a>判断链表是否为空</h2><p><strong>判断链表是否为空：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DBLSTEmpty</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个cur指向第一个结点，如果第一个结点就是phead,说明链表为空</span></span><br><span class="line">DBLSTNode* cur = phead-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (phead == cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>为了更快的实现一个双向循环的带头链表，我们可以直接利用Insert和Erase。</strong></p><p>如果Erase的pos位置是第一个结点，那就代表着头删，如图：</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210601185722567.png" alt="image-20210601185722567"></p><p>所以头删还可以这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopFront</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DBLSTErase(phead-&gt;next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾删同理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPopBack</span><span class="params">(DBLSTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTErase(phead-&gt;prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushFront</span><span class="params">(DBLSTNode* phead,DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTInsert(phead-&gt;next,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插：</p><p>其实就是插到头结点phead的前面。</p><p><img src="/images/%E5%B8%A6%E5%A4%B4%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.assets/image-20210601191026935.png" alt="image-20210601191026935"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBLSTPushBack</span><span class="params">(DBLSTNode* phead, DoubleListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DBLSTInsert(phead, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>带头双向循环链表，任意位置插入和删除数据，时间复杂度都是O(1)。</p><p>查找最优的结构不是这个，查找就得遍历，时间复杂度还是O(N)。</p><p>查找的最优结构有三种：</p><ul><li>平衡搜索树（AVL树和红黑树）</li><li>哈希表</li><li>B树 &amp; B+树系列 (数据库底层核心引擎)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;单链表存在的缺陷：&lt;/p&gt;
&lt;p&gt;不能从后往前走,&lt;/p&gt;
&lt;p&gt;找不到他的前驱,&lt;/p&gt;
&lt;p&gt;指定位置 删除  增加 尾删 都要找前一个，时间复杂度都是O(n)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;针对上面的这些缺陷的解决方案——&lt;strong&gt;双向链表&lt;/strong&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-双向链表" scheme="http://example.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(3)【链表】环形链表</title>
    <link href="http://example.com/2021/05/27/LeetCode%E5%88%B7%E9%A2%98(3)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2021/05/27/LeetCode%E5%88%B7%E9%A2%98(3)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</id>
    <published>2021-05-27T10:21:19.000Z</published>
    <updated>2021-06-05T08:09:06.234Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环形链表</strong></p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>什么是链表带环：链表的最后一个元素不指向空而指向前面的某个结点。</p><p>思路：<strong>快慢指针</strong>，慢指针走一步，快指针走两步，二者先后 进入环内进行追逐，最终会在某个点相遇。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(struct ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>请证明：</p><p>**(1)**slow和fast一定会在环里面相遇呢？有没有可能永远追不上？</p><p>当slow 走1步，fast走2步时，<strong>一定可以</strong>追上。</p><p>若slow和fast已经进入环中，追逐已经开始了，假设他们之间的距离是N,slow走1步，fast走2步，二者的距离每次缩减1，N,N-1,N-2,……0,直到相遇。</p><p>**(2)**slow一次走1步，fast一次走3不行不行？4不行不行？    </p><p><strong>不一定可以追上，甚至有可能会进入死循环。</strong>我比你快不一定追上，因为存在错过。若开始追逐，假设二者距离为N，假设slow走1步，fast走3步，距离每次缩减2，N,N-2,N-4,N-6……。如果N是偶数最后会减到0，如果N是偶数则减到-1，距离为0代表相遇，距离为-1代表反超了，进入新的追逐，他们之间的距离是 C-1(假设C 是环的长度)，如果C-1是偶数，就可以追上，如果C-1是奇数，就永远追不上，因为是奇数的时候又像开始那样反超，距离又是C-1，就永远追不上。</p><p>其他fast步数同理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;环形链表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle/&quot;&gt;141. 环形链表 - 力扣（LeetCode） (leetcode-cn.com)&lt;/a&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(2)【链表】合并链表&amp;返回中间链表</title>
    <link href="http://example.com/2021/05/26/LeetCode%E5%88%B7%E9%A2%98(2)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8&amp;%E8%BF%94%E5%9B%9E%E4%B8%AD%E9%97%B4%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2021/05/26/LeetCode%E5%88%B7%E9%A2%98(2)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8&amp;%E8%BF%94%E5%9B%9E%E4%B8%AD%E9%97%B4%E9%93%BE%E8%A1%A8/</id>
    <published>2021-05-26T13:21:37.000Z</published>
    <updated>2021-06-05T08:08:36.702Z</updated>
    
    <content type="html"><![CDATA[<p><strong>快慢指针问题：</strong></p><p>思路：定义一个快指针和一个慢指针，快指针走到结束的时候，慢指针刚好走到一半。</p><p><strong>链表的中间结点。</strong></p><p><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点 - 力扣（LeetCode） (leetcode-cn.com)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *next;</span><br><span class="line"> * &#125;;</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct ListNode* middleNode(struct ListNode* head)&#123;</span><br><span class="line">    struct ListNode* slow &#x3D; head;</span><br><span class="line">    struct ListNode* fast &#x3D; head;</span><br><span class="line">    while(fast !&#x3D; NULL &amp;&amp; fast-&gt;next !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        slow &#x3D; slow-&gt;next;</span><br><span class="line">        fast &#x3D; fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并两个有有序链表：</strong></p><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>思路：从头开始取两个链表中小的那个尾插到新链表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">mergeTwoLists</span><span class="params">(struct ListNode* l1, struct ListNode* l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果有一个链表是空的，那么直接返回另个一个链表</span></span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个头指针head和尾指针tail</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">tail</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//如果来个两边都不是空链表进入迭代循环 </span></span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果取出来的值l1的小于l2的</span></span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果新链表是第一次插入</span></span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//头尾指针都是l1的这一个元素</span></span><br><span class="line">                head = tail = l1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果新链表不是第一次插入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//新链表的下一个结点是l1这个与元素</span></span><br><span class="line">                tail-&gt;next = l1;</span><br><span class="line">                <span class="comment">//现在的尾巴是传入的这个元素</span></span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//链表l1的第一个元素往后推移一个</span></span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果l1的第一个元素大于等于l2的第一个元素</span></span><br><span class="line">        <span class="comment">//下面同上</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tail == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = tail = l2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tail-&gt;next = l2;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环结束</span></span><br><span class="line">    <span class="comment">//如果链表l1或者链表l2其中的一个还有元素，那么就直接插到后面</span></span><br><span class="line">    <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next = l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next = l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;快慢指针问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;思路：定义一个快指针和一个慢指针，快指针走到结束的时候，慢指针刚好走到一半。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表的中间结点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(1)【链表】反转链表</title>
    <link href="http://example.com/2021/05/23/LeetCode%E5%88%B7%E9%A2%98(1)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2021/05/23/LeetCode%E5%88%B7%E9%A2%98(1)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-05-23T07:25:29.000Z</published>
    <updated>2021-06-05T08:08:49.091Z</updated>
    
    <content type="html"><![CDATA[<hr><p>题目链接——<a href="https://leetcode-cn.com/problems/reverse-linked-list/submissions/">206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a>**</p><hr><p><strong>反转链表</strong></p><p><strong>思路一:反转指针</strong>。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125459086.png" alt="image-20210523125459086"></p><p>本质上就是调转指针的方向。</p><p>首先我们定义两个指针,一个叫n1，一个叫n2。(Node1,Node2)</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125823700.png" alt="image-20210523125823700"></p><p>让n2指向第一个结点，让n1指向空。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523125932679.png" alt="image-20210523125932679"></p><p>n2-&gt;next指向n1。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523130017978.png" alt="image-20210523130017978"></p><p>但是，两个指针是反不转的。因为：</p><p>这里让n2-&gt;next指向n1，就是把n1的值存到n2的next上，n2-&gt;next原来存的是2的地址，现在存的是NULL，但是继续往后走的时候，我们发现找不到2了 。</p><p>所以要反转指针，两个指针是反不动的，要用3个。</p><p>前两个指针 反转，最后一个指针负责记录下一个位置。</p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523130643211.png" alt="image-20210523130643211"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131751386.png" alt="image-20210523131751386"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131821728.png" alt="image-20210523131821728"></p><p><img src="/images/LeetCode%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.assets/image-20210523131916171.png" alt="image-20210523131916171"></p><p>什么时候结束</p><p>n2 == NULL；</p><hr><p>重复的条件用循环解决</p><ol><li>初始条件</li><li>迭代过程</li><li>结束条件</li></ol><p>画图看起来很浪费时间，但提升了写代码的体验，更好的解决问题。</p><hr><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">reverseList</span><span class="params">(struct ListNode* head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化条件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">n1</span> =</span> <span class="literal">NULL</span>,*n2 = head,*n3 = n2-&gt;next;</span><br><span class="line">    <span class="comment">//结束条件</span></span><br><span class="line">    <span class="keyword">while</span>(n2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//迭代过程</span></span><br><span class="line">        n2-&gt;next = n1;</span><br><span class="line">        <span class="comment">//往后推移</span></span><br><span class="line">        <span class="comment">//两个相等就是往后推移</span></span><br><span class="line">        n1 = n2;</span><br><span class="line">        n2 = n3;</span><br><span class="line">        <span class="keyword">if</span>(n3 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            n3 = n3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><strong>思路二：头插法</strong></p><p>取结点头插到新链表中。cur是当前操作结点，用一个next来保存下一个结点(同上)。</p><p>文字简单描述：</p><p>​    从原链表去一个点下来，放到新的链表中，当做新链表的头结点cur = newhead,</p><p>迭代往后走，取下一个结点……</p><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">reverseList</span><span class="params">(struct ListNode* head)</span></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">cur</span> =</span> head;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newHead</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span> =</span> cur-&gt;next;</span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        cur-&gt;next =newHead;</span><br><span class="line">        newHead = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;题目链接——&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/submissions/&quot;&gt;206. 反转链表 - 力扣（LeetCode） (leetcode-cn.com)&lt;/a&gt;**&lt;/</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现学生成绩管理系统</title>
    <link href="http://example.com/2021/05/19/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/05/19/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-05-19T11:41:46.000Z</published>
    <updated>2021-05-19T11:45:07.052Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV13z4y117qC?p=8">【C/C++课程设计】史上最全最详细的学生成绩管理系统上线啦，完成大学课程设计不是问题！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//从键盘接收一个按键，无序按回车的那种</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> stuNum;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="comment">//定义链表的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Student stu;<span class="comment">//学生-数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Node</span>* <span class="title">pNext</span>;</span><span class="comment">//指向下一个结点的指针</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="comment">//定义头结点</span></span><br><span class="line">Node* g_pHead = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//录入学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个结点-动态开辟</span></span><br><span class="line">Node* pNewNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">pNewNode-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead == <span class="literal">NULL</span>)<span class="comment">//原来什么也没有</span></span><br><span class="line">&#123;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNewNode-&gt;pNext = g_pHead;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生姓名:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, pNewNode-&gt;stu.name);<span class="comment">//name是数组名，不用加&amp;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生年龄:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pNewNode-&gt;stu.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pNewNode-&gt;stu.stuNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的成绩:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pNewNode-&gt;stu.score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;录入完成！\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t————————欢迎使用高校学生管理系统——————----\t\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t学号\t*\t姓名\t*\t年龄\t*\t成绩*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t%d\t\t%s\t\t%d\t\t%d\t\n&quot;</span>,p-&gt;stu.stuNum,p-&gt;stu.name,p-&gt;stu.age,p-&gt;stu.score);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------——————————————------\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;文件路径&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败。\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fwrite(&amp;p-&gt;stu, <span class="number">1</span>,<span class="keyword">sizeof</span>(Student),fp);</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;保存数据成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">browerStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\xuanxuan\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">Student stu;</span><br><span class="line"><span class="keyword">while</span> (fread(&amp;stu, <span class="number">1</span>, <span class="keyword">sizeof</span>(Student), fp))<span class="comment">//只要不是文件末尾就继续读</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点</span></span><br><span class="line">Node* pNewNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">pNewNode-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(pNewNode,&amp;stu,<span class="keyword">sizeof</span>(Student));</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead == <span class="literal">NULL</span>)<span class="comment">//原来什么也没有</span></span><br><span class="line">&#123;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNewNode-&gt;pNext = g_pHead;</span><br><span class="line">g_pHead = pNewNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加载数据成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计所有学生人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">nCount++;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找学生</span></span><br><span class="line"><span class="function">Node* <span class="title">findStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStudent;</span><br><span class="line"><span class="keyword">char</span> nName[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的学生学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nStudent);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的学生姓名:\n&quot;</span>, nName);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,nName);</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;stu.stuNum == nStudent || <span class="number">0</span> == <span class="built_in">strcmp</span>(p-&gt;stu.name , nName))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStunum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要修改学生的学号:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nStunum);</span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入修改学生的姓名 年龄 成绩：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, p-&gt;stu.name, &amp;p-&gt;stu.age, &amp;p-&gt;stu.score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功。\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到该学生信息。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除学生信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nStunum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的学生学号。\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;nStunum);</span><br><span class="line"></span><br><span class="line">Node* p1,*p2;</span><br><span class="line"><span class="comment">//判断是不是头结点</span></span><br><span class="line"><span class="keyword">if</span> (g_pHead-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line">p1 = g_pHead;</span><br><span class="line">g_pHead = g_pHead-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是头结点</span></span><br><span class="line">Node* p = g_pHead;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext-&gt;stu.stuNum == nStunum)</span><br><span class="line">&#123;</span><br><span class="line">p2 = p-&gt;pNext;</span><br><span class="line">p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功。\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;pNext;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;pNext ==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此人。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t欢迎使用高校学生管理系统*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t1.录入学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t2.打印学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t3.保存学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t4.读取学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t5.统计所有学生人数\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t6.查找学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t7.修改修生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t8.删除学生信息\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\t0.退出系统\t\t*\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//键盘输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">char</span> ch = _getch();</span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:<span class="comment">//录入</span></span><br><span class="line">inputStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:<span class="comment">//打印</span></span><br><span class="line">printStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:<span class="comment">//保存</span></span><br><span class="line">saveStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:<span class="comment">//读取</span></span><br><span class="line">browerStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:<span class="comment">//统计</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学生总人数为:%d\n&quot;</span>, countStudent());</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:<span class="comment">//查找</span></span><br><span class="line">&#123;</span><br><span class="line">Node* p = findStudent();</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;学号:%d\t姓名:%s\t年龄:%d\t成绩:%d\n&quot;</span>, p-&gt;stu.stuNum, p-&gt;stu.name, p-&gt;stu.age, p-&gt;stu.score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到该学生。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:<span class="comment">//修改</span></span><br><span class="line">modifyStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:<span class="comment">//删除</span></span><br><span class="line">deleteStudent();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入。\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line">keyDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV13z4y117qC?p=8&quot;&gt;【C/C++课程设计】史上最全最详细的学生成绩管理系统上线啦，完成大学课程设计不是问题！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibi</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言文件操作</title>
    <link href="http://example.com/2021/05/18/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/05/18/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2021-05-18T08:37:38.000Z</published>
    <updated>2021-05-18T08:44:09.503Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1F54y1r7ww?from=search&seid=15927253292233017726">C语言精华——C语言文件操作，文件打开、关闭、读取、定位如何操作？为你逐一讲解文件操作标准库函数_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>文件分类：</strong></p><p>一种是文本文件，一种是二进制文件。</p><ul><li>文本文件：保存的时候，没一个字符对应一个字节。</li><li>二进制文件：按照二进制编码保存的文件。</li></ul><p><strong>文件操作：</strong></p><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a><strong>打开文件</strong></h1><p> 打开文件fopen(“文件路径”，”打开方式”)</p><p>参数：-(百度百科)</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.assets/20210517213436.png"></p><p>(选中函数按F1打开msdn文档）</p><p>打开文件成功返回一个文件指针，打不开返回 NULL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(fp)) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ch);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose();</span><br></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><h2 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch  = fgetc();<span class="comment">//返回一个字符，一个字符一个字符的读取。</span></span><br></pre></td></tr></table></figure><p> 打开文件之后，到关闭文件之前操作，会有一个文件指针定位到你当前操作到哪里了，读取了一个字节，文件指针就会继续往后偏移。</p><hr><p><strong>读取完会将文件指针移动到下一个字符。</strong></p><hr><p>可以使用循环将全部文本全部内容读取。</p><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h2><p>读取一行fgets()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">fgets(str,<span class="number">200</span>,fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str);</span><br></pre></td></tr></table></figure><p>也可以通过循环将内容一行一行的读取出来。</p><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>fread想读多少读多少</p><p>fread(str存到哪,每个元素大小，读几个，文件)；</p><p>返回实际读取的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(str,<span class="number">1</span>,<span class="number">10</span>,fp);</span><br></pre></td></tr></table></figure><hr><p>清零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化</span></span><br><span class="line">   或</span><br><span class="line"><span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="keyword">sizeof</span>(str);</span><br><span class="line">       或</span><br><span class="line"><span class="keyword">int</span> n = fread(str,<span class="number">1</span>,<span class="number">10</span>,fp);</span><br><span class="line">str[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><h2 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h2><p>fputc(‘内容’,文件);</p><h2 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h2><p>写入一个字符串</p><p>fputs();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* str = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx\r\n&quot;</span>;</span><br><span class="line">\r\n回车</span><br><span class="line"><span class="built_in">fputs</span>(str,fp);</span><br></pre></td></tr></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><p>fwrite想写多少写多少</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">123124</span>;</span><br><span class="line">fwrite(&amp;num,<span class="keyword">sizeof</span>(num),<span class="number">1</span>,fp);</span><br><span class="line">第一个参数类型是<span class="keyword">void</span>* 可以转化为任意类型</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;_Person;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person p1 = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">20</span>&#125;;</span><br><span class="line">fwrite(&amp;p1, <span class="number">1</span>, <span class="keyword">sizeof</span>(p1), fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.assets/image-20210518120745992.png" alt="image-20210518120745992"></p><h1 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h1><p>文件指针定位</p><h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h2><p>fseek(fp,0,SEEK_SET)</p><p>能够移动文件指针</p><p>可以指定文件从哪里开始读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">200</span>];</span><br><span class="line">fseek(fp, <span class="number">10</span>, SEEK_SET);</span><br><span class="line">fread(str,<span class="number">1</span>,<span class="number">100</span>,fp);</span><br></pre></td></tr></table></figure><p>在当前位置再往后移动x个位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">10</span>,SEEK_CUR);</span><br></pre></td></tr></table></figure><p>读取文件最后一行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">0</span>,SEEK_END);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;_Person;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;C:\\Users\\XX\\Desktop\\test.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取文件最后一行</span></span><br><span class="line">fseek(fp,<span class="number">0</span>,SEEK_END);</span><br><span class="line"><span class="comment">//反着读</span></span><br><span class="line">fseek(fp, <span class="number">-1</span>, SEEK_END);</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fread(&amp;ch, <span class="number">1</span>, <span class="number">1</span>, fp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(fp,<span class="number">-2</span>,SEEK_CUR);</span><br><span class="line">length++;<span class="comment">//统计退了多少格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;length = %d\n&quot;</span>, length);</span><br><span class="line">fseek(fp, -length, SEEK_END);</span><br><span class="line"><span class="keyword">char</span>* buffer = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * length + <span class="number">1</span>);<span class="comment">//多一个空间存储字符串终止符</span></span><br><span class="line"><span class="built_in">memset</span>(buffer,<span class="number">0</span>,length+<span class="number">1</span>);</span><br><span class="line">fread(buffer, <span class="number">1</span>, length,fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buffer);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h2><p>重置文件指针，返回到文件的开头。</p><h2 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h2><p>返回当前指针位置。</p><hr><p>文件指针移动了多少个字节，该文件的大小就是多少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rewind(fp);<span class="comment">//重置文件指针到开头</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);<span class="comment">//将文件指针定位到结尾</span></span><br><span class="line"><span class="keyword">int</span> nSize = ftell(fp);<span class="comment">//文件指针偏移量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nSize);</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1F54y1r7ww?from=search&amp;seid=15927253292233017726&quot;&gt;C语言精华——C语言文件操作，文件打开、关闭、读取、定位如何操作？为</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机二级考试公共基础知识部分——-数据库</title>
    <link href="http://example.com/2021/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2021/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-05-18T03:12:32.000Z</published>
    <updated>2021-05-18T03:19:57.152Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1Hb411G7bV?p=23&spm_id_from=pageDriver">【极客学院】计算机等级考试二级c语言：公共基础知识部分（下）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>我的小站——[半生瓜のblog](<a href="http://doraemon2.xyz/">半生瓜のblog (doraemon2.xyz)</a>)</p><p>现在是不是就只有河北和重庆还没考试了T_T。</p><hr><h1 id="数据库系统的基本概念"><a href="#数据库系统的基本概念" class="headerlink" title="数据库系统的基本概念"></a>数据库系统的基本概念</h1><ul><li>数据：描述事物的符号记录。</li><li>数据的特点：有一定的结构，有型与值之分，如整型、实型、字符型等。而数据的值给出了符合定性的值，如整形值15。</li><li>数据库(DB):是数据的集合，具有统一的结构形式并存放于统一的存储介质内，是多种应用数据的集成，并可被各个应用程序共享。</li></ul><p>数据库存放数据是按 <strong>数据所提供的数据模式存放的，具有集成与共享的特点。</strong></p><ul><li>数据库管理系统(DBMS):一种系统软件，负责数据库中的数据组织、数据操纵、数据维护、控制及保护和数据服务等，是<strong>数据库的核心。</strong></li><li>数据库管理系统的功能：<ul><li>数据模式定义；</li><li>数据存取的物理构建；</li><li>数据操纵；</li><li>数据的完整性、安全性定义与检查；</li><li>数据的并发控制与故障恢复；</li><li>数据的服务：如拷贝、转存、重组、性能监测、分析等。</li></ul></li><li>为了完成上述六个功能，数据库管理系统提供以下的数据语言：<ul><li>数据定义语言(DDL):负责数据的模式定义与数据的物理存取构建；</li><li>数据操纵语言(DML):负责数据的操纵，如增删查改等；</li><li>数据的控制语言(DCL):负责数据完整性、安全性的定义与检查以及并发控制、故障恢复等。</li></ul></li><li>数据语言按使用方式有两种结构形式：<ul><li>交互式命令( 又称自含型或自主型语言)；</li><li>宿主型命令(一般可嵌入某些宿主语言中)。</li></ul></li><li>数据库管理员(DBA):对数据库进行规划、设计、维护、监视等专业管理人员。</li><li>数据库系统(DBS):由数据库(数据)、数据库管理软件(软件)、数据库管理员(r人员)、硬件平台(硬件)、软件平台(软件)五个部分构成的运行实体。</li><li>数据库应用系统(DBAS):由数据库系统、应用软件及应用界面三者组成。</li></ul><h1 id="数据库系统的发展"><a href="#数据库系统的发展" class="headerlink" title="数据库系统的发展"></a>数据库系统的发展</h1><ul><li>数据库系统的发展：<ul><li>文件系统阶段:提供了简单的数据共享与数据管理能力，但是它无法提供完整的、统一的、管理和数据共享的能力。</li><li>层次数据库与网状数据库系统阶段:为统一与共享数据提供了有力支撑。</li><li>关系数据库系统阶段:结构简单,使用方便,逻辑性强,物理性少,使用广泛。</li></ul></li><li>数据库的<strong>根本目的</strong>：解决<strong>数据的共享</strong>问题。</li></ul><h1 id="数据库系统的基本特点"><a href="#数据库系统的基本特点" class="headerlink" title="数据库系统的基本特点"></a>数据库系统的基本特点</h1><ul><li>数据库系统的基本特点：<ul><li>数据的集成性；</li><li>数据的高共享性与低冗余性；</li><li>数据的独立性(物理独立性和逻辑独立性)；</li><li>数据的统一管理与控制。</li></ul></li></ul><h1 id="数据库系统的内部结构体系"><a href="#数据库系统的内部结构体系" class="headerlink" title="数据库系统的内部结构体系"></a>数据库系统的内部结构体系</h1><ul><li><p>数据库系统的三级模式：</p><ul><li>概念模式：数据库系统中全局数据逻辑结构的描述，全体用户公共数据视图；</li><li>外模式:也称子模式与用户模式。是用户的数据视图，也就是用户所见到的数据模式；</li><li>内模式:又称物理模式,它给出了<strong>数据库物理存储结构与物理存取方法。</strong></li></ul></li><li><p>数据库系统的两级映射</p><ul><li>概念模式到内模式映射；</li><li>外模式到概念模式的映射。</li></ul></li><li><p>示意图：</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E2%80%94%E2%80%94-%E6%95%B0%E6%8D%AE%E5%BA%93.assets/image-20210518104351969.png" alt="image-20210518104351969"></p></li></ul><h1 id="数据库的设计与管理"><a href="#数据库的设计与管理" class="headerlink" title="数据库的设计与管理"></a>数据库的设计与管理</h1><ul><li>数据库设计概述<ul><li><strong>数据库设计是数据应用的核心</strong>。</li><li>数据库设计的两种方法：<ul><li>面向数据:以信息需求为主，兼顾处理需求；</li><li>面向过程:以处理需求为主，兼顾信息需求。 </li></ul></li><li>数据库的生命周期:需求分析阶段、概念设计阶段、逻辑设计阶段、物理设计阶段、编码阶段、测试阶段、运行阶段、进一步修改阶段。</li></ul></li><li>数据设计的需求分析<ul><li>需求分析:主要任务是收集和分析数据，这一阶段收集的基础数据和数据流图是下一阶段的基础。</li><li>需求分析常用结构化分析方法和面向对象的方法。<ul><li>结构化分析(SA）方法用自顶向下、逐层分解的方式分析系统。用数据流图表达数据和处理过程的关系。对数据库设计来讲，数据字典是进行详细的数据收集和数据分析所获得的主要结果。</li><li>数据字典是各类数据描述的集合,包括5个部分:数据项数据结构、数据流（可以是数据项,也可以是数据结构)、数据存储、处理过程。</li></ul></li></ul></li><li>数据库概念设计<ul><li>数据库<strong>概念设计</strong>的目的是<strong>分析数据内在的语义关系</strong>，建立数据的抽象模型，即E-R图。</li><li>设计的方法有两种：<ul><li>集中式模式设计法(适用于小型或并不复杂的单位或部门)；</li><li>视图集成设计法。</li></ul></li><li> E-R模型与视图集成</li><li>视图设计一般有三种设计次序:自顶向下、由底向上、由内向外。</li><li>视图集成的几种冲突:命名冲突、概念冲突、域冲突、约束冲突。</li></ul></li><li>数据库的逻辑设计<ul><li><strong>逻辑设计</strong>:将E-R图转化为制定RDBMS中的关系模式。</li><li>关系视图设计:关系视图的设计又称外模式设计。</li><li>关系视图的主要作用:<ul><li>提供数据逻辑独立性；</li><li>能适应用户对数据的不同需求；</li><li>有一定数据保密功能。 </li></ul></li></ul></li><li>数据库的物理设计<ul><li>数据库的物理设计主要目标是对数据内部物理结构作调整并选择合理的存取路径,以提高数据库访问速度有效利用存储空间。</li><li>一般RDBMS中留给用户参与物理设计的内容大致有索引设计、集成簇设计和分区设计。</li></ul></li><li>数据库管理<ul><li>数据库的建立；</li><li>数据库的调整；</li><li>数据库的重组；</li><li>数据库安全性与完整性控制；</li><li>数据库的故障恢复；</li><li>数据库监控。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1Hb411G7bV?p=23&amp;spm_id_from=pageDriver&quot;&gt;【极客学院】计算机等级考试二级c语言：公共基础知识部分（下）_哔哩哔哩 (゜-゜)つロ </summary>
      
    
    
    
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>C语言的灵魂——-指针</title>
    <link href="http://example.com/2021/05/16/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2021/05/16/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88/</id>
    <published>2021-05-16T12:00:28.000Z</published>
    <updated>2021-05-17T11:20:48.687Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——强烈推荐<a href="https://www.bilibili.com/video/BV1bo4y1Z7xf?p=1">【强烈推荐】4小时彻底掌握C指针 - 顶尖程序员图文讲解 - UP主亲自翻译校对 (已完结)_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p>在学习这个之前，你需要了解函数、循环、数组等C语言知识</p><hr><h1 id="指针基本介绍"><a href="#指针基本介绍" class="headerlink" title="指针基本介绍"></a>指针基本介绍</h1><hr><p>计算机的每一个字节都有一个地址。</p><p>int a,当代码运行的时候，计算机会在内存中开辟一些空间给a。分配多少空间，取决有具体的数据类型。</p><hr><p>指针是一个变量，他存放这另一个变量的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//定义一个整型变零a</span></span><br><span class="line">    <span class="keyword">int</span>* p;<span class="comment">//定义一个指针变量p</span></span><br><span class="line">    p = &amp;a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p是一个指针变量，换句话说p是一个可以存放整型变量地址的变量。</p><p>&amp;叫做取地址符，放在一个变量的前面，我们就得到了那个变量的地址，它返回一个指针，指向那个特定的变量。</p><p>*叫做解引用操作符，操作指针所指向的那个地址的内容（值）。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的结果是什么？</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;p);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//a的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);<span class="comment">//a的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a);<span class="comment">//a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p;<span class="comment">//a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;p);<span class="comment">//p的地址</span></span><br></pre></td></tr></table></figure><hr><p>int* a;意味着指向整型的指针然后写出变量名。</p><h2 id="指针的算数运算"><a href="#指针的算数运算" class="headerlink" title="指针的算数运算"></a>指针的算数运算</h2><p>步长：与是指向什么类型的指针有关系，就是走一步能跨过几个字节的距离。</p><p>下面两个输出，相差4个字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出的是一个垃圾值，因为我们根本就没有对这个地址分配一个整型变量，所以解引用会出现一个随机值（垃圾值）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h1><p>指针是强类型的，你需要一个特定类型的指针变量来存放特定类型变量的地址，</p><p>例如对于int*来说，你就需要一个指向整型类型的指针，来存放整型数据的地址。</p><p><strong>为什么指针是强类型的？</strong></p><p><strong>因为，</strong>我们不仅使用指针来存储内存地址，同时也用来解引用他所存储的地址所对应的内容，这样我们就能访问并且修改这些地址对应的值了。</p><p><strong>不同</strong>的数据有不同的大小，例如整型在内存中占四个字节，字符型占一个字节。</p><p>假设int a = 1021;</p><p>在内存中占4个字节，32个比特位，如图：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511175536148.png" alt="image-20210511175536148"></p><p>​    </p><p>其中，最左边的位来表示符号位，0为正，1位负，剩下的32位来存储值。</p><p>现在声明一个整型指针来指向a,</p><p>int* p = &a;</p><p>现在打印p——printf（”%d\n”,p）;</p><p>得到的结果200，也就是说该整型变量在内存中的起始地址是200。</p><p>现在打印p所指向地址所对应的值——pintf(“%d\n”,*p);</p><p>从200开始，int类型占4个字节，到203，提取这个整型的值，得到的结果1025。</p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1025</span>;</span><br><span class="line"><span class="keyword">int</span>* p;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;整型所占字节数是%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p所指向的地址是%d\np所指向的地址对应的值是%d\n&quot;</span>,p,*p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511185807926.png" alt="image-20210511185807926"></p><p><strong>接着我们在上面的基础上生命一个字符型指针,并且将整型指针的值赋给该字符型指针。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* p0;</span><br><span class="line">p0 = p;</span><br></pre></td></tr></table></figure><p>这会提示一个编译错误，因为p0是一个字符型指针，而p是一个整型指针。</p><p><strong>下面我们进行强制类型转换,并进行输出。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p0  = (<span class="keyword">char</span>*)p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符型所占的字节数是%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p0所指向的地址是%d\np0所在指向的地址对应的值是%d\n&quot;</span>, p0, *p0);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190049581.png" alt="image-20210511190049581"></p><p>我们发现所对应的内存地址变了，因为程序在每次运行的时候，都会重新为变量分配内存地址。</p><p>这里p0所指向的地址所对应的值也变了，我们发现跟p并不一样，这是为什么呢？</p><p>同上面的图，这是1025作为整型在内存中的分部，整型在内存中占4个字节，32个比特位，而我们这里将他强制存进了字符型指针中，字符型在内存中占1个字节，8个比特位，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190200850.png" alt="image-20210511190200850"></p><p>所以只获得了最左边的一个字节，也就是1。</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511190512584.png" alt="image-20210511190512584"></p><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p>这里我们再次进行指针的算数运算，将p0+1获得新地址，并且对他进行解引用得到该地址所对应的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p0+1所指向的地址是%d\np0+1所指向的地址对应的值是%d\n&quot;</span>, p0+<span class="number">1</span>, *(p0+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>结果如下图表示。</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511191001194.png" alt="image-20210511191001194"></p><p>因为char类型所占字节数是1，所以步长(+1跳过的字节数)是1，该地址所对应的值是，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511191301868.png" alt="image-20210511191301868"></p><p>二进制转化为十进制表示得4(0*2^0+0 *2^1+ 1 * 2^2 = 4)。</p><hr><p>进制转化忘了的同学可以来看一下我的这篇笔记——<a href="http://doraemon2.xyz/2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/">进制之间的转换 | 半生瓜のblog (doraemon2.xyz)</a></p><hr><h2 id="void空指针"><a href="#void空指针" class="headerlink" title="void空指针"></a>void空指针</h2><p>现在我们讨论一种通用的指针类型，它不针对某个特定的数据类型，这种类型的指针被称为void类型的指针，我们使用void来声明这种特定的指针类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* p1;p1 = p;</span><br></pre></td></tr></table></figure><p>这里我们不需要显式的类型转换,p1 = p是合法的，不会有编译错误。</p><p>但是它没有映射到特定的类型，所以我们不能对它进行解引用，*p1是违法的。</p><p>我们只能打印出地址。（p0+1也是不行的，也会有编译错误）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p1);</span><br></pre></td></tr></table></figure><h1 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h1><p>直接上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int x = 5;int* p = &amp;x;*p = 6;int** q = &amp;p;int*** r = &amp;q;return 0; &#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>接下来让我们打印一些东西</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*q);<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*q));<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*r));<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(*(*r)));</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210511200806837.png" alt="image-20210511200806837"></p><p><strong>解释：</strong></p><p><strong>第一次没读懂一定要多读几次。</strong></p><p>​    p存的是x的地址，对x进行解引用得到x的值。<br>​    q存的是p的地址，p存的是x的地址,对q进行解引用得到x的地址，再进行一次解引用就是通过x的地址寻找对应的值，那就是x的值。</p><p>​    r存的是q的地址，q存的是p的地址，第一次解引用操作就是通过q的地址找到q所存的p的地址，p存的是x的地址，再对r进行一次解引用操作，就是p的地址里面存的是x的地址，结果得到x的地址，再对r进行一次解引用操作，就是通过x的地址寻找对应的值，那就是x的值。</p><p><strong>我们通过三级指针可以直接修改x的值</strong></p><p>就是通过对指针变量的解引用来修改对应地址所对应值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***r = <span class="number">10</span>;<span class="comment">//此时x的值由5变成了10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**q = *p + <span class="number">2</span>;<span class="comment">//此时x的值由10变成了12</span></span><br></pre></td></tr></table></figure><h1 id="函数传值-amp-传-址-引用"><a href="#函数传值-amp-传-址-引用" class="headerlink" title="函数传值&amp;传(址)引用"></a>函数传值&amp;传(址)引用</h1><p>函数与指针。</p><p><strong>传值。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Increment(int a)&#123;a += 1;&#125;int main(void)&#123;int a = 10;Increment(a);printf(&quot;a = %d\n&quot;, a);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>我们发现值并没有改变，我们打印下两个地址看一下，</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512111430844.png" alt="image-20210512111430844"></p><p>是两个<strong>不同的内存空间</strong>，所以值没被修改。</p><p><strong>解释：</strong></p><p>main()是主调函数，Increment()是被调函数，当我们在主调函数中调用其他函数时，这个参数叫做实参，这个被调函数的参数叫做形参，实参会被映射到形参，当这个函数被调用的时候，主函数中的实参’a’会被映射到Increment函数的形参’a’里面，当我们进行这样的调用的时候，基本上就是把一个变量拷贝到另一个变量，这种形式的函数掉用也被称为，<strong>传值调用。</strong></p><p>如果修改成功的话，这两个应该是一个地址，<strong>引出传(址)引用。</strong></p><p><strong>传(址)引用，只需要一点点的修改。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Increment(int* a)&#123;*a = *a + 1;&#125;int main(void)&#123;int a = 10;Increment(&amp;a);printf(&quot;%d\n&quot;,a);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>这样的函数调用不是传值，而是将变量的地址传了过去，我们可以引用这个变量，解引用并且进行一些操作，这就是传(址)引用，传(址)引用可以节省很多内存空间，相比之下引用所占的内存也会小得多，避免复杂的数据类型的拷贝，可以让我们节省内存。</p><h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p>二者之间有很强的联系。</p><p><strong>数组名就是一个指针。</strong></p><p> 如果使用数组名,会得到一个指向数组首元素的指针。</p><p><strong>例如：</strong></p><p>int* p = a；我们甚至都不需要在a前写&amp;。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;int* p = a;return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>如果我们打印a，会得到数组a的首元素地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>如果对它解引用会得到他首元素的值，1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*a);</span><br></pre></td></tr></table></figure><p>如果打印a+1,则会打印数组a第二个元素的地址。</p><p>同理对他解引用也会得到该地址所对应的元素值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>完整代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;printf(&quot;%d\n&quot;,a );//首元素地址printf(&quot;%d\n&quot;,&amp;a );//首元素地址printf(&quot;%d\n&quot;,*a );//首元素printf(&quot;%d\n&quot;,a[0]);//首元素return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512204028411.png" alt="image-20210512204028411"></p><p>需要注意的是，当把数组名字作为指针的时候，不能对它进行自增操作，会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;<span class="keyword">int</span>* p = a;p++;<span class="comment">//可以a++;//不可以</span></span><br></pre></td></tr></table></figure><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><p>数组作为函数参数传入。</p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int SumOfElement(int a[],int size)&#123;int sum = 0;for (int i = 0; i &lt; size; i++)&#123;sum += a[i];&#125;return sum;&#125;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;//得到数组中元素个数int size = sizeof(a) / sizeof(a[0]);int Sum = SumOfElement(a,size);printf(&quot;%d\n&quot;, Sum);//得到结果21return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>现在我们将求元素个数的代码放入SumOfElement函数中。代码如下，我们发现此时结果变成了1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int SumOfElement(int a[])&#123;int sum = 0;int size = sizeof(a) / sizeof(a[0]);for (int i = 0; i &lt; size; i++)&#123;sum += a[i];&#125;return sum;&#125;int main(void)&#123;int a[] = &#123; 1,2,3,4,5,6 &#125;;int Sum = SumOfElement(a);printf(&quot;%d\n&quot;, Sum);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p>​    <img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210512205738054.png" alt="image-20210512205738054"></p><p><strong>这是为什么呢？</strong></p><p>当编译器看到数组作为函数参数的时候，他不会拷贝整个数组，而是仅仅创建一个同名的指针，我们这里就是创建了一个整型指针，编译器只是拷贝了主调函数的数组首元素地址。</p><p>不管你在被调函数的参数中写int a[],还是int *a,结果都是一样的，它都只是一个整形指针而已。</p><p>这里我们不是拷贝变量的值，而仅仅拷贝了一个变量的地址，所以这里是传(址)引用，这个很有意义，因为数组可以很大， 每次拷贝整个数组没有意义，他会消耗大量的内存，一次对于数组来说不使用传值引用，而是传(址)引用。</p><p>这就是为什么我们这次数组的结果是1了， 因为被调函数中的a是个整型指针，而在主函数中a是一个数组。</p><p>所以计算数组元素个数的代码，还是应该放到主函数中。</p><hr><h2 id="指针和字符数组"><a href="#指针和字符数组" class="headerlink" title="指针和字符数组"></a>指针和字符数组</h2><p><strong>字符数组</strong></p><p>在C语言中为了更高效的操作字符串，我们需要理解一些事情，</p><p>我们如何把字符串存入和字符数组，</p><p>为了能够在字符数组中存储字符串，首要的需求就是字符数组必须要足够大，大到能够容纳字符串，字符数组的大小要大于等于字符的数量+1，</p><p>C语言的字符串必须以null结尾，这就是为什么我们需要一个额外的空间，是用来存放null的。</p><p><strong>代码示例：</strong></p><p>错误例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;char c[4];c[0] = &#x27;N&#x27;;c[1] = &#x27;S&#x27;;c[2] = &#x27;S&#x27;;c[3] = &#x27;B&#x27;;printf(&quot;%s\n&quot;, c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>我们发现字母后面出现了几个乱码，这是因为我们破坏了printf的默认规则,也就是字符串必须是以null结尾吧，这就是发生<strong>未定义</strong>行为的原因。</p><p><strong>下面我们进行一下修改</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;char c[5];c[0] = &#x27;N&#x27;;c[1] = &#x27;S&#x27;;c[2] = &#x27;S&#x27;;c[3] = &#x27;B&#x27;;c[4] = &#x27;\0&#x27;;printf(&quot;%s\n&quot;, c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>结果就正常了</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210513123554138.png" alt="image-20210513123554138"></p><p><strong>其他的字符操作函数也同样需要遵守这个固定，以null为结尾。</strong></p><p>写在同一行，系统会隐式的自动添加null为结尾</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = <span class="string">&quot;NSSB&quot;</span>;</span><br></pre></td></tr></table></figure><p> 不声明字符数组的个数也是可以的，系统会自动分配对应的字节数，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = <span class="string">&quot;ABCD&quot;</span>;<span class="keyword">sizeof</span>(c);<span class="comment">//sizeof的结果就是5，它刚好同来存放ABCDstrlen(c);//长度是4，不包括null</span></span><br></pre></td></tr></table></figure><p>如果我们这么声明，代码如下，这时我们需要显式的声明它的结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = &#123;<span class="string">&#x27;A&#x27;</span>，<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>引入指针</strong></p><p>声明一个字符数组和一个字符指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1[<span class="number">5</span>] = <span class="string">&quot;hello&quot;</span>;<span class="keyword">char</span>* c2;</span><br></pre></td></tr></table></figure><p>我们使用这个数组的名字和这个字符指针的名字放到等式中是成立的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是，将换个位置，    c1 = c2;是非法的</span><br></pre></td></tr></table></figure><p>c2中存的就是字符数组c1中首元素的地址(同上面的整型数组)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c2 =c1;</span><br></pre></td></tr></table></figure><p>解引用操作同上面的数组。</p><p><strong>代码示例：打印数组中的所有元素。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void print(char* c)&#123;int  i = 0;//*(c+i)同理while (c[i] != &#x27;\0&#x27;)&#123;printf(&quot;%c&quot;, c[i]);i++;&#125;&#125;int main(void)&#123;char c[20] = &quot;ABCDEF&quot;;print(c);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>* c)</span></span>&#123;<span class="keyword">while</span> (*c!= <span class="string">&#x27;\0&#x27;</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *c);c++;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：此时的字符数组就是一个指针，存的就是元素的地址，从首元素开始只要不是null就进入循环，然后元素地址进行自增，因为是字符型指针，所以步长就是1，遍历每个元素，直到null。</p><h2 id="指针和二维数组"><a href="#指针和二维数组" class="headerlink" title="指针和二维数组"></a>指针和二维数组</h2><p>简单复习一下什么是多维数组。</p><p><strong>就是在数组中储存数组。</strong></p><p>学习此部分之前，可以再复习一下上面指针和一维数组。</p><p><strong>个人理解</strong>：<strong>当多维数组名被当做指针的时候，多维数组就是指向指针的指针。</strong></p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int B[2][3] = &#123; &#123;1,2,3&#125;,&#123;4,5,6,&#125; &#125;;int(*p)[3] = B;//打印首元素地址B[0][0]printf(&quot;%d\n&quot;, &amp;B[0][0]);printf(&quot;%d\n&quot;,B );printf(&quot;%d\n&quot;,p );printf(&quot;%d\n&quot;,*B );printf(&quot;%d\n&quot;,*p);return  0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><strong>为什么我这么说呢？</strong></p><p><strong>对比理解</strong></p><p> 就是，一个二级指针，存的是一个一级指针的地址（首元素地址），然后再对该一级指针的地址进行解引用，得到该一级指针所存地址的值。</p><p><strong>例如：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**B);<span class="comment">//当数组名被作为指针的时候，B和*B意思一样。</span></span><br></pre></td></tr></table></figure><p>当二维数组的数组B被当成指针的时候，他里面存的是B [0] [0]的地址，再对他进行解引用得到的是对应的值，1。</p><p>（<strong>（同上）</strong>因为直接使用数组名会返回该数组的首元素的指针，是二维数组中的第一个一维数组的首元素地址，然后对这个首元素进行解引用操作，得到的是第一个元素的值。）</p><p><strong>不同点：</strong></p><p>B返回一个指向一个一维数组的指针，而*B返回一个指向整型的指针，当我们只是打印地址的时候，一维数组B[0]和B[0]的首元素的起始地址是一样的，所以打印的地址是相同的，指针类型会在你尝试解引用时或者尝试做指针算术的时候起作用。</p><hr><p>B [I] [J]可以写成 *（B[i]+j）  或者 *( *(B +i)+j )。—就是把B[i]写成 *(B+i)</p><p><strong>解释：</strong>直接用 数组名返回一个指向首元素的指针，（该二维数组中对应的哪个一维数组）,然后+j是对应一位数组中的，跳过的元素个数，也就是往后跳过几个字节，得到新的元素地址，最后，解引用得到该元素的值。</p><h2 id="指针和多维数组"><a href="#指针和多维数组" class="headerlink" title="指针和多维数组"></a>指针和多维数组</h2><p>（如何理解多维数组，最左边的维数就是一共划分了几块，第二位就是在每一块中继续分为几块，依次类推。）</p><p>（定义多维数组的指针的时候，后面的参数是该数组除去一个参数的几个参数）</p><p>多维数组-例如：三维数组就是二维数组的数组。     </p><p><strong>代码示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int main(void)&#123;int C[3][2][2] = &#123; &#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;,&#123;&#123;5,6&#125;,&#123;7,8&#125;&#125;,&#123;&#123;9,10&#125;,&#123;10,11&#125;&#125; &#125;;int (*p)[2][2] = C;//首元素地址printf(&quot;%d\n&quot;, &amp;C[0][0][0]);printf(&quot;%d\n&quot;,p);printf(&quot;%d\n&quot;, *p);printf(&quot;%d\n&quot;, C[0]);//打印首元素printf(&quot;%d\n&quot;, C[0][0][0]);printf(&quot;%d\n&quot;, ***p);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>同上面指针和二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C[i][j][k] = *(C[i][j]+k) = *(*(C[i][j]+k))</span><br></pre></td></tr></table></figure><p>如果你已经理解了，请问下面这个结果是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(C[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>));<span class="comment">//结果是4，上面示例中的代码。</span></span><br></pre></td></tr></table></figure><h2 id="多维数组作为参数传给函数"><a href="#多维数组作为参数传给函数" class="headerlink" title="多维数组作为参数传给函数"></a><strong>多维数组作为参数传给函数</strong></h2><p> （是几维数组,使用数组名作为指针就返回几维度-1的指针）</p><p>（例如：一维数组返回指向整型的指针，二维数组返回指向一维数组的指针，三维数组返回指二维数组的指针……）</p><p>多维数组作为函数参数的时候，数组的第一个维度可以省略，但是其余的维度需要指定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Func (int (*C)[2][2])&#123;&#125;int main(void)&#123;int C[3][2][2] = &#123;&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;,&#123;&#123;5,6&#125;,&#123;7,8&#125;&#125;,&#123;&#123;9,10&#125;,&#123;10,11&#125;&#125; &#125;;Func(C);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h1 id="指针和动态内存"><a href="#指针和动态内存" class="headerlink" title="指针和动态内存"></a>指针和动态内存</h1><hr><p>内存是机器中很关键的资源。</p><p>也可以看看我的这篇笔记——<a href="http://doraemon2.xyz/2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/">C语言动态内存开辟 | 半生瓜のblog (doraemon2.xyz)</a></p><hr><p><strong>相关函数：</strong></p><p>堆上分配内存的相关函数malloc calloc realloc</p><p>释放内存free</p><hr><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a><strong>malloc</strong></h2><p><strong>malloc</strong>返回一个void指针，这个指针指向了分配给我们的内存块的第一个字节的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>*p = <span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>我们不能解引用一个void指针，通常需要将它<strong>转化为一个特定类型的指针</strong>，然后再使用它。</p><p>因为malloc只是个通用的函数，在堆上分配一些内存，它并不关心你用这块内存存什么，它只是简单返回指向开辟出来的内存起始地址的指针。</p><p>为了使用这块内存我们需要进行<strong>指针类型转换</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure><p>动态内存的操作都是基于指针的，你拥有一个基地址指针。</p><hr><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a><strong>calloc</strong></h2><p><strong>calloc</strong> 和malloc类似，callo也是返回一个void型指针， 但是calloc接收两个参数，第一个参数是特定的元素数量，第二个参数是类型的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p = (<span class="keyword">int</span> *)<span class="built_in">calloc</span>(<span class="number">3</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span><br></pre></td></tr></table></figure><p>还有一个区别是，calloc在分配完内存之后会对其进行初始化，而malloc不会。</p><h2 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a><strong>realloc</strong></h2><p>如果你有一块内存，动态分配的内存，你想修改内存块的大小，那你就可以使用realloc，realloc接收两个参数，第一个参数是指向已分配内存的起始地址的指针，第二个参数是新的内存块的大小。</p><p><strong>如果去掉第一个参数，那么他和malloc是一样的效果</strong></p><p>这时会创建一个空的内存块，而不会从之前的内存块拷贝任何数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(<span class="literal">NULL</span>,n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); </span><br></pre></td></tr></table></figure><p> <strong>第二个参数是0,那么他和free是一样的效果</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(A,<span class="number">0</span>);<span class="comment">//将A释放 = free(A)</span></span><br></pre></td></tr></table></figure><p>reallo可能会有多种场景</p><ul><li>比如我们想要的新内存块可能比原来的内存要大，这种情况下机器可能会创建一块新的内存然后把原来的值拷贝过去，然后释放之前的内存，如果之前的那块内存的相邻处，还有还有连续的内存可用，那么可能会直接扩展之前的那块内存。</li></ul><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>free()将开辟出来的内存空间释放。</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h2><p>数组的个数不能是个变量，这时候我们就能用到动态内存开辟</p><p><strong>创建一个大小为n的数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main(void)&#123;int n = 0;scanf(&quot;%d&quot;, &amp;n);int* p = (int*)malloc(n * sizeof(int));    //int* p = (int *)calloc(n,sizeof(int));    //修改开辟内存大小    int* p1 = realloc(p,2*n*sizeof(int));return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>这种情况是由于不正确的使用动态内存引起的。</p><p><strong>内存泄漏就是在堆上增长垃圾。</strong></p><p>不正确的动态内存(堆)的使用引起。由于程序中已动态分配的没有释放，造成的系统内存浪费，导致系统运行减慢或者崩溃。——百度百科。</p><h1 id="函数返回指针"><a href="#函数返回指针" class="headerlink" title="函数返回指针"></a>函数返回指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int* Add(int* a,int* b)&#123;int c = *a + *b;return &amp;c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);    printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>加入一个简单的函数并且调用之后，我们发现程序运行错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Print()&#123;printf(&quot;Hello world\n&quot;);&#125;int* Add(int* a,int* b)&#123;int c = *a + *b;return &amp;c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);Print();printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210515211156453.png" alt="image-20210515211156453"></p><p><strong>这是为什么呢？</strong></p><p>栈，先进后出，先进的被压倒栈底， 当Add函数调用完成，返回一个指向结果的指针（地址），然后内存被释放，所指向的地址对应的值就是个垃圾值，尽管他指向这个地址，但是他的值是不能被保证的，因为内存被释放了，为后面的函数分配空间。</p><p>之后为Print函数分配栈空间，覆盖之前的空间。</p><hr><p>如果我们尝试将返回一个被调函数的局部变量给主函数，就像我们要返回一个Add函数的局部变量给main函数，当被调函数结束控制返回给主函数的时候，那块内存已经释放了，因此从栈顶向上传参数是可以的。</p><p>但是，</p><p>从栈顶向下传一个局部变量或者一个局部变量的地址是不可以的，</p><p>那么，什么情况下我们想要从函数返回一个指针呢？</p><p>如果我们在堆上有一个内存地址或者，在全局区有一个变量，那么我们就可以安全地返回他们的地址，因为堆上分配内存需要显示释放，由我们来控制他的释放。</p><hr><p>修改后的代码</p><p>malloc是在堆上开辟的空间不会被显式的释放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void Print()&#123;printf(&quot;Hello world\n&quot;);&#125;int* Add(int* a,int* b)&#123;int* c = (int*)malloc(sizeof(int));*c = *a + *b;return c;&#125;int main(void)&#123;int a = 3;int b = 5;int* z = Add(&amp;a,&amp;b);Print();printf(&quot;%d\n&quot;, *z);return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>因此，从函数返回指针的时候，我们需要小心它的作用范围，我们必须保证地址没有被重用（用来存储其他东西），以及那个地址的数据没有被清除。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>用来存储函数的地址</p><p>它指向或引用内存中的数据，这里的数据未必一定指变量，也可以是常量。</p><p>可以使用这样的指针来解引用和执行函数。</p><p>当我们说函数指针存放函数地址的时候， 我们是在说函数指针存放了函数在内存中的起始地址或者入口点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int Add(int a, int b)&#123;return a + b;&#125;int main(void)&#123;int c = 0;    //函数返回类型 参数类型 参数类型int (*p)(int, int);p = &amp;Add;//不使用&amp;也可以，只使用函数名会返回函数的地址    //p = Add;    //p(2,3)c = (*p)(2, 3);printf(&quot;%d\n&quot;, c);return 0;&#125;  </span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;void Print()&#123;printf(&quot;Hello&quot;);&#125;int main(void)&#123;void (*p)();p = Print;p();return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>函数指针可以被用来作为函数参数，接收函数指针的这个函数，可以回调函数指针所指向的那个函数，</p><p><strong>就是一个函数作为参数传递给另外一个函数。</strong></p><p>格式-返回类型(*函数名)(参数类型，参数类型，……)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;int compare(int a, int b)&#123;if (a &gt; b)return 1;elsereturn -1;&#125;void maopaoSort(int *a,int n,int(*compare)(int,int))&#123;int temp = 0;for (int i = 0; i &lt; n; i++)&#123;for (int j = 0; j &lt; n - 1; j++)&#123;if (compare(a[j] ,a[j+1])&gt;0)&#123;temp = a[j];a[j] = a[j + 1];a[j + 1] = temp;&#125;&#125;&#125;&#125;int main(void)&#123;int a[5] = &#123; 2,5,4,8,9 &#125;;maopaoSort(a, 5,compare);for (int i = 0; i &lt; 5; i++)&#123;printf(&quot;%d &quot;, a[i]);&#125;return  0;&#125;</span></span></span><br></pre></td></tr></table></figure><p>可以根据情况的不同写不同的回调函数</p><p>例如：比较绝对值后的大小，升序排列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">absSort</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">if</span> (<span class="built_in">abs</span>(a) &gt; <span class="built_in">abs</span>(b))<span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">else</span><span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br></pre></td></tr></table></figure><p>调用库函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int compare(const void*a,const void* b)&#123;int A = *((int*)a);int B = *((int*)b);return A - B;//值越大排名越高&#125;int main(void)&#123;int a[5] = &#123; 5,-6,-2,3,7 &#125;;qsort(a,5,sizeof(int),compare);for (int i = 0; i &lt; 5; i++)&#123;printf(&quot;%d &quot;,a[i]);&#125;return 0;&#125;</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%81%B5%E9%AD%82%E2%80%94%E2%80%94-%E6%8C%87%E9%92%88.assets/image-20210516122128095.png" alt="image-20210516122128095"></p><p>qsort能对任何数组进行排序，不仅仅是整形数组。只是你需要给出比较逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——强烈推荐&lt;a href=&quot;https://www.bilibili.com/video/BV1bo4y1Z7xf?p=1&quot;&gt;【强烈推荐】4小时彻底掌握C指针 - 顶尖程序员图文讲解 - UP主亲自翻译校对 (已完结)_哔哩哔哩 (゜-゜)つロ 干杯~-</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-指针" scheme="http://example.com/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>初识EasyX图形编程</title>
    <link href="http://example.com/2021/05/09/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/05/09/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/</id>
    <published>2021-05-09T05:01:35.000Z</published>
    <updated>2021-05-09T05:18:17.692Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV11p4y1i74A?p=1">【C/C++/EasyX】学编程，做游戏，小白快速入门图形编程，零基础入门到精通，学习就是这么快乐_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-基本说明"><a href="#1-基本说明" class="headerlink" title="1.基本说明"></a>1.基本说明</h1><ul><li>EasyX是针对C++的图形库，可以帮助C/C++初学者快速上手图形和游戏编程。</li><li>比如 ,可以基于EasyX图形库很快用几何图形画一个房子，或者一辆移动的小车，可以编写俄罗斯方块 、贪吃蛇、黑白棋等小游戏。</li><li>许多人学编程是从C语言入门的，而目前的现状是“<ul><li>学校值只教基础语法，一直在黑窗口练习，同学们学的很乏味。、</li><li>即使有的学校教图形编程，也是使用一些难度较高的， 比如Win32,OpenlGl门槛依然很高，初学者容易收到打击。</li><li>开始引出我们的EasyX。</li></ul></li></ul><h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h1><p>​        基于Windows图形编程，将Windows下的复杂程序过程进行封装,将Windows下的编程过程隐藏，给用户提供一个简单熟悉的接口。用户对于图形库中函数的调用，最终都会由Windows的底层API实现。</p><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h1><ul><li>Easyx图形库支持Vs各种版本，下载解压后，直接执行安装程序即可。</li><li>头文件graphics.h</li><li>帮助文档<a href="https://docs.easyx.cn/zh-cn/intro">EasyX 文档 - 基本说明</a></li><li>下载<a href="https://easyx.cn/">EasyX Graphics Library for C++</a></li></ul><h1 id="4-颜色"><a href="#4-颜色" class="headerlink" title="4.颜色"></a>4.颜色</h1><p>​    用RGB宏合成颜色，实际上合成出来的颜色是一个十六进制的的整数。</p><p>​    <strong>每个颜色部分的值都是0~255</strong></p><h1 id="5-坐标和设备"><a href="#5-坐标和设备" class="headerlink" title="5.坐标和设备"></a>5.坐标和设备</h1><ul><li>坐标默认的原点在窗口的左上角，X轴向右为正，Y 轴向下为正，度量单位是像素点。</li><li>设备：简单来说，就是绘图表面。<ul><li>在EasyX中,设备分两种，一种是默认的绘图窗口另一种是IMAGE对象。通过SetWorkinglmage()函数可以设置当前用于绘图的设备。设置当前用于绘图的设备后,所有的绘图函数都会绘制在该设备上。(后面再去理解)</li></ul></li></ul><h1 id="6-窗口函数"><a href="#6-窗口函数" class="headerlink" title="6.窗口函数"></a>6.窗口函数</h1><p>​    窗口函数用于窗口的一些操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initgraph(<span class="keyword">int</span> width,<span class="keyword">int</span> height,<span class="keyword">int</span> flag = <span class="literal">NULL</span>);<span class="comment">//用于初始化绘图窗口</span></span><br><span class="line"><span class="comment">//width 指定窗口的宽度</span></span><br><span class="line"><span class="comment">//height 指定窗口的高度</span></span><br><span class="line"><span class="comment">//flag 窗口的样式默认为NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">closegraph();<span class="comment">//关闭绘图窗口</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br></pre></td></tr></table></figure><h1 id="7-图形绘制函数"><a href="#7-图形绘制函数" class="headerlink" title="7.图形绘制函数"></a>7.图形绘制函数</h1><ul><li><p>图形绘制函数用于在窗口上绘制各种图形。</p></li><li><p>绘图函数从填充样式分类可以分为无填充，有边框填充，无边框三种。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以画圆为例</span><br><span class="line">    circle()无填充</span><br><span class="line">    fillcircle()有边框填充</span><br><span class="line">    solidcircle()无边框填充</span><br></pre></td></tr></table></figure><p>区别：</p><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202623558.png" alt="image-20210508202623558"></p><ul><li>从形状来分，常用的可以分为八种。</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508201228945.png" alt="image-20210508201228945"></p><ul><li>设置填充颜色setfillcolor()；</li><li>设置线条颜色setlinecolor();</li><li>设置线条样式setlinestyle();高，宽，字体</li></ul><h1 id="8-文字绘制函数"><a href="#8-文字绘制函数" class="headerlink" title="8.文字绘制函数"></a>8.文字绘制函数</h1><ul><li>文字绘制函数用于在窗口上绘制文字</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202106822.png" alt="image-20210508202106822"></p><h1 id="9-图像处理函数"><a href="#9-图像处理函数" class="headerlink" title="9.图像处理函数"></a>9.图像处理函数</h1><ul><li>图像处理函数用于在窗口上显示图片</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210508202202224.png" alt="image-20210508202202224"></p><h1 id="10-鼠标消息函数"><a href="#10-鼠标消息函数" class="headerlink" title="10.鼠标消息函数"></a>10.鼠标消息函数</h1><ul><li>鼠标消息函数用于获取鼠标的信息</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509115406258.png" alt="image-20210509115406258"></p><h1 id="11-键盘消息函数"><a href="#11-键盘消息函数" class="headerlink" title="11.键盘消息函数"></a>11.键盘消息函数</h1><ul><li>键盘消息函数用于获取键盘按键消息</li></ul><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509121713266.png" alt="image-20210509121713266"></p><h1 id="12-其他函数"><a href="#12-其他函数" class="headerlink" title="12.其他函数"></a>12.其他函数</h1><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509122340561.png" alt="image-20210509122340561"></p><h1 id="13-音乐播放"><a href="#13-音乐播放" class="headerlink" title="13.音乐播放"></a>13.音乐播放</h1><p><img src="/images/%E5%88%9D%E8%AF%86EasyX%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B.assets/image-20210509123501332.png" alt="image-20210509123501332"></p><h1 id="易错集锦"><a href="#易错集锦" class="headerlink" title="易错集锦"></a>易错集锦</h1><ol><li><p>源文件问题： fata1 error c1189: #error : EasyXis only for C++。</p><p><strong>后缀要是cpp</strong></p></li><li><p>参数错误，找不到对应的函数：error C2665： “outtextxy”:2个重载中没有一个可以转换所有参数类型。</p><p>是由于字符集导致的，1.在字符串前面加上大写的L，2.用TEXT(_T())把字符串包起起来。</p><p>不需要添加任何代码，项目-属性-常规-字符集-使用多字节字符集</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV11p4y1i74A?p=1&quot;&gt;【C/C++/EasyX】学编程，做游戏，小白快速入门图形编程，零基础入门到精通，学习就是这么快乐_哔哩哔哩 (゜-゜)つロ 干杯~-b</summary>
      
    
    
    
    <category term="图形编程" scheme="http://example.com/categories/%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-EasyX" scheme="http://example.com/tags/EasyX/"/>
    
    <category term="-图形编程" scheme="http://example.com/tags/%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>QQ轰炸器</title>
    <link href="http://example.com/2021/05/08/QQ%E8%BD%B0%E7%82%B8%E5%99%A8/"/>
    <id>http://example.com/2021/05/08/QQ%E8%BD%B0%E7%82%B8%E5%99%A8/</id>
    <published>2021-05-08T09:25:20.000Z</published>
    <updated>2021-05-08T10:07:51.752Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1Vf4y1W7aj?t=3">【C/C++技术教程】QQ轰炸机（两种版本）！程序员带你实现腾讯QQ消息轰炸，瞬间99+让对面防不胜防！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><p><strong>注意：群体轰炸，当轰完(群发)完你所选中的分组后，它会继续往下进行，对下一个分组进行发送,连QQ的各种服务号都算上。</strong></p><hr><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;//使用windows的资源</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.单独轰炸\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.群体轰炸\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.退出\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要轰炸的对象-&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你要轰炸的次数-&gt;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;times);</span><br><span class="line"><span class="comment">//HWND-窗口句柄</span></span><br><span class="line"><span class="comment">//窗口的id-编号 每一个窗口对应一个编号</span></span><br><span class="line">HWND qqhwnd;<span class="comment">//定义一个变量存储一个窗口的id</span></span><br><span class="line">qqhwnd = FindWindowA(<span class="literal">NULL</span>,name);<span class="comment">//两个信息，一个类名称，一个标题</span></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="comment">//向某一个窗口发送消息 鼠标-键盘-消息</span></span><br><span class="line"><span class="comment">//将要发送的消息复制到全局剪贴板</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line">&#123;</span><br><span class="line">SendMessageA(qqhwnd, WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">SendMessageA(qqhwnd, WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在吗？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//群体轰炸</span></span><br><span class="line">HWND qqhwnd;</span><br><span class="line"><span class="comment">//得到QQ主界面的窗口ID</span></span><br><span class="line">qqhwnd = FindWindowA(<span class="literal">NULL</span>, <span class="string">&quot;QQ&quot;</span>);</span><br><span class="line">MoveWindow(qqhwnd, <span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//1.选中主界面</span></span><br><span class="line"><span class="comment">//2.TAB TAB</span></span><br><span class="line"><span class="comment">//3.不断的按回车和下-打开一个对话框</span></span><br><span class="line"><span class="comment">//4.粘贴</span></span><br><span class="line"><span class="comment">//5.发送</span></span><br><span class="line"><span class="comment">//5.关闭对话框</span></span><br><span class="line"></span><br><span class="line">SetForegroundWindow(qqhwnd);<span class="comment">//设置某一个窗口为最前-就是选中主界面</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//按下TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//慢一点</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);<span class="comment">//弹起TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//按下TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//慢一点</span></span><br><span class="line">keybd_event(VK_TAB, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);<span class="comment">//弹起TAB键</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不断的按回车和下 打开对话框</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//回车</span></span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//下键</span></span><br><span class="line">keybd_event(VK_DOWN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_DOWN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qqhwnd != GetForegroundWindow())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//粘贴</span></span><br><span class="line">keybd_event(VK_CONTROL, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(<span class="string">&#x27;V&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">keybd_event(<span class="string">&#x27;V&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_CONTROL, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_RETURN, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭对话框</span></span><br><span class="line">keybd_event(VK_ESCAPE,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">keybd_event(VK_ESCAPE,<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1Vf4y1W7aj?t=3&quot;&gt;【C/C++技术教程】QQ轰炸机（两种版本）！程序员带你实现腾讯QQ消息轰炸，瞬间99+让对面防不胜防！_哔哩哔哩 (゜-゜)つロ 干杯</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现图书管理系统</title>
    <link href="http://example.com/2021/05/07/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/05/07/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-05-07T13:05:35.000Z</published>
    <updated>2021-05-07T13:53:49.866Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1E64y1171r">C语言课程设计实战：图书管理系统！计算机专业同学的一大难题，今天用代码实战演示，手把手带你完成！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>在开始之前我们要解决三个问题。</p><ol><li><p>指针如何变成变量</p><ol><li><p>用变量的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">p = &amp;a;</span><br><span class="line">*p = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure></li><li><p>动态内存申请</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(sizeiof(<span class="keyword">int</span>));</span><br><span class="line">*p = <span class="number">10033</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>什么是结构体？</p><p>就是一种类型，将几段内存组合成一段内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> A;</span><br><span class="line">    <span class="keyword">float</span> B;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何访问？</p><ol><li><p>变量——.成员， </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">C</span>;</span></span><br><span class="line">C.A = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure></li><li><p>指针——-&gt;，指针指向运算符,C-&gt;A</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">sb</span> =</span> &amp;C;</span><br><span class="line">sb-&gt;A = <span class="number">1002</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>什么是链表？</p></li></ol><p>多个结构体变量链接在一起的线性结构。就是一个变量。</p><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h1><p><strong>缺陷：</strong></p><p><strong>不包括用户信息</strong></p><p><strong>借出和归还没有放到文件操作里面</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图书管理系统 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//3.数据的设计</span></span><br><span class="line"><span class="comment">// 3.1程序用什么东西处理数据  -数组 -链表 ——无非就是去考虑用什么容器来装数据</span></span><br><span class="line"><span class="comment">// 3.2数据的结构 --- 图书的信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//书名</span></span><br><span class="line"><span class="keyword">float</span> price;<span class="comment">//价格</span></span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//数量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//链表的第一个结点不存放数据，叫做有表头链表。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">list</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//创建表头 表头就是一个结构体变量</span></span><br><span class="line"><span class="function">struct Node* <span class="title">creatHead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//动态内存申请</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">headNode</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="comment">//变量的基本规则——使用前必须初始化</span></span><br><span class="line">headNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建结点——为插入做准备</span></span><br><span class="line"><span class="comment">//把用户的数据编程结构体变量</span></span><br><span class="line"><span class="function">struct Node* <span class="title">creatNode</span><span class="params">(struct bookInfo data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//插入-只需要一种插入方法-表头法插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNodeByHead</span><span class="params">(struct Node* headNode,struct bookInfo data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> creatNode(data);</span><br><span class="line"><span class="comment">//必须先链接后断开</span></span><br><span class="line">newNode-&gt;next = headNode-&gt;next;</span><br><span class="line">headNode-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="comment">//void insertNodeByTail(struct Node* headNode, int data)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//struct Node* pMove = headNode;</span></span><br><span class="line"><span class="comment">//while (pMove-&gt;next != NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//pMove = pMove-&gt;next;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//struct Node* newNode = creatNode(data);</span></span><br><span class="line"><span class="comment">//pMove-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//指定位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNodeByName</span><span class="params">(struct Node* headNode, <span class="keyword">char</span>* bookName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posLeftNode</span> =</span> headNode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posNode</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="comment">//书籍名字是字符串，所以要采用字符串比较函数来处理。</span></span><br><span class="line"><span class="keyword">while</span> (posNode != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(posNode-&gt;data.name,bookName))</span><br><span class="line">&#123;</span><br><span class="line">posLeftNode = posNode;</span><br><span class="line">posNode = posLeftNode-&gt;next;</span><br><span class="line">posNode = posLeftNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//讨论查找的结果</span></span><br><span class="line"><span class="keyword">if</span> (posNode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;delete successful\n&quot;</span>);</span><br><span class="line">posLeftNode-&gt;next = posNode-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(posNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct Node* <span class="title">searchByName</span><span class="params">(struct Node* headNode, <span class="keyword">char</span>* bookName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">posNode</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (posNode != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(posNode-&gt;data.name,bookName))</span><br><span class="line">&#123;</span><br><span class="line">posNode = posNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> posNode; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个指针，从第二个开始打印</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pMove</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名\t价格\t数量\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (pMove != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印数据——剥洋葱</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>, pMove-&gt;data.name,pMove-&gt;data.price,pMove-&gt;data.num);</span><br><span class="line">pMove = pMove-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.写界面---菜单---模块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-Libraty manangement system-\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————0.exit———————-\n&quot;</span>);<span class="comment">//退出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————1.resiger——————\n&quot;</span>);<span class="comment">//登记</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————2.browse————-----\n&quot;</span>);<span class="comment">//浏览</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————3.borrow————-----\n&quot;</span>);<span class="comment">//借</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————4.back————-------\n&quot;</span>);<span class="comment">//还</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————5.sort————-------\n&quot;</span>);<span class="comment">//排序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————6.delete————-----\n&quot;</span>);<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;————7.seek————-------\n&quot;</span>);<span class="comment">//查找</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——————————————\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;——please input 0 to 7------\n&quot;</span>);<span class="comment">//提示</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接文件操作</span></span><br><span class="line"><span class="comment">//所有的文件都在这个容器里面，做文件操作就是对这个List进行文件操作</span></span><br><span class="line"><span class="comment">//运行的时候把文件的信息读到List里面</span></span><br><span class="line"><span class="comment">//结束的时候把List里面的信息同步到文件里面</span></span><br><span class="line"><span class="comment">//文件存（写）操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveInfoToFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName, struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(fileName, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pMove</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pMove != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>,pMove-&gt;data.name,pMove-&gt;data.price,pMove-&gt;data.num);</span><br><span class="line">pMove = pMove-&gt;next; </span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件读操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readInfoFromFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName, struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(fileName, <span class="string">&quot;r&quot;</span>);<span class="comment">//第一次打开文件肯定是不存在的</span></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不存在就把文件创建出来</span></span><br><span class="line"><span class="comment">//如果第一次打开文件是空的，用w+方式打开文件，可读可写。</span></span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempData</span>;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%f\t%d\n&quot;</span>, tempData.name, &amp;tempData.price, &amp;tempData.num) != EOF);</span><br><span class="line">&#123;</span><br><span class="line">insertNodeByHead(<span class="built_in">list</span>, tempData);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法是一种思想</span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortList</span><span class="params">(struct Node* headNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (struct Node* p = headNode-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (struct Node* q = headNode-&gt;next; q-&gt;next != <span class="literal">NULL</span>; q = q-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data.price &gt; q-&gt;next-&gt;data.price)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//交换值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempData</span> =</span> q-&gt;data;</span><br><span class="line">q-&gt;data = q-&gt;next-&gt;data; </span><br><span class="line">q-&gt;next-&gt;data = tempData; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printList(headNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.交互-按键处理-跳转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> userKey = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">tempbook</span>;</span><span class="comment">//产生一个临时的变量存储书籍信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">result</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;userKey);</span><br><span class="line"><span class="keyword">switch</span>(userKey)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【exit】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;successful\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//关闭整个程序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【resiger】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input your book&#x27;s information(name,price,num):&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%f%d&quot;</span>,tempbook.name, &amp;tempbook.price, &amp;tempbook.num);</span><br><span class="line"><span class="comment">//第一个temobook.name是字符串 不用取地址</span></span><br><span class="line">insertNodeByHead(<span class="built_in">list</span>, tempbook);</span><br><span class="line">saveInfoToFile(<span class="string">&quot;bookinfo.txt&quot;</span>,<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【browse】\n&quot;</span>);</span><br><span class="line">printList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【borrow】\n&quot;</span>);</span><br><span class="line"><span class="comment">//书籍存在可以借阅，存在书的数量-1，不存在借阅失败</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>,tempbook.name);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;without the book\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result-&gt;data.num &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">result-&gt;data.num--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;borrow successful\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the book it&#x27;s not here\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【back】\n&quot;</span>);</span><br><span class="line"><span class="comment">//把当前书籍的数量+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;illegal book\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result-&gt;data.num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【sort】\n&quot;</span>);</span><br><span class="line">bubbleSortList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【delete】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, tempbook.name);</span><br><span class="line">deleteNodeByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line">saveInfoToFile(<span class="string">&quot;bookinfo.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【seek】\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input book name\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tempbook.name);</span><br><span class="line">result = searchByName(<span class="built_in">list</span>, tempbook.name);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t find\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;name\tprice\tnum\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t%.1f\t%d\n&quot;</span>, result-&gt;data.name, result-&gt;data.price, result-&gt;data.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;【error】\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span>  = creatHead();</span><br><span class="line">readInfoFromFile(<span class="string">&quot;bookinfo.txt&quot;</span>,<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line">keyDown();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//防闪退</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清除</span></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1E64y1171r&quot;&gt;C语言课程设计实战：图书管理系统！计算机专业同学的一大难题，今天用代码实战演示，手把手带你完成！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibi</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言编写Web服务器</title>
    <link href="http://example.com/2021/05/06/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2021/05/06/C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-05-06T13:39:01.000Z</published>
    <updated>2021-05-08T10:11:44.835Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1uA411u7kD">C/C++技术教学：web 网络服务器开发！纯C语言手写web服务器，仅需 80 行代码，制作出你的专属服务器_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><ol><li><p>什么是端口？</p><p>物理端口：电脑网口、USB、看的见的接口。</p><p>虚拟端口：程序和网络进行通信的端口。</p><p>端口就好比一个房子的门，是初入这个房子的必经之路。</p></li><li><p>端口号</p><p>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535。</p><p>（为什么最大是65535？）</p></li><li><p>端口号怎么分配的</p><p>端口号不是随意使用的，而是按照一定的规定进行分配。</p></li><li><p>知名端口</p><p>知名端口是众所周知的端口号，范围从0到1023，</p><p> 80端口分配给HTTP服务，</p><p>21端口分配给FTP服务。</p></li><li><p>动态端口</p><p>动态端口的范围是从1024到65535，由操作系统进行分配。    </p><p>之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。</p><p>动态分配是指当一个系统进程或应用程序进程需要网络通信时，</p><p>它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。</p><p>当这个进程关闭时，同时也就释放啦它所占用的端口号。</p></li></ol><h1 id="Tcp服务器"><a href="#Tcp服务器" class="headerlink" title="Tcp服务器"></a>Tcp服务器</h1><p>如同接电话的过程一样，在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：</p><ol><li>socket创建一个套接字</li><li>bind绑定ip和port</li><li>listen使套接字变为可以被动链接</li><li>accept等待客户端的链接</li><li>recv/send接收发送数据</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web Server</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;WinSock2.h&gt;//包含网络编程的头文件，引入静态库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">bool</span> isok;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merror</span><span class="params">(<span class="keyword">int</span> redata,<span class="keyword">int</span> error,<span class="keyword">char</span>* showinfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (redata == error)</span><br><span class="line">&#123;</span><br><span class="line">perror(showinfo);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(SOCKET s, <span class="keyword">char</span>* filename)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;weclome to my WebServer\n&quot;</span>);</span><br><span class="line">WSADATA wsdata;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>),&amp;wsdata);<span class="comment">//确定socket版本信息</span></span><br><span class="line"><span class="comment">//short两个字节2.2</span></span><br><span class="line">merror(isok,WSAEINVAL,<span class="string">&quot;申请socket失败&quot;</span>);</span><br><span class="line"><span class="comment">//第一个参数-协议族，决定socket的地址类型</span></span><br><span class="line"><span class="comment">//第二个参数-传输类型,SOCK_STREAM流传输</span></span><br><span class="line"><span class="comment">//第三个参数-指定的传输协议，tcp</span></span><br><span class="line">SOCKET server = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);<span class="comment">//使用af-inet,ipv4地址</span></span><br><span class="line">merror(server, INVALID_SOCKET, <span class="string">&quot;创建socker失败&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">seraddr.sin_family = AF_INET;<span class="comment">//和创建的时候一样，使用了Ipv4</span></span><br><span class="line">seraddr.sin_port = htons(<span class="number">80</span>);<span class="comment">//注意网络中的数据和电脑上的数据存储是有区别的，网络是大端存储，pc是小端存储</span></span><br><span class="line">seraddr.sin_addr.s_addr = INADDR_ANY;<span class="comment">//监听任意的地址</span></span><br><span class="line">isok  = bind(server,&amp;seraddr,<span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">merror(isok, SOCKET_ERROR, <span class="string">&quot;绑定失败...\n&quot;</span>);</span><br><span class="line">isok = listen(server, <span class="number">5</span>);</span><br><span class="line">merror(isok, SOCKET_ERROR, <span class="string">&quot;监听失败...\n&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">claddr</span>;</span></span><br><span class="line"><span class="keyword">int</span> cllen = <span class="keyword">sizeof</span>(claddr);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SOCKET client = accept(server, &amp;claddr, &amp;cllen);<span class="comment">//谁连进来了，发了多少数据</span></span><br><span class="line">merror(client, INVALID_SOCKET, <span class="string">&quot;连接失败...\n&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> revdata[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">recv(client,revdata,<span class="number">1024</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s 共接收到%d字节数据\n&quot;</span>, revdata,<span class="built_in">strlen</span>(revdata));</span><br><span class="line"><span class="comment">//如果下面这两行显示文字，测试发送成功。</span></span><br><span class="line"><span class="keyword">char</span> sendata[<span class="number">1024</span>] = <span class="string">&quot;&lt;h1 style =\&quot; color:pink;\&quot;&gt;hello,i&#x27;m sb&lt;/h1&gt;&quot;</span>;</span><br><span class="line">send(client,sendata,<span class="built_in">strlen</span>(sendata),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* filename = <span class="string">&quot;/&quot;</span>;<span class="comment">//填入文件名称xxx.html</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(client, filenama)</span></span>;</span><br><span class="line">closesocket(client);</span><br><span class="line">&#125;</span><br><span class="line">closesocket(server);</span><br><span class="line">WSACleanup();</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打开文件-网页</span></span><br><span class="line"><span class="comment">//将文件放入项目文件夹下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendhtml</span><span class="params">(SOCKET s, <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pfile = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfile == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">fgets(temp, <span class="number">1024</span>, pfile);</span><br><span class="line">send(s, temp, <span class="built_in">strlen</span>(temp), <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (!feof(pfile));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1uA411u7kD&quot;&gt;C/C++技术教学：web 网络服务器开发！纯C语言手写web服务器，仅需 80 行代码，制作出你的专属服务器_哔哩哔哩 (゜-゜)つロ 干杯~</summary>
      
    
    
    
    <category term="网络编程" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-网络编程" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="-服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>认识各种图</title>
    <link href="http://example.com/2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/"/>
    <id>http://example.com/2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/</id>
    <published>2021-05-06T10:13:06.000Z</published>
    <updated>2021-05-06T10:34:33.495Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=55">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><ul><li><p>图按照有无方向分为<strong>无向图</strong>和有向图。</p><ul><li>无向图由定点和边构成。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162522098.png" alt="image-20210506162522098"></p><ul><li>有向图由定点和弧构成，弧有弧尾和弧头之分。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162528354.png" alt="image-20210506162528354"></p></li><li><p>如果任意两个顶点之间都存在边叫做<strong>完全图</strong>。</p><ul><li>无向的叫做<strong>无向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162751354.png" alt="image-20210506162751354"></p><ul><li>有向的叫做<strong>有向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170101163.png" alt="image-20210506170101163"></p></li><li><p>图按照边或弧的多少分为<strong>稀疏图</strong>和稠密图。</p><ul><li>都是相对而言的多少。</li></ul></li><li><p>若无重复的变到自身的边叫做<strong>简单图</strong>。</p><p><strong>反例</strong>：下面这两个图都不是简单图。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163031340.png" alt="image-20210506163031340"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163047070.png" alt="image-20210506163047070"></p></li><li><p>图和顶点之间有邻接点、依附的概念。</p></li><li><p>无向图顶点的边数叫做度，有向图顶点分入度和出度。</p><p>（入度：有几个箭头指向这个顶点，出度：指向几个顶点。）</p></li><li><p>图上的边或弧上带权则称为网。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163216486.png" alt="image-20210506163216486"></p><ul><li><p>图中顶点间存在路径，两顶点存在路径则说明是连通的。</p><ul><li>例如：由B到D在无向图上有四种不同的路径。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163830914.png" alt="image-20210506163830914"></p></li><li><p>在有向图上由B到D有两种路径。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164007180.png" alt="image-20210506164007180"></p><ul><li><p>如果路径最终回到起始点则称为环，当中不重复叫简单环。</p><ul><li>简单环</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164241631.png" alt="image-20210506164241631"></p><ul><li>不是简单环，顶点C重复了。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164329827.png" alt="image-20210506164329827"></p></li><li><p>若任意两顶点都是连通的，则图就是<strong>连通图</strong>。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164424476.png" alt="image-20210506164424476"></p><ul><li>不连通图</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164831080.png" alt="image-20210506164831080"></p><ul><li>有向则称为强连通图。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506165613351.png" alt="image-20210506165613351"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170130769.png" alt="image-20210506170130769"></p><p><strong>（结合上面的有向完全图，我们不难发现，有向完全图就是强连通图，因为它任意两个定点间都有是连通的，但是强连通图不一定是有完全向图，因为有向完全图需要任意两个顶点间有相反的两条路径。）</strong></p><ul><li><p>连通分量强调：</p><ul><li>要是子图；</li><li>子图是连通的；</li><li>连通子图含有极大顶点数；<strong>极大顶点数就是最大连通子图上的顶点数量。</strong></li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul></li><li><p>无向图中的极大连通子图称为连通分量，有向的则称为<strong>强连通分量</strong>。</p><ul><li>非连通图的连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506172939981.png" alt="image-20210506172939981"></p><p>​    它的连通分量</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173010623.png" alt="image-20210506173010623"></p><ul><li>有向但是非强连通图的(极大)强连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173231860.png" alt="image-20210506173231860"></p><p>它的强连通分量。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173330999.png" alt="image-20210506173330999"></p></li></ul></li><li><p><strong>连通生成树。</strong></p><ul><li>所谓的连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一个树的n-1条边。</li><li>无向图的连通生成树。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506180115966.png" alt="image-20210506180115966"></p><ul><li><p>有向图恰<strong>有一个顶点的入度为0，其余顶点的入度为1，</strong>则是一棵有向树。</p><p>例如下面这两棵有向树。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174842218.png" alt="image-20210506174842218"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174924663.png" alt="image-20210506174924663"></p></li><li><p>一个有向图由若干棵有向树构成生成<strong>森林</strong>。</p><ul><li>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧</li><li>例如：一下三张图，图1是一棵有向图。去掉一些弧之后，它可以分解为两课有向树，如图2和图3，这两棵就是图1有向图的生成森林。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181019760.png" alt="image-20210506181019760"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181102303.png" alt="image-20210506181102303"></p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181109968.png" alt="image-20210506181109968"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1jW411K7yg?p=55&quot;&gt;【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关书籍——《大话数据结构</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼树及其应用</title>
    <link href="http://example.com/2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</id>
    <published>2021-05-06T02:48:47.000Z</published>
    <updated>2021-05-06T02:54:31.460Z</updated>
    
    <content type="html"><![CDATA[<p>前言:</p><p>最基本的压缩编码方法——赫夫曼(huffman)编码。</p><p>在了解赫夫曼编码之前，我们必须了解一下赫夫曼树，赫夫曼编码就是基于赫夫曼树实现的。</p><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=52">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><hr><h1 id="1-赫夫曼树的定义与原理"><a href="#1-赫夫曼树的定义与原理" class="headerlink" title="1.赫夫曼树的定义与原理"></a>1.赫夫曼树的定义与原理</h1><ul><li><p>结点的路径长度</p><ul><li>-从根节点到该结点的路径上的连接数。</li></ul></li><li><p>数的路径长度</p><ul><li>-树中每个叶子结点的路径长度之和。</li></ul></li><li><p>结点带权路径长度</p><ul><li>-结点的路径长度与结点权值的乘积。</li></ul></li><li><p>树的带权路径长度(WPL)</p><ul><li>-是树中所有叶子结点的带权路径长度之和。</li></ul></li><li><p>(数结点间的连线相关的数叫做权，Weight)</p></li></ul><hr><p><strong>其中：带权路径长度（WPL）最小的二叉树叫做赫夫曼树。</strong></p><p><strong>带权路径长度(WPL)的值越小，说明构造出来的二叉树性越优。</strong></p><hr><h1 id="2-构造赫夫曼树的过程"><a href="#2-构造赫夫曼树的过程" class="headerlink" title="2.构造赫夫曼树的过程"></a>2.构造赫夫曼树的过程</h1><p>初识森林</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204148343.png" alt="image-20210505204148343"></p><p>在森林中选出两棵根节点的权值最小的二叉树，小的放左边，大的放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204302270.png" alt="image-20210505204302270"></p><p>合并两颗选出的二叉树，增加一个新结点作为新二叉树的根，权值为左右孩子的权值之和。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204501617.png" alt="image-20210505204501617"></p><p>再从剩下的森林里面选出权值最小的二叉树，如果比第一次合并的结点权值小就放左边，反之，放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204621908.png" alt="image-20210505204621908"></p><p>再次进行合并。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204703975.png" alt="image-20210505204703975"></p><p>第二次合并完成，第三次合并同理。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204752864.png" alt="image-20210505204752864"></p><p>合并完成，这个二叉树就是赫夫曼树。</p><h1 id="3-赫夫曼编码原理"><a href="#3-赫夫曼编码原理" class="headerlink" title="3.赫夫曼编码原理"></a>3.赫夫曼编码原理</h1><hr><p>补充：</p><p>赫夫曼研究这种最优树的目的是为了解决当年远距通信(主要是电报)的数据传输的最优化问题。</p><hr><p><strong>名词解释：</strong></p><ul><li>定长编码<ul><li>-像ASCII编码，用八位二进制数来表示一个字符。</li></ul></li><li>变长编码<ul><li>-单个编码的长度不一致，可以根据整体频率来调节。</li></ul></li><li>前缀码<ul><li>-所谓的前缀码，就是没有任何码字是其他码字的前缀。</li></ul></li></ul><hr><p><strong>编码过程（encode）：</strong>还是利用上面的赫夫曼二叉树。</p><p>上图为构造赫夫曼树的过程权值显示。</p><p>下图为将权值左支改为0，右支改为1后的赫夫曼树。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210353927.png" alt="image-20210505210353927"></p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210746239.png" alt="image-20210505210746239"></p><p>我们对这4个字母(ABCD)用其从树根到叶子所经过路径0或1来进行编码。</p><p>例如原文字内容是ABCD。</p><p><strong>原编码二进制串：000001010011</strong>(共12个字符)</p><p><strong>新编码二进制串：010110111</strong>(共9 个字符)</p><p>也就是说我们的数据被压缩了，节约了25%的存储空间或者传输成本，随着字符的增加和字符权重的不同，这种压缩会更加显出其优势。</p><hr><p><strong>解码过程（decode）：</strong></p><p>发送方和接收方必须要约定好同样的赫夫曼编码规则，由约定好的赫夫曼树可以成功解码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言:&lt;/p&gt;
&lt;p&gt;最基本的压缩编码方法——赫夫曼(huffman)编码。&lt;/p&gt;
&lt;p&gt;在了解赫夫曼编码之前，我们必须了解一下赫夫曼树，赫夫曼编码就是基于赫夫曼树实现的。&lt;/p&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/vi</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
