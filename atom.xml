<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-25T04:11:53.061Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>几种常见的排序算法</title>
    <link href="http://example.com/2021/07/25/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/07/25/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-25T04:02:00.000Z</published>
    <updated>2021-07-25T04:11:53.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="排序的概念"><a href="#排序的概念" class="headerlink" title="排序的概念"></a>排序的概念</h2><p><strong>排序</strong>：所谓排序就是使一串记录，按照其中的某个或者某些关键字的大小，递增或递减排列起来的操作。</p><p><strong>稳定性</strong>：假定在待排序的记录序列中，存在多个具有相同关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i] = r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的，否则称为不稳定的。</p><p><strong>内部排序</strong>：数据元素全部放在内存汇中的排序。</p><p><strong>外部排序</strong>：数据元素太多不能同时放在内存中，根据排序过程的要求不能再内外存之间移动数据的排序。</p><h2 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h2><ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序<ul><li>选择排序</li><li>堆排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>归并排序<ul><li>归并排序</li></ul></li></ul><hr><p><strong>没有一个排序能解决所有问题，它们各有特点。</strong></p><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>直接插入排序是一种简单的插入排序法，其思想是：把待排序的记录按照其关键码值的大小逐个插入到一个已经排好的有序序列中，直到所有的记录插入完为止，得到一个新的序列。</p><p>例如：<strong>玩扑克牌，理牌的过程。</strong>先把你的牌放到一堆，你先不要动，发完之后直接将你所有的牌拿起来，进行理牌。</p><p>**时间复杂度是O(n²)**。</p><p><strong>最坏情况</strong>——逆序(6,5,4,3,2,1)就是一直都要放到第一个位置，完成升序。</p><p><strong>最好情况</strong>——顺序(1,2,3,4,5,6)没有一个数据需要挪动。</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>把第一个数当做一个有序区间，把第二个数当做要插入的数进行比较大小，重新排序，然后把前两个数当做一个有序区间……依次类推。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><span class="comment">//升序实现(降序同理)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];<span class="comment">//将要插入的数赋值给temp，因为跟前面的数进行比较的，end位置的数要移动到end+1上</span></span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//完成两种情况，1在中间找到了位置插入，2比所有的元素都小，插入到第一位。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解释-amp-图示"><a href="#解释-amp-图示" class="headerlink" title="解释&amp;图示"></a>解释&amp;图示</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*解释:</span></span><br><span class="line"><span class="comment">数组中[0,end]区间是有序的,要插入的数在end+1这个位置上，</span></span><br><span class="line"><span class="comment">将end+1这个位置上的值插入到[0,end]中，最后完成排序的数组[0,end+1]这个新的区间也是有序的*/</span></span><br><span class="line"><span class="comment">/*1.定义一个end找到数组的结尾元素(就是从第一个元素开始定义结尾)</span></span><br><span class="line"><span class="comment">2.定义一个end+1找到end的下一个位置</span></span><br><span class="line"><span class="comment">3.从end+1这个位置依次往前(end--)进行比较，如果比前一个数小就将end位置上的这个数放到end+1上</span></span><br><span class="line"><span class="comment">4.如果大于等于前面的这个数就放到前面的这个数的后面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622181717080.png" alt="image-20210622181717080"></p><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*理解:</span></span><br><span class="line"><span class="comment">就是将一个数组分成几组，依次进行排序，先取数组中第一个元素该元素下标为0，这时候end就是0,end+1就是他后面的元素，将end+1这个位置上的元素与end上的这个元素进行比较大小，完成第一次排序。</span></span><br><span class="line"><span class="comment">接着end是1，end+1就是2，将数组下标为2的这个元素与前面两个是元素进行比较，完成第二次排序。</span></span><br><span class="line"><span class="comment">如果end+1比end大就跳出当前while循环，a[end+1] = temp就相当于没动。</span></span><br><span class="line"><span class="comment">......依此类推。</span></span><br><span class="line"><span class="comment">知道end=元素个数-1，end+1就是最后一个元素的下标</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h5><p>![直接插入排 00_00_00-00_00_30-1627186224806](/images/几种常见的排序算法.assets/直接插入排 00_00_00-00_00_30-1627186224806.gif)</p><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArry</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestInsertSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span> &#125;;</span><br><span class="line">InsertSort(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">PrintArry(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestInsertSort();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622191017197.png" alt="image-20210622191017197"></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>可以认为是在直接插入排序的优化。</p><p>步骤：</p><ol><li>先进行预排序，让数组接近有序(不用挪很多)。</li><li>直接插入排序。</li></ol><h5 id="预排序"><a href="#预排序" class="headerlink" title="预排序"></a>预排序</h5><p><strong>分组排</strong></p><p>在直接插入排序中，最坏的情况就是逆序(6,5,4,3,2,1)了， 我们要挪动很多次。</p><p>假设间隔gap为一组，假定gap为2.</p><p><strong>使得大的数更快的移到后面，小的数更快的移动到前面。</strong></p><p><strong>进行多组间隔为gap的预排序，gap从大到小，越接近有序。</strong></p><p><strong>gap越大，大的数越快到达后面，小的数越快到达前面。</strong></p><p><strong>gap越大，预排完，越不接近有序。</strong></p><p><strong>gap越小，预排完，越接近有序。</strong></p><p><strong>间隔gap为1，就是直接插入排序。</strong></p><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210622200937700.png" alt="image-20210622200937700"></p><h5 id="预排序代码实现"><a href="#预排序代码实现" class="headerlink" title="预排序代码实现"></a>预排序代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">voidShellSort(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">2</span>;<span class="comment">//gap=1时就是直接插入排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623100526254.png" alt="image-20210623100526254"></p><h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个代码巧妙就巧妙在于，可以把间隔为gap的多组数据进行同时插入排序</span></span><br><span class="line"><span class="comment">假定gap=2分为多组</span></span><br><span class="line"><span class="comment">1.当i=0时，end = 0;end+1=2;</span></span><br><span class="line"><span class="comment">2.i = 1时，end = 1;end +1 = 3;</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="动画演示-1"><a href="#动画演示-1" class="headerlink" title="动画演示"></a>动画演示</h5><p>![](/images/排序.assets/希尔排序 .gif)</p><h5 id="gap到底给多少"><a href="#gap到底给多少" class="headerlink" title="gap到底给多少"></a>gap到底给多少</h5><p>gap给的大，大的数去后面快，小的数去前面也快。整体的增益明显。</p><p>gap给固定的值是不对的，同一个gap，数据越多效果越差。</p><p>所以gap给的值一般与n有关，<strong>前提</strong>：<strong>保证最后gap是1</strong>，&gt;1的时候都是预排序，要保证最后一次gap为1进行直接插入排序</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArry</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestInsertSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line">ShellSort(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">PrintArry(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestInsertSort();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623114920050.png" alt="image-20210623114920050"></p><h5 id="速度对比"><a href="#速度对比" class="headerlink" title="速度对比"></a>速度对比</h5><p>那么希尔排序在执行速度方面到底比直接插入排序要快多少呢，我们编写一个代码来测试他的执行速度。</p><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>在测试速度的时候可以将解决方案改为Release,Release的优化更多，执行速度会快一些。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623202316892.png" alt="image-20210623202316892"></p><h6 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><span class="comment">//升序实现(降序同理)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + <span class="number">1</span>] = a[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap = n;</span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - gap; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> end = i;</span><br><span class="line"><span class="keyword">int</span> temp = a[end + gap];</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; a[end])</span><br><span class="line">&#123;</span><br><span class="line">a[end + gap] = a[end];</span><br><span class="line">end -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[end + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试排序性能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestSortSpeed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//创建2个数据个数为100000万个的数组来测试两个排序所用的时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span>* a1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line"><span class="keyword">int</span>* a2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line"><span class="comment">//给这几个数组附上随机值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">a1[i] = rand();</span><br><span class="line">a2[i] = a1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记录时间</span></span><br><span class="line"><span class="keyword">int</span> begin1 = clock();</span><br><span class="line">InsertSort(a1, N);<span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">int</span> end1 = clock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin2 = clock();</span><br><span class="line">ShellSort(a2, N);<span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">int</span> end2 = clock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所用时间(单位:毫秒)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;InsertSort:\t%d\n&quot;</span>, end1 - begin1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ShellSort:\t%d\n&quot;</span>, end2 - begin2);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="built_in">free</span>(a1);</span><br><span class="line"><span class="built_in">free</span>(a2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TestSortSpeed();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623200420146.png" alt="image-20210623200420146"></p><p>很明显，希尔排序的效率快了不是一星半点。</p><h6 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h6><p><strong>希尔排序</strong>——gap =2；log以2为底N的对数，gap =3;log以3为底N的对数</p><p>​    <strong>解释</strong>:</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623201432081.png" alt="image-20210623201432081"></p><p>当gap很大的时候，数据跳的就很快，差不多每个数据都会挪一次，挪了N次。下面的预排序时间复杂度是O(N)。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210623201926854.png" alt="image-20210623201926854"></p><p>当gap很小的时候，进行的预排序就越接近有序,这时的时间复杂度也是O(N)。</p><p>综上所述，希尔排序的时间复杂度是O(logN*N)或者O(log3 N *N)以3为底N的对数乘N。（3是gap，gap是可以改变的）</p><p>（时间复杂度logN的底数在没有的定说明的情况下都是1）</p><p>也有的说它的平均时间复杂度是O(N^1.3)</p><hr><p>假设有10万个数，直接插入排序时间复杂度N^2 = 10w*10w = 100亿</p><p>希尔排序时间复杂度N*logN =  10w *log20w  = 10w *17</p><p><strong>可以看出二者的效率差的很多</strong>。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>每次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始位置，直到全部的待排序数据元素排完。</p><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>几乎是最简单的一个排序，最好理解的排序，选出最小的数放到前面。</p><p>这里实现的是一个比较优化的版本——一次选出两个数。</p><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mini = begin;</span><br><span class="line"><span class="keyword">int</span> maxi = end;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[mini])</span><br><span class="line">&#123;</span><br><span class="line">mini = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[maxi])</span><br><span class="line">&#123;</span><br><span class="line">maxi = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[begin], &amp;a[mini]);</span><br><span class="line">        <span class="comment">//begin和maxi的重叠情况</span></span><br><span class="line">        <span class="comment">/*解决数组下标为begin这个位置的元素恰好就是maxi,</span></span><br><span class="line"><span class="comment">        经过上面这个Swap(&amp;a[begin], &amp;a[mini]);</span></span><br><span class="line"><span class="comment">        把对应数组下标[maxi]这个位置的值换到了数组下标[mini]这个位置上，</span></span><br><span class="line"><span class="comment">        此时的最大值在数组[mini]这个下标处。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">if</span> (begin == maxi)</span><br><span class="line">&#123;</span><br><span class="line">maxi = mini;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[end], &amp;a[maxi]);</span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p><strong>begin和maxi的重叠情况</strong>，如下图所示情况，相关解释已在上面的代码中给出。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628172121776.png" alt="image-20210628172121776"></p><h5 id="动画图解"><a href="#动画图解" class="headerlink" title="动画图解"></a>动画图解</h5><p>![](/images/排序.assets/直接插入排序 .gif)</p><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>O(N²)</p><p>N,N-2.N-4……</p><p><strong>直接选择排序几乎是效率最差的一个排序</strong></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h5 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h5><p>堆排序涉及到二叉树了，(相关链接——<a href="https://blog.csdn.net/qq_51604330/article/details/117955503?spm=1001.2014.3001.5501">【树】之二叉树(C语言)(含图解)_半生瓜のblog-CSDN博客</a>),这篇文章中二叉树是用链表来实现的，除了用链表，二叉树其实还可以用数组来实现，按层序来处理。</p><p>**堆的逻辑结构是一棵完全二叉树(每一层都是满的，不满的是从左往右顺序放的)**。——想象出来的</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624172913562.png" alt="image-20210624172913562"></p><p><strong>堆的物理结构是一个数组</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624172928416.png" alt="image-20210624172928416"></p><p>也就是说，我们实际用的是数组，但是可以把他想象成一个二叉树。并且可以<strong>通过下标来计算他们的父子关系</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624173420805.png" alt="image-20210624173420805"></p><p>​    <strong>计算关系</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leftchild = parent* <span class="number">2</span>+<span class="number">1</span></span><br><span class="line">rightchild = parent* <span class="number">2</span>+<span class="number">2</span></span><br><span class="line">parent = (child<span class="number">-1</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>例如</strong>：这个数组中下标为3的d,它的左孩子的下标就是3*2+1 =7, 是h，看图,确实是h。</p><p>下标为4的e,它的父结点就是(4-1)/2 = 1(舍去小数)</p><h5 id="堆的两个特性"><a href="#堆的两个特性" class="headerlink" title="堆的两个特性"></a>堆的两个特性</h5><p><strong>结构性</strong>：用数组表示的完全二叉树。</p><p><strong>有序性</strong>：任一结点的关键字是其子树所有结点的最大值(或最小值)。</p><p><strong>最大堆(MaxHeap)<strong>也称</strong>大顶堆</strong>(大根堆)；最大值</p><p><strong>最小堆(MinHeap)<strong>也称</strong>小顶堆</strong>(小跟堆)；最小值</p><hr><p><strong>大堆要求</strong>:树中所有的父亲都大于等于孩子。</p><p><strong>小堆要求</strong>：树中所有的父亲都小于等于孩子。</p><p>大堆：对顶数据是最大的</p><p>小堆：对顶数据是最小的</p><p><strong>示例</strong>：下图就是一个小堆</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624182711156.png" alt="image-20210624182711156"></p><h5 id="如何建堆"><a href="#如何建堆" class="headerlink" title="如何建堆"></a>如何建堆</h5><p>堆排序本质就是选择排序，它也可以选数。</p><p><strong>示例</strong>：</p><h6 id="建小堆"><a href="#建小堆" class="headerlink" title="建小堆"></a>建小堆</h6><p>（大堆同理，换个符号）</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210624194607431.png" alt="image-20210624194607431"></p><p><strong>向下调整算法</strong></p><p><strong>前提</strong>：<strong>左右子树都是小堆</strong>。</p><p>选出左右孩子中小的那个跟父亲比较，如果比父亲小就交换，然后再接着往下进行，依次类推。调到叶子结点就终止。</p><p><strong>动画演示</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%BB%BA%E5%B0%8F%E5%A0%86.gif"></p><h6 id="向下调整算法"><a href="#向下调整算法" class="headerlink" title="向下调整算法"></a>向下调整算法</h6><p>最多调整高度次logN</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> parent = root;</span><br><span class="line"><span class="keyword">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//默认是左孩子</span></span><br><span class="line"><span class="keyword">while</span> (child &lt;n)<span class="comment">//别超出数组下标的范围</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//选出左右孩子中大的那一个并且有两个孩子</span></span><br><span class="line"><span class="comment">//如果右孩子小于左孩子</span></span><br><span class="line"><span class="keyword">if</span> (child+<span class="number">1</span> &lt; n &amp;&amp; a[child + <span class="number">1</span>] &lt; a[child])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//因为默认是左孩子，所以将左孩子的下标+得到右孩子的下标</span></span><br><span class="line">child += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果左孩子小于等于右孩子则直接来到这里，此时child的值就是左孩子的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个孩子情况直接来到这里</span></span><br><span class="line"><span class="comment">//选出左右孩子小的那一个再和父对比</span></span><br><span class="line"><span class="comment">//如果孩子的值小于父亲的值，就交换这两个值(在数组中)的位置</span></span><br><span class="line"><span class="keyword">if</span> (a[child] &lt; a[parent])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[child], &amp;a[parent]);<span class="comment">// 交换这两个值</span></span><br><span class="line"><span class="comment">//孩子的孩子重复上述操作</span></span><br><span class="line">parent = child;</span><br><span class="line">child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h6><p>（建大堆同理，换个符号即可。）</p><p>如果左右子树不是小堆怎么办呢？</p><p>那就不能直接使用向下调整算法，就得先把不是小堆的子树变成小堆。</p><p><strong>倒着从最后一棵非叶子结点的子树开始调。</strong></p><p><strong>注意</strong>：这个数组是按照想象出来的那棵完全二叉树从上王往下一层一层的往里面存的，所以，数组的最后一个数据(下标为n-1)，就是完全二叉树最下面一层的最右边的结点，从这个结点开始从上往下寻找各自的父亲（意思就=是上面的:<strong>倒着从最后一棵非叶子结点的子树开始调</strong>。）。</p><hr><p>建堆的时间复杂度是:O(N)</p><p><strong>推导过程:</strong></p><p>假设该堆为满二叉树，堆高度为h,假设每层高度hi,没层结点个数为ni,</p><p>则建堆的时间复杂度为：<br><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628112912208.png" alt="image-20210628112912208"></p><p><strong>建堆的次数公式</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628113153431.png" alt="image-20210628113153431"></p><p>利用高中所学知识，错位相减法，化简得。</p><p>t(n) = -h+2^h-1 ,（其中满二叉树的2^h-1 = N）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注意这里的i是从最后一个结点开始找上面的父亲(最后一个非叶子结点)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(a, n, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给出测试数组</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627202722050.png" alt="image-20210627202722050"></p><p><strong>验证</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627202850375.png" alt="image-20210627202850375"></p><p>建小堆完成。</p><p><strong>建大堆同理</strong>，换一个比较符号即可。</p><h5 id="堆排序为什么要建大堆？"><a href="#堆排序为什么要建大堆？" class="headerlink" title="堆排序为什么要建大堆？"></a>堆排序为什么要建大堆？</h5><p><strong>堆排序的本质是选择排序</strong>。</p><p>如果是建小堆，最小数在数组顶部，已经被选出来了，那么在剩下的数中要建一个堆，但是剩下的数都乱了，需要重新建堆，才能选出下一个数，建堆的时间复杂度是O(N),这样建队就没有效率优势了。并且建堆选数，还不如直接遍历选数。</p><p>第一次建堆O(N)</p><p>剩下的部分选数，时间复杂度是logN</p><p><strong>示例</strong>:</p><p><strong>小堆</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627204550544.png" alt="image-20210627204550544"></p><p><strong>大堆</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210627204951603.png" alt="image-20210627204951603"></p><p><strong>正确的方式</strong>——建大堆，然后交换第一个数和最后一个数，继续进行向下调整算法，第二个和导数第2个数……。</p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//注意这里的i是从最后一个结点开始找上面的父亲(最后一个非叶子结点)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (n - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(a, n, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> end = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[<span class="number">0</span>], &amp;a[end]);</span><br><span class="line"><span class="comment">//剩下的数继续进行向下调整 </span></span><br><span class="line">AdjustDown(a, end, <span class="number">0</span>);<span class="comment">//(还有n-1个数，end正好就是n-1)</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动画图解-1"><a href="#动画图解-1" class="headerlink" title="动画图解"></a>动画图解</h5><p>大约3min</p><p>![](/images/排序.assets/堆排序过程 00_00_00-00_00_30.gif)</p><p><strong>打印输出结果</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628101941008.png" alt="image-20210628101941008"></p><p><strong>性能测试</strong>：</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210628115338108.png" alt="image-20210628115338108"></p><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h4><p>比较值，交换顺序。</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>前一个数比后一个数大(小)就交换位置。</p><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//end控制边界</span></span><br><span class="line"><span class="keyword">int</span> end = n;</span><br><span class="line"><span class="keyword">while</span> (end &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; end; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>已经有序了就不要交换了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[j - <span class="number">1</span>], &amp;a[j]);</span><br><span class="line">exchange = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exchange == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><p>和直接插入排序对比谁更好呢？</p><p><strong>直接插入排序</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210701172736752.png" alt="image-20210701172736752"></p><p>如果是有序的情况下，他们的次数都是n。</p><p>如果是接近有序，12354</p><p>冒泡排序:N-1 + N -2 </p><p>直接插入排序: N</p><p>(<strong>直接插入排序对有序，接近有序，局部有序，适应性更强。</strong>)</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h5><p>任取待排序元素序列中的某个元素作为基准值，按照排序码将待排序集合分割成两子序列，左子序列中所有的元素均小于基准值，右子序列中所有元素均大于基准值，然后最左右子序列重复该过程，知道所有元素都排在相应位置上为止。</p><h5 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h5><p>选一个位置的值做关键字(key)，一般选择第一个或最后一个。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719094644325.png" alt="image-20210719094644325"></p><p>选谁做key，谁原本的位置就是个坑(Pivot)，将key的值保存起来，然后它原来的位置就可以被覆盖了，</p><h6 id="动画图解1"><a href="#动画图解1" class="headerlink" title="动画图解1"></a>动画图解1</h6><p>排一个数</p><p><strong>原数组</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719102402838.png" alt="image-20210719102402838"></p><p> <img src="/images/%E6%8E%92%E5%BA%8F.assets/%E6%8C%96%E5%9D%91%E6%B3%95.gif"></p><p><strong>第一次排序完成后结构如下</strong></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719102328426.png" alt="image-20210719102328426"></p><h6 id="结构解释-amp-动画图解2"><a href="#结构解释-amp-动画图解2" class="headerlink" title="结构解释&amp;动画图解2"></a>结构解释&amp;动画图解2</h6><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719152209627.png" alt="image-20210719152209627"></p><p>此时关键字6的位置已经被确定，它左边的数都比它小，右边的数都比它大，如果它左右两边都是有序的，那么整个数组就有序里。</p><p>那么怎么让他的左右两边都是有序的呢？</p><p><strong>分治递归</strong>。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719154256998.png" alt="image-20210719154256998"></p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719154010277.png" alt="image-20210719154010277"></p><p>每次只选一个数，这个数只要保证自己的位置确定了就行。</p><p>这个区间被缩减到只有一个值的时候，就可以认为是有序的了。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719160216275.png" alt="image-20210719160216275"></p><p>![](排序.assets/挖坑法1递归 00_00_00-00_00_30.gif)</p><p><strong>得到结构</strong>：有序数组</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719161213193.png" alt="image-20210719161213193"></p><p>本质上和二叉树的遍历是类似的。</p><h6 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="特性总结"><a href="#特性总结" class="headerlink" title="特性总结"></a>特性总结</h6><ol><li><p>快速排序整体的综合性能和使用场景都是比较好的，所以才敢叫快速排序</p></li><li><p>时间复杂度:</p><p>先看单趟排序的时间复杂度 ，<strong>O(N)</strong></p><p>最理想的情况就是每次选择的key都能二分 ，位置接近中间。最均匀的情况下，它能被分成一个满二叉树的形状。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719172933068.png" alt="image-20210719172933068"></p><p>快速排序的时间复杂度是:<strong>N*log以2为底N的对数</strong></p><p>与上述排序的速度对比中我们也能看出来快速排序的快速。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210719181127087.png" alt="image-20210719181127087"></p></li></ol><h6 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h6><ol><li><p>快速排序什么情况下最坏?</p><p>有序逆序，因为，这两种每次只能排好一个数，时间复杂度是O(N²)</p></li><li><p>官方对于上面这两种情况下有一种解决方法——<strong>三数区中</strong>。</p></li></ol><p>因为有序的情况下中间这个数恰好是二分的，两边不选最大和最小的数。</p><p><strong>代码如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序——挖坑法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a,left,right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三数取中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;<span class="comment">//右移&gt;&gt;一位效果相同，效率略高</span></span><br><span class="line"><span class="keyword">if</span> (a[left] &lt; a[mid])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[left] &gt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">// a[left] &gt;a[mid]</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[left] &lt; a[right])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="小区间优化"><a href="#小区间优化" class="headerlink" title="小区间优化"></a>小区间优化</h6><p>消除掉最后几层递归调用。效果很不明显。</p><p><strong>代码如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a,left,right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> pivot = begin;<span class="comment">//这里选择左边第一个做坑</span></span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边有坑在右边找小于key的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= key)<span class="comment">//注意条件限制，否则会发生错位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往前倒，拿到最早遇到的小于key的数</span></span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小与key的放到左边的坑中，自己原来的位置形成新的坑</span></span><br><span class="line">a[pivot] = a[end];</span><br><span class="line">pivot = end;</span><br><span class="line"><span class="comment">//右边有坑在左边找大的放到坑里</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//往后倒，拿到最早遇到的大于key的数</span></span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于key的放到右边的坑中,自己形成新的坑</span></span><br><span class="line">a[pivot] = a[begin];</span><br><span class="line">pivot = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后当他们两个相遇了，这个位置就是新的坑位置</span></span><br><span class="line"><span class="comment">//再将key放到里面</span></span><br><span class="line">pivot = begin;</span><br><span class="line">a[pivot] = key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (pivot - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, pivot - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, pivot - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - pivot &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + pivot + <span class="number">1</span>, right - (pivot + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="左右指针法"><a href="#左右指针法" class="headerlink" title="左右指针法"></a>左右指针法</h5><p>类似于挖坑法。</p><p>也是先选一个key,从左右开始向中间移动，左边比key小的，右边找比key大的，然后两个交换位置，最后重叠的位置就是key的位置。</p><h6 id="动画图解-2"><a href="#动画图解-2" class="headerlink" title="动画图解"></a>动画图解</h6><p>一次排序</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif"></p><h6 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PartSort2</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a, left, right);</span><br><span class="line">Swap(&amp;a[left], &amp;a[right]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"><span class="keyword">int</span> key = a[begin];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找小</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= a[key])</span><br><span class="line">&#123;</span><br><span class="line">--end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找大</span></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= a[key])</span><br><span class="line">&#123;</span><br><span class="line">++begin;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[begin], &amp;a[end]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(&amp;a[key], &amp;a[begin]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort2(a, left, right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (keyIndex - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, keyIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, keyIndex - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - keyIndex &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, keyIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + keyIndex + <span class="number">1</span>, right - (keyIndex + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前后指针法"><a href="#前后指针法" class="headerlink" title="前后指针法"></a>前后指针法</h5><p>cur找小，每次遇到比key小的值就停下来，++prev,交换prev和cur位置的值。</p><h6 id="动画图解-3"><a href="#动画图解-3" class="headerlink" title="动画图解"></a>动画图解</h6><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%89%8D%E5%90%8E%E6%8C%87%E9%92%88.gif"></p><h6 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickSort3</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = GetMidIndex(a, left, right);</span><br><span class="line">swap(&amp;a[left], &amp;a[index]);</span><br><span class="line"><span class="keyword">int</span> key = left;</span><br><span class="line"><span class="keyword">int</span> prev = left;</span><br><span class="line"><span class="keyword">int</span> cur = left + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cur &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur &lt; a[key] &amp;&amp; ++prev != cur)<span class="comment">//自己和自己交换没有意义——&amp;&amp;后面的条件</span></span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;a[cur], &amp;a[prev]);</span><br><span class="line">&#125;</span><br><span class="line">++cur;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;a[key], &amp;a[cur]);</span><br><span class="line"><span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么时候不需要递归了呢？</span></span><br><span class="line"><span class="comment">//当这个区间不存在，或者只有一个值，都不用排</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort3(a, left, right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//确定完一个key的位置之后，开始将他们分成两段</span></span><br><span class="line"><span class="comment">//如果左子区间和右子区间有序，这个数组就有序了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小区间优化</span></span><br><span class="line"><span class="keyword">if</span> (keyIndex - <span class="number">1</span> - left &gt; <span class="number">10</span>)<span class="comment">//数据个数</span></span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, left, keyIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果剩下的数小于等于10个</span></span><br><span class="line"><span class="comment">//选一个其他排序来搞定这个这个111</span></span><br><span class="line">InsertSort(a + left, keyIndex - <span class="number">1</span> - left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right - <span class="number">1</span> - keyIndex &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">QuickSort(a, keyIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InsertSort(a + keyIndex + <span class="number">1</span>, right - (keyIndex + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这三趟排序没有本质上的区别，只是单趟排序的规则不同。</strong></p><h5 id="非递归法"><a href="#非递归法" class="headerlink" title="非递归法"></a>非递归法</h5><h6 id="递归的缺陷"><a href="#递归的缺陷" class="headerlink" title="递归的缺陷"></a>递归的缺陷</h6><p>在极端情况下会发生栈溢出。</p><p>栈帧深度太深，栈空间不够用，可能会溢出。</p><p>例如:</p><p>递归实现1+2+3+…+n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;= <span class="number">1</span>?<span class="number">1</span>:f(n<span class="number">-1</span>)+n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归改非递归有两种方式</strong></p><p>1.直接改循环</p><p>2.借助数据结构的栈模拟递归过程</p><h6 id="借助栈实现"><a href="#借助栈实现" class="headerlink" title="借助栈实现"></a>借助栈实现</h6><p>（栈的相关文章——<a href="https://blog.csdn.net/qq_51604330/article/details/117674707?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162713276516780262552939%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162713276516780262552939&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-117674707.pc_v2_rank_blog_default&utm_term=%E6%A0%88&spm=1018.2226.3001.4450">栈</a>）</p><p>栈里面的区间就是需要被单趟分割排序的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSortNonR</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//栈是后进先出的,想先出走就得先入右</span></span><br><span class="line">Stack st;</span><br><span class="line">StackInit(&amp;st);</span><br><span class="line">StackPush(&amp;st, n - <span class="number">1</span>);</span><br><span class="line">StackPush(&amp;st, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;st))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> left = StackTop(&amp;st);</span><br><span class="line">StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right = StackTop(&amp;st);</span><br><span class="line">StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> keyIndex = PartSort1(a, left, right);</span><br><span class="line"><span class="comment">//left - keyIndex-1   keyIndex    keyIndex+1 - right </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( keyIndex + <span class="number">1</span> &lt; right)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;st, right);</span><br><span class="line">StackPush(&amp;st, keyIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; keyIndex - <span class="number">1</span>)<span class="comment">//还有多个值</span></span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;st, keyIndex <span class="number">-1</span> );</span><br><span class="line">StackPush(&amp;st, left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补充:</p><p>函数调用建立栈帧，栈帧中存储局部变量参数等等。</p><p>操作系统中内存的栈和堆与数据结构中的栈和堆要区分开来。</p><p> 队列也可以实现。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h4><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法，的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使</p><h4 id="概念-amp-动画图解"><a href="#概念-amp-动画图解" class="headerlink" title="概念&amp;动画图解"></a>概念&amp;动画图解</h4><p>如果一段区间分为左右两个半区间，<strong>假设都有序</strong>，用到归并算法。</p><p>依次对比，取小的放到新的临时数组。</p><p>当其中一个区间结束了直接把另外一个区间剩下的数拷过来。</p><p>(<strong>类似于两个有序链表的归并</strong>)</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif"></p><p>那么归并之前左右子区间无序怎么办？</p><p>往下分，递归接着归并。</p><p>为了节省内存空间，分成单个归并完就拷贝回去。</p><p>归并排序有空间复杂度的消耗，因为它的核心算法需要开辟一个临时数组。它的空间复杂度是O(N),这是它跟其他算法的主要差异。</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _MergeSort(<span class="keyword">int</span>* a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//left- mid.mid +1 - right——两段区间——如果这两段有序就可以进行归并了</span></span><br><span class="line">_MergeSort(a, left, mid, tmp);</span><br><span class="line">_MergeSort(a, mid + <span class="number">1</span>, right, tmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并</span></span><br><span class="line"><span class="keyword">int</span> begin1 = left, end1 = mid;</span><br><span class="line"><span class="keyword">int</span> begin2 = mid + <span class="number">1</span>, end2 = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = left;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[begin1] &lt; a[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝回去</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">_MergeSort(a, <span class="number">0</span>, n - <span class="number">1</span>, tmp);</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p>思想上类似于二叉树的后序遍历。</p><p>图中指举出左侧一条路径。</p><p>拆分——归并。</p><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210724203050925.png" alt="image-20210724203050925"></p><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortNonR</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line"><span class="comment">//每组数据个数</span></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span> (gap &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// [i, i+gap-1] [i+gap,i+2*gap-1]</span></span><br><span class="line"><span class="keyword">int</span> begin1 = i, end1 = i + gap - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> begin2 = i + gap, end2 = i + <span class="number">2</span> * gap - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并过程中右半区间可能就不存在</span></span><br><span class="line"><span class="keyword">if</span> (begin2 &gt;= n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并过程中右半区间算多了, 修正一下</span></span><br><span class="line"><span class="keyword">if</span> (end2 &gt;= n)</span><br><span class="line">&#123;</span><br><span class="line">end2 = n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = i;</span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[begin1] &lt; a[begin2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin1 &lt;= end1)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin1++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin2 &lt;= end2)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = a[begin2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝回去</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= end2; ++j)</span><br><span class="line">&#123;</span><br><span class="line">a[j] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">gap *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论递归非递归归并排序的时间复杂度都是0(N*logN)。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>归并排序也叫做外排序。还可以对文件中的数据进行排序。</p><p>假设10的数据放到硬盘的文件中，要排序，如何排呢？<br>可能内存不够，假设有一个G的内存可用，10g的文件拆分成10个1G的文件，并且让10个1G的文件有序。</p><p>一次读文件，每一读1G到内存中，放到一个数组，用快速排序对其排序，再写到一个文件，再继续读下一个1G的数据。</p><h4 id="特性总结-1"><a href="#特性总结-1" class="headerlink" title="特性总结"></a>特性总结</h4><ol><li>归并排序的缺点在于需要O(N)的空间复杂度，归并排序的思考更多是解决在磁盘中的外排序问题。</li><li>时间复杂度：O(N*lohN)</li><li>空间复杂度：O(N)</li><li>稳定性:稳定</li></ol><h3 id="排序算法复杂度及稳定性分析"><a href="#排序算法复杂度及稳定性分析" class="headerlink" title="排序算法复杂度及稳定性分析"></a>排序算法复杂度及稳定性分析</h3><p><img src="/images/%E6%8E%92%E5%BA%8F.assets/image-20210725103805011.png" alt="image-20210725103805011"></p><p>快速排序加了三数区中基本不会出现最坏情况。</p><p>稳定性是看相同的值相对顺序是否发生变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;排序的概念&quot;&gt;&lt;a href=&quot;#排序的概念&quot; class=&quot;headerlink&quot; title=&quot;排序的概念&quot;&gt;&lt;/a&gt;排序的概</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="-排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现学生成绩管理系统(EasyX图形窗口)</title>
    <link href="http://example.com/2021/07/18/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3)/"/>
    <id>http://example.com/2021/07/18/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3)/</id>
    <published>2021-07-18T11:13:15.000Z</published>
    <updated>2021-07-18T11:20:10.228Z</updated>
    
    <content type="html"><![CDATA[<hr><p>代码文件下载链接——<a href="https://github.com/doraemon-hub-art/C-C--CODE-2021/tree/master/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">链接</a></p><hr><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3).assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="学生成绩管理系统"><a href="#学生成绩管理系统" class="headerlink" title="学生成绩管理系统"></a>学生成绩管理系统</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F(EasyX%E5%9B%BE%E5%BD%A2%E7%AA%97%E5%8F%A3).assets/stuman.png"></p><h2 id="流程-amp-注意要点"><a href="#流程-amp-注意要点" class="headerlink" title="流程&amp;注意要点"></a>流程&amp;注意要点</h2><ul><li>核心部分——<strong>EasyX</strong>显示图形界面，<strong>结构体数组和文件操作</strong>负责对数据进行各种操作。</li><li>只要一进去程序就对存储数据的文件进行读取，如果有数据直接读到学生结构体数组里面，得到当前结构体数组中的**数据数量(几个人)**，并将所有数据打印到屏幕上。</li><li>管理员用户<ul><li>输入密码验证——<strong>读取</strong>文件——验证用户输入是否正确。</li><li>显示所有数据——如果通过文件读到了数据会被打印到屏幕上，反之。如果没有读到数据，在添加数据之前都会在屏幕上显示”当前记录为空!”。<ul><li>各种方式的<strong>排序</strong>——对当前结构体数组中成员的数据，依照”按xx排序”，重新排序，均采用冒泡排序。其中值得注意的是，貌似EasyX的InputBox只能将你输入的内容保存到字符数组中，所以你需要将录入的成绩数据通过atof函数转化为浮点型，这里我采用的方法是: 先按照结构体数组中数据的存储顺序将每个人的某科成绩转化浮点型存储到一个成绩结构体数组中(在写这句话的时候想到，感觉也可以直接将各科的成绩存储到一个结构体数组中，然后在进行比较，可以缩减一下代码量)，然后利用冒泡循环对这个存成绩的结构体数组进行重新排序，<strong>要注意的是</strong>，<strong>这个存成绩的结构体数组中元素交换位置的同时</strong>，<strong>存学生各种数据结构体数组中的元素也要交换位置</strong>，这两个的数据的存储顺序是一样的，<strong>就是说一个结构体数组辅助另一个结构体数组进行排序</strong>，两个结构体需要同时发生变化。</li></ul></li><li>增删查改界面<ul><li>增——<strong>添加数据</strong>，以学号区分不同的人，姓名可以相同，但是学号每个是单独的一个，如果输入的学号已经存在，则弹窗提示，进行重新输入，直到输入通过限制条件，通过对输入的学号进行遍历，看看它是不是由<strong>纯数字</strong>组成，如果不是则弹窗提示输入<strong>格式错误</strong>，进行重新输入，直到格式正确为止。其中学生姓名不做输入格式限制，成绩同学号。完成全部输入之后进行数据保存，当前结构体人数++。如果添加的时候学号和姓名都是空的则判断为<strong>无效</strong>输入，操作无效。</li><li>查——<strong>查找数据</strong>，(删除数据和修改数据都要依靠查找数据来进行操作，只有先找到结构体里面确实<strong>有</strong>这个人，<strong>才</strong>能对他的数据进行操作)，通过输入学号或者姓名来查找一个人，在结构体数组中进行遍历来查找，<strong>找到</strong>则返回该同学在结构体数组对应的<strong>下标</strong>，然后将该同学的数据输入到屏幕上。反之，弹窗提示”查无此人”。</li><li>删——<strong>删除数据</strong>，<strong>先</strong>进行查找，找到了就弹窗提示是否确认删除，确认删除就利用循环，从要删除的这个人在结构体数组中的下标开始，<strong>依次</strong>将<strong>后面</strong>的一个数据覆盖到前面，完成后，结构体数组成员数量–。弹窗提示删除成功。</li><li>改——<strong>修改数据</strong>，同样<strong>先</strong>进行查找，找到了，InputBox提示输入新的数据，<strong>注意</strong>:与上面录入数据不同的是，这里新输入的学号需要<strong>先保存</strong>到临时创建的一个字符数组中，不能直接就存到要修改学生在结构体数组中对应的数据位置，因为如果是这样的话，下面在进行判断学号是否已经存在的时候就肯定是存在的了，需要在判断是否重复后，如果数据不重复，再把新输入的学号赋给要修改的变量，<strong>还需要注意</strong>的是：如果用户输入的新学号和原来的一样是可以的，所以这里需要多加一个判断，否则也会因为检查到<strong>数据重复</strong>而不能进行下一步。</li></ul></li></ul></li><li>普通用户<ul><li>显示全部数据及各种排序还有查找同上。</li><li><strong>需要注意的是</strong>:管理员用户和普通用户公用界面，例如:显示全部数据和查找的输入界面，点击返回键后的跳转需要加以判。宏定义一个全局整型变量，从哪点进来的就在这句之前给它赋一个新值，条件判断语句加以判断。</li></ul></li><li>缺陷<ul><li>数据显示无法分页，只能在有限的一个界面中最多显示17条数据。</li><li>代码量还可以再优化。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;//检测字符</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RecordNums 15<span class="comment">//结构体数组数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NowStudentNums = <span class="number">0</span>;<span class="comment">//当前记录人数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用数据结构</span></span><br><span class="line"><span class="comment">//用结构体数组和文件操作来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> s_Num[<span class="number">64</span>];<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">char</span> s_Name[<span class="number">64</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">char</span> s_Chinese[<span class="number">64</span>];<span class="comment">//语</span></span><br><span class="line"><span class="keyword">char</span> s_Math[<span class="number">64</span>];<span class="comment">//数</span></span><br><span class="line"><span class="keyword">char</span> s_English[<span class="number">64</span>];<span class="comment">//英</span></span><br><span class="line"><span class="keyword">double</span> s_SumScore;<span class="comment">//总分</span></span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建学生结构体数组</span></span><br><span class="line">Student StuArry[RecordNums];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建成绩结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Score</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> SuScore;<span class="comment">//subject score</span></span><br><span class="line">&#125;Score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建成绩结构体——大小同学生结构体数组</span></span><br><span class="line">Score SoArry[RecordNums];</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建管理员结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Admin</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> UserName[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> PassWord[<span class="number">64</span>];</span><br><span class="line">&#125;Admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个管理员用户</span></span><br><span class="line">Admin AdminUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示全部数据的页面跳转标识</span></span><br><span class="line"><span class="keyword">int</span> FlagAI = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//查询找到页面跳转标识</span></span><br><span class="line"><span class="keyword">int</span> FlagFPT = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MainSteps</span></span><br><span class="line"><span class="comment">1.先搭处图形窗口的大致形态</span></span><br><span class="line"><span class="comment">2.逐步实现里面的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">图形界面实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置声明——查看请跳转到下面查看具体说明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminSignIn</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonUserPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAllInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">S1mplePrint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdDeSeMoPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStuInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReturnPosi</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyStudInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeSomeStu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcChinese</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcMath</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcEnglish</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcSumScore</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ScoreFormat</span><span class="params">(<span class="keyword">char</span> PerSuSc[])</span></span>;</span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FirstPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//只要进入程序就读取数据——获取当前NowStudentNums</span></span><br><span class="line">ReadInfor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//窗口大小</span></span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//鼠标操作1</span></span><br><span class="line">MOUSEMSG m1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//大标题</span></span><br><span class="line"><span class="keyword">char</span> FirstTitle[<span class="number">20</span>] = &#123; <span class="string">&quot;学生成绩管理系统&quot;</span> &#125;;</span><br><span class="line">settextstyle(<span class="number">60</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">150</span>, <span class="number">100</span>, FirstTitle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> FirstSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;管理员操作界面&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> FirstSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;普通用户操作界面&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> FirstSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;退出程序&quot;</span> &#125;;</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">450</span>, FirstSelect1);</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">510</span>, FirstSelect2);</span><br><span class="line">outtextxy(<span class="number">240</span>, <span class="number">570</span>, FirstSelect3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m1 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">445</span> &amp;&amp; m1.y &lt;= <span class="number">490</span>)<span class="comment">//管理员界面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加入管理员登录</span></span><br><span class="line">AdminSignIn();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">505</span> &amp;&amp; m1.y &lt;= <span class="number">550</span>)<span class="comment">//普通用户界面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x &gt;= <span class="number">230</span> &amp;&amp; m1.x &lt;= <span class="number">560</span> &amp;&amp; m1.y &gt;= <span class="number">565</span> &amp;&amp; m1.y &lt;= <span class="number">610</span>)<span class="comment">//退出</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">560</span>, <span class="number">490</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">505</span>, <span class="number">560</span>, <span class="number">550</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">565</span>, <span class="number">560</span>, <span class="number">610</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//先清除一下</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//定义第二个鼠标操作</span></span><br><span class="line">MOUSEMSG m2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> SecondTitle1[<span class="number">5</span>] = &#123; <span class="string">&quot;管&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle2[<span class="number">5</span>] = &#123; <span class="string">&quot;理&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle3[<span class="number">5</span>] = &#123; <span class="string">&quot;员&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle4[<span class="number">5</span>] = &#123; <span class="string">&quot;操&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle5[<span class="number">5</span>] = &#123; <span class="string">&quot;作&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle6[<span class="number">5</span>] = &#123; <span class="string">&quot;界&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle7[<span class="number">5</span>] = &#123; <span class="string">&quot;面&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">150</span>, SecondTitle1);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">210</span>, SecondTitle2);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">270</span>, SecondTitle3);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">330</span>, SecondTitle4);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">390</span>, SecondTitle5);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">450</span>, SecondTitle6);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">510</span>, SecondTitle7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> SecondSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;显示所有数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;增删查改数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">240</span>, SecondSelect1);</span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">370</span>, SecondSelect2);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">500</span>, SecondSelect3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m2 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">240</span> &amp;&amp; m2.y &lt;= <span class="number">285</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示所有数据</span></span><br><span class="line">FlagAI = <span class="number">1</span>;</span><br><span class="line">cleardevice();</span><br><span class="line">ShowAllInfor();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">370</span> &amp;&amp; m2.y &lt;= <span class="number">415</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//增删查改界面</span></span><br><span class="line">cleardevice();</span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m2.x &gt;= <span class="number">230</span> &amp;&amp; m2.x &lt;= <span class="number">560</span> &amp;&amp; m2.y &gt;= <span class="number">500</span> &amp;&amp; m2.y &lt;= <span class="number">545</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"><span class="keyword">if</span> (m2.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">cleardevice();</span><br><span class="line">FirstPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通用户界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CommonUserPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">initgraph(<span class="number">760</span>, <span class="number">760</span>);<span class="comment">////////////////////////////////////////////////////////////////记得删</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先清除一下</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//定义第二个鼠标操作</span></span><br><span class="line">MOUSEMSG m3;</span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./firstbc.jpg&quot;</span>, <span class="number">760</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> SecondTitle1[<span class="number">5</span>] = &#123; <span class="string">&quot;普&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle2[<span class="number">5</span>] = &#123; <span class="string">&quot;通&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle3[<span class="number">5</span>] = &#123; <span class="string">&quot;用&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle4[<span class="number">5</span>] = &#123; <span class="string">&quot;户&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle5[<span class="number">5</span>] = &#123; <span class="string">&quot;操&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle6[<span class="number">5</span>] = &#123; <span class="string">&quot;作&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle7[<span class="number">5</span>] = &#123; <span class="string">&quot;界&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> SecondTitle8[<span class="number">5</span>] = &#123; <span class="string">&quot;面&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">150</span>, SecondTitle1);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">210</span>, SecondTitle2);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">270</span>, SecondTitle3);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">330</span>, SecondTitle4);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">390</span>, SecondTitle5);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">450</span>, SecondTitle6);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">510</span>, SecondTitle7);</span><br><span class="line">outtextxy(<span class="number">50</span>, <span class="number">570</span>, SecondTitle8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的背景</span></span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项的文字</span></span><br><span class="line">settextstyle(<span class="number">40</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个选项</span></span><br><span class="line"><span class="keyword">char</span> ThirdSelect1[<span class="number">20</span>] = &#123; <span class="string">&quot;显示所有数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ThirdSelect2[<span class="number">20</span>] = &#123; <span class="string">&quot;查询数据&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> ThirdSelect3[<span class="number">20</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">270</span>, <span class="number">240</span>, ThirdSelect1);</span><br><span class="line">outtextxy(<span class="number">310</span>, <span class="number">370</span>, ThirdSelect2);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">500</span>, ThirdSelect3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入主界面选项操作界面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m3 = GetMouseMsg();<span class="comment">//获取鼠标操作</span></span><br><span class="line"><span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">240</span> &amp;&amp; m3.y &lt;= <span class="number">285</span>)<span class="comment">//选项1</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示所有数据</span></span><br><span class="line">FlagAI = <span class="number">-1</span>;</span><br><span class="line">cleardevice();</span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">370</span> &amp;&amp; m3.y &lt;= <span class="number">415</span>)<span class="comment">//选项2</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line">FlagFPT = <span class="number">-1</span>;</span><br><span class="line">PrintFoudInfor();</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m3.x &gt;= <span class="number">230</span> &amp;&amp; m3.x &lt;= <span class="number">560</span> &amp;&amp; m3.y &gt;= <span class="number">500</span> &amp;&amp; m3.y &lt;= <span class="number">545</span>)<span class="comment">//选项3——返回</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line"><span class="keyword">if</span> (m3.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">FirstPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在上面悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">240</span>, <span class="number">560</span>, <span class="number">285</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">370</span>, <span class="number">560</span>, <span class="number">415</span>);</span><br><span class="line">rectangle(<span class="number">230</span>, <span class="number">500</span>, <span class="number">560</span>, <span class="number">545</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//////////////////////////////////功能实现//////////////////////////////////////</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//录入信息——通过弹窗输入&amp;系统自动计算总分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//InputBox中的数字参数——限制输入内容的位数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//名字可以重复但是学号不能重复</span></span><br><span class="line"><span class="comment">//通过循环来检查是否有重复的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入学号</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow0[] = _T(<span class="string">&quot;请输入该学生的学号&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Num, <span class="number">9</span>, InputWindow0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FlagInput2 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算输入的字符串长度</span></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Num);</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[NowStudentNums].s_Num[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; StuArry[NowStudentNums].s_Num[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput2 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput2 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput2, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt; nums; e++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[NowStudentNums].s_Num[e] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; StuArry[NowStudentNums].s_Num[e] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput2 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput2 = GetHWnd();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput2, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FlagInput2 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断是否输入重复</span></span><br><span class="line"><span class="keyword">int</span> FlagInput1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(StuArry[NowStudentNums].s_Num, StuArry[i].s_Num) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FlagInput1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput1 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput1 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput1, <span class="string">&quot;该学生已经存在，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入姓名</span></span><br><span class="line">TCHAR InputWindow1[] = _T(<span class="string">&quot;请输入该学生的姓名&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Name, <span class="number">10</span>, InputWindow1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入语文成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow2[] = _T(<span class="string">&quot;请输入该学生的语文成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Chinese, <span class="number">4</span>, InputWindow2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_Chinese))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数学成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow3[] = _T(<span class="string">&quot;请输入该学生的数学成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_Math, <span class="number">4</span>, InputWindow3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_Math))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入英语成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow4[] = _T(<span class="string">&quot;请输入该学生的英语成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[NowStudentNums].s_English, <span class="number">4</span>, InputWindow4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[NowStudentNums].s_English))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算总分</span></span><br><span class="line">StuArry[NowStudentNums].s_SumScore =</span><br><span class="line">atof(StuArry[NowStudentNums].s_Chinese) +</span><br><span class="line">atof(StuArry[NowStudentNums].s_Math) +</span><br><span class="line">atof(StuArry[NowStudentNums].s_English);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存数据</span></span><br><span class="line">SaveInfor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断输入的分数格式是否正确</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ScoreFormat</span><span class="params">(<span class="keyword">char</span> PerSuSc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(PerSuSc);</span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (PerSuSc[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; PerSuSc[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput5 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput5, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增删查改界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdDeSeMoPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG SL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认将会按照总分排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);<span class="comment">//增</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);<span class="comment">//删</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);<span class="comment">//查</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);<span class="comment">//改</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);<span class="comment">//清空</span></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);<span class="comment">//返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">0</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">0</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">0</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">0</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">0</span>, <span class="string">&quot;选项&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">100</span>, <span class="string">&quot;添加&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">200</span>, <span class="string">&quot;删除&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">300</span>, <span class="string">&quot;查找&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">400</span>, <span class="string">&quot;修改&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">500</span>, <span class="string">&quot;清空&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印当前已经有的信息——记录为空的提示也在这里面</span></span><br><span class="line">S1mplePrint();</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入鼠标操作环节</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SL = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">90</span> &amp;&amp; SL.y &lt;= <span class="number">140</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">InputInfor();</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">190</span> &amp;&amp; SL.y &lt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">DeSomeStu();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">290</span> &amp;&amp; SL.y &lt;= <span class="number">340</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">FlagFPT = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">PrintFoudInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">390</span> &amp;&amp; SL.y &lt;= <span class="number">440</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">ModifyStudInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">490</span> &amp;&amp; SL.y &lt;= <span class="number">540</span>)</span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确保误删——弹窗加以提示</span></span><br><span class="line">HWND hwndDel = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndDel, <span class="string">&quot;确认清空?&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用清空函数</span></span><br><span class="line">DeleteStuInfor();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line"><span class="comment">//弹窗提示</span></span><br><span class="line"><span class="keyword">int</span> tips1 = MessageBox(hwndDel, <span class="string">&quot;清空成功！&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点击取消不做反应</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SL.x &gt;= <span class="number">690</span> &amp;&amp; SL.x &lt;= <span class="number">850</span> &amp;&amp; SL.y &gt;= <span class="number">590</span> &amp;&amp; SL.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (SL.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//完成操作重新载入——刷新</span></span><br><span class="line">AdminPage();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助测试——显示当前人数</span></span><br><span class="line"><span class="comment">/*char temptps[5];</span></span><br><span class="line"><span class="comment">sprintf(temptps, &quot;%d&quot;, NowStudentNums);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HWND hwndTemp = GetHWnd();</span></span><br><span class="line"><span class="comment">int tips2 = MessageBox(hwndTemp, temptps, &quot;提示&quot;, MB_OK);*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);<span class="comment">//增</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);<span class="comment">//删</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);<span class="comment">//查</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);<span class="comment">//改</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">490</span>, <span class="number">850</span>, <span class="number">540</span>);<span class="comment">//清空</span></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);<span class="comment">//返回</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存数据到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果学号和姓名都不是空的才写入文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Num) != <span class="number">0</span> &amp;&amp; <span class="built_in">strlen</span>(StuArry[NowStudentNums].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\n&quot;</span>,</span><br><span class="line">StuArry[NowStudentNums].s_Num,</span><br><span class="line">StuArry[NowStudentNums].s_Name,</span><br><span class="line">StuArry[NowStudentNums].s_Chinese,</span><br><span class="line">StuArry[NowStudentNums].s_Math,</span><br><span class="line">StuArry[NowStudentNums].s_English,</span><br><span class="line">StuArry[NowStudentNums].s_SumScore);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="comment">//保存完毕人数++</span></span><br><span class="line">NowStudentNums++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抹除全部数据再保存——主要用于修改功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveInforModi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先删掉，但是不将人数置空所以不能调用之前的删除函数</span></span><br><span class="line">remove(<span class="string">&quot;StudentInforFile.txt&quot;</span>);</span><br><span class="line"><span class="comment">//如果学号和姓名都不是空的才写入文件</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[i].s_Num) != <span class="number">0</span> &amp;&amp; <span class="built_in">strlen</span>(StuArry[i].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\n&quot;</span>,</span><br><span class="line">StuArry[i].s_Num,</span><br><span class="line">StuArry[i].s_Name,</span><br><span class="line">StuArry[i].s_Chinese,</span><br><span class="line">StuArry[i].s_Math,</span><br><span class="line">StuArry[i].s_English,</span><br><span class="line">StuArry[i].s_SumScore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件中的信息-同步到当前结构体数组中,并同步得到NowStudentNums</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;StudentInforFile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将文件中的数据读取到当前的结构体数组中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%lf\t\n&quot;</span>,</span><br><span class="line">StuArry[i].s_Num,</span><br><span class="line">StuArry[i].s_Name,</span><br><span class="line">StuArry[i].s_Chinese,</span><br><span class="line">StuArry[i].s_Math,</span><br><span class="line">StuArry[i].s_English,</span><br><span class="line">&amp;StuArry[i].s_SumScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FileStudentNums = <span class="number">0</span>;<span class="comment">//辅助先得到文件中的人数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取出文件中数据的人数个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; RecordNums; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[k].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当前人数——FileStudentNums不能设全局变量，否则多次读取的时候会出现问题</span></span><br><span class="line">NowStudentNums = ++FileStudentNums;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//彻底清空——删除文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStuInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">remove(<span class="string">&quot;StudentInforFile.txt&quot;</span>);</span><br><span class="line"><span class="comment">//置空当前人数</span></span><br><span class="line">NowStudentNums = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的单纯在屏幕上的对应位置打印出结构体中的每一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">S1mplePrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果为空就不往下执行</span></span><br><span class="line"><span class="keyword">if</span> (NowStudentNums == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">200</span>, <span class="string">&quot;当前记录为空!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= NowStudentNums; q++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> Nums[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(Nums, <span class="string">&quot;%d&quot;</span>, q);</span><br><span class="line"></span><br><span class="line"><span class="comment">//缩放字体</span></span><br><span class="line">settextstyle(<span class="number">25</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">40</span> + <span class="number">40</span> * q, StuArry[q - <span class="number">1</span>].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[q - <span class="number">1</span>].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">40</span> + <span class="number">40</span> * q, Nums);</span><br><span class="line"><span class="keyword">char</span> SuSo[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo, <span class="string">&quot;%.2f&quot;</span>, StuArry[q - <span class="number">1</span>].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">40</span> + <span class="number">40</span> * q, SuSo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有数据-通用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowAllInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG SA;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"><span class="comment">//默认只是打印数据到屏幕上</span></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">80</span>, <span class="number">0</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">0</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">0</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">0</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">0</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">0</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">0</span>, <span class="string">&quot;排序方式&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">100</span>, <span class="string">&quot;按语文排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">200</span>, <span class="string">&quot;按数学排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">300</span>, <span class="string">&quot;按英语排序&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">700</span>, <span class="number">400</span>, <span class="string">&quot;按总分排序&quot;</span>);</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">S1mplePrint();<span class="comment">//默认只是单纯的打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">SA = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">90</span> &amp;&amp; SA.y &lt;= <span class="number">140</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按语文排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcChinese();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">190</span> &amp;&amp; SA.y &lt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按数学排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcMath();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">290</span> &amp;&amp; SA.y &lt;= <span class="number">340</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按英语排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcEnglish();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">390</span> &amp;&amp; SA.y &lt;= <span class="number">440</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照总分排</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">SortAcSumScore();</span><br><span class="line"><span class="comment">//刷新重新载入</span></span><br><span class="line">ShowAllInfor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SA.x &gt;= <span class="number">690</span> &amp;&amp; SA.x &lt;= <span class="number">850</span> &amp;&amp; SA.y &gt;= <span class="number">590</span> &amp;&amp; SA.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (SA.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//判断从哪个窗口点进来的</span></span><br><span class="line"><span class="keyword">if</span> (FlagAI == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AdminPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagAI == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">90</span>, <span class="number">850</span>, <span class="number">140</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">190</span>, <span class="number">850</span>, <span class="number">240</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">290</span>, <span class="number">850</span>, <span class="number">340</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">390</span>, <span class="number">850</span>, <span class="number">440</span>);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回要查找/修改/删除人所在结构体的下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ReturnPosi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//接收用户输入</span></span><br><span class="line"><span class="keyword">char</span> ReceInput[<span class="number">64</span>];</span><br><span class="line">TCHAR InputWindowFI[] = _T(<span class="string">&quot;请输入学号或者姓名进行(查找)(修改)(删除)&quot;</span>);</span><br><span class="line">InputBox(ReceInput, <span class="number">10</span>, InputWindowFI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行循环查找，一旦相同就跳出循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; NowStudentNums; w++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(StuArry[w].s_Name, ReceInput) == <span class="number">0</span> || <span class="built_in">strcmp</span>(StuArry[w].s_Num, ReceInput) == <span class="number">0</span>)<span class="comment">//返回0表示两个字符串相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没找到这人就返回-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印找到人 的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">(<span class="keyword">int</span> Position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG PFI;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();</span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">100</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">100</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">100</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">100</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">140</span>, StuArry[Position].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">140</span>, StuArry[Position].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">140</span>, StuArry[Position].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">140</span>, StuArry[Position].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">140</span>, StuArry[Position].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">char</span> SuSo[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo, <span class="string">&quot;%.2f&quot;</span>, StuArry[Position].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">140</span>, SuSo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PFI = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (PFI.x &gt;= <span class="number">690</span> &amp;&amp; PFI.x &lt;= <span class="number">850</span> &amp;&amp; PFI.y &gt;= <span class="number">590</span> &amp;&amp; PFI.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (PFI.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="keyword">if</span> (FlagFPT == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AdDeSeMoPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagFPT = <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CommonUserPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在选项上</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询——这个负责最终的调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFoudInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempPosi = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempPosi == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsF = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsF, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了——打印输出</span></span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">PrintFoudInfor(TempPosi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学生信息，找到返回下标，重新给他赋值，保存，否则直接弹窗警告</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyStudInfor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//直接套用上面查找的操作，在此基础上加一行修改前</span></span><br><span class="line"><span class="comment">//因为需要得到要修改人在结构体数组中的位置-下标，所以不能将函数直接拿过来用，得粘贴过来</span></span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempModi = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempModi == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsM = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsM, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了这个学生进行下面的操作</span></span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//鼠标操作</span></span><br><span class="line">MOUSEMSG Modi;</span><br><span class="line">initgraph(<span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IMAGE picture2;</span><br><span class="line">loadimage(&amp;picture2, <span class="string">&quot;./secondbc.jpg&quot;</span>, <span class="number">860</span>, <span class="number">760</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表头文字部分</span></span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">40</span>, <span class="string">&quot;修改前&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">240</span>, <span class="string">&quot;修改后&quot;</span>);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">100</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">100</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">100</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">100</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">100</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">100</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">740</span>, <span class="number">600</span>, <span class="string">&quot;返回&quot;</span>);</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">300</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">300</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">300</span>, <span class="string">&quot;语文&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&quot;数学&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">300</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">300</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">140</span>, StuArry[TempModi].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">140</span>, StuArry[TempModi].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">140</span>, StuArry[TempModi].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">140</span>, StuArry[TempModi].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">140</span>, StuArry[TempModi].s_English);</span><br><span class="line"><span class="comment">//输出总分</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[TempModi].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> SuSo1[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo1, <span class="string">&quot;%.2f&quot;</span>, StuArry[TempModi].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">140</span>, SuSo1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入输入弹窗——重新书写内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改学号</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于接收输入的学号，先覆盖进去</span></span><br><span class="line"><span class="keyword">char</span> TempModiNums[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">TCHAR InputWindow0[] = _T(<span class="string">&quot;请输入该学生的学号&quot;</span>);</span><br><span class="line">InputBox(TempModiNums, <span class="number">9</span>, InputWindow0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(TempModiNums,StuArry[TempModi].s_Num)==<span class="number">0</span>)<span class="comment">//如果输入的学号和本身位置的学号相同</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不作出变化,直接break</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果输入的学号和本身位置的学号不同，则需要判断与整个结构体中是否有重复的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> FlagInput3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nums = <span class="built_in">strlen</span>(TempModiNums);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断输入的是否是纯数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (TempModiNums[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; TempModiNums[i] &lt;= <span class="string">&#x27;9&#x27;</span>)<span class="comment">//如果不是数字</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FlagInput3 = <span class="number">1</span>;</span><br><span class="line">HWND hwndInput3 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput3, <span class="string">&quot;输入格式有误，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FlagInput3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为什么这里新输入的学号，会显示在结构体数组中存在，</span></span><br><span class="line"><span class="comment">//因为这是修改函数，上面输入的学号已经覆盖到了他应该取得位置，</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路1.先别把要该的值覆盖进去，先进行判断</span></span><br><span class="line"><span class="comment">判断完成符合条件最后再把值赋给它，</span></span><br><span class="line"><span class="comment">思路2.将原本的学生结构体数组复制一份</span></span><br><span class="line"><span class="comment"> 在新的结构体数组中遍历判断</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> //这里选择第一种</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//判断是否输入重复</span></span><br><span class="line"><span class="keyword">int</span> FlagInput4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(TempModiNums, StuArry[i].s_Num) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FlagInput4 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (FlagInput4 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">HWND hwndInput4 = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hwndInput4, <span class="string">&quot;该学生已经存在，请重新输入&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FlagInput4 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//覆盖</span></span><br><span class="line"><span class="built_in">memcpy</span>(TempModiNums, StuArry[TempModi].s_Num, nums);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改姓名</span></span><br><span class="line">TCHAR InputWindow1[] = _T(<span class="string">&quot;请输入该学生的姓名&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Name, <span class="number">10</span>, InputWindow1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入语文成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow2[] = _T(<span class="string">&quot;请输入该学生的语文成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Chinese, <span class="number">4</span>, InputWindow2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_Chinese))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数学成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow3[] = _T(<span class="string">&quot;请输入该学生的数学成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_Math, <span class="number">4</span>, InputWindow3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_Math))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入英语成绩</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">TCHAR InputWindow4[] = _T(<span class="string">&quot;请输入该学生的英语成绩&quot;</span>);</span><br><span class="line">InputBox(StuArry[TempModi].s_English, <span class="number">4</span>, InputWindow4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ScoreFormat(StuArry[TempModi].s_English))<span class="comment">//为真跳出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算总分</span></span><br><span class="line">StuArry[TempModi].s_SumScore =</span><br><span class="line">atof(StuArry[TempModi].s_Chinese) +</span><br><span class="line">atof(StuArry[TempModi].s_Math) +</span><br><span class="line">atof(StuArry[TempModi].s_English);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印被查找人的信息</span></span><br><span class="line"><span class="comment">//学号</span></span><br><span class="line">outtextxy(<span class="number">40</span>, <span class="number">340</span>, StuArry[TempModi].s_Num);</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">outtextxy(<span class="number">200</span>, <span class="number">340</span>, StuArry[TempModi].s_Name);</span><br><span class="line"><span class="comment">//语文成绩</span></span><br><span class="line">outtextxy(<span class="number">300</span>, <span class="number">340</span>, StuArry[TempModi].s_Chinese);</span><br><span class="line"><span class="comment">//数学成绩</span></span><br><span class="line">outtextxy(<span class="number">400</span>, <span class="number">340</span>, StuArry[TempModi].s_Math);</span><br><span class="line"><span class="comment">//英语成绩</span></span><br><span class="line">outtextxy(<span class="number">500</span>, <span class="number">340</span>, StuArry[TempModi].s_English);</span><br><span class="line"><span class="comment">//输出总分-加一个限制条件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(StuArry[TempModi].s_Name) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> SuSo2[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(SuSo2, <span class="string">&quot;%.2lf&quot;</span>, StuArry[TempModi].s_SumScore);<span class="comment">//小数点后保留两位</span></span><br><span class="line">outtextxy(<span class="number">600</span>, <span class="number">340</span>, SuSo2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line">SaveInforModi();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Modi = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (Modi.x &gt;= <span class="number">690</span> &amp;&amp; Modi.x &lt;= <span class="number">850</span> &amp;&amp; Modi.y &gt;= <span class="number">590</span> &amp;&amp; Modi.y &lt;= <span class="number">640</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">setlinecolor(RED);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"><span class="keyword">if</span> (Modi.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line"><span class="comment">//回到增删查改界面</span></span><br><span class="line">AdDeSeMoPage();</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助测试——显示当前人数</span></span><br><span class="line"><span class="comment">/*char temptps[5];</span></span><br><span class="line"><span class="comment">sprintf(temptps, &quot;%d&quot;, NowStudentNums);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HWND hwndTemp = GetHWnd();</span></span><br><span class="line"><span class="comment">int tips2 = MessageBox(hwndTemp, temptps, &quot;提示&quot;, MB_OK);*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不悬停</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(WHITE);</span><br><span class="line"></span><br><span class="line">rectangle(<span class="number">690</span>, <span class="number">590</span>, <span class="number">850</span>, <span class="number">640</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除某个学生的信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeSomeStu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先进行查找，找到返回下标，然后依次将该下标后面的数据往前推，最后人数--</span></span><br><span class="line"><span class="comment">//没找到就查无此人</span></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//因为要实现的功能不同，所以不能直接调用查找函数</span></span><br><span class="line"><span class="comment">//定义一个变量用来接收下标</span></span><br><span class="line"><span class="keyword">int</span> TempDelt = ReturnPosi();</span><br><span class="line"><span class="keyword">if</span> (TempDelt == <span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hndtipsD = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsD, <span class="string">&quot;查无此人!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到了，确认是否删除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到了就提示是否确定删除</span></span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line"><span class="comment">//delete sure?</span></span><br><span class="line">HWND hndtipsDS = GetHWnd();</span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hndtipsDS, <span class="string">&quot;确定删除？&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确定删除操作</span></span><br><span class="line"><span class="comment">//将这个元素的后一个依次迁移</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = TempDelt; d &lt; NowStudentNums - <span class="number">1</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line">StuArry[d] = StuArry[d + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在的人数-1</span></span><br><span class="line">NowStudentNums--;</span><br><span class="line"><span class="comment">//删除完成只是将当前结构体里面的数据清除了，但是文件中并没有作出更改</span></span><br><span class="line"><span class="comment">//更新到文件中</span></span><br><span class="line">SaveInforModi();<span class="comment">//用这个全部清空的函数，再对文件进行重写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取消删除不执行任何操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照语文成绩进行排序</span></span><br><span class="line"><span class="keyword">void</span> SortAcChinese()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用冒泡排序针对语文成绩对学生进行排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_Chinese);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; NowStudentNums; r++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - r; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照数学成绩进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcMath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每次给成绩结构体数组赋值都会被重新覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_Math);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; NowStudentNums; t++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - t; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照英语成绩进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcEnglish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每次给成绩结构体数组赋值都会被重新覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环将每个人的成绩都存进成绩的结构体数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">SoArry[i].SuScore = atof(StuArry[i].s_English);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对结构体进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:当用两个结构体进行排序时，即一个结构体辅助另一个结构体进行排序时，</span></span><br><span class="line"><span class="comment">//注意两个需要同时发生变化，两个结构体都需要发生变化，积累经验</span></span><br><span class="line"><span class="comment">//因为顺序是一样的，可以把两个想象成一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; NowStudentNums; y++)</span><br><span class="line">&#123;</span><br><span class="line">Score TempScore;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - y; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (SoArry[j - <span class="number">1</span>].SuScore &lt; SoArry[j].SuScore)</span><br><span class="line">&#123;</span><br><span class="line">TempScore = SoArry[j];</span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line">SoArry[j] = SoArry[j - <span class="number">1</span>];</span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">SoArry[j - <span class="number">1</span>] = TempScore;</span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用保存，默认是按照添加的顺序排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照总分进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortAcSumScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NowStudentNums; i++)</span><br><span class="line">&#123;</span><br><span class="line">Student TempStudent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; NowStudentNums - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StuArry[j - <span class="number">1</span>].s_SumScore &lt; StuArry[j].s_SumScore)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TempStudent = StuArry[j];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StuArry[j] = StuArry[j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StuArry[j - <span class="number">1</span>] = TempStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员登录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdminSignIn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开文件将账号和密码读过来</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;AdminSignIn.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取到对应的管理员结构体数组</span></span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t%s\t\n&quot;</span>, AdminUser.UserName, AdminUser.PassWord);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ReceAcctNumber[<span class="number">64</span>];</span><br><span class="line">TCHAR InputAcct[] = _T(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">InputBox(ReceAcctNumber, <span class="number">10</span>, InputAcct);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ReceAcctPassWord[<span class="number">64</span>];</span><br><span class="line">TCHAR InputPass[] = _T(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">InputBox(ReceAcctPassWord, <span class="number">10</span>, InputPass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户名和密码都正确才进度到管理员界面</span></span><br><span class="line"><span class="comment">//否则弹窗提示错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(AdminUser.UserName, ReceAcctNumber) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(AdminUser.PassWord, ReceAcctPassWord) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">AdminPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HWND SignError = GetHWnd();</span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(SignError, <span class="string">&quot;用户名或密码错误!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FirstPage();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;代码文件下载链接——&lt;a href=&quot;https://github.com/doraemon-hub-art/C-C--CODE-2021/tree/master/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%9</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-EasyX" scheme="http://example.com/tags/EasyX/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现推箱子小游戏2</title>
    <link href="http://example.com/2021/07/15/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2/"/>
    <id>http://example.com/2021/07/15/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2/</id>
    <published>2021-07-15T03:38:55.000Z</published>
    <updated>2021-07-15T03:53:52.062Z</updated>
    
    <content type="html"><![CDATA[<hr><p>我的小站——<a href="http://doraemon2.xyz/">半生瓜のblog</a></p><p>相关文章——<a href="https://blog.csdn.net/qq_51604330/article/details/115257644?spm=1001.2014.3001.5501">C语言实现推箱子小游戏</a></p><hr><h1 id="推箱子"><a href="#推箱子" class="headerlink" title="推箱子"></a>推箱子</h1><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715114136389.png" alt="image-20210715114136389"></p><p><strong>编译软件</strong>:VS2019</p><p><strong>下载</strong>：代码文件我已经上传到GitHub</p><p><a href="https://github.com/doraemon-hub-art/C-C--CODE-2021">链接</a></p><p><strong>下载最新的那个！(文件夹形式的)</strong></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>fopen scanf编译器认为的不安全报错</p><p><strong>解决</strong>:项目属性-C/C++-预处理器-预处理定义-编辑-加入_CRT_SECURE_NO_WARNINGS</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715102026788.png" alt="image-20210715102026788"></p></li><li><p>图形库函数xxx等问题</p><p><strong>解决</strong>:项目属性-高级-字符集-使用多字节字符集</p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F2.assets/image-20210715101904943.png" alt="image-20210715101904943"></p></li><li><p>图形窗口注意贴图顺序以及参数</p></li><li><p>文件读取问题——<a href="https://zhidao.baidu.com/question/350312890.html">链接</a></p></li><li><p>相关有帮助的文章——<a href="https://www.shangmayuan.com/a/cb1f5059201c4ce3984abd99.html">鼠标操作</a></p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>注意</strong>:</p><ol><li>被注释的代码大多数是命令行窗口的，少量是根本就没用的代码(没删)。</li><li>注释很多</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;//EasyX图形库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;//设置黑窗口的大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//获取键盘输入——无需回车</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;//计算时间</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.绘制地图</span></span><br><span class="line"><span class="comment">2.设置地图上不同的物品，包括:空气，墙，箱子，任务，箱子要放的位置(目的地)</span></span><br><span class="line"><span class="comment">对应数字</span></span><br><span class="line"><span class="comment">空气0</span></span><br><span class="line"><span class="comment">墙 1</span></span><br><span class="line"><span class="comment">目的地   2</span></span><br><span class="line"><span class="comment">箱子3</span></span><br><span class="line"><span class="comment">玩家4</span></span><br><span class="line"><span class="comment">//下面两个是动态发生变化的</span></span><br><span class="line"><span class="comment">箱子被推到了目的地5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.重置关卡</span></span><br><span class="line"><span class="comment">2.跳过关卡</span></span><br><span class="line"><span class="comment">4.计步器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Space  0<span class="comment">//空气</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Wall   1<span class="comment">//墙</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Final  2<span class="comment">//目的地</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Box    3<span class="comment">//箱子</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Player  4      <span class="comment">//玩家</span></span></span><br><span class="line"><span class="comment">//2+3 = 5——箱子到达目的地 </span></span><br><span class="line"><span class="comment">//玩家到了目的地和箱子到了目的地不同定义，因为是动态变化的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储-排序</span></span><br><span class="line"><span class="comment">1.创建一个结构体数组</span></span><br><span class="line"><span class="comment">2.遍历保存到文件中</span></span><br><span class="line"><span class="comment">3.读取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RecordPlayerNums 10 <span class="comment">//能够记录的玩家数量(次数)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体用来存储每次玩家的数据——为排序做准备</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RpArry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">int</span> steps;<span class="comment">//步数</span></span><br><span class="line">&#125;RpArry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个图片数组，用来贴图</span></span><br><span class="line">IMAGE img[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Loadimage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temFileName[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(temFileName, <span class="string">&quot;./images/%d.bmp&quot;</span>, i);</span><br><span class="line">loadimage(img + i, temFileName, <span class="number">63</span>, <span class="number">63</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RpArry rparry[RecordPlayerNums];<span class="comment">//直接创建一个全局的结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> RankPerson = <span class="number">0</span>;<span class="comment">//当期记录的人数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> LEVEL = <span class="number">0</span>;<span class="comment">//当前关卡，地图数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Step = <span class="number">0</span>;<span class="comment">//计步器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先读取文件中的数据，告诉新加入的数据RankPerson从哪开始</span></span><br><span class="line"><span class="keyword">int</span> FilePersonNums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------》推箱子《-------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------0.退出-----------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------1.开始游戏-------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------2.查看排行榜------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用二维数组来存储地图</span></span><br><span class="line"><span class="comment">//用三维数组来存储不同的地图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span> Map[<span class="number">6</span>][ROW][COL] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第二关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第三关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第四关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第六关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备用地图用来重置</span></span><br><span class="line"><span class="keyword">int</span> FakeMap[<span class="number">6</span>][ROW][COL] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第二关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第三关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第四关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//第六关</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出地图-符号-图形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//利用循环与条件判断语句的嵌套来打印地图</span></span><br><span class="line"><span class="comment">//注意i j的顺序，顺序不同，贴图不同！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Space)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Wall)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;▊&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;☆&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Player)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♀&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Box + Final)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j] == Final + Player)</span><br><span class="line">&#123;</span><br><span class="line">putimage(j * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置关卡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReSetLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">10</span>; s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][s][b] = FakeMap[LEVEL][s][b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取键盘输入，进行箱子和玩家的移动——推箱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//应该先找到玩家在哪，然后再进行控制</span></span><br><span class="line"><span class="comment">//使用一个循环嵌套来找到玩家Player</span></span><br><span class="line"><span class="comment">//i是行，j是列</span></span><br><span class="line"><span class="comment">//利用i和j来保存找到玩家的下标</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//行-上下</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//列-左右</span></span><br><span class="line"><span class="comment">//添加标记跳出嵌套循环</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//什么是玩家？</span></span><br><span class="line"><span class="comment">//玩家个体或者玩家进入到目的地里</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Player || Map[LEVEL][i][j] == Player + Final)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="keyword">if</span> (LEVEL &lt; <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按空格重置关卡\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按回车跳过关卡\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前步数%d&quot;</span>, Step);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//_getch接收键盘输入</span></span><br><span class="line"><span class="keyword">char</span> KeyBorad = _getch();</span><br><span class="line"><span class="comment">//移动操作</span></span><br><span class="line"><span class="keyword">switch</span> (KeyBorad)<span class="comment">//利用方向键和wasd来进行操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">什么时候可以进行移动？</span></span><br><span class="line"><span class="comment">前面是空气，或者是箱子，并且箱子后面不能是墙</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向上移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span>  <span class="number">72</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果玩家前面是-空气或者-目的地就可以移动</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i - <span class="number">1</span>][j] == Space || Map[LEVEL][i - <span class="number">1</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//玩家进行移动——加减操作——宏定义中已经给出都代表的是什么</span></span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//之前那个位置同样发生了变化</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果玩家的前面是箱子</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i - <span class="number">1</span>][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//并且箱子的前面是目的地或者空气</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i - <span class="number">2</span>][j] == Space || Map[LEVEL][i - <span class="number">2</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//箱子向上移动</span></span><br><span class="line">Map[LEVEL][i - <span class="number">2</span>][j] += Box;</span><br><span class="line"><span class="comment">//玩家跟着移动——覆盖之前箱子所在的位置</span></span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] -= Box;</span><br><span class="line">Map[LEVEL][i - <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//玩家之前的位置发生变化</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向下移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果下面是空气或者是目的地就可以进行移动</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i + <span class="number">1</span>][j] == Space || Map[LEVEL][i + <span class="number">1</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果下面是箱子</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i + <span class="number">1</span>][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//并且箱子下面是空气或者是目的地</span></span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i + <span class="number">2</span>][j] == Space || Map[LEVEL][i + <span class="number">2</span>][j] == Final)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//箱子往下面移动一个位置——其实并不是发生移动，而是要移动方向的位置上面显示的内容发生了变化,道理同上</span></span><br><span class="line">Map[LEVEL][i + <span class="number">2</span>][j] += Box;</span><br><span class="line"><span class="comment">//人往下面移动一个位置</span></span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] -= Box;</span><br><span class="line">Map[LEVEL][i + <span class="number">1</span>][j] += Player;</span><br><span class="line"><span class="comment">//人之前位置上变成空气</span></span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断同上不做解释</span></span><br><span class="line"><span class="comment">//向左移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>A<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">1</span>] == Space || Map[LEVEL][i][j - <span class="number">1</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">1</span>] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j - <span class="number">2</span>] == Space || Map[LEVEL][i][j - <span class="number">2</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">2</span>] += Box;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] -= Box;</span><br><span class="line">Map[LEVEL][i][j - <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向右移动</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">1</span>] == Space || Map[LEVEL][i][j + <span class="number">1</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>  <span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">1</span>] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j + <span class="number">2</span>] == Space || Map[LEVEL][i][j + <span class="number">2</span>] == Final)</span><br><span class="line">&#123;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">2</span>] += Box;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] -= Box;</span><br><span class="line">Map[LEVEL][i][j + <span class="number">1</span>] += Player;</span><br><span class="line">Map[LEVEL][i][j] -= Player;</span><br><span class="line">Step++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空格重置关卡</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">&#123;</span><br><span class="line">ReSetLevel();</span><br><span class="line">ShowMap();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳关</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line"><span class="keyword">if</span> (LEVEL &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">LEVEL++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否过关</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PassLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果里面所有的箱子全到了目的地，就通关</span></span><br><span class="line"><span class="comment">//嵌套循环，地图里面没有箱子了就是通关了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Map[LEVEL][i][j] == Box)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//system()</span></span><br><span class="line"><span class="comment">//过了就重置关卡(有点重复)</span></span><br><span class="line">ReSetLevel();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopWindow</span><span class="params">()</span></span>;<span class="comment">//前置声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line">ShowMap();</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">settextcolor(RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;当前步数:&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">200</span>,<span class="number">0</span>,<span class="string">&quot;第&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> q[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(q, <span class="string">&quot;%d&quot;</span>, LEVEL+<span class="number">1</span>);</span><br><span class="line">outtextxy(<span class="number">300</span>,<span class="number">0</span>, q);</span><br><span class="line">outtextxy(<span class="number">380</span>,<span class="number">0</span>,<span class="string">&quot;关&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, Step);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">30</span>, s);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">570</span>, <span class="string">&quot;空格键重置当前关卡&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">0</span>, <span class="number">600</span>, <span class="string">&quot;回车键跳过当前关卡&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PassLevel())<span class="comment">//判断是否过关，过关就切换下一张地图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//过关——切换关卡</span></span><br><span class="line">LEVEL++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通关</span></span><br><span class="line"><span class="keyword">if</span> (LEVEL &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进入到这里说明所有关卡都已经通过</span></span><br><span class="line"><span class="comment">//int End = clock();//结束——计时</span></span><br><span class="line"><span class="comment">//int TimeResult = End - Begin;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你%s，完成了游戏\n&quot;</span>, rparry[RankPerson].name);</span><br><span class="line"><span class="comment">//printf(&quot;用时%d秒\n&quot;, TimeResult / 600);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将步数存储进结构体数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;走了%d步\n&quot;</span>, Step);</span><br><span class="line">PopWindow();<span class="comment">//恭喜过关的弹窗提示</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">PushBox();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存记录-文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SavePlayerRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件操作</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;PlayerRecord.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;\t%s\t%d\n&quot;</span>, rparry[RankPerson].name, rparry[RankPerson].steps);</span><br><span class="line">fclose(fp);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要实现一个按照步数大小的排行榜</span></span><br><span class="line"><span class="comment">也可以不往文件里面写，而是再读取文件的时候读出来，先输出步数小的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">////读取记录-文件</span></span><br><span class="line"><span class="comment">//void ReadPlayerRecord()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//FILE* fp = fopen(&quot;PlayerRecord.txt&quot;, &quot;r&quot;);</span></span><br><span class="line"><span class="comment">//if (fp == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录为空!\n&quot;);</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////左侧侧边栏</span></span><br><span class="line"><span class="comment">//int i = 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////先将原来的文件读取到结构体数组中——主函数第一行已经实现</span></span><br><span class="line"><span class="comment">////读取完毕，现在数据已经被保存到结构体数组中</span></span><br><span class="line"><span class="comment">////按照从小到大的顺序输出即可</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////读取器</span></span><br><span class="line"><span class="comment">//char Gets[164];</span></span><br><span class="line"><span class="comment">//while (!feof(fp))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//fgets(Gets, 164, fp);</span></span><br><span class="line"><span class="comment">////feop的问题——需要第二次检查结尾</span></span><br><span class="line"><span class="comment">//if (feof(fp))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//将文件读取到当前结构体数组——得出文件中有几个人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadRecordFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;PlayerRecord.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">//另一个文件</span></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;打开文件失败\n&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordPlayerNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s%d&quot;</span>, rparry[i].name, &amp;rparry[i].steps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取出文件中数据的人数个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RecordPlayerNums; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rparry[i].steps != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当前人数</span></span><br><span class="line">RankPerson = ++FilePersonNums;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序&amp;更新到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RecordBubbSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//交换的时候注意是结构体</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RankPerson; i++)</span><br><span class="line">&#123;</span><br><span class="line">RpArry Temprparry;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; RankPerson - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rparry[j - <span class="number">1</span>].steps &gt;= rparry[j].steps)</span><br><span class="line">&#123;</span><br><span class="line">Temprparry = rparry[j];</span><br><span class="line">rparry[j] = rparry[j - <span class="number">1</span>];</span><br><span class="line">rparry[j - <span class="number">1</span>] = Temprparry;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;排名\t玩家\t\t步数\t\n&quot;);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; RankPerson; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, i + 1);</span></span><br><span class="line"><span class="comment">//printf(&quot;\t%s\t\t%d\n&quot;, rparry[i].name, rparry[i].steps);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//FILE* fp = fopen(&quot;PlayerRecord.txt&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; RankPerson; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (rparry[i].steps != 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//fprintf(fp,&quot;\t%s\t%d\n&quot;,rparry[i].name,rparry[i].steps);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排行榜思路</span></span><br><span class="line"><span class="comment">1.自动读取文件中的内容，保存当前的结构体数组中</span></span><br><span class="line"><span class="comment">2.对结构体数组按照步数的大小进行重新排序</span></span><br><span class="line"><span class="comment">3.打印输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//删除文件&amp;清空用户记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeletePlayerRecord</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="comment">//printf(&quot;确定清空？\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;1.确定 2.取消\n&quot;);</span></span><br><span class="line"><span class="comment">//int select = 0;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;select);</span></span><br><span class="line"><span class="comment">//if (select == 1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////直接删除记录文件</span></span><br><span class="line"><span class="comment">//remove(&quot;PlayerRecord.txt&quot;);</span></span><br><span class="line"><span class="comment">////将当前人数置空</span></span><br><span class="line"><span class="comment">//RankPerson = 0;</span></span><br><span class="line"><span class="comment">//printf(&quot;清空完毕!\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;记录并未清除。\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接删除记录文件</span></span><br><span class="line">remove(<span class="string">&quot;PlayerRecord.txt&quot;</span>);</span><br><span class="line"><span class="comment">//将当前人数置空</span></span><br><span class="line">RankPerson = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;清空完毕!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphInputName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphRankPage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面的首页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphFirImagesPg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOUSEMSG m;</span><br><span class="line"><span class="comment">//设置图形窗口大小</span></span><br><span class="line">initgraph(ROW * <span class="number">63</span>, COL * <span class="number">63</span>);<span class="comment">//SHOWCONSOLE显示命令行窗口</span></span><br><span class="line">Loadimage();</span><br><span class="line"></span><br><span class="line">setbkcolor(BLACK);</span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//刷新一次 略等于那个system(cls)</span></span><br><span class="line"></span><br><span class="line">IMAGE picture1;</span><br><span class="line">loadimage(&amp;picture1, <span class="string">&quot;./topbc.jpg&quot;</span>, <span class="number">630</span>, <span class="number">630</span>);</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;picture1);</span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">405</span>, <span class="number">400</span>, <span class="number">430</span>);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">445</span>, <span class="number">400</span>, <span class="number">470</span>);</span><br><span class="line"></span><br><span class="line">fillrectangle(<span class="number">230</span>, <span class="number">485</span>, <span class="number">400</span>, <span class="number">510</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settextstyle(<span class="number">85</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> Title[] = <span class="string">&quot;推箱子&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select1[] = <span class="string">&quot;开始游戏&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select2[] = <span class="string">&quot;排行榜&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> Select3[] = <span class="string">&quot;退出游戏&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//大标题</span></span><br><span class="line">outtextxy(<span class="number">210</span>, <span class="number">150</span>, Title);</span><br><span class="line"><span class="comment">//下面的选项</span></span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbkmode(TRANSPARENT);<span class="comment">// 去掉文字背景</span></span><br><span class="line">outtextxy(<span class="number">252</span>, <span class="number">405</span>, Select1);</span><br><span class="line">outtextxy(<span class="number">268</span>, <span class="number">445</span>, Select2);</span><br><span class="line">outtextxy(<span class="number">255</span>, <span class="number">485</span>, Select3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = GetMouseMsg();<span class="comment">//鼠标</span></span><br><span class="line"><span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">405</span> &amp;&amp; m.y &lt;= <span class="number">430</span>)<span class="comment">//开始游戏</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">400</span>, <span class="number">410</span>, <span class="number">440</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">GraphInputName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//清空绘图设备</span></span><br><span class="line"><span class="keyword">while</span> (LEVEL &lt; <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">StartGame();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先给对应的人赋值存进结构体</span></span><br><span class="line">rparry[RankPerson].steps = Step;</span><br><span class="line"><span class="comment">//保存数据进文件</span></span><br><span class="line">SavePlayerRecord();</span><br><span class="line"><span class="comment">//重置关数</span></span><br><span class="line">LEVEL = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//重置步数</span></span><br><span class="line">Step = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//数组存储下一个</span></span><br><span class="line">RankPerson++;</span><br><span class="line"><span class="comment">//重置关卡</span></span><br><span class="line">ReSetLevel();</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line">cleardevice();</span><br><span class="line">GraphFirImagesPg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">445</span> &amp;&amp; m.y &lt;= <span class="number">470</span>)<span class="comment">//查看排行榜&amp;清空加在这里面</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">440</span>, <span class="number">410</span>, <span class="number">480</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">GraphRankPage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m.x &gt;= <span class="number">230</span> &amp;&amp; m.x &lt;= <span class="number">400</span> &amp;&amp; m.y &gt;= <span class="number">485</span> &amp;&amp; m.y &lt;= <span class="number">510</span>)<span class="comment">//退出游戏</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(RED);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">480</span>, <span class="number">410</span>, <span class="number">520</span>);</span><br><span class="line"><span class="keyword">if</span> (m.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标不在相应的范围内边框就消失</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(BLACK);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">400</span>, <span class="number">410</span>, <span class="number">440</span>);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">440</span>, <span class="number">410</span>, <span class="number">480</span>);</span><br><span class="line">rectangle(<span class="number">220</span>, <span class="number">480</span>, <span class="number">410</span>, <span class="number">520</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面开始游戏-输入昵称</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphInputName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">TCHAR InputWindow[] = _T(<span class="string">&quot;请输入你的昵称&quot;</span>);</span><br><span class="line">InputBox(rparry[RankPerson].name, <span class="number">10</span>, InputWindow);<span class="comment">//输入昵称</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一把玩完后的弹窗</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line"><span class="comment">//弹出窗口提示用户操作</span></span><br><span class="line"><span class="comment">//加上窗口句柄 强制用户先点击再进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hnd, <span class="string">&quot;恭喜通关&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphDeleteRankPage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//图形界面排行榜</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphRankPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOUSEMSG m1;<span class="comment">//鼠标</span></span><br><span class="line">cleardevice();</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空按钮</span></span><br><span class="line">setbkcolor(BLACK);</span><br><span class="line"></span><br><span class="line">cleardevice();<span class="comment">//刷新一次 略等于那个system(cls)</span></span><br><span class="line"></span><br><span class="line">setfillcolor(GREEN);</span><br><span class="line">fillrectangle(<span class="number">440</span>, <span class="number">90</span>, <span class="number">580</span>, <span class="number">140</span>);</span><br><span class="line">fillrectangle(<span class="number">440</span>, <span class="number">150</span>, <span class="number">580</span>, <span class="number">200</span>);</span><br><span class="line">settextstyle(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">setbkmode(TRANSPARENT);</span><br><span class="line"><span class="keyword">char</span> Delete[<span class="number">10</span>] = &#123; <span class="string">&quot;清空数据&quot;</span> &#125;;<span class="comment">//清空按钮</span></span><br><span class="line"><span class="keyword">char</span> Back[<span class="number">10</span>] = &#123; <span class="string">&quot;返回&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">outtextxy(<span class="number">480</span>, <span class="number">158</span>, Back);</span><br><span class="line">outtextxy(<span class="number">450</span>, <span class="number">100</span>, Delete);</span><br><span class="line">outtextxy(<span class="number">60</span>, <span class="number">100</span>, <span class="string">&quot;排名&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span>, <span class="string">&quot;昵称&quot;</span>);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">100</span>, <span class="string">&quot;步数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (RankPerson == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">settextstyle(<span class="number">50</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> TIPS[<span class="number">20</span>] = &#123; <span class="string">&quot;当前记录为空!&quot;</span> &#125;;</span><br><span class="line">outtextxy(<span class="number">130</span>, <span class="number">238</span>, TIPS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RecordBubbSort();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= RankPerson; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(a, <span class="string">&quot;%d&quot;</span>, rparry[i - <span class="number">1</span>].steps);</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(b, <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">outtextxy(<span class="number">60</span>, <span class="number">100</span> + (<span class="number">50</span> * i), b);</span><br><span class="line">outtextxy(<span class="number">220</span>, <span class="number">100</span> + (<span class="number">50</span> * i), rparry[i - <span class="number">1</span>].name);</span><br><span class="line">outtextxy(<span class="number">350</span>, <span class="number">100</span> + (<span class="number">50</span> * i), a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空按钮</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m1 = GetMouseMsg();</span><br><span class="line"><span class="keyword">if</span> (m1.x &gt;= <span class="number">440</span> &amp;&amp; m1.x &lt;= <span class="number">580</span> &amp;&amp; m1.y &gt;= <span class="number">85</span> &amp;&amp; m1.y &lt;= <span class="number">150</span>)</span><br><span class="line">&#123;</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">85</span>, <span class="number">590</span>, <span class="number">150</span>);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">GraphDeleteRankPage();<span class="comment">//清空排行榜</span></span><br><span class="line">cleardevice();<span class="comment">//清屏</span></span><br><span class="line">GraphRankPage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m1.x&gt;=<span class="number">440</span> &amp;&amp; m1.x&lt;=<span class="number">580</span>&amp;&amp;m1.y &gt;=<span class="number">150</span> &amp;&amp; m1.y&lt;<span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">145</span>, <span class="number">590</span>, <span class="number">210</span>);</span><br><span class="line">setlinecolor(RED);</span><br><span class="line"><span class="keyword">if</span> (m1.uMsg == WM_LBUTTONDOWN)</span><br><span class="line">&#123;</span><br><span class="line">cleardevice();</span><br><span class="line">GraphFirImagesPg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">setlinecolor(BLACK);</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">85</span>, <span class="number">590</span>, <span class="number">150</span>);</span><br><span class="line">rectangle(<span class="number">430</span>, <span class="number">145</span>, <span class="number">590</span>, <span class="number">210</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空记录的图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GraphDeleteRankPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取窗口句柄</span></span><br><span class="line">HWND hnd = GetHWnd();</span><br><span class="line"><span class="comment">//弹出窗口提示用户操作</span></span><br><span class="line"><span class="comment">//加上窗口句柄 强制用户先点击再进行操作</span></span><br><span class="line"><span class="comment">//用一个字符数组来总结句子</span></span><br><span class="line"><span class="keyword">int</span> isok = MessageBox(hnd, <span class="string">&quot;确认清空?&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tips1 = MessageBox(hnd, <span class="string">&quot;清空成功！&quot;</span>, <span class="string">&quot;提示&quot;</span>, MB_OK);</span><br><span class="line">DeletePlayerRecord();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点击取消不做反应</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先把文件中本来有的个数计算出来</span></span><br><span class="line">ReadRecordFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面以及鼠标点击</span></span><br><span class="line">GraphFirImagesPg();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置命令行黑窗口的大小</span></span><br><span class="line"><span class="comment">//system(&quot;mode con cols=30 lines=20&quot;);//设置cols和lines数值的时候不能有空格，否则会报错。</span></span><br><span class="line"><span class="comment">//while (1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MainMenu();</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入你的选择:\n&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int Select = 0;</span></span><br><span class="line"><span class="comment">//scanf_s(&quot;%d&quot;, &amp;Select);</span></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//switch (Select)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////退出</span></span><br><span class="line"><span class="comment">//case 0:</span></span><br><span class="line"><span class="comment">//printf(&quot;游戏结束，再见:)。\n&quot;);</span></span><br><span class="line"><span class="comment">//exit(0);</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////开始游戏</span></span><br><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="comment">////图形界面输入用户名</span></span><br><span class="line"><span class="comment">//GraphInputName();</span></span><br><span class="line"><span class="comment">////进入游戏之前会提示你输入用户名</span></span><br><span class="line"><span class="comment">////printf(&quot;请输入你的昵称:\n&quot;);</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////scanf(&quot;%s&quot;, rparry[RankPerson].name);</span></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////cleardevice();//清空绘图设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while (LEVEL &lt; 4)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//StartGame();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">////先给对应的人赋值存进结构体</span></span><br><span class="line"><span class="comment">//rparry[RankPerson].steps = Step;</span></span><br><span class="line"><span class="comment">////保存数据进文件</span></span><br><span class="line"><span class="comment">//SavePlayerRecord();</span></span><br><span class="line"><span class="comment">////重置关数</span></span><br><span class="line"><span class="comment">//LEVEL = 0;</span></span><br><span class="line"><span class="comment">////重置步数</span></span><br><span class="line"><span class="comment">//Step = 0;</span></span><br><span class="line"><span class="comment">////数组存储下一个</span></span><br><span class="line"><span class="comment">//RankPerson++;</span></span><br><span class="line"><span class="comment">////重置关卡</span></span><br><span class="line"><span class="comment">//ReSetLevel();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////清除</span></span><br><span class="line"><span class="comment">//cleardevice();</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////排行榜</span></span><br><span class="line"><span class="comment">//case 2:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图形界面的排行榜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//成功代替之前的ReadPlayerRecord</span></span><br><span class="line"><span class="comment">//if (RankPerson == 0)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录为空！\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////当前记录数</span></span><br><span class="line"><span class="comment">//printf(&quot;当前记录数:%d\n&quot;, RankPerson);</span></span><br><span class="line"><span class="comment">////排序&amp;输出</span></span><br><span class="line"><span class="comment">//RecordBubbSort();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////清空排行榜&amp;清空文件</span></span><br><span class="line"><span class="comment">//case 3:</span></span><br><span class="line"><span class="comment">////DeletePlayerRecord();</span></span><br><span class="line"><span class="comment">//GraphDeleteRankPage();</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////输入有误</span></span><br><span class="line"><span class="comment">//default:</span></span><br><span class="line"><span class="comment">//printf(&quot;选择有误，请重新输入。\n&quot;);</span></span><br><span class="line"><span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//system(&quot;cls&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;我的小站——&lt;a href=&quot;http://doraemon2.xyz/&quot;&gt;半生瓜のblog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关文章——&lt;a href=&quot;https://blog.csdn.net/qq_51604330/article/details/115257644</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-EasyX" scheme="http://example.com/tags/EasyX/"/>
    
  </entry>
  
  <entry>
    <title>C++实现职工管理系统</title>
    <link href="http://example.com/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2021/07/11/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-07-11T03:08:20.000Z</published>
    <updated>2021-07-11T03:19:33.435Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=147">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难</a>-(147-166)</p><p>(1-83笔记)——<a href="https://blog.csdn.net/qq_51604330/article/details/117753463?spm=1001.2014.3001.5501">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</a></p><p>(84-146笔记)——<a href="https://blog.csdn.net/qq_51604330/article/details/118607922?spm=1001.2014.3001.5501">C++核心编程部分-内存分区模型-引用-函数提高-类与对象-文件操作</a></p><p>我的小站——<a href="http://doraemon2.xyz/">半生瓜のblog</a></p><hr><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="职工管理系统"><a href="#职工管理系统" class="headerlink" title="职工管理系统"></a>职工管理系统</h1><h2 id="管理系统需求"><a href="#管理系统需求" class="headerlink" title="管理系统需求"></a>管理系统需求</h2><p>职工管理系统可以用来管理公司内所有员工的信息<br>本教程主要利用C++来实现一个基于多态的职工管理系统<br>公司中职工分为三类:普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责</p><p>普通员工职责:完成经理交给的任务</p><p>经理职责:完成老板交给的任务，并下发任务给员工</p><p>老板职责:管理公司所有事务</p><p>管理系统中需要实现的功能如下:</p><ul><li>退出管理程序:退出当前管理系统</li><li>增加职工信息:实现批量添加职工功能,将功能信息录入到文件中,职工信息为:职工编号、姓名、部门编号</li><li>显示职工信息:显示公司内部所有职工的信息</li><li>删除离职职工:按照编号删除指定的职工</li><li>修改职工信息:按照编号修改职工个人信息</li><li>查找职工信息:按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序:按照职工的编号，进行排序，排序规则由用户指定</li><li>清空所有文档:清空文件中记录的所有职工信息(清空前需要确认，防止误删)</li></ul><hr><p><strong>存储多个员工</strong></p><p><img src="/images/C++%E5%AE%9E%E7%8E%B0%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.assets/image-20210710113024707.png" alt="image-20210710113024707"></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>worker.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//职工的抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span>  <span class="title">GetDeptName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//职工编号</span></span><br><span class="line"><span class="keyword">int</span> m_Id;</span><br><span class="line"><span class="comment">//职工姓名</span></span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="comment">//部门编号</span></span><br><span class="line"><span class="keyword">int</span> m_DeptId;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>employee.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//普通职工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span><span class="keyword">public</span> Worker </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//子类重写父类的虚函数or纯虚函数时,注意你写的是函数的声明还是函数的定义</span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Employee(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);<span class="comment">//属性初始化</span></span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;<span class="comment">//子类重写父类的虚函数or纯虚函数,virtual可删可不删</span></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>boss.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//老板类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span> :</span><span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>manager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//经理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> :</span><span class="keyword">public</span> Worker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid);</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShowInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>wokerManager.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once<span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME <span class="meta-string">&quot;test.txt&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//使用标准命名空间</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">WorkerManager();</span><br><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//退出程序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExitSystem</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//记录职工人数</span></span><br><span class="line"><span class="keyword">int</span> m_EmpNum;</span><br><span class="line"><span class="comment">//职工数组指针</span></span><br><span class="line">Worker** m_EmpArray;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEmp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SaveFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断文件是否为空标志</span></span><br><span class="line"><span class="keyword">bool</span> m_FileIsEmpty;</span><br><span class="line"><span class="comment">//统计文件中的人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_EmpNum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断职工是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mod_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//员工排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort_Emp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clean_File</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~WorkerManager();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>boss.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss::Boss(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_DeptId = deptid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Boss::ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位职责:管理公司所有的事物&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Boss::GetDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;老板&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Manager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager::Manager(<span class="keyword">int</span> id, <span class="built_in">string</span> name, <span class="keyword">int</span> deptid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_DeptId = deptid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示个人信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manager::ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t职工姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;GetDeptName()</span><br><span class="line">&lt;&lt; <span class="string">&quot;\t岗位职责:完成老板交个任务，并且下发任务给普通员工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Manager::GetDeptName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>workerManager.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;workerManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">WorkerManager::WorkerManager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1.文件不存在</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="comment">//初始化记录人数为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化数组指针为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化文件是否为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.close();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.文件存在 数据为空</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ifs &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ifs.eof())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="comment">//初始化记录人数为0</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化数组指针为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//初始化文件是否为空</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.文件存在不为空</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;Get_EmpNum();</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = num;</span><br><span class="line"><span class="comment">//开辟空间，当文件中的数据存到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="keyword">new</span> Worker * [<span class="keyword">this</span>-&gt;m_EmpNum];</span><br><span class="line"><span class="keyword">this</span>-&gt;Init_Emp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Show_Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****欢迎使用职工管理系统*****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******0-退出管理程序*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******1-增加职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******2-显示职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******3-删除离职职工*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******4-修改职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******5-查找职工信息*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******6-按照编号排序*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*******7-清空所有文档*********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;*****************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::ExitSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::AddEmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入添加职工的数量&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> addnum = <span class="number">0</span>;<span class="comment">//保存用户输入的数量</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addnum;</span><br><span class="line"><span class="keyword">if</span> (addnum &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算添加所需新空间的大小</span></span><br><span class="line"><span class="keyword">int</span> NewSize = <span class="keyword">this</span>-&gt;m_EmpNum + addnum;<span class="comment">//先在里面的人数等于原来的+新添加的</span></span><br><span class="line"><span class="comment">//开辟新空间——动态数组</span></span><br><span class="line">Worker** NewSpace = <span class="keyword">new</span> Worker * [NewSize];</span><br><span class="line"><span class="comment">//将原来空间下的数据拷贝到新空间下</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">NewSpace[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加新的数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; addnum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;<span class="comment">//职工编号</span></span><br><span class="line"><span class="built_in">string</span> name;<span class="comment">//职工姓名</span></span><br><span class="line"><span class="keyword">int</span> dselect;<span class="comment">//部门选择</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个新职工的编号&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的判断输入重复是有缺陷的，例如我们要添加2个新员工，如果输入的第二个人和第一个人的编号一样，</span></span><br><span class="line"><span class="comment">这样就判断不出来重复了,:(</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> adjust = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="keyword">this</span>-&gt;m_EmpNum; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此编号已存在!请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">adjust = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (adjust == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span>&lt;&lt; <span class="string">&quot;个新职工的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择该职工的岗位&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.普通职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dselect;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (dselect)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Employee(id, name, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Manager(id, name, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Boss(id, name, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将创建的职工指针，保存到数组中</span></span><br><span class="line">NewSpace[<span class="keyword">this</span>-&gt;m_EmpNum + i] = worker;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放原有的空间</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="comment">//更改新空间的指向</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = NewSpace;</span><br><span class="line"><span class="comment">//更新职工人数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = NewSize;</span><br><span class="line"><span class="comment">//更新职工不为空的标志</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功添加&quot;</span> &lt;&lt; addnum &lt;&lt; <span class="string">&quot;个新职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//保存数据到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键后清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::SaveFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);<span class="comment">//用输出方式打开文件——写文件</span></span><br><span class="line"><span class="comment">//将每个人的数据写入到文件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">ofs &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_DeptId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计人数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WorkerManager::Get_EmpNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);<span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> did;</span><br><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;id &amp;&amp; ifs&gt;&gt;name &amp;&amp; ifs&gt;&gt;did)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Init_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//就是把文件里面的内容读进来</span></span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> did;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ifs&gt;&gt;id &amp;&amp; ifs &gt;&gt;name &amp;&amp; ifs&gt;&gt;did)</span><br><span class="line">&#123;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (did == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Employee(id,name,did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (did == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Manager(id, name, did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">worker = <span class="keyword">new</span> Boss(id, name, did);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[index] = worker;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Show_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断文件是否为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件为空或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用多条调用程序接口</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;ShowInfo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键后清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断职工是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WorkerManager::IsExist</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">-1</span>;<span class="comment">//一看是认定不存在</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到职工</span></span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">WorkerManager::Del_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或者记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照职工的编号来删除职工</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要删除职工的编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> index = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (index != <span class="number">-1</span>)<span class="comment">//存在-删除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在数组中删除数据本质上就是数据前移</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum <span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数组中记录人员个数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum--;</span><br><span class="line"><span class="comment">//数据同步更新到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除失败，未找到该员工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Mod_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要修改的职工编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查找到了</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[ret];<span class="comment">//删除旧的，创建新的</span></span><br><span class="line"><span class="keyword">int</span> newid = <span class="number">0</span>;;</span><br><span class="line"><span class="built_in">string</span> newname = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">int</span> newselect = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找到了编号为&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;的这个职工,&quot;</span> &lt;&lt;<span class="string">&quot;请输入新的职工号&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newid;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新的岗位&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.普通职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.老板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; newselect;</span><br><span class="line">Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span> (newselect)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Employee(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Manager(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">worker = <span class="keyword">new</span> Boss(newid, newname, newselect);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新数据到数组中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[ret] = worker;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();<span class="comment">//保存到文件中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改失败，查无此人。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Find_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入查找的方式&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.按职工编号查找&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.按职工姓名查找&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照编号查</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入查找的职工编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="keyword">this</span>-&gt;IsExist(id);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找成功！该职工的信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[ret]-&gt;ShowInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找失败，查无此人!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//按照姓名查找</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找的姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="comment">//加入判断是否查到的标志</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Name== name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找成功,职工编号为&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot;的职工，他的信息如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i]-&gt;ShowInfo();</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查找失败，查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入选项有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按任意键清屏</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//员工排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Sort_Emp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;clsf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择排序方式&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.按照职工号进行升序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.按照职工号进行降序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> MinOrMax = i;<span class="comment">//声明最大值或最小值下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;m_EmpNum; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax]-&gt;m_Id &gt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line">MinOrMax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax]-&gt;m_Id &lt; <span class="keyword">this</span>-&gt;m_EmpArray[j]-&gt;m_Id)</span><br><span class="line">&#123;</span><br><span class="line">MinOrMax = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断一开始认定的最大值或最小值是不是计算的最大值或最小值，如果不是就交换</span></span><br><span class="line"><span class="keyword">if</span> (i != MinOrMax)</span><br><span class="line">&#123;</span><br><span class="line">Worker* temp = <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[i] = <span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax];</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray[MinOrMax] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排序成功！排序后的结果为:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;SaveFile();<span class="comment">//将排序后的结果保存到文件中</span></span><br><span class="line"><span class="keyword">this</span>-&gt;Show_Emp();<span class="comment">//展示所有职工</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WorkerManager::Clean_File</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;确认清空吗?&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.确认&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.取消&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(FILENAME,ios::trunc)</span></span>;</span><br><span class="line">ofs.close();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除堆区的每个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除堆区数组指针</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">WorkerManager::~WorkerManager()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_EmpArray != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_EmpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_EmpArray;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_EmpArray = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>职工管理系统</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;woklerManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;employee.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;boss.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">/*Worker* worker = NULL;</span></span><br><span class="line"><span class="comment">worker = new Employee(1, &quot;sb&quot;, 1);</span></span><br><span class="line"><span class="comment">worker-&gt;ShowInfo();</span></span><br><span class="line"><span class="comment">delete worker;</span></span><br><span class="line"><span class="comment">worker = new Manager(1, &quot;sbb&quot;, 2);</span></span><br><span class="line"><span class="comment">worker-&gt;ShowInfo();</span></span><br><span class="line"><span class="comment">delete worker;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个管理者的对象</span></span><br><span class="line">WorkerManager wm;</span><br><span class="line"><span class="keyword">int</span> choice = <span class="number">0</span>;<span class="comment">//用来存储用户的选择</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line">wm.Show_Menu();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出系统</span></span><br><span class="line">wm.ExitSystem();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//添加职工</span></span><br><span class="line">wm.AddEmp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//显示职工</span></span><br><span class="line">wm.Show_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//删除职工</span></span><br><span class="line">wm.Del_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//修改职工</span></span><br><span class="line">wm.Mod_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//查找职工</span></span><br><span class="line">wm.Find_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//排序职工</span></span><br><span class="line">wm.Sort_Emp();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//清空文件</span></span><br><span class="line">wm.Clean_File();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1et411b73Z?p=147&quot;&gt;黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难&lt;/a&gt;-(147-166)&lt;/p&gt;
&lt;p&gt;(1-83笔记)——&lt;a </summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++核心编程部分</title>
    <link href="http://example.com/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/"/>
    <id>http://example.com/2021/07/08/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%83%A8%E5%88%86/</id>
    <published>2021-07-08T10:33:19.000Z</published>
    <updated>2021-07-08T10:56:30.798Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=146&spm_id_from=pageDriver">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili</a>(84-146)</p><p>我的小站——<a href="http://doraemon2.xyz/">半生瓜のblog (doraemon2.xyz)</a></p><p>1-83笔记——<a href="https://blog.csdn.net/qq_51604330/article/details/117753463?spm=1001.2014.3001.5501">如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。_半生瓜のblog-CSDN博客</a></p><hr><p><img src="/images/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h1 id="C-核心编程部分"><a href="#C-核心编程部分" class="headerlink" title="C++核心编程部分"></a>C++核心编程部分</h1><h2 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h2><ul><li>代码区：存放函数的二级制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区： 由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul><p><strong>内存四区意义</strong>：不同区域存放的数据，赋予不同的声明周期，给我们更大的灵活编程</p><h3 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h3><p>在程序编译后，生成了exe可执行文件，未执行该程序前分为两个区域。</p><p>代码区：</p><ul><li>存放cpu执行的机器指令</li><li>代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份打码即可</li><li>代码区是只读的，使其只读的原因是防止程序意外的修改了它的指令</li></ul><p>全局区：</p><ul><li>全局变量和静态变量存放于此</li><li>全局区还包含了常量区，字符串常量和其他常量也存放于此</li><li>该区域的数据在程序结束之后由操作系统释放</li></ul><h3 id="程序运行后"><a href="#程序运行后" class="headerlink" title="程序运行后"></a>程序运行后</h3><p>栈区：</p><ul><li>由编译器自动分配释放，存放函数的参数值，局部变量等。</li><li>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</li></ul><p>堆区：</p><ul><li>有程序员分配释放，若程序员不释放，程序结束之后有操作系统回收</li><li>在C++中主要利用new在堆区中开辟内存</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h3><p>在堆区开辟数据</p><p>堆区开辟的数据，由程序员手动开辟，手动释放，释放用delete</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 数据类型</span><br></pre></td></tr></table></figure><p>利用new创建的数据，会返回该数据对应类型的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* arry[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//new int(10)就是创建一个存放整型的空间存10</span></span><br><span class="line"><span class="keyword">delete</span>[] arry;释放数组的时候要加[]</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>作用</strong>:给变量起别名</p><p><strong>语法</strong>：数据类型 &amp;别名 = 原名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//a和b操作的是同一块内存</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>引用必须初始化——告诉它它是谁的别名</li><li>引用在初始化之后，不可以改变</li></ul><h3 id="做函数参数"><a href="#做函数参数" class="headerlink" title="做函数参数"></a>做函数参数</h3><p><strong>作用</strong>：函数传参时，可以利用引用让形参修饰实参</p><p><strong>优点</strong>：可以简化指针修改实参（传址）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNums</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span>&amp; b)</span></span>;<span class="comment">//引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    changeNums(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span>&amp; b)</span><br><span class="line">    <span class="comment">//引用——其实上面的a就是下面a的一个别名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="做函数的返回值"><a href="#做函数的返回值" class="headerlink" title="做函数的返回值"></a>做函数的返回值</h3><p><strong>注意</strong>：不要返回局部变量引用</p><p>用法：函数调用作为左值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//栈区</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">20</span>;<span class="comment">//静态变量存放在全局区，全局区的数据在程序结束后系统释放</span></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; ret = test1();</span><br><span class="line"><span class="keyword">int</span>&amp; ret2 = test2();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//作为左值</span></span><br><span class="line">test2() = <span class="number">1000</span>;<span class="comment">//如果函数的返回值是引用，这个函数调用可以作为左值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//第一次结果正确是因为编译器做了保留</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ret;<span class="comment">//第二次结果错误是因为a的内存已经释放</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用本质"><a href="#引用本质" class="headerlink" title="引用本质"></a>引用本质</h3><p><strong>本质</strong>：引用的本质在c++内部实现是一个指针常量,引用一旦被初始化之后就不能更改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ref = <span class="number">100</span>;<span class="comment">//ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a  = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;ref = a;<span class="comment">//自动转化int* const ref = &amp;a;//指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">ref =<span class="number">20</span>;<span class="comment">//自动发现ref是引用，自动转换为*ref = 20;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：C++推荐使用引用技术，因为语法方便，引用本质是指针常量，但所有的指针操作编译器都棒我们做了。</p><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p><strong>作用</strong>:常量引用主要用来修饰形参，防止误操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量引用</span></span><br><span class="line"><span class="comment">//使用场景，用来修饰形参，防止误操作</span></span><br><span class="line"><span class="comment">//引用必须引用一块合法的内存空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//加上const之后，编译器将代码修改为int temp =10;</span></span><br><span class="line"><span class="comment">//int&amp; ref = temp;</span></span><br><span class="line"><span class="comment">//加入const之后变为只读不可以修改</span></span><br></pre></td></tr></table></figure><p>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showvaL</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h2><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><p>在c++中函数形参列表中的形参是可以有默认值的。</p><p>语法：返回值类型 函数名(参数=默认值)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的哪个参数被声明默认了，下面函数调用的时候就可以少传哪个参数，如果有默认值还传了参数，用的就是函数调用传递的参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b =<span class="number">10</span>,<span class="keyword">int</span> c =<span class="number">23</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ref = func(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：如果某个位置已经有了默认参数，那么从这个位置往后都要有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从b开始往后一的参数都有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b= <span class="number">10</span>;<span class="keyword">int</span> c =<span class="number">20</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数的声明有默认参数，函数的实现就不能有默认参数了。</p><p> 声明和实现只能有一个有默认参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>;<span class="keyword">int</span> b = <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来占位，调用函数的时候必须填补该位置。</p><p>语法：返回值类型 函数名 （数据类型）{}，</p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>,<span class="number">1</span>);<span class="comment">//这个1传进去是拿不到的，目前阶段的占位参数我们还用不到，但在后面是会用到的。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位参数还可以有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> =<span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p><strong>作用</strong>:函数名可以相同，提高复用性</p><p><strong>函数重载满足条件</strong></p><ul><li>同一个作用域下</li><li>函数名相同</li><li>函数参数类型不同或者个数不同或者顺序不同</li></ul><p><strong>注意</strong>：函数的返回值不可以作为函数重载的条件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无参数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    根据函数传递参数的不同调用不同的代码</span><br><span class="line">func();</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载的注意事项"><a href="#函数重载的注意事项" class="headerlink" title="函数重载的注意事项"></a>函数重载的注意事项</h3><ul><li>引用作为函数重载条件</li><li>函数重载碰到函数默认参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int&amp; a =10;不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//const int&amp; a =10;合法——编译器自动优化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func(<span class="number">10</span>);</span><br><span class="line"><span class="comment">/*当函数重载碰到默认参数</span></span><br><span class="line"><span class="comment">编译器傻了，不知道该调用哪个了</span></span><br><span class="line"><span class="comment">——出现二义性</span></span><br><span class="line"><span class="comment">——写函数重载就不要加默认参数，避免这种情况的出现*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>C++面向对象的三大特性为：封装、继承、多态。</p><p>C++认为万事万物皆为对象，对象上有其属性和行为</p><p><strong>例如</strong>:</p><p>人可以作为对象，属性有姓名、年龄、身高、体重……行为有唱、跳、跑……</p><p>车也可以作为对象，属性有轮胎、方向盘、大灯……行为有载人、放音乐、开空调……</p><p>具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类……</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h4><p>封装是C++面向对象的三大特征之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><h4 id="封装的意义一"><a href="#封装的意义一" class="headerlink" title="封装的意义一"></a><strong>封装的意义一</strong></h4><p>在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span>访问权限: 属性 / 行为&#125;;</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>示例1</strong></p><p>创建一个圆类，求圆的周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//class 代表设计一个类，类后面紧跟着的就是类名称</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//属性 </span></span><br><span class="line"><span class="comment">//半径</span></span><br><span class="line"><span class="keyword">int</span> c_r;</span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="comment">//获取圆的周长</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * pi * c_r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过圆类创建具体的圆(对象)</span></span><br><span class="line"><span class="comment">//实例化——通过一个类创建一个对象的过程</span></span><br><span class="line">Circle c1;</span><br><span class="line"><span class="comment">//给圆对象的属性进行赋值</span></span><br><span class="line">c1.c_r = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为&quot;</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p>创建一个学生类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> s_Name;</span><br><span class="line"><span class="keyword">int</span> s_Id;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; s_Name &lt;&lt; <span class="string">&quot;ID：&quot;</span> &lt;&lt; s_Id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s_Name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1;</span><br><span class="line"><span class="comment">//s1.s_Name = &quot;张三&quot;;</span></span><br><span class="line">s1.inputName(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">s1.s_Id = <span class="number">123456</span>;</span><br><span class="line">s1.showStudent();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中的属性和行为，我们统称为成员</p><p>属性-成员属性-成员变量</p><p>行为-成员函数-成员方法</p><h4 id="封装的意义二"><a href="#封装的意义二" class="headerlink" title="封装的意义二"></a><strong>封装的意义二</strong></h4><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种</p><ol><li>public——公共权限——成员类内可以访问，类外可以访问</li><li>protected–保护权限——成员类内可以访问，类外不可以访问</li><li>private——私有权限——成员类内可以访问，类外不可以访问</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> p_name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">string</span> p_car;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> p_password;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p_car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">p_password = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.p_name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line"><span class="comment">//p1.p_car = &quot;GTR&quot;;protected类外无法访问</span></span><br><span class="line"><span class="comment">//p1.p_password = 123;private类外无法访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a>struct和class</h4><p>在C++中struct和class的唯一区别就是默认的访问权限不同。</p><p><strong>区别</strong>：</p><ul><li>struct默认权限为公共public</li><li>class默认权限为私有private</li></ul><p>成员属性设置为私有</p><p><strong>优点1</strong>：将所有成员属性设置为私有，可以自己控制读写权限。</p><p><strong>优点2</strong>：对于写权限，我们可以检测数据的有效性。</p><p><strong>示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//设置姓名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取年龄</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置年龄</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">p_age = age;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt;<span class="number">150</span>)</span><br><span class="line">&#123;</span><br><span class="line">p_age = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;什么鬼&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置伙伴</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(<span class="built_in">string</span> lname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lover = lname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//姓名 可读可写</span></span><br><span class="line"><span class="built_in">string</span> p_name;</span><br><span class="line"><span class="comment">//年龄 可读可写加个范围</span></span><br><span class="line"><span class="keyword">int</span> p_age;</span><br><span class="line"><span class="comment">//伙伴  只写</span></span><br><span class="line"><span class="built_in">string</span> lover;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p1.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p1.setAge(<span class="number">18</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p1.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p1.setLover(<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习案例"><a href="#练习案例" class="headerlink" title="练习案例"></a>练习案例</h4><h5 id="1-设计立方体类"><a href="#1-设计立方体类" class="headerlink" title="(1)设计立方体类"></a>(1)设计立方体类</h5><p>求立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">setl</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">C_L = l;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_L;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">setw</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> C_W = w;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_W;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">seth</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> C_H= h;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">geth</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_H;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//表面积</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">calculateS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span> * C_L * C_W + <span class="number">2</span> * C_L * C_H + <span class="number">2</span> * C_W * C_H;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//体积</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">calculateV</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> C_L * C_W * C_H;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//成员函数判断是否相等</span></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">issamebyClass</span><span class="params">(Cube &amp;c)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (C_H== c.geth() &amp;&amp; C_L == c.getl() &amp;&amp; C_W == c.getw())</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> C_L;</span><br><span class="line"><span class="keyword">int</span> C_W;</span><br><span class="line"><span class="keyword">int</span> C_H;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用全局函数判断相等</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">issame</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c1.geth() == c2.geth() &amp;&amp; c1.getl() == c2.getl() &amp;&amp; c1.getw() == c2.getw())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cube c1;</span><br><span class="line">c1.seth(<span class="number">10</span>);</span><br><span class="line">c1.setl(<span class="number">10</span>);</span><br><span class="line">c1.setw(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.calculateS() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.calculateV() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Cube c2;</span><br><span class="line">c2.seth(<span class="number">10</span>);</span><br><span class="line">c2.setl(<span class="number">10</span>);</span><br><span class="line">c2.setw(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//判断是否相等</span></span><br><span class="line"><span class="keyword">bool</span> ret = issame(c1, c2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1和c2相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1和c2不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数判断</span></span><br><span class="line"><span class="keyword">bool</span> ret2 = c1.issamebyClass(c2); </span><br><span class="line"><span class="keyword">if</span> (ret2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;利用成员函数,c1和c2相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;利用成员函数,c1和c2不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-点和圆的关系"><a href="#2-点和圆的关系" class="headerlink" title="(2)点和圆的关系"></a>(2)点和圆的关系</h5><p>设计一个圆类和一个点类判断圆和点的关系。</p><p><strong>在一个类中可以让另一个类作为这个类的成员</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建议将属性设置为私有，对外提供接口</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_x;</span><br><span class="line"><span class="keyword">int</span> c_y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setr</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_R = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setcenter</span><span class="params">(Point center)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_center = center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">getcenter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_R;</span><br><span class="line">Point c_center;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isInCircle</span><span class="params">(Circle &amp;c,Point &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> distance =</span><br><span class="line">(c.getcenter().getx() - p.getx()) * (c.getcenter().getx() - p.getx()) +</span><br><span class="line">(c.getcenter().gety() - p.gety()) * (c.getcenter().gety() - p.gety());</span><br><span class="line"><span class="keyword">int</span> rdistance = c.getr() * c.getr();</span><br><span class="line"><span class="keyword">if</span> (distance == rdistance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (distance &gt; rdistance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c1;</span><br><span class="line">c1.setr(<span class="number">10</span>);</span><br><span class="line">Point center;</span><br><span class="line">center.setx(<span class="number">10</span>);</span><br><span class="line">center.sety(<span class="number">10</span>);</span><br><span class="line">c1.setcenter(center);</span><br><span class="line">Point p1;</span><br><span class="line">p1.setx(<span class="number">3</span>);</span><br><span class="line">p1.sety(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//调用判断</span></span><br><span class="line">isInCircle(c1, p1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个类拆分成两个文件</p><p><strong>point.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setx</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sety</span><span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gety</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c_x;</span><br><span class="line"><span class="keyword">int</span> c_y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>point.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="comment">//Point::告诉编译器这是Point作用域下面的一个成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::setx</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Point::getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::sety</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Point::c_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Point::gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的初始化清理"><a href="#对象的初始化清理" class="headerlink" title="对象的初始化清理"></a>对象的初始化清理</h3><ul><li>在生活中我们所购买的点子产品大多都有恢复出厂设置，在某一天我们不使用的时候清楚自己的数据来保证自己信息的安全。</li><li>C++中的面向对象来源生活，每个对象也会有初识设置以及对象销毁前的清理数据的设置。、</li></ul><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题。</p><p>一个对象或者变量没有初识状态，对其使用后的后果是未知的。</p><p>同样的使用完一个对象或者变量，没有及时进行清理，也会造成一定的安全问题。</p><p>C++利用了<strong>构造函数和析构函数</strong>解决上述问题，这两个函数将会被编译器自动斓用，完成对象初始化和清理工作。对象的初始化和清理工作是编译器强制要我们做的事情，<strong>因此如果我们不提供构造和析构，编译器会提供，但是编译器提供的构造函数和析构函数是空实现</strong>。</p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</li></ul><h5 id="构造函数语法"><a href="#构造函数语法" class="headerlink" title="构造函数语法"></a>构造函数语法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象的时候会自动调用构造，无须手动调用，而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//不写的也会自动创建一个，只不过里面是空的</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;构造函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//创建了一个对象但是没有调用这个函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210617103403844.png" alt="image-20210617103403844"></p><h5 id="析构函数语法"><a href="#析构函数语法" class="headerlink" title="析构函数语法"></a>析构函数语法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>析构函数没有返回值也不写void</li><li>函数名称与类名相同，在名称前加上~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;构造函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;析构函数的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//在栈上的数据，test01执行完之后会释放这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"><span class="comment">//Person p;在main函数中析构函数也会被调用在按完任意键之后</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210617112248509.png" alt="image-20210617112248509"></p><h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><p>两种分类方式：</p><ul><li>按参数分为:有参构造和无参构造</li><li>按类型分为:普通构造和拷贝构造</li></ul><p>三种调用方式：</p><ul><li>括号法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person p;<span class="comment">//默认构造函数调用</span></span><br><span class="line"><span class="comment">/*注意：使用默认构造函数的时候，不要加(),编译器会认为这是一个函数的声明</span></span><br><span class="line"><span class="comment">例如：Person p1();不会认为在创建对象*/</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//有参构造函数调用</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p3的年龄为&quot;</span> &lt;&lt; p3.age &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li>显示法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person p1;<span class="comment">//无参</span></span><br><span class="line">Person p2 = Person(<span class="number">10</span>);<span class="comment">//有参</span></span><br><span class="line">Person p3 = Person(p2);<span class="comment">//拷贝</span></span><br><span class="line"><span class="comment">//如果把等号右边的式子单独拿出来</span></span><br><span class="line"><span class="comment">//Person(10)这是一个匿名对象-特点——当前行执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line"><span class="comment">//注意：不要利用拷贝函数初始化匿名对象-编译器会认为Person(p3) == Person p3 编译器会认为是对象的声明</span></span><br><span class="line"><span class="comment">//Person(p3)</span></span><br></pre></td></tr></table></figure><ul><li><p>隐式转换法</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p4 = <span class="number">10</span>;<span class="comment">//相当与Person p4 = Person(10);</span></span><br><span class="line">Person p5 = p4;<span class="comment">//拷贝构造</span></span><br></pre></td></tr></table></figure><p><strong>全部代码</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span>  <span class="title">Person</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="comment">//构造函数-无参构造-编译器提供的就是无参的</span></span><br><span class="line">  Person()</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的无参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//构造函数-有参构造</span></span><br><span class="line">  Person(<span class="keyword">int</span> a)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//将传入的人身上的所有属性，拷贝到我身上。</span></span><br><span class="line">  age = a;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Person()</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//////////////</span></span><br><span class="line">  <span class="comment">//拷贝构造函数</span></span><br><span class="line">  Person(<span class="keyword">const</span> Person&amp;p)</span><br><span class="line">  &#123;</span><br><span class="line">  age = p.age;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="comment">//Person p;//默认构造函数调用</span></span><br><span class="line">  <span class="comment">///*注意：使用默认构造函数的时候，不要加(),编译器会认为这是一个函数的声明</span></span><br><span class="line">  <span class="comment">//例如：Person p1();不会认为在创建对象*/</span></span><br><span class="line">  <span class="comment">//Person p2(10);//有参构造函数调用</span></span><br><span class="line">  <span class="comment">//Person p3(p2);//拷贝构造函数调用</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; &quot;p2的年龄为&quot; &lt;&lt; p2.age &lt;&lt; endl;</span></span><br><span class="line">  <span class="comment">//cout &lt;&lt; &quot;p3的年龄为&quot; &lt;&lt; p3.age &lt;&lt; endl;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//显示法</span></span><br><span class="line">  <span class="comment">//Person p1;//无参</span></span><br><span class="line">  <span class="comment">//Person p2 = Person(10);//有参</span></span><br><span class="line">  <span class="comment">//Person p3 = Person(p2);//拷贝</span></span><br><span class="line">  <span class="comment">////如果把等号右边的式子单独拿出来</span></span><br><span class="line">  <span class="comment">////Person(10)这是一个匿名对象-特点——当前行执行结束后，系统会立即回收掉匿名对象</span></span><br><span class="line">  <span class="comment">////注意：不要利用拷贝函数初始化匿名对象-编译器会认为Person(p3) == Person p3 编译器会认为是对象的声明</span></span><br><span class="line">  <span class="comment">////Person(p3)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//隐式转换法</span></span><br><span class="line">  Person p4 = <span class="number">10</span>;<span class="comment">//相当与Person p4 = Person(10);</span></span><br><span class="line">  Person p5 = p4;<span class="comment">//拷贝构造</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 拷贝构造函数调用时机</span><br><span class="line"></span><br><span class="line">C++中拷贝构造函数调用时机通常有三种情况</span><br><span class="line"></span><br><span class="line">- 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="line">- 值传递的方式给函数参数传值</span><br><span class="line">- 以值方式返回局部对象</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用一个已经创建完毕的对象来初始化一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">dowork(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = dowork2();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>*)&amp;p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line">test03();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="构造函数的调用规则"><a href="#构造函数的调用规则" class="headerlink" title="构造函数的调用规则"></a>构造函数的调用规则</h4><p>默认情况下，C++编译器至少给一个类添加三个函数</p><ol><li>默认构造函数(无参、函数体为空)</li><li>默认析构函数(无参、函数体为空)</li><li>默认拷贝函数构造函数，对属性值拷贝</li></ol><p>构造函数调用规则如下:</p><ul><li>如果用户定义有参构造函数，C++不再提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，C++不会再提供其他构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//构造函数的调用规则</span></span><br><span class="line"><span class="comment">//只要创建一个类，c++编译器会默认给每个类都添加至少3个函数</span></span><br><span class="line"><span class="comment">/*默认构造(空实现)</span></span><br><span class="line"><span class="comment">析构函数(空实现)</span></span><br><span class="line"><span class="comment">拷贝函数*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">p.m_Age = <span class="number">18</span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄为&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当用户创建了有参构造函数，编译器就不再提供默认无参构造函数，但是会提供默认拷贝构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>用户提供了有参，编译器不会提供无参，但会提供拷贝；</p><p>用户提供了拷贝，编译器什么构造函数都不会提供。</p><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>深浅拷贝是面试的一个经典的问题，也是常见的一个坑。</p><p><strong>浅拷贝</strong>：简单的赋值拷贝操作。</p><p><strong>深拷贝</strong>：在堆区中重新申请空间，进行拷贝操作。</p><hr><p><strong>浅拷贝带来的问题——内存重复释放</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//深拷贝与浅拷贝问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的默认构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="keyword">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line">m_Height = <span class="keyword">new</span> <span class="keyword">int</span>(height);</span><br><span class="line">m_Age = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的有参构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line">m_Height = p.m_Height;编译器默认实现的就是这行代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将堆区开辟的数据进行释放</span></span><br><span class="line"><span class="keyword">if</span> (m_Height !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Height;</span><br><span class="line">m_Height = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">int</span>* m_Height;<span class="comment">//为什么要用指针——要把身高开辟到堆区</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">166</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1.m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span> &lt;&lt; *p1.m_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p2.m_Age&lt;&lt;<span class="string">&quot;\t&quot;</span> &lt;&lt;*p2.m_Height&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210703120328939.png" alt="image-20210703120328939"></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210703120223398.png" alt="image-20210703120223398"></p><p><strong>浅拷贝的这个问题需要用深拷贝来解决</strong></p><p>重新在堆区找一块内存来存放他。</p><p><strong>自己实现拷贝构造函数来解决浅拷贝带来的问题</strong></p><p><strong>解决</strong>：</p><p><strong>深拷贝</strong>——手动创建拷贝构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的拷贝构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line"><span class="comment">//m_Height = p.m_Height;编译器默认实现的就是这行代码</span></span><br><span class="line"><span class="comment">//深拷贝操作</span></span><br><span class="line">m_Height = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>如果有属性在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。</p><h4 id="初识化列表"><a href="#初识化列表" class="headerlink" title="初识化列表"></a>初识化列表</h4><p><strong>作用</strong>：</p><p>C++提供了初始化列表语法，用来初始化对象。</p><p><strong>语法</strong>：</p><p>构造函数()：属性1（值1），属性2（值2）…{}</p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//传统赋值操作</span></span><br><span class="line"><span class="comment">/*Person(int a, int b, int c)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">m_A = a;</span></span><br><span class="line"><span class="comment">m_B = b;</span></span><br><span class="line"><span class="comment">m_C = c;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//初始化列表初始化属性</span></span><br><span class="line">Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c) :m_A(a), m_B(b), m_C(c)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Person p(10,20,30);</span></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h4><p>C++中类的成员可以是另一个类的对象，我们称该成员为对象成员。</p><p><strong>例如</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员。</p><p>那么当创建B对时，A与B的构造和析构的顺序是怎么样的？</p><p><strong>A先被构造</strong></p><p><strong>当其他类的对象作为本类的成员时，构造时先构造其他类的对象，再构造自身。</strong></p><p>析构呢？<strong>与构造函数相反。</strong></p><p><strong>自身的析构函数先进行，之后其它类再进行。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Phone(<span class="built_in">string</span>  p)</span><br><span class="line">&#123;</span><br><span class="line">Phonename = p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Phone()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Phonename;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Phone Personphone = pname 隐式转换法</span></span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="built_in">string</span> pname):Personname(name), Personphone(pname)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Personname;</span><br><span class="line">Phone Personphone;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;华为&quot;</span>)</span></span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.Personname&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.Personphone.Phonename&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员就是在成员变量和成员函数前面加上关键字啊static，称为静态成员。</p><p><strong>静态成员分为</strong>：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有成员共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//静态成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">age = <span class="number">100</span>;<span class="comment">//静态的成员函数可以访问静态的成员变量，不可以访问非静态的成员变量</span></span><br><span class="line"><span class="comment">//无法区分到底是哪个对象的成员变量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;static void func调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//两种访问方式</span></span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Person p;</span><br><span class="line">p.func();</span><br><span class="line"><span class="comment">//通过类名也可以访问</span></span><br><span class="line">Person::func();</span><br><span class="line"><span class="comment">//Person::func2();类外访问不到私有的静态成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-对象模型和this指针"><a href="#C-对象模型和this指针" class="headerlink" title="C++对象模型和this指针"></a>C++对象模型和this指针</h3><h4 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储，</p><p><strong>只有非静态成员变量才属于类的对象上。</strong></p><p>（只有非静态成员变量的大小算进类的大小中，其他的都不算。）</p><p><strong>空对象的大小是1，为的是区分不同类在内存中的占用位置。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//成员变量和成员函数是分开存储的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> m_A;<span class="comment">//非静态成员属于类对象上的。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_B;<span class="comment">//静态的成员变量不属于类的对象上。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">//非静态成员函数不属于类的对象上</span></span><br><span class="line">static void func2()&#125;//静态成员函数不属于类的对象上</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="comment">//空对象占用内存空间为1</span></span><br><span class="line"><span class="comment">/*C++编译器给每个空对象也分配一个字节的空间，为的是区分空对象在占内存的位置，</span></span><br><span class="line"><span class="comment">没一个空对象也应该有一个独一无二的内存地址*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this指针的概念"><a href="#this指针的概念" class="headerlink" title="this指针的概念"></a>this指针的概念</h4><p>通过上一个知识点《成员变量和成员函数是分开存储的》我们知道C++中成员变量和成员函数是分开存储的。</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会公用一块代码。</p><p>那么问题是：这一块代码是如何区分是哪个对象调用自己的呢？</p><p>C++通过提供特殊的对象指针，this指针，解决上述问题。</p><p><strong>this指针指向被调用的成员函数所属的对象</strong>。</p><p><strong>(谁调的，this就指向谁)</strong></p><p>this指针是隐含每个非静态成员函数内的一种指针。</p><p>this指针不需要定义，直接使用即可。</p><p>this指针的用途</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><p><strong>解决名称冲突</strong></p><p><strong>返回对象本身用*this</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//this指针指向的是被调函数的成员函数所属的对象</span></span><br><span class="line"><span class="comment">//这里指向的就是p</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回本体要用应用的方式进行返回</span></span><br><span class="line"><span class="comment">//这里返回值如果是Person，就创建了一个新的对象</span></span><br><span class="line"><span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//注意起名规范也可以解决名字冲突的问题</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//解决对象冲突</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回对象本身用*this</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">p2.PersonAddPerson(p1);<span class="comment">//将p1和p2的加在一起</span></span><br><span class="line"><span class="comment">//多次追加,return *this;</span></span><br><span class="line"><span class="comment">//链式编程思想</span></span><br><span class="line">p2.PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空指针返回成员函数"><a href="#空指针返回成员函数" class="headerlink" title="空指针返回成员函数"></a>空指针返回成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针，如果用到this指针，需要加以判断来保证代码的健壮性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is Person class&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowPersonAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提高健壮性，空的就直接返回，防止代码崩溃</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错原因是因为传入的指针是NULL——无中生有，用一个空指针访问里面的属性 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;ShowClassName();</span><br><span class="line">p-&gt;ShowPersonAge();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><p><strong>常函数</strong>：</p><ul><li>成员函数后加const后我们称这个函数为<strong>常函数</strong></li><li>常函数不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象</strong>：</p><ul><li>声明对象前const称该对象为常对象。</li><li>常对象只能调用常函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//常函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//this指针的本质是指针常量，指针的指向是不可以修改的</span></span><br><span class="line"><span class="comment">//就相当于Person *const this;</span></span><br><span class="line"><span class="comment">//在成员函数后面加const修饰的是this指向，让指针指向的值也不可以修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span> <span class="keyword">const</span><span class="comment">//加个const就不允许修改了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//this = NULL;tbhis指针是不可以修改指针的指向的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> m_b;<span class="comment">//加了mutable修饰的特殊变量，即使在常函数,常对象中，也可以修改这个值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_a = <span class="number">100</span>;<span class="comment">//在普通成员函数中是可以修改的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person P;</span><br><span class="line">P.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> Person p;<span class="comment">//在对象前加const，变为常对象</span></span><br><span class="line"><span class="comment">//p.m_a = 100;</span></span><br><span class="line">p.m_b = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//常对象只能调用常函数 </span></span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="comment">//p.func();常对象不能调用普通成员函数，因为普通成员函数可以修改属性。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>可客厅就是Public，你的卧室就是Private</p><p>客厅所有人都可以进去，但是你的卧室只有和你亲密的人可以进。</p><p> 在程序中，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元技术。</p><p>友元的目的就是让一个函数或者类 访问另一个类中的私有元素。</p><p><strong>友元的关键字——friend</strong></p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><p><strong>就是将此函数在类的最上面写一个声明，前面加一个friend。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//goodgay全局函数是Building类的一个好朋友，可以访问你家的卧室(私有成员)</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodgay</span><span class="params">(Building* building)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodgay</span><span class="params">(Building* building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数正在访问你的&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数正在访问你的&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Building building;</span><br><span class="line">goodgay(&amp;building);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><p><strong>一个类在另一个中friend class xx。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F;在前面先声明一下</span><br><span class="line">class Building;</span><br><span class="line"></span><br><span class="line">class GoodGay</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">GoodGay();</span><br><span class="line">public:</span><br><span class="line">void visit();&#x2F;&#x2F;参观函数 访问Building中的属性</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Building</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;GoodGay是Building类的好朋友，可以访问其私有属性</span><br><span class="line">friend class GoodGay;</span><br><span class="line">public:</span><br><span class="line">Building();</span><br><span class="line">public:</span><br><span class="line">string m_SittingRoom;</span><br><span class="line">private:</span><br><span class="line">string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;在类外写成员函数</span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom &#x3D; &quot;客厅&quot;;</span><br><span class="line">m_BedRoom &#x3D; &quot;卧室&quot;;</span><br><span class="line">&#125;</span><br><span class="line">GoodGay::GoodGay()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建一个Building对象</span><br><span class="line">building &#x3D; new Building;</span><br><span class="line">&#125;</span><br><span class="line">void GoodGay::visit()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;好基友正在访问你的&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;好基友正在访问你的&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">GoodGay gy;</span><br><span class="line">gy.visit();</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">test();</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><p><strong>告诉编译器 另一个类中的xx成员函数作为本类的好朋友，可以访问私有函数。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">GoodGay();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//可以访问Building中私有成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit1</span><span class="params">()</span></span>;<span class="comment">//不可以访问Building中私有成员</span></span><br><span class="line">Building* builidng;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//告诉编译器 GoodGay类中的visit成员函数作为本类的好朋友，可以访问私有函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Building(); </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GoodGay::GoodGay()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">builidng = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit正在访问&quot;</span> &lt;&lt; builidng-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit正在访问&quot;</span> &lt;&lt; builidng-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visit1正在访问&quot;</span> &lt;&lt; builidng-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GoodGay gg;</span><br><span class="line">gg.visit();</span><br><span class="line">gg.visit1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>运算符重载的概念:对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p><h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><p><strong>作用</strong>：实现两个自定义数据类型相加的运算。</p><p>例如：两个整型相加编译器知道该怎么进行运算，如果是两个自定义出来的类型，两个Person想加，编译器就不知道该怎么运算了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//加号运算符重载</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//1.成员函数重载+</span></span><br><span class="line"><span class="comment">/*Person operator+(Person&amp; p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Person temp;</span></span><br><span class="line"><span class="comment">temp.m_A = this-&gt;m_A + p.m_A;</span></span><br><span class="line"><span class="comment">temp.m_B = this-&gt;m_B + p.m_B;</span></span><br><span class="line"><span class="comment">return temp;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数重载+</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1, Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数函数重载版本</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person&amp; p1, <span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">Person temp;</span><br><span class="line">temp.m_A = p1.m_A + num;</span><br><span class="line">temp.m_B = p1.m_B + num;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_A = <span class="number">10</span>;</span><br><span class="line">p1.m_B = <span class="number">10</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_A = <span class="number">10</span>;</span><br><span class="line">p2.m_B = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//成员函数重载本质调用</span></span><br><span class="line"><span class="comment">//Person p3 = p1.operator+(p2);</span></span><br><span class="line"><span class="comment">//Person p3 = p1 + p2;//可以简化成这种形式</span></span><br><span class="line"><span class="comment">//全局函数重载的本质调用</span></span><br><span class="line"><span class="comment">//Person p3 = operator+(p1,p2);</span></span><br><span class="line"><span class="comment">/*cout &lt;&lt; p3.m_A &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p3.m_B &lt;&lt; endl;*/</span></span><br><span class="line"><span class="comment">//运算符重载也可以发生函数重载</span></span><br><span class="line">Person p3 = p1 + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p3.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>对于内置的数据类型的表达式的运算符是不可能改变的</li><li>不要滥用运算符重载</li></ol><h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><p><strong>作用</strong>：可以输出自定义的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, Person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">m_A = a;</span><br><span class="line">m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用成员函数重载左移运算符p.operator&lt;&lt;(cout)简化版本p&lt;&lt;cout</span></span><br><span class="line"><span class="comment">//一般我们不会利用成员函数来重载&lt;&lt;运算符，以为无法实现cout在左边</span></span><br><span class="line"><span class="comment">/*void operator&lt;&lt;(ostream &amp;cout,Person &amp;p)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p.m_A &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p.m_B &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只能利用全局函数来重载左移运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;<span class="built_in">cout</span>, Person &amp;p) <span class="comment">//这样写的本质就是operator&lt;&lt;(cout,p)简化版本就是cout&lt;&lt;p; </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：重载左移运算符配合友元可以实现输出自定义数据类型。</p><hr><p>这里给出不推荐的类内实现重载左移运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&lt;&lt;(ostream &amp;<span class="built_in">cout</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_A;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">p&lt;&lt;<span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure><h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><p><strong>作用</strong>：通过重载递增运算符，实现自己的整型数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//重载递增运算符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, MyInteger myint);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyInteger()</span><br><span class="line">&#123;</span><br><span class="line">m_Num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载++运算符——前置</span></span><br><span class="line"><span class="comment">//返回引用是为了一直对一个数据进行递增操作</span></span><br><span class="line">MyInteger&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">++m_Num;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载++运算符——后置</span></span><br><span class="line">MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>)<span class="comment">//这个int在这里作为占位参数，用来区分前置递增和后置递增</span></span><br><span class="line">&#123;</span><br><span class="line">MyInteger temp = *<span class="keyword">this</span>;</span><br><span class="line">m_Num++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"><span class="comment">//后置递增要返回值，因为如果返回引用，这里相当于返回的是一个局部对象的引用。</span></span><br><span class="line"><span class="comment">//局部对象在当前函数执行完毕之后就被释放掉了，还要返回引用就是非法操作。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数重载左移运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; <span class="built_in">cout</span>, MyInteger myint)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint.m_Num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyInteger myint;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++(++myint);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;myint;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyInteger myint;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myint &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:前置递增返回引用，后置递增返回值。</p><h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><p>C++编译器至少给一个类添加4个函数(前三个之前已经讲过了)</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符operator=，对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//编译器默认提供的是浅拷贝操作</span></span><br><span class="line"><span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"><span class="comment">//应该先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝。</span></span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深拷贝操作</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="keyword">int</span>(*p.m_Age);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">p3 = p2 = p1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p1.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p2.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(p3.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><p><strong>作用</strong>：重载关系运算符，可以让两个自定义类型对象进行对比操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载==</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><ul><li>函数调用运算符()也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//函数调用运算符重载</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//重载函数调用运算符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myprint;</span><br><span class="line">myprint(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">MyAdd myadd;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; myadd(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//匿名函数对象——特点:当前行被执行完立即释放</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; MyAdd()(<span class="number">100</span>,<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中:</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705121808431.png" alt="image-20210705121808431"></p><p>我们发现，定义这些类的时候，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p><strong>这时候我们就可以考虑利用继承的技术，减少重复代码量。</strong></p><h4 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同。</p><p>接下里我们分别利用普通写法和继承写法来实现网页中的内容，看一下继承存在的意义以及好处。</p><p><strong>普通实现</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通实现页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java java;</span><br><span class="line">java.header();</span><br><span class="line">java.footer();</span><br><span class="line">java.left();</span><br><span class="line">java.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python python;</span><br><span class="line">python.header();</span><br><span class="line">python.footer();</span><br><span class="line">python.left();</span><br><span class="line">python.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;cpp&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Cpp cpp;</span><br><span class="line">cpp.header();</span><br><span class="line">cpp.footer();</span><br><span class="line">cpp.left();</span><br><span class="line">cpp.contenet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承方法实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、登录注册&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;帮助中心、交流合作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java、python、c++&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//普通实现页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpp</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contenet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c++学科视频&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;java&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Java java;</span><br><span class="line">java.header();</span><br><span class="line">java.footer();</span><br><span class="line">java.left();</span><br><span class="line">java.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;python&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Python python;</span><br><span class="line">python.header();</span><br><span class="line">python.footer();</span><br><span class="line">python.left();</span><br><span class="line">python.contenet();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;cpp&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Cpp cpp;</span><br><span class="line">cpp.header();</span><br><span class="line">cpp.footer();</span><br><span class="line">cpp.left();</span><br><span class="line">cpp.contenet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br><strong>继承的好处</strong>：减少重复代码</p><p><strong>语法</strong>：class 子类:继承方式 父类</p><p>子类也称派生类</p><p>父类也称基类</p><p><strong>派生类中的成员，包含量大部分</strong></p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过来的表现其共性，而新增加的成员体现其个性。</p><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">继承的语法——<span class="class"><span class="keyword">class</span> 子类 :</span>继承方式 父类</span><br></pre></td></tr></table></figure><p><strong>继承方式一共有三种</strong>：</p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705160731648.png" alt="image-20210705160731648"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">10</span>;<span class="comment">//父类中的公共权限成员，到了子类中依然是公共权限</span></span><br><span class="line">m_B = <span class="number">20</span>;<span class="comment">//父类中的保护权限成员，到了子类中依然是保护权限</span></span><br><span class="line"><span class="comment">//m_C = 10;父类中的隐私权限成员，子类访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 son1;</span><br><span class="line">son1.m_A = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//son1.m_B = 100;保护权限的内容到了类外就无法访问了</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> :</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">100</span>;<span class="comment">//父类中公共权限的成员，因为是保护继承，到子类中变为保护权限</span></span><br><span class="line">m_B = <span class="number">100</span>;<span class="comment">//父类中保护权限的成员，保护继承后到了子类还是保护权限。</span></span><br><span class="line"><span class="comment">//m_C = 100;父类中的私有成员子类访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2 son2;</span><br><span class="line"><span class="comment">//保护权限类外访问不到，所以在son2中m_A也访问不到了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A = <span class="number">100</span>;<span class="comment">//父类中公共成员，私有继承后，到了子类变为私有成员</span></span><br><span class="line">m_B = <span class="number">100</span>;<span class="comment">//父类中保护成员，私有继承后，到了子类变为私有成员</span></span><br><span class="line"><span class="comment">//m_C = 100;父类的私有权限成员仍然访问不到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son3 son3;</span><br><span class="line"><span class="comment">//私有成员类外访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证Son3私有继承后成员是否变成了私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//访问不到父类的私有成员</span></span><br><span class="line"><span class="comment">//到了Son3中m_A,m_B,m_C全是私有成员，子类无法访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h4><p><strong>问题</strong>：从父类继承过来的对象，哪些属于子类对象？</p><p><strong>父类中所有的非静态成员属性都会被子类继承下去</strong>。</p><p><strong>父类中私有的成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去了</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//继承中的对象模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//父类中所有的非静态成员属性都会被子类继承下去</span></span><br><span class="line"><span class="comment">//父类中私有的成员属性是被编译器给隐藏了，因此访问不到，但是确实被继承下去了</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof of son:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//结果是16 = 12 + 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>利用VS的开发人员命令提示工具查看对象模型</strong></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705170221524.png" alt="image-20210705170221524"></p><ol><li>打开工具</li><li>跳转到你cpp文件所在的盘</li><li>cd文件目录下</li><li>输入命令：cd /d1 reportSingleClassLayout类名 文件名</li></ol><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705170115915.png" alt="image-20210705170115915"></p><h4 id="继承中构造和析构的顺序"><a href="#继承中构造和析构的顺序" class="headerlink" title="继承中构造和析构的顺序"></a>继承中构造和析构的顺序</h4><p><strong>子类继承父类后，当创建子类时，也会调用父类的构造函数。</strong></p><p>问题：父类和子类的构造函数和析构顺序怎么样的呢？</p><p><strong>先构造父类，再构造子类</strong></p><p><strong>先析构子类，再析构父类</strong></p><p><strong>创建子类对象的同时也会创建一个父类对象</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类的构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Base()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类的构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类的析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210705171401072.png" alt="image-20210705171401072"></p><p><strong>总结</strong>：继承中先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。</p><h4 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员。如何通过子类对象，访问到子类或父类中同名的数据呢?</p><ul><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，需要加<strong>作用域</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类同名成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类同名重载成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类同名成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//同名成员属性处理方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;son.m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//如果要通过子类对象访问到父类中的同名成员，需要加作用域。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;son.Base::m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员函数处理方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son1; </span><br><span class="line">son1.func();<span class="comment">//子</span></span><br><span class="line">son1.Base::func();<span class="comment">//父</span></span><br><span class="line"><span class="comment">//如果子类中出现和父类同名的成员函数</span></span><br><span class="line"><span class="comment">//子类的同名成员会隐藏掉父类中所有同名成员函数</span></span><br><span class="line"><span class="comment">//如果想要访问到父类中被隐藏的同名成员函数，需要加作用域</span></span><br><span class="line">son1.Base::func(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类同名函数。</li></ol><h4 id="继承同名静态成员处理方式"><a href="#继承同名静态成员处理方式" class="headerlink" title="继承同名静态成员处理方式"></a>继承同名静态成员处理方式</h4><p>问题:继承中同名的静态成员在子类对象上是如何进行访问的呢？</p><p>静态成员和非静态成员出现同名，处理方式 一致。</p><ul><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，需要加作用域</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类静态成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;父类静态成员重载函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;子类静态成员函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//同名静态成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Son son1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; son1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; son1.Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Son::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//第一个::代表通过类名方式访问，第二个::代表访问父类作用域下</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名静态函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">Son son2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过对象访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">son2.func();</span><br><span class="line">son2.Base::func();  </span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过类名访问&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Son::func();</span><br><span class="line">Son::Base::func();</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类同名重载成员函数调用</span></span><br><span class="line"><span class="comment">//子类出现和父类同名的静态成员函数，也会隐藏掉父类中所有同名成员函数(重载)</span></span><br><span class="line"><span class="comment">//如果想访问父类中被隐藏的同名成员，需要加作用域</span></span><br><span class="line">Son::Base::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式(通过对象和类名)。</p><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>C++允许一个类继承多个类    </p><p>语法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类:</span>继承方式 父类<span class="number">1</span>，继承方式 父类<span class="number">2</span></span><br></pre></td></tr></table></figure><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议使用多继承</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//多继承语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base1()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Base2()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类需要继承base1和base2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Son()</span><br><span class="line">&#123;</span><br><span class="line">m_C = <span class="number">300</span>;</span><br><span class="line">m_D = <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_C;</span><br><span class="line"><span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(son1) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第一个父类的m_A:&quot;</span> &lt;&lt; son1.Base1::m_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第二个父类的m_A:&quot;</span> &lt;&lt; son1.Base2::m_A&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：多继承中如果父类中出现了同名情况，子类使用时要加作用域。</p><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p><strong>菱形继承概念</strong>：</p><p>两个派生类继承同一个基类，又有某个类同时继承这两个派生类，这种继承称为菱形继承，或者钻石继承。</p><p><strong>典型的菱形继承案例</strong></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706120657382.png" alt="image-20210706120657382"></p><p><strong>菱形继承问题</strong>：</p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</li><li> 草泥马继承动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li></ol><p>vbptr——虚基类</p><p>继承了两个指针，两个指针通过偏移量找到了唯一的数据。</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706124701407.png" alt="image-20210706124701407"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用虚继承可以解决菱形继承问题</span></span><br><span class="line"><span class="comment">//在继承之前加上关键字virtual变为虚继承</span></span><br><span class="line"><span class="comment">// Animal类称为虚基类</span></span><br><span class="line"><span class="comment">//羊</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//羊驼</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span><span class="keyword">public</span> Sheep,<span class="keyword">public</span> Tuo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">18</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">28</span>;</span><br><span class="line"><span class="comment">//当菱形继承，当两个父类拥有相同的数据，需要加作用域来区分</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.Tuo::m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//这份数据我们知道，只有一份就可以了，菱形继承导致数据有两份，资源浪费</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><ol><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义。</li><li>利用虚继承可以解决菱形继承问题——<strong>virtual</strong></li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>多态是C++面向对象三大特性之一</strong></p><h4 id="多条的基本概念"><a href="#多条的基本概念" class="headerlink" title="多条的基本概念"></a>多条的基本概念</h4><p>多态分为两种</p><ul><li>静态多态:函数重载和运算符重载属于静态多态，复用函数名</li><li>动态多态:派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态的区别</p><ul><li>静态多态的函数地址早绑定 -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//加上virtual变成虚函数,实现地址晚绑定</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;动物在说话&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">//地址早绑定，在编译阶段就确定函数地址</span></span><br><span class="line"><span class="comment">//如果想让猫说话，那么这个函数的地址就不能提前绑定，需要在运行阶段进行绑定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态多条满足条件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.有继承关系</span></span><br><span class="line"><span class="comment">2.子类重写父类的虚函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//重写要求:函数返回值类型 函数名 参数列表 完全相同 </span></span><br><span class="line"><span class="comment">//动态多态的使用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类的指针或者引用 指向子类的对象//Animal &amp;animal = cat;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Animal &amp;animal)</span><span class="comment">//Animal &amp;animal = cat;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cat cat;</span><br><span class="line">doSpeak(cat);</span><br><span class="line">Dog dog;</span><br><span class="line">doSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>多态满足条件</p><ul><li>有继承关关系</li><li>子类重写父类中的虚函数</li></ul><p>多态的使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写:函数返回值类型 函数名 参数列表 完全一致称为重写</p><h4 id="多态的原理剖析"><a href="#多态的原理剖析" class="headerlink" title="多态的原理剖析"></a>多态的原理剖析</h4><p><strong>虚函数(表)指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfptr</span><br><span class="line">    v - <span class="keyword">virtual</span></span><br><span class="line">    f - functio n</span><br><span class="line">    prt - pointer</span><br></pre></td></tr></table></figure><p><strong>虚函数表</strong></p><p>表内记录一个虚函数的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vftable</span><br><span class="line">    v - <span class="keyword">virtual</span></span><br><span class="line">    f - functio n</span><br></pre></td></tr></table></figure><p>当子类重写父类的虚函数后，子类中的虚函数表内部会替换成子类的虚函数地址。</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150050385.png" alt="image-20210706150050385"></p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150436954.png" alt="image-20210706150436954"></p><p>Cat子类重写前</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150747256.png" alt="image-20210706150747256"></p><p>重写后</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210706150753020.png" alt="image-20210706150753020"></p><h4 id="多态案例1——计算器类"><a href="#多态案例1——计算器类" class="headerlink" title="多态案例1——计算器类"></a>多态案例1——计算器类</h4><p>案例描述:<br>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类。</p><p><strong>多态的优点</strong>：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>代码实现</strong>:</p><p>普通方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="built_in">string</span> oper)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想扩展新的功能，需要修改原码</span></span><br><span class="line"><span class="comment">//在真实的开发中，实行开闭原则，对扩展进行开放，对修改进行关闭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Num1;</span><br><span class="line"><span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Calculator c;</span><br><span class="line">c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">c.m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用多态实现计算器</span></span><br><span class="line"><span class="comment">//实现计算器抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m_Num1;</span><br><span class="line"><span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//减法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//乘法计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//多态使用条件</span></span><br><span class="line"><span class="comment">//父类指针或者引用指向子类对象</span></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> AddCalculator;<span class="comment">//父类指针指向子类对象</span></span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//堆区数据，手动开辟手动释放</span></span><br><span class="line"><span class="keyword">delete</span> abc;<span class="comment">//堆区的数据被销毁了，但是指针的类型没有变</span></span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line">abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; abc-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态带来的好处</p><ol><li>组织结构清晰，哪出错了马上定位到。</li><li>可读性强</li><li>对于前期和后期扩展以及维护性高</li></ol><p><strong>总结</strong>：C++开发提倡利用多态设计程序框架，因为多态优点很多。</p><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>在多态中，通常父类汇中虚函数的实现是毫无意义的，主要都是调用子类重写的内容。</p><p>因此可以将虚函数改为纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纯虚函数语法<span class="keyword">virtual</span> 返回值类型 函数名 (参数列表) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>当类中有了纯虚函数，这个类也称为抽象类。</p><p><strong>抽象类特点</strong>:</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//纯虚函数和抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//只要有一个纯虚函数,这个类称为抽象类</span></span><br><span class="line"><span class="comment">//特点;无法实例化对象</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//注意:不要忘掉virtual!</span></span><br><span class="line"><span class="comment">//抽象类的子类必须要重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Base b1; 抽象类无法实例化对象</span></span><br><span class="line">Son s1;<span class="comment">//子类重写父类的虚函数，否则无法实例化对象</span></span><br><span class="line">Base* abc = <span class="keyword">new</span> Son;</span><br><span class="line">abc-&gt;func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态案例2——制作饮品"><a href="#多态案例2——制作饮品" class="headerlink" title="多态案例2——制作饮品"></a>多态案例2——制作饮品</h4><p>案例描述:制作饮品的大致流程为:煮水-冲泡-倒入杯中-加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶水。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//多态案例-制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//制作饮品</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDrink</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Boil();</span><br><span class="line">Brew();</span><br><span class="line">Pour();</span><br><span class="line">PutSomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span><span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;把水煮开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡咖啡&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒入杯中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入糖和牛奶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span><span class="keyword">public</span> AbstractDrinking</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;把矿泉水煮开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冲泡 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冲泡茶叶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Pour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒入杯中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入辅料</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;加入柠檬&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//制作函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* <span class="built_in">abs</span>)</span><span class="comment">//父类指针指向子类对象AbstractDrinking* abs = new Coffee;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;makeDrink();</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">abs</span>;<span class="comment">//手动释放</span></span><br><span class="line"><span class="comment">//堆区的数据被销毁了但是指针的类型没变</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//制作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DoWork(<span class="keyword">new</span> Coffee);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DoWork(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>多态使用的时候，如果子类中有属性开辟到堆区，那么父类指针在释放的时无法调用到子类的析构代码</p><p><strong>解决方法</strong>:将父类中的析构函数改为虚析构或者纯虚析构</p><p>虚析构和纯析构共性:</p><ul><li>可以解决父类指针释放子类对象，</li><li>都需要有具体的含函数实现</li></ul><p>虚析构和纯虚构的区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p><strong>虚析构语法</strong>;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>纯虚析构语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名() = <span class="number">0</span>;<span class="comment">//声明</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//虚析构和纯虚析构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用虚析构可以解决父类指针释放对象时不干净的问题</span></span><br><span class="line"><span class="comment">/*virtual ~Animal()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;Animal的析构函数调用&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//纯虚析构,需要声明也需要实现</span></span><br><span class="line"><span class="comment">//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象</span></span><br><span class="line"><span class="keyword">virtual</span> ~Animal() = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//纯虚函数，不需要实现</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//纯虚析构函数</span></span><br><span class="line">Animal::~Animal()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Animal纯析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Cat(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line">m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat的构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Cat()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat的析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span>* m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;speak();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类的指针在析构的时候，不会调用子类中的析构函数，</span></span><br><span class="line"><span class="comment">导致子类如果有堆区属性，会出现内存的泄漏情况。</span></span><br><span class="line"><span class="comment">解决:将父类的析构函数改为虚析构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ol><li>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象问题</li><li>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ol><h4 id="多态案例3——电脑组装"><a href="#多态案例3——电脑组装" class="headerlink" title="多态案例3——电脑组装"></a>多态案例3——电脑组装</h4><p>案例描述:<br>电脑主要组成部件为CPU(用于计算)，显卡(用于显示)，内存条（用于存储),将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口,测试时组装三台不同的电脑进行工作.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//抽象不同零件类</span></span><br><span class="line"><span class="comment">//抽象cpu</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的存储函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Computer(CPU* cpu, VideoCard* vc, Memory* mem)</span><br><span class="line">&#123;</span><br><span class="line">m_cpu = cpu;</span><br><span class="line">m_vc = vc;</span><br><span class="line">m_mem = mem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供一个工作的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让零件工作起来，调用他的接口</span></span><br><span class="line">m_cpu-&gt;calculate();</span><br><span class="line">m_vc-&gt;display();</span><br><span class="line">m_mem-&gt;storage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供析构函数释放3个电脑零件</span></span><br><span class="line">~Computer()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//释放CPU零件</span></span><br><span class="line"><span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_cpu;</span><br><span class="line">m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放显卡零件</span></span><br><span class="line"><span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_vc;</span><br><span class="line">m_vc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存条零件指针</span></span><br><span class="line"><span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_mem;</span><br><span class="line">m_mem = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CPU* m_cpu;<span class="comment">//CPU零件指针</span></span><br><span class="line">VideoCard* m_vc;<span class="comment">//显卡零件指针</span></span><br><span class="line">Memory* m_mem;<span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的厂商</span></span><br><span class="line"><span class="comment">//Intel</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Intel的CPU开始计算了&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的厂商</span></span><br><span class="line"><span class="comment">//Lenovo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//组装电脑</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//一台电脑零件</span></span><br><span class="line">CPU* intelcpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">VideoCard* videocard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">Memory* memory = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"><span class="comment">//创建第一台电脑</span></span><br><span class="line">Computer* computer1 = <span class="keyword">new</span> Computer(intelcpu, videocard, memory);</span><br><span class="line">computer1-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//组装第二台电脑</span></span><br><span class="line">Computer* computer2 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer2-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------我是分割线------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//组装第三台电脑</span></span><br><span class="line">Computer* computer3 = <span class="keyword">new</span> Computer(<span class="keyword">new</span> LenovoCPU,<span class="keyword">new</span> IntelVideoCard,<span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer3-&gt;work();</span><br><span class="line"><span class="keyword">delete</span> computer3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>程序运行时，产生的数据都属于临时数据，程序一旦运行结束就会被释放。</p><p>通过文件可以将数据持久化。</p><p>C++中对文件进行操作需要包含头文件&lt; Fstream&gt;</p><p><strong>文件类型分为两种</strong>:</p><ol><li><strong>文本文件</strong>-文件以文本的ASCII码形式存储在计算机中</li><li><strong>二进制文件</strong>-文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂他们</li></ol><p><strong>操作文件的三大类</strong></p><ol><li>ofstream:写操作</li><li>ifstream：读操作</li><li>fstream:读写操作</li></ol><h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><ol><li>包含头文件——#include&lt; fstream&gt;</li><li>创建流对象——ofstream ofs;</li><li>打开文件——ofs.open(“文件路径”,打开方式)</li><li>写数据——ofs&lt;&lt;”写入的数据”;</li><li>关闭文件——ofs.close();</li></ol><p> 文件打开方式:</p><p><img src="/images/C++%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.assets/image-20210708171215528.png" alt="image-20210708171215528"></p><p><strong>注意</strong>:文件打开方式可以配合使用，利用|操作符</p><p><strong>例如</strong>:用二进制方式写文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios::binary | ios::out</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//文本文件写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ofstream ofs;</span><br><span class="line"><span class="comment">//3.指定打开方式</span></span><br><span class="line">ofs.open(<span class="string">&quot;test.txt&quot;</span>, ios::out);<span class="comment">//如果不指定文件路径，默认和你项目的文件路径一样</span></span><br><span class="line"><span class="comment">//4.写内容</span></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名:张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别:男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄:18&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>文件操作必须包含头文件fstream</li><li>读文件可以利用ofstream,或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><p>读文件操作与写文件步骤相似，但是读取方式比较多</p><p>读文件操作步骤如下</p><ol><li>包含头文件——#include&lt; fstream&gt;</li><li>创建流对象——ifstream ifs;</li><li>打开文件并判断文件是否打开成功——ifs.open(“文件路径”，打开方式);</li><li>读数据——四种方式读取</li><li>关闭文件——ifs.close();</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3.打开文件,并且判断是否打开成功</span></span><br><span class="line">ifs.open(<span class="string">&quot;test.txt&quot;</span>,ios::in);</span><br><span class="line"><span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文件打开失败了&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.读数据</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="comment">/*char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">while (ifs&gt;&gt;buf)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="comment">/*char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="comment">/*string buf;</span></span><br><span class="line"><span class="comment">while (getline(ifs,buf))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//第四种-不推荐</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c = ifs.get()) != EOF)<span class="comment">//EOF——end of file</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>读文件可以利用ifsteam,或者fstream类</li><li>利用is_open函数可以判断是否打开成功</li><li>close关闭文件</li></ul><h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>以二进制的方式对文件进行读写操作</p><p>打开方式主要为<strong>ios::binary</strong></p><h5 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h5><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream&amp; <span class="title">wirte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* buffer,<span class="keyword">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//二进制写文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建头文件</span></span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"><span class="comment">//3.打开文件</span></span><br><span class="line"><span class="comment">//ofs.open(&quot;person.txt&quot;,ios::out | ios::binary);</span></span><br><span class="line"><span class="comment">//4.写文件</span></span><br><span class="line">Person p = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span> &#125;;</span><br><span class="line">ofs.write((<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;p,<span class="keyword">sizeof</span>(Person));</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><ul><li>文件输出流对象，可以通过write函数，以二进制的方式写数据</li></ul><h5 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h5><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(<span class="keyword">char</span> * buffer,<span class="keyword">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>参数解释:字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//二进制读文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.包含头文件</span></span><br><span class="line"><span class="comment">//2.创建流对象</span></span><br><span class="line">ifstream ifs;</span><br><span class="line"><span class="comment">//3.打开文件&amp;判读文件是否打开成功</span></span><br><span class="line">ifs.open(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line"><span class="keyword">if</span> (!(ifs.is_open()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;打开失败&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.读文件</span></span><br><span class="line">Person p;</span><br><span class="line">ifs.read((<span class="keyword">char</span>*)&amp;p, <span class="keyword">sizeof</span>(Person));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p.m_Name&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//5.关闭文件</span></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>:</p><p>文件输入流对象，可以通过read函数，以二进制的方式读数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1et411b73Z?p=146&amp;spm_id_from=pageDriver&quot;&gt;黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibi</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>迟到的windows11虚拟机初体验</title>
    <link href="http://example.com/2021/06/30/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://example.com/2021/06/30/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2021-06-30T04:54:35.000Z</published>
    <updated>2021-06-30T05:00:01.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迟到的windows11虚拟机初体验"><a href="#迟到的windows11虚拟机初体验" class="headerlink" title="迟到的windows11虚拟机初体验"></a>迟到的windows11虚拟机初体验</h1><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/windows11%E6%A1%8C%E9%9D%A2.png"></p><p>近日微软发布了继win10“最后一个版本”的windows11，相信很多小伙伴早已一睹为快，而我呢当时也是立即就了解到这个事情了，只不过一直没着急真正的感受一下。</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><p>只看更新内容的话，其中最吸引我的是可以安装原生的安卓应用，不过我在我这个版本中还没有发现这个功能，可能到了正式版才会真正推出吧。</p><p>接着咱们来看一下系统本身的变化。</p><p>我是用过几年的xp,6年的win7,加上不到1年的win10,相比win7到win10的过渡，win11在外观上没有太大的变化，主要是部分图标加了一些圆角矩形，小图标色彩变得丰富了一些。</p><p>（忽略我爆满的C盘）</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E5%AF%B9%E6%AF%94%E5%9B%BE1.png"></p><p>还有一个最明显的变化，导航栏的位置被移动到了中间。</p><p><img src="/images/%E8%BF%9F%E5%88%B0%E7%9A%84windows11%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C.assets/%E6%A1%8C%E9%9D%A2-1625022726079.png"></p><p>我觉得除了这个导航栏的位置需要一点时间来适应，大体上和win10是没有什么变化的，用习惯了win10的小伙伴应该很快就能熟练掌握。</p><p>虚拟机性能受限，部分功能体验不到位，但是我感觉到一些过渡动画发生了一些变化，要更丝滑柔和了一些，具体表现还是得等正式版发布之后再进行测试。</p><p><strong>下面是我的安装过程</strong></p><iframe src="//player.bilibili.com/player.html?aid=973950519&bvid=BV1T44y1q7gG&cid=361971319&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迟到的windows11虚拟机初体验&quot;&gt;&lt;a href=&quot;#迟到的windows11虚拟机初体验&quot; class=&quot;headerlink&quot; title=&quot;迟到的windows11虚拟机初体验&quot;&gt;&lt;/a&gt;迟到的windows11虚拟机初体验&lt;/h1&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="system" scheme="http://example.com/categories/system/"/>
    
    
    <category term="-windows" scheme="http://example.com/tags/windows/"/>
    
    <category term="-system" scheme="http://example.com/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>NowCoder刷题(1)【树】二叉树的遍历</title>
    <link href="http://example.com/2021/06/21/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://example.com/2021/06/21/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2021-06-21T12:57:31.000Z</published>
    <updated>2021-06-27T11:18:55.147Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二叉树的遍历(IO型)</strong></p><p><a href="https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&&tqId=29483&rp=1&ru=/activity/oj&qru=/ta/tsing-kaoyan/question-ranking">二叉树遍历_牛客题霸_牛客网 (nowcoder.com)</a></p><p><strong>题目描述</strong></p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621205635444.png" alt="image-20210621205635444"></p><p>如图所示的这棵树</p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210620204206164.png" alt="image-20210620204206164"></p><p>前序输出结果为</p><p>A-B-D-#-#-E-#-#-C-#-#</p><p>还原过程</p><p><strong>示例1</strong></p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621191417552.png" alt="image-20210621191417552"></p><p><strong>示例2</strong></p><p>——前序遍历还原</p><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/image-20210621192508286.png" alt="image-20210621192508286"></p><p><strong>代码实现</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义一棵树的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line"><span class="keyword">char</span> val;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"><span class="comment">//根据前序遍历还原这棵树</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">CreatBackTree</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">int</span>* i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[*i] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//井号说明该结点为空</span></span><br><span class="line">++(*i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;val = a[*i];</span><br><span class="line">(*i)++;</span><br><span class="line">root-&gt;left = CreatBackTree(a, i);<span class="comment">//构建子树的时候还是从这个结点开始</span></span><br><span class="line">root-&gt;right = CreatBackTree(a, i);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTree</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrderTree(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;val);</span><br><span class="line">InOrderTree(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//输入一个字符数组</span></span><br><span class="line"><span class="keyword">char</span> arry[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arry);<span class="comment">//输入字符串不用取地址符</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">TreeNode* root = CreatBackTree(arry, &amp;i);</span><br><span class="line">InOrderTree(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NowCoder%E5%88%B7%E9%A2%98(1)%E3%80%90%E6%A0%91%E3%80%91%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.assets/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%8622-1624279920068.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;二叉树的遍历(IO型)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4b91205483694f449f94c179883c1fef?tpId=60&amp;&amp;tqId=29483&amp;rp=1&amp;</summary>
      
    
    
    
    <category term="NowCoder" scheme="http://example.com/categories/NowCoder/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="-NowCoder" scheme="http://example.com/tags/NowCoder/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(9)【树】前序&amp;平衡&amp;深度</title>
    <link href="http://example.com/2021/06/18/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&amp;%E5%B9%B3%E8%A1%A1&amp;%E6%B7%B1%E5%BA%A6(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/18/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&amp;%E5%B9%B3%E8%A1%A1&amp;%E6%B7%B1%E5%BA%A6(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-18T01:06:50.000Z</published>
    <updated>2021-06-18T01:20:29.781Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二叉树知识回顾</strong>——<a href="https://blog.csdn.net/qq_51604330/article/details/117955503?spm=1001.2014.3001.5501">【树】之二叉树(C语言)(含图解)_半生瓜のblog-CSDN博客</a></p><p><strong>二叉树的前序遍历</strong></p><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>本题中，对于C++或者Java等语言，返回的是它们的数据结构库里面的数据结构，而C语言没有，这也就是如果用C语言往后通吃数据结构会困难的原因。</p><p>注意本体的传参，操作的是不是一个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//计算结点个数</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(struct TreeNode* root)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> root == <span class="literal">NULL</span>?<span class="number">0</span>:TreeSize(root-&gt;left)+TreeSize(root-&gt;right)+<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//前序遍历</span></span><br><span class="line"><span class="keyword">void</span> _preorder(struct TreeNode* root,<span class="keyword">int</span>* a,<span class="keyword">int</span> *i)<span class="comment">//为了保证一直对一个i进行操作所以要传地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    a[*i] = root-&gt;val;</span><br><span class="line">    (*i)++;</span><br><span class="line">    _preorder(root-&gt;left,a,i);</span><br><span class="line">    _preorder(root-&gt;right,a,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">preorderTraversal</span><span class="params">(struct TreeNode* root, <span class="keyword">int</span>* returnSize)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> size = TreeSize(root);</span><br><span class="line">     <span class="comment">//创建数组</span></span><br><span class="line">     <span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">     _preorder(root,a,&amp;i);</span><br><span class="line">     *returnSize = size;</span><br><span class="line">     <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二叉树的最大深度</strong></p><p><strong>经典的分治问题</strong></p><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>一棵树的高度就是最长路径的结点个数。</p><ul><li>空 -  高度为0</li><li>非空 左右子树深度大的内个+1</li></ul><p>本质上用的后序遍历，先求左，后求右边，再求自己。</p><p><strong>图示</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(9)%E3%80%90%E6%A0%91%E3%80%91%E5%89%8D%E5%BA%8F&%E5%B9%B3%E8%A1%A1&%E6%B7%B1%E5%BA%A6.assets/image-20210618084730107.png" alt="image-20210618084730107"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftDepth &gt; rightDepth?leftDepth+<span class="number">1</span>:rightDepth+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>平衡二叉树</strong></p><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">Loading Question… - 力扣（LeetCode） (leetcode-cn.com)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftDepth &gt; rightDepth?leftDepth+<span class="number">1</span>:rightDepth+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(struct TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="comment">//空树也满足条件</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = maxDepth(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> rightDepth = maxDepth(root-&gt;right);</span><br><span class="line">    <span class="comment">//如果一开始就不满足就没必要往下进行了，满足就递归判断左右</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(leftDepth-rightDepth) &lt; <span class="number">2</span></span><br><span class="line">    &amp;&amp; isBalanced(root-&gt;left)</span><br><span class="line">    &amp;&amp; isBalanced(root-&gt;right);                                          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;二叉树知识回顾&lt;/strong&gt;——&lt;a href=&quot;https://blog.csdn.net/qq_51604330/article/details/117955503?spm=1001.2014.3001.5501&quot;&gt;【树】之二叉树(C语言)(含图解)</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Butterfly添加天气插件</title>
    <link href="http://example.com/2021/06/17/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2021/06/17/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6/</id>
    <published>2021-06-17T11:18:33.000Z</published>
    <updated>2021-06-17T12:16:25.798Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我的小站</strong>——<a href="http://doraemon2.xyz/">半生瓜のblog</a></p><p><strong>感谢糖果屋Akilar老哥的帮助</strong>——<a href="https://akilar.top/">Akilarの糖果屋</a></p><h1 id="Hexo-Butterfly添加天气插件"><a href="#Hexo-Butterfly添加天气插件" class="headerlink" title="Hexo-Butterfly添加天气插件"></a><strong>Hexo-Butterfly添加天气插件</strong></h1><p><strong>效果如图所示</strong>：<img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617185624577.png" alt="image-20210617185624577"></p><p>就是JS插件的字体大小我不会调，稍微有一点瑕疵，不过影响不大。</p><p>我用的是心知天气的天气插件(其他天气插件同理)。</p><p><strong>首先</strong>，先到心知天气的官网注册一个账号——<a href="https://www.seniverse.com/">心知天气</a>。</p><p>登录，申请一个免费版，然后在产品的下拉栏中选择天气插件，然后点击立即免费使用。</p><p><strong>然后</strong>，在下面选择显示参数。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190318207.png" alt="image-20210617190318207"></p><p><strong>点击生成代码并复制</strong>。</p><p><strong>打开主题文件目录</strong></p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190559552.png" alt="image-20210617190559552"></p><p>打开<strong>nav.pug</strong></p><p>将下面这行代码放入合适的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tp-weather-widget&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>例如</strong>:</p><p><img src="Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190804513.png" alt="image-20210617190804513"></p><p><strong>保存并关闭</strong></p><p><strong>接着</strong>，在此路径下创建一个JS文件，名称随意。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617190908876.png" alt="image-20210617190908876"></p><p><strong>打开</strong>，将刚才复制代码中的 <script></script>中间的内容粘贴进去。</p><p>就是将下图中画横线的代码删除。</p><p><img src="/images/Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617191118038.png" alt="image-20210617191118038"></p><p><strong>保存并关闭</strong></p><p><strong>最后</strong>，找到主题配置文件_config.yml</p><p><strong>打开</strong>，在<strong>inject</strong>处引入刚才创建的JS文件(注意文件名称)。</p><p><img src="Hexo-Butterfly%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E6%8F%92%E4%BB%B6.assets/image-20210617191324806.png" alt="image-20210617191324806"></p><p><strong>保存并退出</strong></p><p><strong>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d即可完成</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;我的小站&lt;/strong&gt;——&lt;a href=&quot;http://doraemon2.xyz/&quot;&gt;半生瓜のblog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感谢糖果屋Akilar老哥的帮助&lt;/strong&gt;——&lt;a href=&quot;https://akilar.top</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="-Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【树】之二叉树(C语言)</title>
    <link href="http://example.com/2021/06/16/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/16/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-16T04:57:39.000Z</published>
    <updated>2021-06-16T05:21:37.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的概念及结构"><a href="#树的概念及结构" class="headerlink" title="树的概念及结构"></a>树的概念及结构</h2><h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><p>树是一种<strong>非线性</strong>的数据结构，它是由n(n &gt;= 0)个有限结点组成的一个具有层次关系的集合，<strong>把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的</strong>。</p><ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点。</li><li>除跟根结点外，其余结点被分成M（M&gt;0）个互不相交的集合T1、T2……Tm,其中每一个集合Ti(1&lt;=i&lt;=m)又是一棵结构与树类似的子树。每颗子树的根节点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul><hr><p>结点的度：到底有多少个链接的子节点</p><p>叶子结点或终端结点：度为0的结点称为叶子结点，</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210612113428728.png" alt="image-20210612113428728"></p><ul><li>节点的度:一个节点含有的子树的个数称为该节点的度;如上图:A的为6</li><li>叶节点或终端节点:度为0的节点称为叶节点;如上图:B、C、H、I..等节点为叶节点非终端节点或分支节点:度不为0的节点;如上图:D、E、F、G…等节点为分支节点</li><li>兄弟节点:具有相同父节点的节点互称为兄弟节点;如上图:B、C是兄弟节点</li><li>树的度:一棵树中，最大的节点的度称为树的度;如上图:树的度为6</li><li>节点的层次:从根开始定义起，根为第1层，根的子节点为第2层，以此类推;</li><li>树的高度或深度:树中节点的最大层次;如上图:树的高度为4（有两种说法-从0开始还是从1开始，空树-1，空树0）</li><li>节点的祖先:从根到该节点所经分支上的所有节点;如上图:A是所有节点的祖先</li><li>子孙:以某节点为根的子树中任一节点都称为该节点的子孙。如上图:所有节点都是A的子孙</li><li>森林:由m (m&gt;0)棵互不相交的多颗树的集合称为森林;(数据结构中的学习并查集本质就是一个森林)——(日常很少碰到森林，并查集就是一个森林)</li></ul><h2 id="树的要求"><a href="#树的要求" class="headerlink" title="树的要求"></a>树的要求</h2><ul><li>子树是不相交的</li><li>除了根结点之外，每个结点有且仅有一个父结点</li><li>一个N个结点的树有N-1条边</li></ul><h2 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h2><p>相对于线性表，树的结构就复杂很多了。最常用的表示方法——孩子兄弟表示法。</p><h2 id="现实应用"><a href="#现实应用" class="headerlink" title="现实应用"></a>现实应用</h2><p>文件系统的目录树，</p><p>树在实际当中，不太作为存储数据这个角度去用，因为意义不是很大。</p><p>主要用的是二叉树</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>现实中的二叉树</p><p>这还是个满二叉树</p><p><img src="/images/%E3%80%90%E6%A0%91%E3%80%91%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91(C%E8%AF%AD%E8%A8%80).assets/src=http___pic2.zhimg.com_v2-48ad88b651e76da3f8958831ba1cd80b_1200x500.jpg&refer=http___pic2.zhimg.jpg"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>与普通的树最大的不同是它最多只有两个子树。</p><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><ol><li><p>满二叉树：每一层都是满的。</p><p>假设一棵满二叉树的高度是 h,那么它的总结点个数是：2^0+2^1+2^2+……2^(h-1) =N。</p><p>推导公式:2^h-1 = N;h = log2N+1以2位底N的对数+1。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210614201257487.png" alt="image-20210614201257487"></p></li><li><p>完全二叉树</p><p>完全二叉树是个效率很高的数据结构，完全二叉树是由满二叉树引出来的。</p><p>假设树的高度是h,前h-1层是满的，最后一层不满，但是最后一层从左往右都是连续的。</p><p>最后一层最少有一个结点。</p><p>结点个数为:2^h-1-X= N,高度近似为:h = log2N+1+X以二为底N的对数+1</p><p> <img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210614202340668.png" alt="image-20210614202340668"></p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在实际中普通二叉树的增删查改没得意义。</p><p><strong>有意义的是搜索二叉树</strong>。</p><p><strong>搜索二叉树</strong>:任何一棵树，左子树都比跟要小，右子树都比根要大。在搜索树中查找一个数，最多查找高度次。时间复杂度O(N)。</p><p>引申：左右两边的结点数量比较均匀。</p><p>接着引出 ——<strong>平衡树</strong></p><ul><li>AVL树</li><li>红黑树</li></ul><p>学习普通二叉树可以为后面学习复杂的有用的平衡树做铺垫。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>1.若规定根结点的层数为1，则一棵非空二叉树的第i层上最多有2^(i-1)个结点</p><p>2.若规定根节点的层数是1，则深度为h的二叉树的最大节点数是2^-1</p><p>3.对于任何一棵二叉树，如果度为0其叶结点个数为n0,度为2的分支结点个数为n2,则有n0 = n2 +1（度为2的结点个数总是比度为0的结点个数多1）</p><p>4.若规定根节点的层数是1，具有n个结点的满二叉树的深度是h = log2 N +1（以2为底N的对数+1）</p><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><p>顺序结构存储就是使用数组来存储，一般使用数组只适合表示完全二叉树，因为不是完全二叉树会有空间的浪费。而现实中使用中只有堆才会使用数组来存储。二叉树顺序存储在物理上是一个数组，在逻辑上是一颗二叉树。</p><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><p>二叉树的链式存储结构是指，用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。通常的方法是链表中每个结点由三个域组成，数据域和左右指针域，左右指针分别用来给出该结点左孩子和右孩子所在的链结点的存储地址。链式结构又分为二叉链和三叉链，当前我们学习中一般都是二叉链，后面到高阶数据结构如红黑树等会用到三叉链。</p><h2 id="构成-amp-遍历"><a href="#构成-amp-遍历" class="headerlink" title="构成&amp;遍历"></a>构成&amp;遍历</h2><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613173854712.png" alt="image-20210613173854712"></p><p>任何一个二叉树由三个部分构成</p><p>1.根节点——2.左子树——3.右子树</p><p> 分治算法：分而治之，大问题分成子问题，子问题再分成子问题，直到无法分割</p><p>前序遍历：根左右——(上图：A-B-D-NULL-NULL-E-NULL-NULL-C-NULL-NULL)</p><p>中序遍历：左根右——(NULL-D-NULL-B-NULL-E-NULL-A-NULL-C-NULL)</p><p>后序遍历：左右根——(NULL-NULL-D-NULL-NULL-E-B-NULL-NULL-C-A) </p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> BinaryTreeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">BinaryTreeType data;</span><br><span class="line">&#125;BTNode;</span><br></pre></td></tr></table></figure><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果树是空树就直接return</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">PrevOrder(root-&gt;left);</span><br><span class="line">PrevOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrder(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,root-&gt;data);</span><br><span class="line">InOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PostOrder(root-&gt;left);</span><br><span class="line">PostOrder(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建一个简单的树"><a href="#构建一个简单的树" class="headerlink" title="构建一个简单的树"></a>构建一个简单的树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个简单的树</span></span><br><span class="line">BTNode* A = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">A-&gt;data = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">A-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">A-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* B = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">B-&gt;data = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">B-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">B-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* C = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">C-&gt;data = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">C-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">C-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* D = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">D-&gt;data = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">D-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">D-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* E = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">E-&gt;data = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">E-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">E-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* F = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">F-&gt;data = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">F-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">F-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">A-&gt;left = B;</span><br><span class="line">A-&gt;right = C;</span><br><span class="line">B-&gt;left = D;</span><br><span class="line">B-&gt;right = E;</span><br><span class="line"> </span><br><span class="line">PrevOrder(A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613202834074.png" alt="image-20210613202834074"></p><h2 id="函数递归图——前序遍历"><a href="#函数递归图——前序遍历" class="headerlink" title="函数递归图——前序遍历"></a>函数递归图——前序遍历</h2><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/%E6%97%A0%E6%A0%87%E9%A2%98-1623589214513.png"></p><h2 id="结点个数"><a href="#结点个数" class="headerlink" title="结点个数"></a>结点个数</h2><p><strong>方法一</strong>：因为我们要对同一个size进行++,所以要设置一个全局变量size进行++就完事了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">TreeSize(root-&gt;left);</span><br><span class="line">TreeSize(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是在进行多次调用的时候因为累加，调用前要先将他置成0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TreeSize(A);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>,size);</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">TreeSize(B);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>, size);</span><br></pre></td></tr></table></figure><p>但是这种方法不是线程安全的。引出我们的第二种方法。</p><p><strong>方法二</strong>：传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSize</span><span class="params">(BTNode* root,<span class="keyword">int</span>* psize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">(*psize)++;</span><br><span class="line">&#125;</span><br><span class="line">TreeSize(root-&gt;left, psize);</span><br><span class="line">TreeSize(root-&gt;right, psize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Asize = <span class="number">0</span>;</span><br><span class="line">TreeSize(A,&amp;Asize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>,Asize);</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Bsize = <span class="number">0</span>;</span><br><span class="line">TreeSize(B, &amp;Bsize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;结点个数%d&quot;</span>, Bsize);</span><br></pre></td></tr></table></figure><p><strong>方法三</strong></p><p><strong>分治</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root == <span class="literal">NULL</span> ? <span class="number">0</span>:TreeSize(root-&gt;left) + TreeSize(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, TreeSize(A));</span><br></pre></td></tr></table></figure><p><strong>图解</strong></p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210615194041323.png" alt="image-20210615194041323"></p><h2 id="叶子结点的个数"><a href="#叶子结点的个数" class="headerlink" title="叶子结点的个数"></a>叶子结点的个数</h2><p>  叶子结点没有子结点，叶子结点就是度为0的结点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeLeafSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TreeLeafSize(root-&gt;left) + TreeLeafSize(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程：判断是否为空，为空返回0，不为空看左右孩子是否都为空，为空返回1，如果上面两个条件都不满足，分别计算左右孩子…孩子的孩子…递归返回相应的根结点。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210616113316365.png" alt="image-20210616113316365"></p><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>前序中序后序遍历其实也叫深度优先遍历。</p><p>层序遍历本质上也叫做广度优先遍历，以根为主一层一层往下遍历。</p><p>用队列先进先出的性质，</p><p>核心思路:上一层带下一层。</p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E4%B8%AA%E6%95%B0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line">QueueInit(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (root)<span class="comment">//不为空进队 </span></span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;q))<span class="comment">//队列不为空就继续</span></span><br><span class="line">&#123;</span><br><span class="line">BTNode* front = QueueFront(&amp;q);</span><br><span class="line">QueuePop(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, front-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (front-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (front-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">QueueDestory(&amp;q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210613173854712.png" alt="image-20210613173854712"></p><p><img src="/images/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84.assets/image-20210616125449237.png" alt="image-20210616125449237"></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><hr><p>上面是队列</p><p>相关链接——<a href="https://blog.csdn.net/qq_51604330/article/details/117697458?spm=1001.2014.3001.5501">【线性表】之队列_半生瓜のblog-CSDN博客</a></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">/// 队列</span></span><br><span class="line"><span class="comment">//前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">QueueDataType</span>;</span><span class="comment">//存二叉树的结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// //////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> BinaryTreeType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">BinaryTreeType data;</span><br><span class="line">&#125;BTNode;</span><br><span class="line"><span class="comment">//二叉树不学习增删查改，因为没得意义</span></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果树是空树就直接return</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">PrevOrder(root-&gt;left);</span><br><span class="line">PrevOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">InOrder(root-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,root-&gt;data);</span><br><span class="line">InOrder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PostOrder(root-&gt;left);</span><br><span class="line">PostOrder(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结点的个数</span></span><br><span class="line"><span class="comment">/*因为我们要对同一个size进行++,</span></span><br><span class="line"><span class="comment">所以要设置一个全局变量size进行++就完事了,</span></span><br><span class="line"><span class="comment">但是在进行多次调用的时候因为累加，调用前要先将他置成0*/</span></span><br><span class="line"><span class="comment">//int size = 0;</span></span><br><span class="line"><span class="comment">//void TreeSize(BTNode* root)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (root == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//size++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;left);</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;right);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//传参</span></span><br><span class="line"><span class="comment">//int size = 0;</span></span><br><span class="line"><span class="comment">//void TreeSize(BTNode* root,int* psize)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (root == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//(*psize)++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;left, psize);</span></span><br><span class="line"><span class="comment">//TreeSize(root-&gt;right, psize);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root == <span class="literal">NULL</span> ? <span class="number">0</span>:TreeSize(root-&gt;left) + TreeSize(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeLeafSize</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TreeLeafSize(root-&gt;left) + TreeLeafSize(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line">QueueInit(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (root)<span class="comment">//不为空进队 </span></span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;q))<span class="comment">//队列不为空就继续</span></span><br><span class="line">&#123;</span><br><span class="line">BTNode* front = QueueFront(&amp;q);</span><br><span class="line">QueuePop(&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, front-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (front-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (front-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;q, front-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">QueueDestory(&amp;q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//构建一个简单的树</span></span><br><span class="line">BTNode* A = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">A-&gt;data = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">A-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">A-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* B = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">B-&gt;data = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">B-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">B-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* C = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">C-&gt;data = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">C-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">C-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* D = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">D-&gt;data = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">D-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">D-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* E = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">E-&gt;data = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">E-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">E-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BTNode* F = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">F-&gt;data = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">F-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">F-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">A-&gt;left = B;</span><br><span class="line">A-&gt;right = C;</span><br><span class="line">B-&gt;left = D;</span><br><span class="line">B-&gt;right = E;</span><br><span class="line"> </span><br><span class="line">LevelOrder(A);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;h2 id=&quot;树的概念及结构&quot;&gt;&lt;a href=&quot;#树的概念及结构&quot; class=&quot;headerlink&quot; title=&quot;树的概念及结构&quot;&gt;&lt;/a&gt;树的</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(8)【栈&amp;队列】用栈实现队列(C语言)</title>
    <link href="http://example.com/2021/06/14/LeetCode%E5%88%B7%E9%A2%98(8)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/14/LeetCode%E5%88%B7%E9%A2%98(8)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-14T10:05:19.000Z</published>
    <updated>2021-06-14T10:13:29.776Z</updated>
    
    <content type="html"><![CDATA[<p><strong>用栈实现队列</strong></p><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><hr><p>相似题目——<strong>用队列实现栈</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/117826806?spm=1001.2014.3001.5501">LeetCode刷题(7)【栈&amp;队列】用队列实现栈(C语言)_半生瓜のblog-CSDN博客</a></p><hr><p><strong>思路</strong>：</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614164351913.png" alt="image-20210614164351913"></p><p>用栈实现队列要比用队列实现栈要简单一些，我们不用来回在两个栈里面导数据，只需要导一次，然后在依次出栈就成功实现队列的出队操作了。</p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614164357870.png" alt="image-20210614164357870"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%988.assets/image-20210614165007351.png" alt="image-20210614165007351"></p><p><strong>结论</strong>：</p><ol><li>入数据往push栈里面入</li><li>出数据从pop栈里面出，如果里面有数据，直接出，没有就把push栈里面的数据导过来，然后再出。</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">StackDataType* arry;</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//满了</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line">StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">ps-&gt;top++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">ps-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Stack pushST;</span><br><span class="line">    Stack popST;</span><br><span class="line">&#125; MyQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyQueue* <span class="title">myQueueCreate</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyQueue* q = (MyQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyQueue));</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc is fail!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StackInit(&amp;q-&gt;pushST);</span><br><span class="line">    StackInit(&amp;q-&gt;popST);</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueuePush</span><span class="params">(MyQueue* obj, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//入数据就往pushST里面入</span></span><br><span class="line">    StackPush(&amp;obj-&gt;pushST,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePop</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//类似于下面的peek</span></span><br><span class="line">    <span class="comment">// if(StackEmpty(&amp;obj-&gt;popST))</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     while(!StackEmpty(&amp;obj-&gt;pushST))</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         StackPush(&amp;obj-&gt;popST,StackTop(&amp;obj-&gt;pushST));</span></span><br><span class="line">    <span class="comment">//         StackPop(&amp;obj-&gt;pushST);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// int top = StackTop(&amp;obj-&gt;popST);</span></span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="comment">//或者直接调用下面的myQueuePeek函数直接获取popST的栈顶元素</span></span><br><span class="line">    <span class="comment">//保存给top之后删除，然后return</span></span><br><span class="line">    <span class="keyword">int</span> top = myQueuePeek(obj);</span><br><span class="line">    StackPop(&amp;obj-&gt;popST);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the front element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myQueuePeek</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//出数据要从popST里面出</span></span><br><span class="line">    <span class="comment">//如果popST里面是空的</span></span><br><span class="line">    <span class="comment">//就要先从pushST里面拿</span></span><br><span class="line">    <span class="keyword">if</span>(StackEmpty(&amp;obj-&gt;popST))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把pushST里面的元素导到popST里面</span></span><br><span class="line">        <span class="comment">//然后取第一个</span></span><br><span class="line">        <span class="keyword">while</span>(!StackEmpty(&amp;obj-&gt;pushST))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取pushST最上面的元素依次压进popST</span></span><br><span class="line">            StackPush((&amp;obj-&gt;popST),StackTop(&amp;obj-&gt;pushST));</span><br><span class="line">            StackPop(&amp;obj-&gt;pushST);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StackTop(&amp;obj-&gt;popST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myQueueEmpty</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StackEmpty(&amp;obj-&gt;popST) &amp;&amp; StackEmpty(&amp;obj-&gt;pushST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myQueueFree</span><span class="params">(MyQueue* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StackDestory(&amp;obj-&gt;pushST);</span><br><span class="line">    StackDestory(&amp;obj-&gt;popST);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue* obj = myQueueCreate();</span></span><br><span class="line"><span class="comment"> * myQueuePush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = myQueuePop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_3 = myQueuePeek(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * bool param_4 = myQueueEmpty(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * myQueueFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;用栈实现队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-queue-using-stacks/&quot;&gt;232. 用栈实现队列 - 力扣（LeetCode） (leetc</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="-队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(7)【栈&amp;队列】用队列实现栈(C语言)</title>
    <link href="http://example.com/2021/06/11/LeetCode%E5%88%B7%E9%A2%98(7)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/11/LeetCode%E5%88%B7%E9%A2%98(7)%E3%80%90%E6%A0%88&amp;%E9%98%9F%E5%88%97%E3%80%91%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-11T11:41:18.000Z</published>
    <updated>2021-06-11T13:00:17.685Z</updated>
    
    <content type="html"><![CDATA[<p><strong>用队列实现栈</strong></p><p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/images/LeetCode7.assets/image-20210611195234710.png" alt="image-20210611195234710"></p><p><strong>目的</strong>：用队列实现栈，从先进先出——&gt;先进后出，</p><p>1234这四个数据依次从队列1的队尾进入，要让4先出，一个队列是无法实现的，所以这里的队列2就排上用场了，我们可以利用队列2来进行导数据。</p><p><img src="/images/LeetCode7.assets/image-20210611195716778.png" alt="image-20210611195716778"></p><p>将123依次由队列2的队尾进入到队列2中，此时队列1中还剩一个4，将4弹出，同理，再将12依次进入到队列1中，将3弹出……</p><p><strong>也就是说</strong>。</p><p>出数据把不为空的 队列数据向为空的队列中导，知道剩最后一个。</p><p>入数据向不为空的队列入。</p><p>始终保持一个队列为空，一个不为空。</p><hr><p><strong>队列的实现</strong>——队列的实现——<a href="https://blog.csdn.net/qq_51604330/article/details/117697458">【线性表】之队列_半生瓜のblog-CSDN博客</a></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//创建两个队列</span></span><br><span class="line">    Queue q1;</span><br><span class="line">    Queue q2;</span><br><span class="line">&#125; MyStack;</span><br><span class="line"><span class="comment">//creat a queue above this</span></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"></span><br><span class="line"><span class="function">MyStack* <span class="title">myStackCreate</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//保证出了函数还在</span></span><br><span class="line">    MyStack* ps = (MyStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MyStack));</span><br><span class="line">    <span class="keyword">if</span>(ps == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc is fail!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    QueueInit(&amp;ps-&gt;q1);</span><br><span class="line">    QueueInit(&amp;ps-&gt;q2);</span><br><span class="line">    <span class="keyword">return</span> ps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x onto stack. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myStackPush</span><span class="params">(MyStack* obj, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//谁为空就往谁里面入</span></span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(&amp;obj-&gt;q1,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(&amp;obj-&gt;q2,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStackPop</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//谁不为空就把谁中的元素导到另一个队列中，直到该队列只剩一个元素</span></span><br><span class="line">    <span class="comment">//先假设一个队列不为空一个队列为空，如果不是这样，就交换一下</span></span><br><span class="line">    Queue* emptyQ = &amp;obj-&gt;q1;</span><br><span class="line">    Queue* noemptyQ = &amp;obj-&gt;q2;</span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        emptyQ = &amp;obj-&gt;q2;</span><br><span class="line">        noemptyQ = &amp;obj-&gt;q1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后循环，进行导元素，将noemptyQ的导入emptyQ中</span></span><br><span class="line">    <span class="keyword">while</span>(QueueSize(noemptyQ)&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QueuePush(emptyQ,QueueFront(noemptyQ));</span><br><span class="line">        <span class="comment">//出一个删一个</span></span><br><span class="line">        QueuePop(noemptyQ);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接口要求——返回栈顶的元素，就是noemptyQ中剩下的那个元素</span></span><br><span class="line">    <span class="keyword">int</span> top = QueueFront(noemptyQ);</span><br><span class="line">    QueuePop(noemptyQ);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the top element. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStackTop</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取栈的最上面的元素，也就是取队列的最后一个元素</span></span><br><span class="line">    <span class="comment">//谁不为空就取谁</span></span><br><span class="line">    <span class="keyword">if</span>(!QueueEmpty(&amp;obj-&gt;q1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBack(&amp;obj-&gt;q1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBack(&amp;obj-&gt;q2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myStackEmpty</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//两个队列都为空才为空</span></span><br><span class="line">    <span class="keyword">return</span> QueueEmpty(&amp;obj-&gt;q1) &amp;&amp; QueueEmpty(&amp;obj-&gt;q2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myStackFree</span><span class="params">(MyStack* obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QueueDestory(&amp;obj-&gt;q1);</span><br><span class="line">    QueueDestory(&amp;obj-&gt;q2);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack* obj = myStackCreate();</span></span><br><span class="line"><span class="comment"> * myStackPush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = myStackPop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_3 = myStackTop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * bool param_4 = myStackEmpty(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * myStackFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;用队列实现栈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-stack-using-queues/&quot;&gt;225. 用队列实现栈 - 力扣（LeetCode） (leetc</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="-队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>如果你准备学习C++,并且有C语言的基础，我希望你能简单的过一遍知识点。</title>
    <link href="http://example.com/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/"/>
    <id>http://example.com/2021/06/10/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C++,%E5%B9%B6%E4%B8%94%E6%9C%89C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E6%88%91%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E4%B8%80%E9%81%8D%E7%9F%A5%E8%AF%86%E7%82%B9%E3%80%82/</id>
    <published>2021-06-10T12:10:43.000Z</published>
    <updated>2021-07-08T10:34:41.590Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1et411b73Z?p=1">黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili</a>（1-83）</p><p>我知道这个视频早已经被很多人学习并且记录笔记，但是我还是想再过一遍前面的基础知识点，所以我这个笔记会非常的简洁，适合有C语言基础的小伙伴进行简单的基础知识复习，好尽快投入到C++的学习中。</p><hr><p>在基础知识部分，好像只有头文件的引用和输入输出函数发生了变化。</p><p>头文件下加入using namespace std;</p><p>#include&lt;stdio.h&gt;——&gt;#include<iostream></p><p>printf——&gt;cout</p><p>scanf——&gt;cin</p><p>C++有字符串类型string,这是C语言所不具备的。</p><hr><p><strong>下面就让我们开始吧！</strong></p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/%E6%99%83%E5%8A%A8%E7%9A%84%E5%B0%8F%E8%80%97%E5%AD%90.gif"></p><h2 id="Hello-C"><a href="#Hello-C" class="headerlink" title="Hello C++"></a>Hello C++</h2><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hellow world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>方便自己和他人阅读,不会被程序执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*多行注释*/</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>作用：</strong>给一段指定的内存空间起名，方便操作这段内存。</p><p><strong>语法：</strong>数据类型  变量名 = 初始值；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span>&lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>作用：</strong>用于记录程序中不可更改的数据。</p><p>C++定义常量的两种方法</p><p>1.#define宏定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 常量名 常量值</span></span><br></pre></td></tr></table></figure><p>通常在文件上方定义,表示一个常量。</p><p>2.const修饰的变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 数据类型 常量名 = 常量值</span><br></pre></td></tr></table></figure><p>通常在变量定义之前加关键字const,修饰该变量为常量，不可修改。</p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7<span class="comment">//是不可修改的值，一旦修改就会报错</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>**作用:**关键字是C++中预先保留的单词（标识符）</p><p>在定义变量或常量的时候不要使用关键字。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608180216685.png" alt="image-20210608180216685"></p><p>来源（菜鸟教程——<a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">C++ 的关键字（保留字）完整介绍 | 菜鸟教程 (runoob.com)</a>）</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><p><strong>作用：</strong>C++规定给标识符(变量、常量)命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或者下划线</li><li>标识符中字母区分大小写</li><li>(建议：给标识符命名的时候，争取做到见名知意，方便自己和他人阅读。)</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C++规定在创建一个变量或者常量的时候，必须要指定出相应的数据类型，否则无法给该变量分配内存空间。</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><strong>作用：</strong>整型变量表示的是整型类型的数据。</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于占用的内存空间不同。</strong></p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608181144671.png" alt="image-20210608181144671"></p><h3 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h3><p><strong>作用：</strong>统计数据类型所占空间的大小。</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(数据类型/变量);</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int类型所占空间的大小是：&quot;</span> &lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实型-浮点型"><a href="#实型-浮点型" class="headerlink" title="实型(浮点型)"></a>实型(浮点型)</h3><p><strong>作用：</strong>用于表示小数。</p><p>浮点型分为两种-单精度float-双精度double。</p><p>两者的区别在于有效数字的表示范围不一样。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608181700530.png" alt="image-20210608181700530"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;<span class="comment">//编译器会默认把一个小数当做双精度</span></span><br><span class="line"><span class="comment">//默认情况下输出一个小数会显示出6位有效数字</span></span><br><span class="line"><span class="comment">//例如：下面这个f1只输出到6</span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.1234567f</span>;</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sb = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">/*注意：</span></span><br><span class="line"><span class="comment">显示字符型变量时用单引号括起来，不是双引号。</span></span><br><span class="line"><span class="comment">单引号内只能有一个字符，不可以是字符串。*/</span></span><br></pre></td></tr></table></figure><ul><li>C和C++中字符型变量只占1个字节。</li><li>字符型变量并不是把所有的字符本身放到内存中存储，而是将对饮的ASCII编码放入到存储单元中。</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p><strong>作用：</strong>用于表示一些不能显示出来的ASCII字符。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608183348489.png" alt="image-20210608183348489"></p><p>(图片来源——w3cschoolw3cschool<a href="http://c.biancheng.net/view/1769.html">C语言转义字符 (biancheng.net)</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; “hello world\n”&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>作用：</strong>用于表示一串字符串。</p><p><strong>两种风格：</strong></p><p>1.C风格字符串</p><p>要用双引号括起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> 变量名[] = <span class="string">&quot;字符串值&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.C++风格字符串</p><p>需要加入头文件#include <string></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> 变量名 = <span class="string">&quot;字符串值&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> st2 = <span class="string">&quot;hellow world&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="布尔类型bool"><a href="#布尔类型bool" class="headerlink" title="布尔类型bool"></a>布尔类型bool</h3><p>**作用:**布尔类型数据代表真或假的值。</p><p>bool类型只有两个值：</p><ul><li>true——真（1）</li><li>false——假（0）</li></ul><p><strong>bool类型占1个字节大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="数据-输入"><a href="#数据-输入" class="headerlink" title="数据 输入"></a>数据 输入</h3><p><strong>作用：</strong>用于从键盘获取数据</p><p><strong>关键字：</strong>cin</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; 变量</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;a;</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>**作用:**用于代码的运算。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608193429732.png" alt="image-20210608193429732"></p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><strong>作用：</strong>用于处理四则运算</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608193743764.png" alt="image-20210608193743764"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++ -- </span><br><span class="line">两个整数相除结果还是整数</span><br><span class="line">两个小数相除结构还是小数</span><br><span class="line">两个数相除除数不可以为<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前置递增++a——先让变量+<span class="number">1</span>然后再进行表达式运算</span><br><span class="line">   后置递增a++——先进行表达式运算然后变量再+<span class="number">1</span></span><br><span class="line">   递减同理</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194415559.png"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">a *=<span class="number">2</span>;<span class="comment">//意思就是就是a = a *2;</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194714016.png" alt="image-20210608194714016"></p><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a &lt; b)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//真返回1，假0</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值。</p><p><img src="/images/%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0C.assets/image-20210608194954139.png" alt="image-20210608194954139"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; !a &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; !!a &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a &amp;&amp; b) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a &amp;&amp; c) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a || c) &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h2><p>C/C++支持最基本的三大基本程序运算结构:<strong>顺序结构、选择结构、循环结构。</strong></p><ul><li>顺序结构：程序按顺序执行，不发生跳转。</li><li>选择结构：依据条件是否满足,有选择的执行相应代码。</li><li>循环结构：依据条件是否满足，循环多次指定某段代码。</li></ul><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h4><p><strong>作用：</strong>执行满足条件的语句。</p><ul><li>单行格式if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//条件满足执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多行格式if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;    <span class="comment">//条件满足执行的语句&#125;else&#123;    //条件不满足执行的语句&#125;</span></span><br></pre></td></tr></table></figure><ul><li>多条件if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//条件1满足执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//条件2满足执行的语句</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//都不满足执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>嵌套if语句</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p><strong>作用：</strong>通过三目运算符实现简单的判断</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span>？表达式<span class="number">2</span>：表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>如果1为真，则结果为表达式2的值。</p><p>如果1为假，则结果为表达式3的值。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//结果为10</span></span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> 结果<span class="number">1</span>：</span><br><span class="line">            执行语句;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">default</span>：</span><br><span class="line">            执行语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;    循环语句&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong>只要满足循环条件的结果为真，就执行循环语句。</p><h5 id="猜数字练习"><a href="#猜数字练习" class="headerlink" title="猜数字练习"></a>猜数字练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = rand() % <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> puT = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请你猜一下这个数是多少\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="built_in">cin</span> &gt;&gt; puT))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (puT &gt; num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;猜大了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (puT &lt;= num / <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;太小了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (puT &gt;= num / <span class="number">2</span> &amp;&amp; puT &lt; num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;再大一点\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num == puT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;猜对了\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do-while循环语句"></a>do-while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句。</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;    循环语句&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>与while的区别在于do-while会先执行一次循环语句，再判断循环条件。</p><h5 id="水仙花数练习"><a href="#水仙花数练习" class="headerlink" title="水仙花数练习"></a>水仙花数练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ge = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> shi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bai = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ge = i % <span class="number">10</span>;</span><br><span class="line">shi = (i / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">bai = i / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (i == ge * ge * ge + shi * shi * shi + bai * bai * bai)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">1000</span>);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(起始条件;条件表达式;末尾循环体)&#123;    循环语句&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)   </span><br><span class="line">    &#123;    </span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="敲桌子练习"><a href="#敲桌子练习" class="headerlink" title="敲桌子练习"></a>敲桌子练习</h4><h5 id="是7的倍数、各位有7、十位有7"><a href="#是7的倍数、各位有7、十位有7" class="headerlink" title="是7的倍数、各位有7、十位有7"></a>是7的倍数、各位有7、十位有7</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ge = i % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> shi = (i /<span class="number">10</span>)% <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span> || ge == <span class="number">7</span> || shi == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p><strong>作用：</strong>在循环体中再嵌套一层循环，解决一些实际问题。</p><h5 id="打印10-10的正方形"><a href="#打印10-10的正方形" class="headerlink" title="打印10*10的正方形"></a>打印10*10的正方形</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;* &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="乘法口诀表练习"><a href="#乘法口诀表练习" class="headerlink" title="乘法口诀表练习"></a>乘法口诀表练习</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">&quot;*&quot;</span>&lt;&lt; j&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt; i* j&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p><strong>作用：</strong>用于跳出选择结构或者循环结构。</p><p>break使用的时机：</p><ul><li>出现在switch语句中，作用是终止case并跳出swtich</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套语句中，跳出最近的内层循环语句</li></ul><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>作用：在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环。</p><h4 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong>goto标记；</p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句的时候，会跳转到标记的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> sb;......sb:......</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>所谓数组就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1</strong>：数组中的每个数据元素都是相同的数据类型。</p><p><strong>特点2</strong>：数组是由连续的内存位置组成的。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[数组长度];数据类型 数组名[数组长度] = &#123;值<span class="number">1</span>，值<span class="number">2.</span>.....&#125;;数据类型 数组名[] = &#123;值<span class="number">1</span>，值<span class="number">2.</span>.....&#125;;;</span><br></pre></td></tr></table></figure><h4 id="数组名的用途"><a href="#数组名的用途" class="headerlink" title="数组名的用途"></a>数组名的用途</h4><p>1.可以统计整个数组在内存中的长度</p><p>2.可以获取数组在内存中的首地址</p><h4 id="输出最重的一只小猪的体重"><a href="#输出最重的一只小猪的体重" class="headerlink" title="输出最重的一只小猪的体重"></a>输出最重的一只小猪的体重</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Weight[<span class="number">5</span>] = &#123; <span class="number">300</span>,<span class="number">250</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">450</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Weight[i] &gt; temp)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = Weight[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;最重的小猪是&quot;</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot;kg&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组元素逆置"><a href="#数组元素逆置" class="headerlink" title="数组元素逆置"></a>数组元素逆置</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    nt nums[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="keyword">sizeof</span>(nums)/<span class="keyword">sizeof</span>(nums[<span class="number">0</span>]) <span class="number">-1</span> ;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        end--;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>作用：</strong>最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻两个元素，如果第一个比第二个大就交换他们的位置</li><li>每一对相邻元素做同样的工作，整型完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，知道不需要比较</li></ol><p><strong>示例</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排列这个数组&#123;7,5,2,4,9,8,6,7,1&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">//排序的总轮数=元素个数-1</span></span><br><span class="line"><span class="comment">//每轮对比的次数 = 元素个数- 排序轮数 </span></span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">9</span>] = &#123; <span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内层循环对比</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一个数比第二个数大就交换他们两个的位置</span></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = nums[j+<span class="number">1</span>];</span><br><span class="line">nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组就是在一维数组的基础上多加一个维度，就是在一维数组里面存储一维数组。</p><p><strong>定义:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[行][列];</span><br><span class="line">数据类型 数组名[行][列] = &#123;&#123;数据<span class="number">1</span>，数据<span class="number">2</span>&#125;，&#123;数据<span class="number">3</span>，数据<span class="number">4</span>&#125;&#125;;</span><br><span class="line">数据类型 数组名[行][列] = &#123;数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>，数据<span class="number">4</span>&#125;;</span><br><span class="line">数据类型 数组名[][列] = &#123;数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>，数据<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>建议：</strong>以上4种定义方式，利用第二种更加直观，提高代码的可读性。</p><h4 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><h4 id="考试成绩统计练习"><a href="#考试成绩统计练习" class="headerlink" title="考试成绩统计练习"></a>考试成绩统计练习</h4><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>甲</td><td>50</td><td>40</td><td>60</td></tr><tr><td>乙</td><td>20</td><td>10</td><td>30</td></tr><tr><td>丙</td><td>70</td><td>80</td><td>90</td></tr></tbody></table><p>分别输出三个人的总成绩</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>&#125;,&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;,&#123;<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>&#125; &#125;;</span><br><span class="line">    <span class="comment">//嵌套循环解决</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp += score[i][j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码。</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>函数的几个要素<br>返回值类型，函数名 ，参数，函数体语句，return表达式</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数语句;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p><strong>功能</strong>：使用定义好的函数</p><p><strong>语法：</strong>函数名(参数)</p><h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><ul><li>就是函数调用时将参数值传给形参</li><li>值传递时，如果形参发生变化，并不会影响到实参</li></ul><h3 id="函数的常见样式"><a href="#函数的常见样式" class="headerlink" title="函数的常见样式"></a>函数的常见样式</h3><p>无参无返、有参无返、无参有返、有参有返</p><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p><strong>作用</strong>：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数的声明可以有很多次，定义只能有一次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>就是在.h的头文件里面放函数声明，函数的定义放到.c文件里</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>指针的作用:可以通过指针间接访问内存。</p><ul><li>内存编号是从0开始记录的，一般用16进制数字标识。</li><li>可以利用指针变量保存地址。</li></ul><h3 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h3><p><strong>指针变量定义语法</strong>：数据类型+变量名</p><h3 id="指针所占内存空间"><a href="#指针所占内存空间" class="headerlink" title="指针所占内存空间"></a>指针所占内存空间</h3><p>在32位操作系统下无论是什么类型的指针，都占4个字节的内存空间。</p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p><strong>空指针：</strong>指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存空间是不可以访问的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>指针变量指向非法的内存空间。</p><h3 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h3><p>const修饰指针有3种情况 </p><ol><li>const修饰指针—常量指针</li><li>const修饰常量—指针常量</li><li>const既修饰指针，又修饰常量、</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>修饰的是指针，指针指向可以改，指针指向的值不可以改</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="keyword">const</span>修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line"><span class="keyword">const</span>既修饰指针，又修饰常量，指针的指向和指针指向的值都不可以改变</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;a;</span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p><strong>作用：</strong>利用指针访问数组元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* p = arr;</span><br></pre></td></tr></table></figure><h3 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h3><p><strong>作用：</strong>利用指针作函数的参数，可以修改实参的值。</p><p>——<strong>传(址)引用</strong></p><h3 id="指针、数组、函数"><a href="#指针、数组、函数" class="headerlink" title="指针、数组、函数"></a>指针、数组、函数</h3><p>封装一个函数，利用冒泡排序，实现对整型数组的升序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopSort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len-i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arry[<span class="number">5</span>] = &#123; <span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span> &#125;;</span><br><span class="line">PopSort(arry, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arry[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>​    结构体属于用户自定义的数据类型，允许用户存储不同的数据类型。</p><h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    结构体成员列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过结构体创建变量的方式有三种</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = （成员1值，成员2值……)</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p><strong>作用：</strong>将自定义的结构头放入到数组中方便维护</p><p><strong>语法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 数组名[元素个数]=</span>  &#123;&#123;&#125;，&#123;&#125;...&#123;&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p><strong>作用</strong>：通过指针访问结构体中的成员</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>* <span class="title">p</span> =</span> &amp;s1;</span><br><span class="line">p-&gt;score = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h3><p><strong>作用</strong>：结构体中的成员可以是另一个结构体</p><p><strong>例如</strong>:每个老师辅导一个学员，一个老师的结构体中，记录一个学生的的结构体</p><h3 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种</p><p>同上函数参数-指针</p><ul><li>值传递-无法改变实参</li><li>地址传递-可以改变实参</li></ul><h3 id="结构体中const使用场景"><a href="#结构体中const使用场景" class="headerlink" title="结构体中const使用场景"></a>结构体中const使用场景</h3><p><strong>作用</strong>：用const来防止误操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeInformation</span><span class="params">(<span class="keyword">const</span> struct student* stu1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    加了<span class="keyword">const</span>就无法改变该结构体内的信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体案例"><a href="#结构体案例" class="headerlink" title="结构体案例"></a>结构体案例</h3><p> 每个老师带三个学生</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">sArry</span>[5];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inPutInformation</span><span class="params">(struct Teacher tArry[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> Name = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tArry[i].name = <span class="string">&quot;Teacher_&quot;</span>;</span><br><span class="line">tArry[i].name += Name[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">tArry[i].sArry[j].name = <span class="string">&quot;Student_&quot;</span>;</span><br><span class="line">tArry[i].sArry[j].name += Name[j];</span><br><span class="line"><span class="keyword">int</span> random = rand()% <span class="number">60</span> +<span class="number">40</span>;</span><br><span class="line">tArry[i].sArry[j].score = random;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInformation</span><span class="params">(struct Teacher tArry[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;老师的姓名：&quot;</span> &lt;&lt; tArry[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t学生的姓名：&quot;</span> &lt;&lt; tArry[i].sArry[j].name &lt;&lt; <span class="string">&quot;考试分数：&quot;</span> &lt;&lt; tArry[i].sArry[j].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">tArry</span>[3];</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(tArry) / <span class="keyword">sizeof</span>(tArry[<span class="number">0</span>]);</span><br><span class="line">inPutInformation(tArry,len);</span><br><span class="line">printInformation(tArry,len);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建5个人并按年龄排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> categories;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> <span class="title">heroArry</span>[5] =</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">&quot;欣南&quot;</span>,<span class="number">20</span>,<span class="string">&quot;火&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;东杉&quot;</span>,<span class="number">24</span>,<span class="string">&quot;木&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;北淼&quot;</span>,<span class="number">23</span>,<span class="string">&quot;水&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;坤中&quot;</span>,<span class="number">18</span>,<span class="string">&quot;土&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;西昭&quot;</span>,<span class="number">22</span>,<span class="string">&quot;金&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(heroArry) / <span class="keyword">sizeof</span>(heroArry[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (heroArry[j].age &gt; heroArry[j + <span class="number">1</span>].age)</span><br><span class="line">&#123;</span><br><span class="line">temp = heroArry[j].age;</span><br><span class="line">heroArry[j].age = heroArry[j + <span class="number">1</span>].age;</span><br><span class="line">heroArry[j + <span class="number">1</span>].age = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; heroArry[i].name &lt;&lt; heroArry[i].age &lt;&lt; heroArry[i].categories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通讯录"><a href="#通讯录" class="headerlink" title="通讯录"></a>通讯录</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addreassbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">personarry</span>[<span class="title">MAX</span>];</span></span><br><span class="line"><span class="keyword">int</span> m_Size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1.增加联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2.显示联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;3.删除联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;4.查找联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;5.修改联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;6.清空联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.退出通讯录&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;联系人已满，无法添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].name = name;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].sex = sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].age = age;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].phone = phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入地址&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[<span class="built_in">abs</span>-&gt;m_Size].addr = addr;</span><br><span class="line"><span class="comment">//更新通讯录人数</span></span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前记录为空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[i].addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;personarry[i].name == name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> dname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要删除的人名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dname;</span><br><span class="line"><span class="keyword">int</span> ret = checkPerson(<span class="built_in">abs</span>, dname);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[i] = <span class="built_in">abs</span>-&gt;personarry[i + <span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> fname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找的联系人姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fname;</span><br><span class="line"><span class="keyword">int</span> result = checkPerson(<span class="built_in">abs</span>, fname);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;性别\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电话\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址\t&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;personarry[result].addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPerson</span><span class="params">(addreassbooks* <span class="built_in">abs</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> mname;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要修改的联系人姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mname;</span><br><span class="line"><span class="keyword">int</span> result = checkPerson(<span class="built_in">abs</span>, mname);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].name = name;</span><br><span class="line"><span class="built_in">string</span> sex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].sex = sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].age = age;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入电话&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].phone = phone;</span><br><span class="line"><span class="built_in">string</span> addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入地址&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line"><span class="built_in">abs</span>-&gt;personarry[result].addr = addr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPerson</span><span class="params">(addreassbooks*<span class="built_in">abs</span>)</span><span class="comment">//逻辑清空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录清空成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建通讯录结构体变量</span></span><br><span class="line">addreassbooks <span class="built_in">abs</span>;</span><br><span class="line"><span class="comment">//初始化通讯录中当前人员的个数</span></span><br><span class="line"><span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">mainMenu();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//添加联系人</span></span><br><span class="line">addPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//显示联系人</span></span><br><span class="line">printPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//删除联系人</span></span><br><span class="line">deletePerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//查找联系人</span></span><br><span class="line">findPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//修改联系人</span></span><br><span class="line">modifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//清空联系人</span></span><br><span class="line">cleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//退出通讯录</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1et411b73Z?p=1&quot;&gt;黑马程序员匠心之作|C++教程从0到1入门编程,学习编程不再难_哔哩哔哩_bilibili&lt;/a&gt;（1-83）&lt;/p&gt;
&lt;p&gt;我知道这个</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(6)【栈】有效的括号(C语言)</title>
    <link href="http://example.com/2021/06/09/LeetCode%E5%88%B7%E9%A2%98(6)%E3%80%90%E6%A0%88%E3%80%91%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/09/LeetCode%E5%88%B7%E9%A2%98(6)%E3%80%90%E6%A0%88%E3%80%91%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-09T12:46:18.000Z</published>
    <updated>2021-06-11T13:01:21.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong>有效的括号</strong></p><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>思路：是左括号，就入栈，是右括号，就与栈顶的左括号判断是否匹配，如果匹配，继续，不匹配就终止。</p><p><strong>从第79行开始，前面都是实现栈以及其功能接口。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    StackDataType* arry;</span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">    ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">    ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">    ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//满了</span></span><br><span class="line">    <span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ps-&gt;arry = tmp;</span><br><span class="line">            ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">    ps-&gt;top++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">    assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">    ps-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回栈中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(ps);</span><br><span class="line">    <span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">    Stack  st;</span><br><span class="line">    StackInit(&amp;st);</span><br><span class="line">    <span class="keyword">while</span>(*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(*s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                StackPush(&amp;st,*s);</span><br><span class="line">                s++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(StackEmpty(&amp;st))</span><br><span class="line">                &#123;</span><br><span class="line">                    StackDestory(&amp;st);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span> top = StackTop(&amp;st);</span><br><span class="line">                StackPop(&amp;st);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不匹配的三种情况  </span></span><br><span class="line">                <span class="keyword">if</span>((*s == <span class="string">&#x27;&#125;&#x27;</span>&amp;&amp; top != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                || (*s == <span class="string">&#x27;]&#x27;</span>&amp;&amp; top != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                || (*s == <span class="string">&#x27;)&#x27;</span>&amp;&amp; top != <span class="string">&#x27;(&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">//不匹配返回fasle，有可能栈里面还有元素，销毁防止内存泄漏</span></span><br><span class="line">                    StackDestory(&amp;st);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//匹配就继续匹配</span></span><br><span class="line">                    s++;   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> ret = StackEmpty(&amp;st);<span class="comment">//匹配完成了，栈应该是空的。</span></span><br><span class="line">    StackDestory(&amp;st);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;有效的括号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/valid-parentheses/&quot;&gt;20. 有效的括号 - 力扣（LeetCode） (leetcode-cn.com)&lt;/a</summary>
      
    
    
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【线性表】之队列</title>
    <link href="http://example.com/2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/08/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%98%9F%E5%88%97(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-08T04:27:51.000Z</published>
    <updated>2021-06-08T04:30:24.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列的概念"><a href="#队列的概念" class="headerlink" title="队列的概念"></a>队列的概念</h2><p>队列只允许在一端进行插入数据操作，在另一端进行删除数据操作的特殊线性表，队列具有先进先出的FIFO(First in First Out)。</p><p>入队列：进行插入操作的一端称为队尾。</p><p>出队列：进行删除操作的一端称为队头。</p><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%98%9F%E5%88%97.assets/image-20210607194222681.png" alt="image-20210607194222681"></p><p>同样可以使用链表或者数组</p><p>数组：不是适合，队头出数据需要挪动数据。</p><p>链表：适合单链表，单链表头删效率很高。</p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//定义一个新结点</span></span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//依次保存下一个结点，然后删除这个结点</span></span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾入"><a href="#队尾入" class="headerlink" title="队尾入"></a>队尾入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//链接</span></span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//如果插入前是空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">          <span class="comment">//插到后面</span></span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">        <span class="comment">//称为新的尾巴</span></span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出"><a href="#队头出" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头出-1"><a href="#队头出-1" class="headerlink" title="队头出"></a>队头出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队头数据"><a href="#队头数据" class="headerlink" title="队头数据"></a>队头数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队尾数据"><a href="#队尾数据" class="headerlink" title="队尾数据"></a>队尾数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否为空"><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回数据个数"><a href="#返回数据个数" class="headerlink" title="返回数据个数"></a>返回数据个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QueueDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>* <span class="title">next</span>;</span></span><br><span class="line">QueueDataType data;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"><span class="comment">//单链表除了尾插还要尾删，所以不会加这个</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueueNode* tail;</span><br><span class="line">QueueNode* head;</span><br><span class="line">&#125;Queue;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueInit</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">pq-&gt;tail = pq-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueDestory</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">QueueNode* curNext = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = curNext;</span><br><span class="line">&#125;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePush</span><span class="params">(Queue* pq, QueueDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">QueueNode* newnode = (QueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueNode));</span><br><span class="line"><span class="keyword">if</span> (newnode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc is fail\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;tail == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;head = pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pq-&gt;tail-&gt;next = newnode;</span><br><span class="line">pq-&gt;tail = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuePop</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);<span class="comment">//队列是不等于空的</span></span><br><span class="line"><span class="keyword">if</span> (pq-&gt;head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = pq-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先保存一下下一个结点</span></span><br><span class="line">QueueNode* nextNode = pq-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pq-&gt;head);</span><br><span class="line">pq-&gt;head = nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队头数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueFront</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队尾数据</span></span><br><span class="line"><span class="function">QueueDataType <span class="title">QueueBack</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line">assert(pq-&gt;head);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;tail-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">return</span> pq-&gt;head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数据个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueSize</span><span class="params">(Queue* pq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pq);</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">QueueNode* cur = pq-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">size++;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue pq;</span><br><span class="line">QueueInit(&amp;pq);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">1</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">2</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">3</span>);</span><br><span class="line">QueuePush(&amp;pq, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//为空是假的才成立，进入循环(不为空，进入循环)</span></span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;pq))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取队头的数据然后删除</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, QueueFront(&amp;pq));</span><br><span class="line">QueuePop(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line">QueueDestory(&amp;pq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;h2 id=&quot;队列的概念&quot;&gt;&lt;a href=&quot;#队列的概念&quot; class=&quot;headerlink&quot; title=&quot;队列的概念&quot;&gt;&lt;/a&gt;队列的概</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【线性表】之栈</title>
    <link href="http://example.com/2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/07/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E6%A0%88(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-07T11:17:07.000Z</published>
    <updated>2021-06-08T04:29:53.576Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>顺序表和链表的区别和联系</p><p>顺序表：</p><p>​    优点：空间连续支持随机访问。</p><p>​    缺点：1.中间或前面的插入删除时间复杂度O(N)。</p><p>​               2.增容的代价比较大</p><p>链表(带头双向循环)：</p><p>​    缺点：</p><p>​        以借点为单位存储，不支持随机访问。</p><p>​    优点：</p><p>​            1.任意位置插入删除时间复杂度为O(1)</p><p>​            2.没有增容消耗，按需申请结点空间，不用了直接释放。</p><hr><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈也是线性表，在逻辑上还是挨着放的。</p><p>栈的概念以及结构</p><p>栈：一种特殊的线性表,其只允许在固定的一端进行插入和删除元素操作。<strong>进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。</strong>栈中的数据元素遵守后进先出LIFO(Last In First Out)的原则。</p><p><strong>压栈：</strong>栈的插入操作叫做进栈/压栈/入栈，<strong>入数据在栈顶</strong>。</p><p><strong>出栈：</strong>栈的删除操作叫做出栈。<strong>出数据也在栈顶</strong>。</p><p><img src="/images/%E6%A0%88.assets/image-20210607120710677.png" alt="image-20210607120710677"></p><p><strong>实现方式：</strong></p><ol><li><p>数组实现</p><p><img src="/images/%E6%A0%88.assets/image-20210607120936928.png" alt="image-20210607120936928"></p><p>总结：</p><p>相当于之前顺序表的尾插尾删，用尾做栈顶，非常合适，唯一缺陷就是，空间不够需要增容(影响不大)。</p><p>(顺序表——<a href="https://blog.csdn.net/qq_51604330/article/details/117593583">【线性表】之顺序表_半生瓜のblog-CSDN博客</a>)</p></li><li><p>链表实现</p></li></ol><p><img src="/images/%E6%A0%88.assets/image-20210607121416245.png" alt="image-20210607121416245"></p><p>出数据得找到前一个，这样的话用双向链表更好一些。</p><p>(所以说数据结构并没有规定用什么方法实现，只要能实现就行，对比的就是效率而已。)</p><p>也可以将单链表反过来。</p><p><img src="/images/%E6%A0%88.assets/image-20210607121819132.png" alt="image-20210607121819132"></p><p>总结：</p><p>​    如果用尾插做栈顶，用双向链表更好。</p><p>​    如果用单链表实现，就用头去做栈顶，这样入栈和出栈效率都是O(1)。</p><p>​    整体来说数组的效率更优一些。</p><hr><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> StackDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">StackDataType* arry;</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">//指向栈顶</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//栈的容量——能放几个数据</span></span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果初识的top给0，意味着top指向栈顶的元素的下一个，top给-1，top指向栈顶元素。</p><p>一定不能为空的东西，可以使用断言来处理。OJ题不可以使用断言。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackInit</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">ps-&gt;arry = (StackDataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackDataType)*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;capacity = <span class="number">4</span>;</span><br><span class="line">ps-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackDestory</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;top = ps-&gt;capacity =<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPush</span><span class="params">(Stack* ps, StackDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//满了</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;top == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line">StackDataType* tmp = (StackDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, ps-&gt;capacity * <span class="number">2</span> * <span class="keyword">sizeof</span>(StackDataType));</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc fail&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[ps-&gt;top] = x;</span><br><span class="line">ps-&gt;top++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StackPop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="comment">//如果栈空了调用top，直接终止程序报错</span></span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line">ps-&gt;top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StackDataType <span class="title">StackTop</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line">assert(ps-&gt;top &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;arry[ps-&gt;top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回栈中元素个数"><a href="#返回栈中元素个数" class="headerlink" title="返回栈中元素个数"></a>返回栈中元素个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackSize</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(Stack* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps);</span><br><span class="line"><span class="keyword">return</span> ps-&gt;top == <span class="number">0</span>;<span class="comment">//真为空，假为非空。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>小提示:</strong></p><p>上面有的函数只有两行代码，如果直接用里面的那句代码，可以吗？<br>可以，但是不好，通过那句代码访问到，但严格来说你不应该去访问，这是一种耦合，耦合就是一种强关联，<br>调用函数，无需去想top在0还是在-1，只管用就完事了。(有点软件工程的思想)</p><hr><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack ps;</span><br><span class="line">StackInit(&amp;ps);</span><br><span class="line">StackPush(&amp;ps,<span class="number">1</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">2</span>);</span><br><span class="line">StackPush(&amp;ps,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;ps))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, StackTop(&amp;ps));</span><br><span class="line"><span class="comment">//取完栈顶的数据，想取下一个，那就得删一下</span></span><br><span class="line">StackPop(&amp;ps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">StackDestory(&amp;ps);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;顺序表和链表的区别和联系&lt;/p&gt;
&lt;p&gt;顺序表：&lt;/p&gt;
&lt;p&gt;​    优点：空间连续支持随机访问。&lt;/p&gt;
&lt;p&gt;​    缺</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(5)【链表】环形链表II(C语言)</title>
    <link href="http://example.com/2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/06/LeetCode%E5%88%B7%E9%A2%98(5)%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-05T17:23:30.000Z</published>
    <updated>2021-06-11T13:01:10.448Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环形链表I</strong></p><p><a href="https://blog.csdn.net/qq_51604330/article/details/117334723?spm=1001.2014.3001.5501">LeetCode刷题(3)【链表】【环形链表】&amp;扩展_半生瓜のblog-CSDN博客</a></p><hr><p><strong>环形链表</strong>II</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>这个题写起来不难，但是证明有点麻烦。</p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184927049.png" alt="image-20210605184927049"></p><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210605184933830.png" alt="image-20210605184933830"></p><hr><p>针对这个入口点怎么求，有人给出了一个结论。</p><p>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。（看下面的过程的时候，先别想这个结论，否则会越来越乱的，就先当不知道。）</p><hr><p><img src="/images/leetcode%E5%88%B7%E9%A2%98-5.assets/image-20210606005633219.png" alt="image-20210606005633219"></p><p>fast走的路程是slow走的路程的2倍。</p><p>slow走的路程：slow进环了以后，在一圈之内，fast一定会追上slow。因为slow走了一圈，fast都走两圈了。</p><p>slow进环之前，fast有可能在环里面转了N圈，如果入环之前的长度越长，环很小，N越大， 如果入环前的长度越短，环很大，N就是1，fast只转了1圈。</p><p>fast走的路程： L + C*N + X</p><p>slow走的路程：L + X</p><p>fast = 2*slow</p><p>L + C*N + X = 2(L +X)   </p><p>化简一下得：</p><p>C* N - X = L</p><p>再化简一下得：<br>(N-1)* C + C - X = L </p><p>C - X就是meet点到入口点的距离。</p><p>再看这个结论。</p><p><strong>结论：一个指针从meet点开始走，一个指针从链表的开始点走，它们会在入口点相遇。</strong></p><p>理解一下，就是一个指针从meet点出发，转转转了N-1圈，在走了一个C-X到达入口点，发生相遇。</p><p><strong>代码实现：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct ListNode *<span class="title">detectCycle</span><span class="params">(struct ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">slow</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">fast</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        <span class="comment">//找到相遇点</span></span><br><span class="line">        <span class="keyword">if</span>(fast == slow)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//相等即为相遇点</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">meet</span> =</span>  slow;</span><br><span class="line">            <span class="comment">//一个指针从meet走，一个指针从head走，他们会在入口点相遇</span></span><br><span class="line">            <span class="keyword">while</span>(head != meet)</span><br><span class="line">            &#123;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                meet = meet-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> meet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;环形链表I&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_51604330/article/details/117334723?spm=1001.2014.3001.5501&quot;&gt;LeetCode刷题(3)</summary>
      
    
    
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题(4)移除元素&amp;合并两个有序数组(C语言)</title>
    <link href="http://example.com/2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/05/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&amp;%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-05T08:03:54.000Z</published>
    <updated>2021-06-11T13:01:04.795Z</updated>
    
    <content type="html"><![CDATA[<p><strong>移除元素</strong></p><p>典型双指针玩法。</p><p><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素 - 力扣（LeetCode） (leetcode-cn.com)</a></p><hr><p>我们都会想到这样的解法：从前面依次往后推，是val就将该数据后面的元素依次覆盖上来，但是这样的时间复杂度是O(n²)，最坏的结果是一个数组中大部分数据都是val。</p><p>所以我们想到另一种解法，以空间换时间 ，另开一个数组，把不是val的数据给新的数组，再把新数组的值拷贝回来。空间复杂度是O(n)。</p><p>但是这个题它不让开辟一个新的数组，所以我们还得换一个思路。</p><hr><p>该思路空间复杂度为O(n),时间复杂度为O(1)。——<strong>双指针解法</strong></p><p>定义两个指针，p1和p2，p1先动，p2后动，如果p1不等于val，就把值传给p2,直到完成一遍遍历，p2的值就是新数组元素的个数。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140450655.png" alt="image-20210605140450655"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605140910200.png" alt="image-20210605140910200"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//p1和p2都从数组左边出发</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果p1(对应的值)不等于val</span></span><br><span class="line">        <span class="keyword">if</span>(nums[p1] != val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将p1的值赋给p2</span></span><br><span class="line">            nums[p2] = nums[p1];</span><br><span class="line">            <span class="comment">//往后面++</span></span><br><span class="line">            p1++;</span><br><span class="line">            p2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//p1(对应的值)等于val</span></span><br><span class="line">        <span class="comment">//只有p1走</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是p1在前面开路，p2在后面跟着，同时出发，p1遇到val就跳过，p2就停住,当p1没遇到val的时候将p1的值给p2，（就把p1位置的val值覆盖了）,然后p1，p2都往后走一位……</p><p><strong>合并两个有序数组</strong></p><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605142621467.png" alt="image-20210605142621467"></p><p>可以把num2直接放到num1后面，然后再进行升序排列，只不过效率有点低了。</p><p>所以我们采用下面这种解法。</p><p>num1和num2都从后往前走，取大的往后面放。</p><p><strong>如图所示：</strong></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155039383.png" alt="image-20210605155039383"></p><p><img src="/images/LeetCode%E5%88%B7%E9%A2%98(4)%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0&%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.assets/image-20210605155125941.png" alt="image-20210605155125941"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//题目所给的nums1Size和num2Size没用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end1 = m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end2 = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = m+n<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//end1和end2都还没有结束</span></span><br><span class="line">    <span class="keyword">while</span>(end1 &gt;= <span class="number">0</span> &amp;&amp; end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把他们两个中大的放在后面</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[end1] &gt; nums2[end2])</span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums1[end1];</span><br><span class="line">            end--;</span><br><span class="line">            end1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums1[end] = nums2[end2];</span><br><span class="line">            end--;</span><br><span class="line">            end2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果end2先结束，就是num2里面已经没有元素了，那就不需要处理了，因为就是往num1里面放的</span></span><br><span class="line">    <span class="comment">//但是，如果是end1先结束了，还需要处理一下，因为此时num2里面还有元素没有放进num1里面</span></span><br><span class="line">    <span class="keyword">while</span>(end2 &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nums1[end] = nums2[end2];</span><br><span class="line">        end--;</span><br><span class="line">        end2--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;移除元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;典型双指针玩法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-element/&quot;&gt;27. 移除元素 - 力扣（LeetCode） (leetcode</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="-数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【线性表】之顺序表</title>
    <link href="http://example.com/2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/05/%E3%80%90%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%91%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-05T05:13:55.000Z</published>
    <updated>2021-06-05T05:34:10.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表(linear list)是n个具有相同特性元素的有限序列 。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链表、栈、队列、字符串……</p><p>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的，线性表在物理上存储时，通常以数组和链式结构的形式存储。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>它是最简单的数据结构，也是最常用的数据结构——他的作用就是将数据存起来。</p><p>概念：顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p><p>顺序表一般可分为：</p><p>1.静态顺序表：使用定长数据存储。</p><p>2.动态顺序表：使用动态开辟的数组存储。</p><p><strong>下面的代码实现的是动态顺序表</strong></p><h2 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SeqListDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SeqListDataType* arry;<span class="comment">//指向动态开辟的数组</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//数组中有效数据的个数(在数组中说就是最后一个数据的下一个位置，因为数组下标是从0开始的)</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//容量空间的大小</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8.assets/image-20210605131238279.png" alt="image-20210605131238279"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInit</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;<span class="comment">//可以一上来就给空间，也可以不给空间</span></span><br><span class="line">ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">ps-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><p>严格来说空间用完之后就要销毁，如果malloc开辟的空间不销毁就会存在内存泄漏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListDestory</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(ps-&gt;arry);</span><br><span class="line">ps-&gt;arry = <span class="literal">NULL</span>;</span><br><span class="line">ps-&gt;capacity = ps-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPrint</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ps-&gt;arry[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展空间"><a href="#扩展空间" class="headerlink" title="扩展空间"></a>扩展空间</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListCheckCapacity</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果数组满了——有效的数据个数等于空间容量的总大小</span></span><br><span class="line"><span class="keyword">if</span> (ps-&gt;size == ps-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//要注意如果满了，就进行扩容，在原来基础上*2，但是开始的空间是0，</span></span><br><span class="line"><span class="comment">//0*2还是0,所以开始插入的时候要加一个判断</span></span><br><span class="line"><span class="comment">//如果开始的空间是0，那么就给他赋值4，之后就不是0了，就给他*2</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = ps-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : ps-&gt;capacity * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//realloc扩充原来开辟好的空间</span></span><br><span class="line"><span class="comment">//如果原来的空间在原来的地方是空，那就他是直接申请一个新的空间就跟malloc是一样的。</span></span><br><span class="line">SeqListDataType* tmp = (SeqListDataType*)<span class="built_in">realloc</span>(ps-&gt;arry, newCapacity * <span class="keyword">sizeof</span>(SeqListDataType));</span><br><span class="line"><span class="comment">//如果扩容失败，给予提示</span></span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;realloc is fail!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//把扩充好的数组传给arry</span></span><br><span class="line">ps-&gt;arry = tmp;</span><br><span class="line">ps-&gt;capacity = newCapacity;<span class="comment">//空间容量大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushBack</span><span class="params">(SeqList* ps,SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line">    <span class="comment">//顺序表中的数据要依次存储</span></span><br><span class="line">ps-&gt;arry[ps-&gt;size] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPushFront</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//同尾插-空间不够了需要增容</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//从后开始挪</span></span><br><span class="line"><span class="comment">//注意初识条件-结束条件-迭代过程</span></span><br><span class="line"><span class="comment">//先找到最后一个位置</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[<span class="number">0</span>] = x;</span><br><span class="line">ps-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopBack</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);<span class="comment">//等于0直接报错，比较粗暴。</span></span><br><span class="line"><span class="comment">//下面这行代码没用，因为了顺序表中具体的数据个数是由size决定的</span></span><br><span class="line"><span class="comment">//把这个位置置 成0，万一这个位置本来就是0呢，或者这个位置的数据类型不是int，是double呢，置成0也不合适，没有意义。</span></span><br><span class="line"><span class="comment">//ps-&gt;arry[ps-&gt;size - 1] = 0;</span></span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListPopFront</span><span class="params">(SeqList* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//检查一下还有没有元素，没有就别删了</span></span><br><span class="line">assert(ps-&gt;size &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//就是用后面的元素将前面的元素给覆盖了，每次消失的都是第一个，其他的依次向前推</span></span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置插入数据"><a href="#在指定位置插入数据" class="headerlink" title="在指定位置插入数据"></a>在指定位置插入数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInsert</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);<span class="comment">//大于就报错</span></span><br><span class="line"><span class="comment">//思路：先创建空间，利用循环找到pos这个位置，将元素放入数组，size+1</span></span><br><span class="line"><span class="comment">//创建空间</span></span><br><span class="line">SeqListCheckCapacity(ps);</span><br><span class="line"><span class="comment">//找到最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> end = ps-&gt;size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//依次往后推移一位，</span></span><br><span class="line">ps-&gt;arry[end + <span class="number">1</span>] = ps-&gt;arry[end];</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">ps-&gt;capacity++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListErase</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line"><span class="comment">//被删除元素后面的位置</span></span><br><span class="line"><span class="keyword">int</span> start = pos + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; ps-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;arry[start - <span class="number">1</span>] = ps-&gt;arry[start];</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFind</span><span class="params">(SeqList* ps, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//找到返回下标，找不到返回-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;arry[i] == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListModity</span><span class="params">(SeqList* ps, <span class="keyword">int</span> pos, SeqListDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pos &lt; ps-&gt;size);</span><br><span class="line">ps-&gt;arry[pos] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;线性表(linear list)是n个具有相同特性元素的有限序列 。线性表是一种在实际中广泛使用的数据结构，常见的线性表：顺序表、链</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表】单链表的实现</title>
    <link href="http://example.com/2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0(C%E8%AF%AD%E8%A8%80)/"/>
    <id>http://example.com/2021/06/02/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0(C%E8%AF%AD%E8%A8%80)/</id>
    <published>2021-06-02T03:13:29.000Z</published>
    <updated>2021-06-02T03:23:49.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.assets/image-20210602112335408.png" alt="image-20210602112335408"></p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建结点"><a href="#创建结点" class="headerlink" title="创建结点"></a>创建结点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾删"><a href="#尾删" class="headerlink" title="尾删"></a>尾删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头删"><a href="#头删" class="headerlink" title="头删"></a>头删</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>下面的删除和插入都要在先在链表中找到为前提。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在指定位置前插入某个数据"><a href="#在指定位置前插入某个数据" class="headerlink" title="在指定位置前插入某个数据"></a>在指定位置前插入某个数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除指定位置数据"><a href="#删除指定位置数据" class="headerlink" title="删除指定位置数据"></a>删除指定位置数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SLTDataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SLTDataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;SLTNode;</span><br><span class="line"><span class="comment">//改变头结点的传2级指针，不改变的传1级指针</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPrint</span><span class="params">(SLTNode* phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* cur = phead;</span><br><span class="line"><span class="keyword">while</span> (cur !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTCreat</span><span class="params">(SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* newnode = (SLTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SLTNode));</span><br><span class="line">newnode-&gt;data = x;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushBack</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//如果是空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPushFront</span><span class="params">(SLTNode** pphead, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建新结点</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line">newnode-&gt;next = *pphead;</span><br><span class="line">*pphead = newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopBack</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">if</span> (*pphead == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表中只有一个结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*pphead)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line">*pphead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个以上结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到尾结点</span></span><br><span class="line">SLTNode* tail = *pphead;</span><br><span class="line"><span class="comment">//找到尾结点的前一个结点</span></span><br><span class="line">SLTNode* tailPrev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tailPrev = tail;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(tail);</span><br><span class="line">tailPrev-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTPopFront</span><span class="params">(SLTNode** pphead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果直接free pphead就会找不到后面的结点了</span></span><br><span class="line"><span class="comment">//先保存下一个</span></span><br><span class="line">SLTNode* ppheadNext = (*pphead)-&gt;next;<span class="comment">//这里要加一个括号，因为*和-&gt;都是解引用，*是对任意的指针都可以解引用，取它指向的这个位置的数据，什么类型的指针就取几个字节，-&gt;是结构体的，这时候他们两个的优先级是一样的。</span></span><br><span class="line"><span class="built_in">free</span>(*pphead);</span><br><span class="line"><span class="comment">//这时候第一个数据就是之前第二个数据了</span></span><br><span class="line">*pphead = ppheadNext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">SLTNode* <span class="title">SLTFind</span><span class="params">(SLTNode* phead,SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* pos = phead;</span><br><span class="line"><span class="keyword">while</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (pos-&gt;data == x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line">pos = pos-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在pos前插入某个数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTInsert</span><span class="params">(SLTNode** pphead,SLTNode* pos, SLTDataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果在第一个结点前插入数据</span></span><br><span class="line"><span class="comment">//那就是头插，直接调用头插的函数</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPushFront(pphead,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建一个新结点来存放新的数据</span></span><br><span class="line">SLTNode* newnode = SLTCreat(x);</span><br><span class="line"><span class="comment">//要在pos前面插入newnode,就得先找到pos前面的内个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链接起来</span></span><br><span class="line">posPrev-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除pos位置的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SLTErase</span><span class="params">(SLTNode** pphead, SLTNode*pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当删除第一个结点的时候，无法找到他的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (pos == *pphead)</span><br><span class="line">&#123;</span><br><span class="line">SLTPopFront(pphead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单链表每次老是要寻找前一个结点</span></span><br><span class="line">SLTNode* posPrev = *pphead;</span><br><span class="line"><span class="keyword">while</span> (posPrev-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">posPrev = posPrev-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">posPrev-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SLTNode* plist = <span class="literal">NULL</span>;</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">0</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">2</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">3</span>);</span><br><span class="line">SLTPushBack(&amp;plist, <span class="number">4</span>);</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line">SLTNode* pos = SLTFind(plist, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明找到了</span></span><br><span class="line">SLTErase(&amp;plist, pos);</span><br><span class="line">&#125;</span><br><span class="line">SLTPrint(plist);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/%E3%80%90%E9%93%BE%E8%A1%A8%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.assets/image-202106021123354</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
