<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-06T10:34:33.495Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认识各种图</title>
    <link href="http://example.com/2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/"/>
    <id>http://example.com/2021/05/06/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE/</id>
    <published>2021-05-06T10:13:06.000Z</published>
    <updated>2021-05-06T10:34:33.495Z</updated>
    
    <content type="html"><![CDATA[<hr><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=55">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><ul><li><p>图按照有无方向分为<strong>无向图</strong>和有向图。</p><ul><li>无向图由定点和边构成。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162522098.png" alt="image-20210506162522098"></p><ul><li>有向图由定点和弧构成，弧有弧尾和弧头之分。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162528354.png" alt="image-20210506162528354"></p></li><li><p>如果任意两个顶点之间都存在边叫做<strong>完全图</strong>。</p><ul><li>无向的叫做<strong>无向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506162751354.png" alt="image-20210506162751354"></p><ul><li>有向的叫做<strong>有向完全图</strong>。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170101163.png" alt="image-20210506170101163"></p></li><li><p>图按照边或弧的多少分为<strong>稀疏图</strong>和稠密图。</p><ul><li>都是相对而言的多少。</li></ul></li><li><p>若无重复的变到自身的边叫做<strong>简单图</strong>。</p><p><strong>反例</strong>：下面这两个图都不是简单图。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163031340.png" alt="image-20210506163031340"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163047070.png" alt="image-20210506163047070"></p></li><li><p>图和顶点之间有邻接点、依附的概念。</p></li><li><p>无向图顶点的边数叫做度，有向图顶点分入度和出度。</p><p>（入度：有几个箭头指向这个顶点，出度：指向几个顶点。）</p></li><li><p>图上的边或弧上带权则称为网。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163216486.png" alt="image-20210506163216486"></p><ul><li><p>图中顶点间存在路径，两顶点存在路径则说明是连通的。</p><ul><li>例如：由B到D在无向图上有四种不同的路径。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506163830914.png" alt="image-20210506163830914"></p></li><li><p>在有向图上由B到D有两种路径。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164007180.png" alt="image-20210506164007180"></p><ul><li><p>如果路径最终回到起始点则称为环，当中不重复叫简单环。</p><ul><li>简单环</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164241631.png" alt="image-20210506164241631"></p><ul><li>不是简单环，顶点C重复了。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164329827.png" alt="image-20210506164329827"></p></li><li><p>若任意两顶点都是连通的，则图就是<strong>连通图</strong>。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164424476.png" alt="image-20210506164424476"></p><ul><li>不连通图</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506164831080.png" alt="image-20210506164831080"></p><ul><li>有向则称为强连通图。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506165613351.png" alt="image-20210506165613351"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506170130769.png" alt="image-20210506170130769"></p><p><strong>（结合上面的有向完全图，我们不难发现，有向完全图就是强连通图，因为它任意两个定点间都有是连通的，但是强连通图不一定是有完全向图，因为有向完全图需要任意两个顶点间有相反的两条路径。）</strong></p><ul><li><p>连通分量强调：</p><ul><li>要是子图；</li><li>子图是连通的；</li><li>连通子图含有极大顶点数；<strong>极大顶点数就是最大连通子图上的顶点数量。</strong></li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul></li><li><p>无向图中的极大连通子图称为连通分量，有向的则称为<strong>强连通分量</strong>。</p><ul><li>非连通图的连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506172939981.png" alt="image-20210506172939981"></p><p>​    它的连通分量</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173010623.png" alt="image-20210506173010623"></p><ul><li>有向但是非强连通图的(极大)强连通分量。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173231860.png" alt="image-20210506173231860"></p><p>它的强连通分量。</p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506173330999.png" alt="image-20210506173330999"></p></li></ul></li><li><p><strong>连通生成树。</strong></p><ul><li>所谓的连通图的生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一个树的n-1条边。</li><li>无向图的连通生成树。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506180115966.png" alt="image-20210506180115966"></p><ul><li><p>有向图恰<strong>有一个顶点的入度为0，其余顶点的入度为1，</strong>则是一棵有向树。</p><p>例如下面这两棵有向树。</p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174842218.png" alt="image-20210506174842218"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506174924663.png" alt="image-20210506174924663"></p></li><li><p>一个有向图由若干棵有向树构成生成<strong>森林</strong>。</p><ul><li>一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但只有足以构成若干棵不相交的有向树的弧</li><li>例如：一下三张图，图1是一棵有向图。去掉一些弧之后，它可以分解为两课有向树，如图2和图3，这两棵就是图1有向图的生成森林。</li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181019760.png" alt="image-20210506181019760"></p><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181102303.png" alt="image-20210506181102303"></p></li></ul><p><img src="/images/%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%9B%BE.assets/image-20210506181109968.png" alt="image-20210506181109968"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1jW411K7yg?p=55&quot;&gt;【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关书籍——《大话数据结构</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼树及其应用</title>
    <link href="http://example.com/2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2021/05/06/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</id>
    <published>2021-05-06T02:48:47.000Z</published>
    <updated>2021-05-06T02:54:31.460Z</updated>
    
    <content type="html"><![CDATA[<p>前言:</p><p>最基本的压缩编码方法——赫夫曼(huffman)编码。</p><p>在了解赫夫曼编码之前，我们必须了解一下赫夫曼树，赫夫曼编码就是基于赫夫曼树实现的。</p><p>相关视频——<a href="https://www.bilibili.com/video/BV1jW411K7yg?p=52">【C语言描述】《数据结构和算法》_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>相关书籍——《大话数据结构》</p><hr><h1 id="1-赫夫曼树的定义与原理"><a href="#1-赫夫曼树的定义与原理" class="headerlink" title="1.赫夫曼树的定义与原理"></a>1.赫夫曼树的定义与原理</h1><ul><li><p>结点的路径长度</p><ul><li>-从根节点到该结点的路径上的连接数。</li></ul></li><li><p>数的路径长度</p><ul><li>-树中每个叶子结点的路径长度之和。</li></ul></li><li><p>结点带权路径长度</p><ul><li>-结点的路径长度与结点权值的乘积。</li></ul></li><li><p>树的带权路径长度(WPL)</p><ul><li>-是树中所有叶子结点的带权路径长度之和。</li></ul></li><li><p>(数结点间的连线相关的数叫做权，Weight)</p></li></ul><hr><p><strong>其中：带权路径长度（WPL）最小的二叉树叫做赫夫曼树。</strong></p><p><strong>带权路径长度(WPL)的值越小，说明构造出来的二叉树性越优。</strong></p><hr><h1 id="2-构造赫夫曼树的过程"><a href="#2-构造赫夫曼树的过程" class="headerlink" title="2.构造赫夫曼树的过程"></a>2.构造赫夫曼树的过程</h1><p>初识森林</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204148343.png" alt="image-20210505204148343"></p><p>在森林中选出两棵根节点的权值最小的二叉树，小的放左边，大的放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204302270.png" alt="image-20210505204302270"></p><p>合并两颗选出的二叉树，增加一个新结点作为新二叉树的根，权值为左右孩子的权值之和。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204501617.png" alt="image-20210505204501617"></p><p>再从剩下的森林里面选出权值最小的二叉树，如果比第一次合并的结点权值小就放左边，反之，放右边。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204621908.png" alt="image-20210505204621908"></p><p>再次进行合并。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204703975.png" alt="image-20210505204703975"></p><p>第二次合并完成，第三次合并同理。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505204752864.png" alt="image-20210505204752864"></p><p>合并完成，这个二叉树就是赫夫曼树。</p><h1 id="3-赫夫曼编码原理"><a href="#3-赫夫曼编码原理" class="headerlink" title="3.赫夫曼编码原理"></a>3.赫夫曼编码原理</h1><hr><p>补充：</p><p>赫夫曼研究这种最优树的目的是为了解决当年远距通信(主要是电报)的数据传输的最优化问题。</p><hr><p><strong>名词解释：</strong></p><ul><li>定长编码<ul><li>-像ASCII编码，用八位二进制数来表示一个字符。</li></ul></li><li>变长编码<ul><li>-单个编码的长度不一致，可以根据整体频率来调节。</li></ul></li><li>前缀码<ul><li>-所谓的前缀码，就是没有任何码字是其他码字的前缀。</li></ul></li></ul><hr><p><strong>编码过程（encode）：</strong>还是利用上面的赫夫曼二叉树。</p><p>上图为构造赫夫曼树的过程权值显示。</p><p>下图为将权值左支改为0，右支改为1后的赫夫曼树。</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210353927.png" alt="image-20210505210353927"></p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.assets/image-20210505210746239.png" alt="image-20210505210746239"></p><p>我们对这4个字母(ABCD)用其从树根到叶子所经过路径0或1来进行编码。</p><p>例如原文字内容是ABCD。</p><p><strong>原编码二进制串：000001010011</strong>(共12个字符)</p><p><strong>新编码二进制串：010110111</strong>(共9 个字符)</p><p>也就是说我们的数据被压缩了，节约了25%的存储空间或者传输成本，随着字符的增加和字符权重的不同，这种压缩会更加显出其优势。</p><hr><p><strong>解码过程（decode）：</strong></p><p>发送方和接收方必须要约定好同样的赫夫曼编码规则，由约定好的赫夫曼树可以成功解码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言:&lt;/p&gt;
&lt;p&gt;最基本的压缩编码方法——赫夫曼(huffman)编码。&lt;/p&gt;
&lt;p&gt;在了解赫夫曼编码之前，我们必须了解一下赫夫曼树，赫夫曼编码就是基于赫夫曼树实现的。&lt;/p&gt;
&lt;p&gt;相关视频——&lt;a href=&quot;https://www.bilibili.com/vi</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树理论基础</title>
    <link href="http://example.com/2021/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-29T11:55:53.000Z</published>
    <updated>2021-04-29T12:17:41.464Z</updated>
    
    <content type="html"><![CDATA[<hr><p>推荐视频——<a href="https://www.bilibili.com/video/BV1Hy4y1t7ij">关于二叉树，你该了解这些！| 二叉树理论基础一网打尽，二叉树的种类、二叉树的存储方式、二叉树节点定义、二叉树的遍历顺序_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>理论基础，这些都是我们平时刷题应该掌握的内容。</p><p>把基础打牢了，有了逻辑基础，学的才会更好一些。</p><hr><h1 id="1-二叉树的种类"><a href="#1-二叉树的种类" class="headerlink" title="1.二叉树的种类"></a>1.二叉树的种类</h1><h2 id="1-满二叉树"><a href="#1-满二叉树" class="headerlink" title="1.满二叉树:"></a>1.满二叉树:</h2><ul><li>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树叫做满二叉树。</li><li>结点数量2^k-1</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429175608363.png" alt="image-20210429175608363"></li></ul><h2 id="2-完全二叉树"><a href="#2-完全二叉树" class="headerlink" title="2.完全二叉树"></a>2.完全二叉树</h2><ul><li>除了底层以外，其它层都是满的，底层是从左到右连续的。</li><li>这个是二叉树</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429180224698.png" alt="image-20210429180224698"></li><li>这个就不是二叉树，底层不连续。</li><li><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429180259535.png" alt="image-20210429180259535"></li></ul><hr><p><strong>满二叉树一定是一棵完全二叉树，但完全而二叉树不一定是满的。</strong></p><hr><h2 id="3-二叉搜索树"><a href="#3-二叉搜索树" class="headerlink" title="3.二叉搜索树"></a>3.二叉搜索树</h2><ul><li><p>在它里面的结点顺序，左子树的所有结点都小于中间结点，右子树的所有结点都大于中间结点。</p></li><li><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429181442803-1619691288466.png" alt="image-20210429181442803"></p></li><li><p>二叉搜索树对结点的布局是没有要求的，元素有顺序就可以。</p></li><li><p>平衡二叉搜索树</p><ul><li>左子树和右子树的高度差不能超过1。</li></ul></li></ul><h1 id="2-二叉树的存储方式"><a href="#2-二叉树的存储方式" class="headerlink" title="2.二叉树的存储方式"></a>2.二叉树的存储方式</h1><h2 id="1-顺序存储"><a href="#1-顺序存储" class="headerlink" title="1.顺序存储"></a>1.顺序存储</h2><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429184344211.png" alt="image-20210429184344211"></p><p>用这个字符数组来保存二叉树。</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429184437352.png" alt="image-20210429184437352"></p><p>*<em>2</em>i+1——左孩子，2 <em>i+2——右孩子。</em>*</p><h2 id="2-链式存储"><a href="#2-链式存储" class="headerlink" title="2.链式存储"></a>2.链式存储</h2><p>一般用的都是链式存储。</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429185353229.png" alt="image-20210429185353229"></p><h1 id="3-二叉树的遍历"><a href="#3-二叉树的遍历" class="headerlink" title="3.二叉树的遍历"></a>3.二叉树的遍历</h1><hr><p><strong>扩展：</strong></p><ul><li>深度优先搜索：一般都是用递归的方式来实现的，前序遍历，中序遍历，后序遍历，都是深度优先搜索。(迭代法也可以实现前中后序，非递归的方式。)</li><li>广度优先搜索：一层一层的去遍历，或者是一圈一圈的去遍历。层序遍历就是广度优先搜索的一种。</li></ul><hr><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.assets/image-20210429193726478.png" alt="image-20210429193726478"></p><p>前序遍历：<strong>中左右。</strong>5412678</p><p>中序遍历：左中右。4125768</p><p>后序遍历：左右中。1247865</p><h1 id="4-二叉树结点的定义"><a href="#4-二叉树结点的定义" class="headerlink" title="4.二叉树结点的定义"></a>4.二叉树结点的定义</h1><p><strong>将二叉树理解为一个链表就会简单很多。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> val;<span class="comment">//放数值</span></span><br><span class="line">   TreeNode* left;</span><br><span class="line">   TreeNode* right;</span><br><span class="line">    <span class="comment">//实现一个构造函数，在new一个结点的时候，方便对其进行初始化。</span></span><br><span class="line">   TreeNode(t):val:t,left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;推荐视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1Hy4y1t7ij&quot;&gt;关于二叉树，你该了解这些！| 二叉树理论基础一网打尽，二叉树的种类、二叉树的存储方式、二叉树节点定义、二叉树的遍历顺序_哔哩哔哩 (゜-゜)つロ</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://example.com/2021/04/28/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/04/28/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2021-04-28T04:07:37.000Z</published>
    <updated>2021-04-28T15:40:18.636Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>强烈推荐Carl老哥的视频！！！</strong></p><p>多看几遍肯定是可以学会的。</p><p>理论篇——<a href="https://www.bilibili.com/video/BV1PD4y1o7nd">帮你把KMP算法学个通透！（理论篇）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>求Next数组代码篇——<a href="https://www.bilibili.com/video/BV1M5411j7Xx?t=133">帮你把KMP算法学个通透！（求next数组代码篇）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><hr><h1 id="1-什么是KMP算法"><a href="#1-什么是KMP算法" class="headerlink" title="1.什么是KMP算法"></a>1.什么是KMP算法</h1><p>​        KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。(百度百科)</p><h1 id="2-KMP算法能解决哪些问题"><a href="#2-KMP算法能解决哪些问题" class="headerlink" title="2.KMP算法能解决哪些问题"></a>2.KMP算法能解决哪些问题</h1><p><strong>解决字符串匹配问题</strong>    </p><p>给出文本串和模式串，用两层for循环进行匹配，进行暴力匹配，时间复杂度是O(m,n).其中m是模式串长度，n是文本串长度。</p><h1 id="3-KMP算法是如何运行的"><a href="#3-KMP算法是如何运行的" class="headerlink" title="3.KMP算法是如何运行的"></a>3.KMP算法是如何运行的</h1><p>给出两个要匹配的串，<strong>文本串和模式串。</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427205533964.png" alt="image-20210427205533964"></p><p><strong>第一次匹配</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427205812823.png" alt="image-20210427205812823"></p><p><strong>第二次匹配</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/image-20210427210037607.png" alt="image-20210427210037607"></p><p><strong>跳到b处继续进行匹配</strong>。</p><p><strong>这就是KMP算法。</strong></p><h1 id="4-KMP算法是如何进行跳的"><a href="#4-KMP算法是如何进行跳的" class="headerlink" title="4.KMP算法是如何进行跳的"></a>4.KMP算法是如何进行跳的</h1><p>用到了很重要的表——<strong>前缀表。</strong></p><p>那么，KMP算法为什么不用hash表或者其它表呢?</p><hr><p><strong>前缀表的特性：</strong></p><ul><li><p><strong>如何实现：当进行到不匹配的元素时，找到该元素前面的字串，找到一组相等的前后缀，在该前缀的后面进行第二次匹配，就跳过去了。其实就是找最长相等前后缀的长度，从这个以这个长度为下标的元素开始进行匹配。</strong></p></li><li><p><strong>前缀：包括首元素不包括尾元素的所有字串，都称为前缀。</strong></p></li><li><p><strong>后缀：包括尾元素不包括首元素的所有字串，都称为后缀。</strong></p></li></ul><hr><h1 id="5-如何求取前缀表"><a href="#5-如何求取前缀表" class="headerlink" title="5.如何求取前缀表"></a>5.如何求取前缀表</h1><ul><li><p>  求最长相等(公共)前后缀</p></li><li><p>a的最长相等(公共)前后缀是0</p><p>aa的最长相等(公共)前后缀是1</p><p>aab的最长相等(公共)前后缀是0</p></li></ul><p>  ​    aaba的最长相等(公共)前后缀是1</p><p>  ​    aabaa的最长相等(公共)前后缀是2</p><p>  ​    aabaaf的最长相等(公共)前后缀是0</p><p>  ​    <strong>所以得出此模式串的前缀表是010120</strong></p><ul><li>得到最长相等(公共)前后缀是2<ul><li>2意味着：这里有一个后缀aa,前面有一个与其相等的前缀aa。</li><li>在后缀(aa)的后面(是f)后面不匹配(冲突)了。</li><li>就找与其相等的前缀(前面那个aa)后面那个元素(b)开始匹配。</li><li>(其实就是从最长相等前后缀的长度下标开始。)</li><li>(此模式串最长相等前后缀是2，就从该模式串下标为2的元素开始匹配。)</li><li>(2表示的是最长相等前后缀的长度，我们要跳到前缀的后面，前缀的后面的下标正好是前缀的长度，因为串的下标是从0开始的。)</li></ul></li><li>匹配成功,完成匹配过程。</li></ul><hr><p><strong>流程图:</strong></p><p><img src="/images/KMP%E7%AE%97%E6%B3%95.assets/kmpsuanfa.png"></p><hr><h1 id="6-KMP算法的实现"><a href="#6-KMP算法的实现" class="headerlink" title="6.KMP算法的实现"></a>6.KMP算法的实现</h1><p>有的做法会将前缀表进行一些调整，但总的思想是相同的。</p><p>有的用next数组，有的用perfix，这里用的Next数组。</p><p><strong>碰到了冲突的位置，我们要向前回退，这是Next数组的核心所在。</strong></p><p>对于实现，不同的人有不同的方法。</p><p>这里就用前缀表作为我们的Next数组。</p><p>求出来的Next数组就是该模式串的前缀表。</p><p>那么具体的代码应该怎么写呢？</p><hr><p><strong>明确求Next数组有几个步骤<br>    1.初始化<br>    2.处理前后缀不同的情况<br>    3.处理前后缀不相同的情况<br>    4.更新Next数组的值</strong></p><hr><p>**j指向前缀末尾位置(还代表着i之前包括i,字串的最长相等前后缀的长度)**。</p><p><strong>i指向后缀末尾位置。</strong></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span>* next,<span class="keyword">const</span> <span class="built_in">string</span>&amp;S)</span><span class="comment">//S为模式串，（此代码类似于伪代码）</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//1.初始化</span></span><br><span class="line">   <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//j初始化为0，前缀一开始是从开始的位置开始。</span></span><br><span class="line">    next[<span class="number">0</span>];<span class="comment">//next数组初始位置也是0。</span></span><br><span class="line">    <span class="comment">//初始化完成</span></span><br><span class="line">    <span class="comment">//i的初始化就进入到我们的循环遍历里了</span></span><br><span class="line">    <span class="comment">//因为要比较前后缀所对应的字符是否相等，那i就应该是从1开始，这样i和j才能进行比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;S.size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2.处理前后缀不相同情况</span></span><br><span class="line">        <span class="comment">//遇到不匹配看前一位 </span></span><br><span class="line">        <span class="comment">//这里的while容易写成if，我们回退的过程并不是一步就完事的</span></span><br><span class="line">        <span class="comment">//要判断前一位所以j&gt;0 </span></span><br><span class="line">        <span class="comment">//否则产生负数会造成数组越界</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; S[i] != S[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.处理前后缀相同的情况</span></span><br><span class="line">        <span class="comment">//这时候j应该+1，因为j不仅代表着前缀末尾的位置，还代表着i以及i之前这个字串的最长相等前后缀的长度。</span></span><br><span class="line">        <span class="keyword">if</span>(S[i] == S[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j++;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新Next数组</span></span><br><span class="line">        next[i] = j;</span><br><span class="line">        <span class="comment">//在循环里面,i++，向后面走一位</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;强烈推荐Carl老哥的视频！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多看几遍肯定是可以学会的。&lt;/p&gt;
&lt;p&gt;理论篇——&lt;a href=&quot;https://www.bilibili.com/video/BV1PD4y1o7nd&quot;&gt;帮你把KMP算法学个通</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础知识总结</title>
    <link href="http://example.com/2021/04/27/JAVA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/04/27/JAVA%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-27T08:33:32.000Z</published>
    <updated>2021-04-27T10:01:35.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JAVA基础"><a href="#1-JAVA基础" class="headerlink" title="1.JAVA基础"></a>1.JAVA基础</h1><h2 id="1-Hello-world"><a href="#1-Hello-world" class="headerlink" title="1. Hello world"></a>1. Hello world</h2><p><strong>psvm自动生成方法</strong></p><p>**sout自动生成system out **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello sb!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><p><strong>单行注释：</strong>//</p><p><strong>多行注释：</strong>  /**/</p><p><strong>文档注释：</strong>JavaDoc /** * * * */(用处不大)</p><h2 id="3-标识符和关键字"><a href="#3-标识符和关键字" class="headerlink" title="3.标识符和关键字"></a>3.标识符和关键字</h2><p><strong>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210412205124735.png" alt="image-20210412205124735"></p><ul><li>所有的字标识符都应该以字母(A-Z,a-z)、美元符($)、或者下划线(_)开始。</li><li>首字符之后可以是(A-Z,a-z)、美元符($)、下划线(_)或数字的任何字符组合</li><li><strong>不能使用关键字作为变量名或方法名</strong></li><li>标识符是大小敏感的(<strong>区分大小写</strong>)</li><li>可以使用中文命名，但是一般不建议，也不建议使用拼音，sb</li></ul><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h2><p><strong>强类型语言：</strong>要求变量的使用要严格符合规定，所有变量必须先定义之后才能使用。</p><p>(安全、严谨、避免很多错误)</p><p><strong>弱类型语言：</strong>随便定义</p><p><strong>Java的数据类型分为两大类：</strong></p><ul><li><p>基本类型 -数值类型-整数类型-byte-short-int-long</p><p>​                                    -浮点类型-float-double</p><p>​                                    -字符类型-char</p><p>​                 -boolean类型//默认true（if）</p></li><li><p>引用类型 - 类</p><p>​                 -接口</p><p>​                 -数组</p></li></ul><p><strong>数据类型+变量名+值     可以使用逗号隔开来声明多个同类型的变量。</strong></p><p><strong>转义字符：</strong></p><p><strong>变量：</strong>就是可以变化的量</p><p>​            Java是一种强类型语言，每个变量都必须声明其类型</p><p>​            Java变量程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><hr><h2 id="5-类型转换"><a href="#5-类型转换" class="headerlink" title="5.类型转换"></a>5.类型转换</h2><p>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换。</p><p><strong>运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><ul><li>强制类型转换</li></ul><p><strong>从高-低</strong></p><p><strong>(要转换的类型)变量名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自动类型转换</li><li><strong>从低-高</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">double</span> b =  i;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>不能对bool类型进行转换。</li><li>不能把对象的类型转换为不相干的类型。</li><li>高容量转化为低容量的时候，强制类型转换。</li><li>转化的时候可能存在内存溢出，或者精度问题。</li></ol><p>精度问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">18.3</span>);<span class="comment">//18.7</span></span><br><span class="line">System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);<span class="comment">//45</span></span><br></pre></td></tr></table></figure><p>溢出问题</p><p>操作比较大的数的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line"><span class="keyword">long</span> total = money*year;</span><br><span class="line"><span class="comment">//得到的结果溢出，默认是int，在转换之前就出现问题了。</span></span><br><span class="line"><span class="keyword">long</span> total2 = money*(<span class="keyword">long</span>(year));</span><br></pre></td></tr></table></figure><h2 id="6-变量"><a href="#6-变量" class="headerlink" title="6.变量"></a>6.变量</h2><p><strong>什么是变量：</strong>就是可以变化的量。</p><p>Java是一种强类型语言，每个变量都必须声明其类型。</p><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><p><strong>数据类型  变量名 =  值</strong></p><p><strong>注意：</strong></p><ul><li>每个变量都有类型，类型可以是基本的类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每个声明都必须以分号结束。</li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sb</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks = <span class="number">0</span>; <span class="comment">//类变量</span></span><br><span class="line">    String str = <span class="string">&quot;hello sb&quot;</span>; <span class="comment">//实例变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sb</span></span>&#123;</span><br><span class="line">    <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;<span class="comment">//2500默认是int类型 自动转换成了double</span></span><br><span class="line">    <span class="comment">//属性:简单理解为变量</span></span><br><span class="line">    <span class="comment">//实例变量：从属于对象,如果不进行初始化，这个数值类型的默认值</span></span><br><span class="line">    <span class="comment">//布尔值：默认是false</span></span><br><span class="line">    <span class="comment">//除了基本类型：其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//mian方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部变量:必须声明和初始化值</span></span><br><span class="line">        <span class="keyword">int</span>  i = <span class="number">23</span>;</span><br><span class="line">        System.out.println(i); </span><br><span class="line">        sb sb1 = <span class="keyword">new</span> sb1();</span><br><span class="line">        System.<span class="function">out <span class="title">println</span><span class="params">(sb1.age)</span></span>;</span><br><span class="line">        <span class="comment">//类变量static </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><p>​    <img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210413204212919.png" alt="image-20210413204212919"></p><h2 id="7-常量"><a href="#7-常量" class="headerlink" title="7.常量"></a>7.常量</h2><p>常量：初始化之后不能变动的值。</p><p><strong>可以理解为一个特殊的变量。</strong></p><p><strong>final</strong> 常量名 = 值；(<strong>final是个修饰符，不区分前后。</strong>)</p><p>常量名一般使用大写字符。</p><h2 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210413204342365.png" alt="image-20210413204342365"></p><p><strong>()括号的优先级高</strong></p><p>**关系运算符的结果是: 正确 错误  布尔值 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自增++ 自减--</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;<span class="comment">//执行完这段代码之后先将3赋值给b，然后再自增。</span></span><br><span class="line"><span class="keyword">int</span> c = ++a;<span class="comment">//执行这行代码前，先给a自增然后再给c赋值。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//很多运算我们会使用工具类运算double Pow = Math.pow(3,2);System.out.println(Pow);//9.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;——逻辑与 两个都为真 结果为真||——逻辑或 其中一个为 结果为真！——取反 真变假 假变真</span><br></pre></td></tr></table></figure><p><strong>位运算——看二进制位</strong></p><p>&amp;、|、类似于上面的逻辑操作符</p><p>^相同为0 不相同为1</p><p>~按位取反 </p><p>左移&lt;&lt; ——相当于把数字乘2、</p><p>右移 &gt;&gt;——相当于把数字除2、</p><p><strong>字符串连接符</strong></p><p>在+号后出现string类型，就会把操作数转化为字符串然后再连接。</p><p>在后面的就会正常进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> a = <span class="number">10</span>;        <span class="keyword">int</span> b = <span class="number">20</span>;        System.out.println(<span class="string">&quot; &quot;</span>+a+b);        System.out.println(a+b+<span class="string">&quot; &quot;</span>);        <span class="comment">//输出 1020//    30     &#125;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><p>x?a:b</p><p>x为真 结果为a</p><p>x为假 结果为b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       <span class="keyword">int</span> score = <span class="number">20</span>;       String type = score &gt; <span class="number">60</span>?<span class="string">&quot;及格&quot;</span>:<span class="string">&quot;不及格&quot;</span>;        System.out.println(type);    &#125;    &#125;</span><br></pre></td></tr></table></figure><h2 id="9-包机制"><a href="#9-包机制" class="headerlink" title="9.包机制"></a>9.包机制</h2><ul><li>为了更好的组织类，JAVA提供了包机制，用于区别类名的命名空间。</li></ul><p>(基本就是新建一个文件夹将两个名称相同的文件分开放，<strong>包的本质就是一个文件夹</strong>。)</p><ul><li><p>包机制的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pk1[.pk2[.pk3...]];</span><br></pre></td></tr></table></figure></li><li><p>一般利用公司域名倒置作为包名(<a href="http://www.baidu.com/">www.baidu.com</a> - com.baidu.www)</p></li><li><p>为了能够使用某一个包的成员，我们需要在Java程序明确导入该包。使用import语句可以完成此功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-JavaDoc"><a href="#10-JavaDoc" class="headerlink" title="10.JavaDoc"></a>10.JavaDoc</h2><p>是用来生成自己API文档的。</p><p><strong>参数信息：</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210414210704599.png" alt="image-20210414210704599"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sb;<span class="comment">/*** <span class="doctag">@author</span>  zhaoyuxuan* <span class="doctag">@version</span>  1.0 * <span class="doctag">@since</span>  1.8 * * */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocJava</span> </span>&#123;    String name;    <span class="comment">/**     * <span class="doctag">@author</span> zhaoyuxuan      * <span class="doctag">@param</span> name     * <span class="doctag">@return</span>     * <span class="doctag">@throws</span>  Exception     */</span>    <span class="function"><span class="keyword">public</span> String  <span class="title">test</span><span class="params">(String  name)</span> <span class="keyword">throws</span> Exception</span>&#123;        <span class="keyword">return</span>  name;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>IDEA、命令行都可以生成javadoc文件。</p><h1 id="2-JAVA流程控制"><a href="#2-JAVA流程控制" class="headerlink" title="2.JAVA流程控制"></a>2.JAVA流程控制</h1><h2 id="1-用户交互Scanner"><a href="#1-用户交互Scanner" class="headerlink" title="1.用户交互Scanner"></a>1.用户交互Scanner</h2><p><strong>Scanner获取用户的输入</strong></p><p><strong>基本语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>通过next()和nextLine()方法获取输入的字符串，在读取前我们一般需要视同hasNext() 与hasNextLine()判断是否还有输入的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>    </span>&#123;        <span class="comment">//创建一个扫描器对象        Scanner scanner = new Scanner(System.in);        System.out.println(&quot;使用next的方式接收：&quot;);        //判断用户有没有输入字符串        if(scanner.hasNext())&#123;            //使用next方式接收            String str = scanner.next();            System.out.println(&quot;输出的内容为：&quot;+str);        &#125;        //凡是IO流的类如果不关闭会一直占用资源，要养成良好的习惯用完就关掉        scanner.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>next():</strong></p><ul><li>一定要读取到有效字符后才可以结束输入。</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next()不能得到带有空格的字符串。</li></ul><p><strong>nextLine():</strong></p><ul><li>以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);        <span class="comment">//从键盘接收数据        int i = 0 ;        float f = 0.0f;        System.out.println(&quot;请输入整数：&quot;);        if(scanner.hasNextInt())        &#123;            i= scanner.nextInt();            System.out.println(&quot;整数数据：&quot;+i);        &#125;        else&#123;            System.out.println(&quot;输入的不是整数数据&quot;);        &#125;        System.out.println(&quot;请输入小数数据：&quot;);        if(scanner.hasNextFloat())        &#123;            f = scanner.nextInt();            System.out.println(&quot;小数数据：&quot;+f);        &#125;        else&#123;            System.out.println(&quot;输入的不是小数数据&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo3</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//我们可以输入多个数字，并求其总和 每输入一个数字用回车确认，用过输入非数字来结束        //输入并输出执行结果。        Scanner scanner = new Scanner(System.in);        //和        double sum = 0;        //计算输入了多少个数字        int m = 0;        while(scanner.hasNextDouble())        &#123;            double x = scanner.nextDouble();            m = m  + 1;            sum = sum +x;            System.out.println(&quot;你输入了第&quot;+m+&quot;个数据当前结果sum&quot;+sum);        &#125;        System.out.println(m + &quot;个数字的总和是：&quot;+ sum);        System.out.println(m + &quot;个数字平均数是：&quot;+ (sum/m));        scanner.close();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h2><ul><li>JAVA的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li><li>语句和语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的， <strong>它是任何一种算法都离不开的一种基本算法结构。</strong></li></ul><h2 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h2><h3 id="1-if单选择结构"><a href="#1-if单选择结构" class="headerlink" title="1.if单选择结构"></a>1.if单选择结构</h3><ul><li>判断是否可行，然后再去执行</li><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;<span class="comment">//如果布尔表达式为True将执行的语句&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">import</span>  java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Scanner scanner  = <span class="keyword">new</span> Scanner(System.in);        System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);        String s = scanner.nextLine();        <span class="keyword">if</span>(s.equals(<span class="string">&quot;Hello&quot;</span>))        &#123;            System.out.println(s);        &#125;        System.out.println(<span class="string">&quot;sb&quot;</span>);        scanner.close();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-if双选择结构"><a href="#2-if双选择结构" class="headerlink" title="2.if双选择结构"></a>2.if双选择结构</h3><ul><li>if-else</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;<span class="comment">//如果布尔表达式的值为true&#125;else&#123;    //如果布尔表达式的值为false&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">import</span> java.util.Scanner;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">if_else</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        System.out.println(<span class="string">&quot;请输入你的成绩&quot;</span>);        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);        <span class="comment">//大于等于60分及格，否则不及格        int score = scanner.nextInt();        if(score &gt;= 60)        &#123;            System.out.println(&quot;及格&quot;);        &#125;        else        &#123;            System.out.println(&quot;不及格&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-if多选择语句"><a href="#3-if多选择语句" class="headerlink" title="3.if多选择语句"></a>3.if多选择语句</h3><ul><li>if-else if - else - if </li><li>语法 ……</li></ul><h3 id="4-嵌套的if语句"><a href="#4-嵌套的if语句" class="headerlink" title="4.嵌套的if语句"></a>4.嵌套的if语句</h3><p>……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;    <span class="keyword">if</span>()&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Switch多选择结构"><a href="#5-Switch多选择结构" class="headerlink" title="5.Switch多选择结构"></a>5.Switch多选择结构</h3><ul><li>switch case</li><li>switch case语句判断一个变量与一系列值中的某个值是否相等，每个值称为一个分支</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;    <span class="keyword">case</span> value:        <span class="comment">//语句        break;    case value:        //语句        break;    ......    default:       // &#125;</span></span><br></pre></td></tr></table></figure><p><strong>switch语句中的变量类型可以是：</strong></p><ul><li>byte、short、int或者char。</li><li>从Java SE 7开始。</li><li>switch 支持字符串String类型了</li><li>同时case标签必须为字符串常量或者字面量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">char</span> grade = <span class="string">&#x27;D&#x27;</span>;        <span class="keyword">switch</span>(grade)        &#123;            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:                System.out.println(<span class="string">&quot;优秀&quot;</span>);                <span class="keyword">break</span>;            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:                System.out.println(<span class="string">&quot;良好&quot;</span>);                <span class="keyword">break</span>;            <span class="keyword">default</span>:                System.out.println(<span class="string">&quot;sb&quot;</span>);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>（不加break会发生case穿透现象。）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK7的新特性，表达式的结果可以是字符串//字符的本质还是数字//反编译//java——class(字节码文件)//——反编译(IDEA)//每一个对象都有自己的一个hashcodepackage struct;public class Switch2 &#123;    public static void main(String[] args) &#123;        String name = &quot;sb&quot;;        switch (name)        &#123;            case &quot;sb&quot;:                System.out.println(&quot;大sb&quot;);                break;            default:                System.out.println(123);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>反编译</strong></p><p><strong>看原码</strong></p><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210415170423339.png" alt="image-20210415170423339"></p><h2 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h3><ul><li>while是最基本的循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;    <span class="comment">//循环内容&#125;</span></span><br></pre></td></tr></table></figure><ul><li>只要布尔表达式为true，循环就会一直执行下去。</li><li>我们大多数情况是会让循环停下来的，我们需要让一个表达式失效的方式来结束循环。</li><li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</li><li>循环条件为true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环。会影响程序性能或者造成程序卡死崩溃。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While01</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//输出1~100        int num = 1;        while(num &lt;101)        &#123;            System.out.println(num);            num++;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whiledemo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;     <span class="comment">//计算1+。。。。100        int sum = 0;        int num = 1;        while(num &lt;=100)        &#123;            sum += num;            num ++;        &#125;        System.out.println(sum);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2.do-while循环"></a>2.do-while循环</h3><ul><li>对于while语句而言，如果不满足条件，就不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li><li>do…while循环和while循环相似，不同的是，do..while循环至少会执行一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;    <span class="comment">//语句&#125;while(布尔表达式)</span></span><br></pre></td></tr></table></figure><ul><li><strong>while和do-while的区别</strong><ul><li>while先判断在执行，do-while先执行后判断。</li><li>do-while总是保证循环体被会至少被执行一次，这是他们的主要差别。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dowhile</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> num = <span class="number">1</span>;        <span class="keyword">int</span> sum = <span class="number">0</span>;        <span class="keyword">do</span>&#123;            sum += num;            num ++;        &#125;<span class="keyword">while</span>(num &lt;= <span class="number">100</span>);        System.out.println(sum);    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dowhile</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         <span class="keyword">int</span> a = <span class="number">0</span>;         <span class="keyword">while</span>(a &lt; <span class="number">0</span>)         &#123;             System.out.println(a);             a++;         &#125;        System.out.println(<span class="string">&quot;``````````````````````````&quot;</span>);         <span class="keyword">do</span>&#123;             System.out.println(a);             a++;         &#125;<span class="keyword">while</span> (a&lt; <span class="number">0</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><ul><li>for循环是一种支持迭代的一种通用结构，是最有效、最灵活的循环结构。</li><li>for循环的执行次数是在执行之前就确定的。</li><li>语法</li><li>IDEA快捷键100.for</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;<span class="comment">//代码语句&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOr</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>; i++)         &#123;             System.out.println(i);         &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOr</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> oddSum = <span class="number">0</span>;        <span class="keyword">int</span> evenSum = <span class="number">0</span>;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)        &#123;            <span class="keyword">if</span>(i%<span class="number">2</span> != <span class="number">0</span>)            &#123;                evenSum += i;            &#125;            <span class="keyword">else</span>            &#123;                oddSum += i;            &#125;        &#125;        System.out.println(<span class="string">&quot;偶数的和&quot;</span>+evenSum);        System.out.println(<span class="string">&quot;奇数的和&quot;</span>+oddSum);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOR2</span> </span>&#123;    <span class="comment">//练习2，输入1~1000之间的能被5整除的数，并且每行输出3个    public static void main(String[] args) &#123;        for (int i = 1; i &lt; 1000; i++) &#123;            if(i % 5 == 0)            &#123;                System.out.print(i+&quot;\t&quot;);            &#125;            if(i %(3*5) == 0)            &#123;                //都可以System.out.println();                System.out.println(&quot;\n&quot;);            &#125;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>println(自动换行)和print</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//九九乘法表package struct;public class Chengfa &#123;    public static void main(String[] args) &#123;        for (int j = 0; j &lt;= 9; j++) &#123;            for(int i =1; i &lt;=j ; i++)            &#123;                System.out.print(j+&quot;*&quot;+i+&quot;=&quot;+(j*i) + &quot;\t&quot;);            &#125;            System.out.println(&quot;&quot;);//换行        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>增强for——主要用于数组或集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chengfa</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;        <span class="comment">//增强型for        for(int x:numbers)        &#123;            System.out.println(x);        &#125;        System.out.println(&quot;123456789&quot;);        //或者        for(int i = 0; i &lt; 5 ; i++)        &#123;            System.out.println(numbers[i]);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-break、continue、goto"><a href="#4-break、continue、goto" class="headerlink" title="4.break、continue、goto"></a>4.break、continue、goto</h3><ul><li><p>break语句在任何循环语句的主题部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)</p></li><li><p>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体尚未执行的语句，接着进行下一次是否执行循环的判定。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> i = <span class="number">0</span>;        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)        &#123;            <span class="keyword">if</span>(i == <span class="number">30</span>)            &#123;                <span class="keyword">break</span>;            &#125;            System.out.println(i);            i++;        &#125;    &#125;&#125;<span class="comment">////////////////////////////////package struct;public class Break &#123;    public static void main(String[] args) &#123;        int i = 0;        while(i&lt;10)        &#123;            i++;            if(i == 3)            &#123;               continue;            &#125;            System.out.println(i);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>关于goto关键字</li></ul><p>(JAVA没有)但是有标签</p><h2 id="5-流程控制练习"><a href="#5-流程控制练习" class="headerlink" title="5.流程控制练习"></a>5.流程控制练习</h2><p><strong>打印三角形5行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> struct;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sanjiao</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)        &#123;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">5</span> ; j &gt;= i; j--)            &#123;                System.out.print(<span class="string">&quot; &quot;</span>);            &#125;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= i; j++)            &#123;                System.out.print(<span class="string">&quot;+&quot;</span>);            &#125;            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i; j++)            &#123;                System.out.print(<span class="string">&quot;+&quot;</span>);            &#125;            System.out.println(<span class="string">&quot;&quot;</span>);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="3-JAVA方法"><a href="#3-JAVA方法" class="headerlink" title="3.JAVA方法"></a>3.JAVA方法</h1><h2 id="1-什么是方法"><a href="#1-什么是方法" class="headerlink" title="1.什么是方法"></a>1.什么是方法</h2><p><strong>就是其他语言的函数。</strong></p><ul><li>JAVA方法是语句的集合，它们在一起执行一个功能。<ul><li>方法是解决一类问题的步骤的有序组合。</li><li>方法包含于类或对象中。</li><li>方法在程序中被创建，在其他地方被引用。</li></ul></li><li>设计方法的原则：方法的本意是功能快，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成一个功能，这样有利于我们后期的扩展。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="comment">//main方法    public static void main(String[] args) &#123;        int sum = add(1,2);        System.out.println(sum);    &#125;    //加法    public static int add(int a,int b)    &#123;        return a+b;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-方法的定义"><a href="#2-方法的定义" class="headerlink" title="2.方法的定义"></a>2.方法的定义</h2><ul><li>结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型  方法名(参数类型 参数名)&#123;    \\\    方法体        \\\    <span class="keyword">return</span> 返回值；&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法包含一个方法头和方法体</p><ul><li>修饰符：修饰符，这是可选的，告诉编译器如何调用方法。定义了该方法的访问类型。</li><li>返回值：方法可能会有返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。这种情况下，returnValueType是关键字void。</li><li>方法名：是方法的实际名称。方法和参数表共同构成方法签名。</li><li>参数类型：参数像一个占位符。放方法被调用的时 ，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<ul><li>形式参数：在方法被调用的时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li>方法体：方法体包含具体的语句，定义该方法的功能</li></ul><p><strong>return可以终止方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span> result = Max(<span class="number">10</span>,<span class="number">10</span>);        System.out.println(result);    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span>    </span>&#123;        <span class="keyword">int</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-方法的重载"><a href="#3-方法的重载" class="headerlink" title="3.方法的重载"></a>3.方法的重载</h2><ul><li>重载就是在同一个类中，有相同的函数名称，但形参不同的函数。</li><li>方法重载的规则：<ul><li>方法名必须相同。</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li>实现理论：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">double</span> result = Max(<span class="number">10.0</span>,<span class="number">20.0</span>);        System.out.println(result);    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span>    </span>&#123;        <span class="keyword">int</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Max</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span>    </span>&#123;        <span class="keyword">double</span> max = <span class="number">0</span>;        <span class="keyword">if</span>(num1 == num2)        &#123;            System.out.println(<span class="string">&quot;num1 = num2&quot;</span>);            <span class="keyword">return</span> <span class="number">0</span>;        &#125;        <span class="keyword">if</span>(num1 &gt; num2)        &#123;            max = num1;        &#125;        <span class="keyword">else</span>        &#123;            max = num2;        &#125;        <span class="keyword">return</span> max;    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-命令行传参"><a href="#4-命令行传参" class="headerlink" title="4.命令行传参"></a>4.命令行传参</h2><p>有时你希望运行一个程序的时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//args.Length数组长度        for(int i = 0;i &lt;args.length;i++)        &#123;            System.out.println(&quot;args[&quot;+1+&quot;]:&quot;+args[i]);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h2><ul><li>从JKD1.5开始，JAVA支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后面加一个省略号(…)。</li><li>一个方法只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在他前面声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kbian</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//这个东西的本质就是即将要讲的数组        Kbian kbian = new Kbian();        kbian.test(1,23,4,5,3,2);    &#125;    public void test(int...i)    &#123;        System.out.println(i[0]);        System.out.println(i[1]);        System.out.println(i[2]);        System.out.println(i[3]);        System.out.println(i[4]);        System.out.println(i[5]);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Method;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diaoyongkebian</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//调用可变参数方法        printMax(34, 2, 5, 4, 8, 1, 5, 6, 55, 45);        printMax(new double[]&#123;1, 2, 3&#125;);    &#125;    public static void printMax(double... numbers) &#123;        if (numbers.length == 0) &#123;            System.out.println(&quot;这里什么也没有&quot;);            return;        &#125;        double result = 0;        for (int i = 0; i &lt; numbers.length; i++) &#123;            if (numbers[i] &gt; result) &#123;                result = numbers[i];            &#125;        &#125;        System.out.println(&quot;最大的数是&quot;+result);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h2><ul><li>递归就是A方法调用A方法，自己调用自己。</li><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似规模较小的问题来求解，递归策略只需要少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li><li>递归结构包括两个部分<ul><li>递归头:什么时候不调用自身方法 。如果没有头，将陷入死循环。</li><li>递归体:什么时候需要调用自身方法。</li></ul></li><li>注意：<ul><li>对于一些嵌套比较深的，递归就有些力不从心了，依次压在栈上面，物理上会造成内存崩溃。</li><li>一般小计算我们可以用一些递归，大计算还是用一些其他的算法吧。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算阶乘//依次类推，就是将这个的结果传递给下一个，学了C语言之后，在学JAVA的，会感觉简单很多，很容易理解的。package Method;public class Self &#123;    public static void main(String[] args) &#123;        System.out.println(f(3));    &#125;    public static int f(int n)    &#123;        if(n == 1) &#123;            return 1;        &#125;        else        &#123;            return n*f(n-1);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h1><p>（基础部分的最后一个东西）</p><p>（JAVA的学习，说白了就是学习一个又一个的类。）</p><h2 id="1-什么是数组"><a href="#1-什么是数组" class="headerlink" title="1.什么是数组"></a>1.什么是数组</h2><ul><li>数组是相同类型数据的有序集合。</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><h2 id="2-数组的声明创建"><a href="#2-数组的声明创建" class="headerlink" title="2.数组的声明创建"></a>2.数组的声明创建</h2><ul><li>首先必须声明数组变量，才能在程序中使用数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;<span class="comment">//首选的方法或者dataType[] arrayRefVar[];//效果相同，但不是首选方法//这个是C和C++的写法，早些年为了上程序员更好的熟悉java。</span></span><br></pre></td></tr></table></figure><ul><li>JAVA语言使用new操作符来创建数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];<span class="comment">//定义了一个什么类型的数组，就new一个什么类型的数组。</span></span><br></pre></td></tr></table></figure><ul><li>数组元素是通过索引访问的，数组索引从0开始。</li><li>获取数组长度:<strong>arrays.length</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//变量的类型 变量的名字 = 变量的值；        //数组类型；        int[] nums ;//定义        nums = new int[10];//这里面可以存放10个int类型的数字。        //给数组中的元素赋值        nums[0] = 1;        nums[1] = 2;        nums[2] = 3;        nums[3] = 4;        nums[4] = 5;        nums[5] = 6;        nums[6] = 7;        nums[7] = 8;        nums[8] = 9;        nums[9] = 10;       //计算所有元素的和        int sum =0;        for(int i= 0 ; i &lt; nums.length ; i++)        &#123;            sum +=  nums[i];        &#125;        System.out.println(&quot;数组nums的和是&quot;+sum);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3.内存分析"></a>3.内存分析</h2><ul><li>JAVA内存分析：<ul><li>堆：<ul><li>可以存放new的对象和数组</li><li>可以被所有的线程共享，不会存放别的对象引用。</li></ul></li><li>栈：<ul><li>存放基本变量类型(会包含这个基本类型的具体数值)</li><li>引用对象的变量(会存放这个引用在堆里面的具体地址)</li></ul></li><li>方法区：<ul><li>可以被所有线程共享</li><li>包含了所有的class和static变量</li></ul></li></ul></li></ul><h2 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h2><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];a[<span class="number">0</span>] = <span class="number">1</span>;a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>数组的默认初始化<ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul></li></ul><h2 id="5-数组特点"><a href="#5-数组特点" class="headerlink" title="5.数组特点"></a>5.数组特点</h2><ul><li><p>数组的长度时确定的。数组一但被创建，它的大小就是不可以改变的。</p></li><li><p>其元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</p></li><li><p>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</p><p>数组本身就是对象，JAVA中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</p></li></ul><h2 id="6-数组边界"><a href="#6-数组边界" class="headerlink" title="6.数组边界"></a>6.数组边界</h2><ul><li>下标的合法区间：[0,length-1],如果越界就会报错：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    <span class="keyword">int</span>[] a  = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];        System.out.printlen(a[<span class="number">2</span>]);    &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>ArrayIndexOutOfBoundsException:数组下标越界异常！</strong></p></li><li><p>小结</p><ul><li><p>数组是相同数据类型(数据类型可以为任意类型)的有序集合。</p></li><li><p>数组也是对象。数组元素相当于对象的成变量。</p></li><li><p>数组长度是确定的，不可变的。如果越界，则报</p><p>​    ArrayIndexOutOfBoundsException。 </p></li></ul></li></ul><h2 id="7-数组的使用"><a href="#7-数组的使用" class="headerlink" title="7.数组的使用"></a>7.数组的使用</h2><ul><li>for-each循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo03</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4</span>,<span class="number">55</span>,<span class="number">6</span>&#125;;        <span class="comment">//计算数组nums的元素之和        int Sum = 0;        for(int i = 0; i &lt;nums.length;i++)        &#123;            Sum += nums[i];        &#125;           System.out.println(&quot;数组nums的和是&quot;+Sum);        System.out.println(&quot;#####################&quot;);        //找出数组中的 最大值        int Max = 0;        for(int i = 0; i &lt; nums.length;i++)        &#123;            if(nums[i]&gt; Max)            &#123;                Max = nums[i];            &#125;        &#125;        System.out.println(&quot;数组nums的最大值是&quot;+Max);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p> <strong>增强型for-主要用于打印数组中的各个元素，如果要操作其中的元素就没那么适合了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;        <span class="keyword">for</span>(<span class="keyword">int</span> x : nums)        &#123;            System.out.println(x);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>数组做方法入参&amp;数组作为返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo04</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="keyword">int</span>[] nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;        <span class="comment">//打印数组元素        printfA(nums);        System.out.println();        //反转数组        int[] nums2 = reverse(nums);        printfA(nums2);    &#125;    public static void printfA(int[] Array)    &#123;        for(int i = 0 ; i&lt; Array.length;i++)        &#123;            System.out.print(Array[i]+&quot; &quot;);        &#125;    &#125;    //反转数组    public static int[] reverse(int[] arrays) &#123;        int[] result = new int[arrays.length];        for(int i  = 0 , j = result.length-1; i &lt;arrays.length;i++,j--)        &#123;            result[j] = arrays[i];        &#125;        return result;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="8-多维数组"><a href="#8-多维数组" class="headerlink" title="8. 多维数组"></a>8. 多维数组</h2><ul><li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每个元素都是一个一维数组(在数组中存放数组)。</li><li>二维数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span><span class="keyword">int</span>[<span class="number">4</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure><ul><li><p>解析：以上二维数组a，可以看成一个4行2列的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Array;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo05</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//[4][2]        int[][] arrays = &#123;&#123;1,2&#125;,&#123;2,3&#125;,&#123;3,4&#125;,&#123;4,5&#125;&#125;;        for(int i = 0; i &lt;arrays.length; i++)        &#123;            for(int j = 0; j &lt; arrays[i].length; j ++)            &#123;                System.out.print(arrays[i][j]);            &#125;            System.out.println(&quot;&quot;);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-Arrays类"><a href="#9-Arrays类" class="headerlink" title="9.Arrays类"></a>9.Arrays类</h2><ul><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用”使用对象来调用(注意是”不用”而不是”不能”。)</p></li><li><p>具有一下常用功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sor方法，按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p><h2 id="9-冒泡排序"><a href="#9-冒泡排序" class="headerlink" title="9.冒泡排序"></a>9.冒泡排序</h2></li></ul></li><li><p>冒泡排序无疑是最出名的排序算法之一，总共有八大排序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> arrays;<span class="keyword">import</span> java.util.Arrays;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo02</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//冒泡排序：比较相邻的两个数，如果第 一个数比第二个数大，就交换他们俩个，        int[] nums = &#123;1,23,323,35,2&#125;;        //输出原本的数组顺序        System.out.println(Arrays.toString(nums));        int[] sort = sort(nums); //调用完我们自己写的排序方法之后，返回一个排序后的数组        //打印输出nums数组        System.out.println(Arrays.toString(nums));    &#125;    public static int[] sort(int[] arrays)    &#123;        int temp = 0;        //如果数组已经排列好了，我们就没有必要再进行排列了        boolean flag = false;//通过flag标识位来减少没有意义的比较        //外层循环-判断我们要走多少次        for(int i = 0; i &lt; arrays.length-1;i++)        &#123;            //内层循环，比较两个数            for(int j = 0; j &lt; arrays.length-1-i;j++)            &#123;                if(arrays[j] &gt; arrays[j+1])                &#123;                    temp = arrays[j];                    arrays[j] = arrays[j+1];                    arrays[j+1] = temp;                    flag = true;                &#125;                if(flag == false)                &#123;                    break;                &#125;            &#125;        &#125;        return arrays;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-稀疏数组"><a href="#9-稀疏数组" class="headerlink" title="9.稀疏数组"></a>9.稀疏数组</h2><ul><li><p>需求:编写五子棋游戏中，有存盘退出和续上盘的功能。</p></li><li><p>分析问题：因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</p></li><li><p>解决:稀疏数组。</p></li><li><p>什么是稀疏数组：</p><ul><li>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li></ul></li><li><p>稀疏数组的处理方式是：</p><ul><li>记录数组有几行几列，有多少个不同值。</li><li>把具有不同值的元素和行列及值记录在一个小规模数组中，从而缩小程序的规模。</li><li>例如：左边为原始数组，右边为稀疏数组。</li></ul><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210417192808182.png" alt="image-20210417192808182"></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> arrays;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo08</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;            <span class="comment">//创建一个 11*11的数组 0-没棋 1-黑棋 2-白棋        int[][] arrays1 = new int[11][11];        arrays1[1][2] = 1;        arrays1[2][3] = 2;        //输出原始的数组        System.out.println(&quot;原始的数组是&quot;);        for(int[] ints:arrays1)        &#123;            for(int anInt:ints)            &#123;                System.out.print(anInt+&quot;\t&quot;);            &#125;            System.out.println();        &#125;        //转化为稀疏数组保存        //获取有效值的个数        int numbers = 0;        for(int i = 0 ; i&lt;11; i++)        &#123;            for(int j = 0; j &lt; 11; j++)            &#123;                if(arrays1[i][j] != 0)                numbers++;            &#125;        &#125;        System.out.println(&quot;数组中的有效值一共有&quot;+numbers+&quot;个&quot;);        //创建一个稀疏数组的数组        int[][] arrays2 = new int[numbers+1][3];        arrays2[0][0] = 11;        arrays2[0][1] = 11;        arrays2[0][2] = numbers;        //遍历二维数组，将非零的值存进稀疏数组        int count = 0 ;        for(int i = 0; i &lt; arrays1.length;i++)        &#123;            for(int j = 0; j &lt;arrays1[i].length;j++) &#123;                if (arrays1[i][j] != 0)                &#123;                    count++;                    arrays2[count][0] = i;                    arrays2[count][1] = j;                    arrays2[count][2] = arrays1[i][j];                &#125;            &#125;        &#125;        //输出稀疏数组        System.out.println(&quot;输出稀疏数组&quot;);        for(int i = 0; i &lt; arrays2.length;i++)        &#123;            System.out.println(arrays2[i][0]+&quot;\t&quot;+ arrays2[i][1]+&quot;\t&quot;+arrays2[i][2]+&quot;\t&quot;);        &#125;        System.out.println(&quot;========&quot;);        System.out.println(&quot;还原&quot;);        //读取稀疏数组        int[][] arrays3 = new int[arrays2[0][0]][arrays2[0][1]];        //给其中的元素还原它的值        for(int i = 1; i &lt;arrays2.length;i++)        &#123;            arrays3[arrays2[i][0]][arrays2[i][1]] = arrays2[i][2];        &#125;        //打印        System.out.println(&quot;输出原始的数组&quot;);        for(int[] ints:arrays3)        &#123;            for(int anInt:ints)            &#123;                System.out.print(anInt+&quot;\t&quot;);            &#125;            System.out.println();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="5-面向对象编程"><a href="#5-面向对象编程" class="headerlink" title="5.面向对象编程"></a>5.面向对象编程</h1><h2 id="1-面向过程-amp-面向对象"><a href="#1-面向过程-amp-面向对象" class="headerlink" title="1.面向过程&amp;面向对象"></a>1.面向过程&amp;面向对象</h2><ul><li>面向过程思想<ul><li>步骤清晰简单，第一步做什么，第二步做什么……(线性思维)</li><li>面对过程适合处理一些较为简单的问题。</li></ul></li><li>面向对象思想<ul><li>物以聚类，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li></ul></li><li><strong>对于描述复杂的的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是具体到微观操作 ，仍然需要面向过程的思路去处理。</strong></li></ul><p><strong>面向对象编程的本质就是：以类的方式组织代码，以对象的组织(封装)数据。</strong></p><ul><li>抽象——将事物的共性特点抽取出来。</li><li>三大特性：<ul><li>封装</li><li>继承——父类、子类</li><li>多态</li></ul></li><li>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</li><li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li></ul><h2 id="2-方法的回顾及加深"><a href="#2-方法的回顾及加深" class="headerlink" title="2.方法的回顾及加深"></a>2.方法的回顾及加深</h2><ul><li><p>方法的定义</p><ul><li>修饰符</li><li>返回类型</li><li><strong>break和return的区别</strong><ul><li>break跳出循环</li><li>return结束方法，返回一个结果，可以为空也可以为任意的其他类型</li></ul></li><li>方法名-注意规范</li><li>参数列表-(参数类型、参数名)</li><li>异常抛出</li></ul></li><li><p>方法的调用</p><ul><li>静态方法-static</li><li>非静态方法-</li><li>形参和实参</li><li>值传递和引用传递</li><li>this关键字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo02</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//函数调用的两种方法        System.out.println(new demo02().Add(3,4));//非静态        System.out.println(Bdd(3,4));//静态    &#125;    public static int Bdd(int a ,int b)    &#123;        return a+b;    &#125;    public int Add(int a ,int b)    &#123;        return a+b;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="comment">//值传递 无法改变public class demo03 &#123;    public static void main(String[] args) &#123;        int a = 1;        System.out.println(a);        new demo03().change(a);        System.out.println(a);    &#125;    public void change(int a )    &#123;        a = 10;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FACE;<span class="comment">//引用传递：传递一个对象，本质还是值传递。public class demo04 &#123;    public static void main(String[] args) &#123;        Person person =  new Person();        System.out.println(person.name);        demo04.Change(person);        System.out.println(person.name);    &#125;    public static void Change(Person person) &#123;        //person是一个具体的类 指向一个人 Person person =  new Person();这是一个具体的人 可以改变属性        person.name = &quot;傻逼&quot;;    &#125;&#125;class Person&#123;    String name;//默认为Null&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-类与对象的创建"><a href="#3-类与对象的创建" class="headerlink" title="3.类与对象的创建"></a>3.类与对象的创建</h2><p>(一个对象就相当于C语言里面的结构体)</p><ul><li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul><li>动物、植物、手机、电脑……</li><li>Persoin类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为。</li></ul></li><li><strong>对象是抽象概念的具体实例</strong><ul><li>张三就是一个人的具体实例，张三家里的旺财就是狗的一个具体实例。</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h2 id="4-创建与初始化对象"><a href="#4-创建与初始化对象" class="headerlink" title="4.创建与初始化对象"></a>4.创建与初始化对象</h2><ul><li><strong>使用new关键字创建对象。</strong></li><li>使用ne关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化及对类中构造器的调用。</li><li><strong>构造器必须要掌握</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类是一个抽象的模板， 通过给它赋值来将它具体化package FACE;public class demo05 &#123;   //属性：字段    String name ; //null     int age ; //0//方法    public void study()    &#123;        System.out.println(this.name+&quot;在学习&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体化package FACE;//一个项目应该只存一个main方法public class demo06 &#123;    public static void main(String[] args) &#123;        //类：抽象的，实例化。        //类实例化后会返回一个自己得对象        //demo05对象就是一个student类的具体实例！        demo05 xiaoming = new demo05();        demo05 xiaohong = new demo05();        xiaoming.name = &quot;sb&quot;;        System.out.println(xiaoming.name);        System.out.println(xiaoming.age);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-构造器详解"><a href="#5-构造器详解" class="headerlink" title="5.构造器详解"></a>5.构造器详解</h2><ul><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="comment">//一个类即使什么都不写，也会存在一个方法    //显式定义的构造器    String name;    //实例化初始值    //使用new关键字，本质上实在调用构造器    public Person()    &#123;    &#125;    //有参构造:一旦定义了有参构造，无参定义就必须显示定义    public Person(String name)    &#123;        this.name = name;    &#125;&#125;/**构造器：* 1必须和类名相同* 2没有返回值* 作用* 1new本质在调用构造方法* 2,初始化对象的值* 注意点：* 1.定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造* Alt+insert*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//使用new关键词实例化了一个对象        Person person = new Person(&quot;sb&quot;);        System.out.println(person.name);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-创建对象内存分析"><a href="#6-创建对象内存分析" class="headerlink" title="6.创建对象内存分析"></a>6.创建对象内存分析</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210420110303023.png" alt="image-20210420110303023"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Pet;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Pet dog = <span class="keyword">new</span> Pet();        dog.name = <span class="string">&quot;旺财&quot;</span>;        dog.age =  <span class="number">3</span>;        dog.shout();        System.out.println(dog.name);        System.out.println(dog.age);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;    <span class="keyword">public</span> String name;    <span class="keyword">public</span> <span class="keyword">int</span> age;    <span class="comment">//无参构造    public void shout()    &#123;        System.out.println(&quot;叫了一声&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summary</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">/**         * 1.类与对象         *  类是一个模板：抽象，对象是一个具体的实例         * 2.方法         *  定义、调用！         * 3.对象的引用         *  引用类型：基本类型（8）         *  对象是通过引用来操作的：栈--》堆（地址）         * 4.属性：字段：Field 成员变量         *  默认初始化值：         *      数字： 0 0.0         *      char： u0000         *      bool:false（默认）         *      引用：         *          null         *   修饰符 属性类型 属性名 = 属性值！         * 5.对象的创建和使用         * -必须使用new关键字创造对象，构造器Person sb = new Person();         * -对象的属性 sb.name;         * -对象的方法 sb.sleep();         * 6.类         *  静态的属性         *  动态的行为         */</span>        /    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="8-封装"><a href="#8-封装" class="headerlink" title="8.封装"></a>8.封装</h2><ul><li>该露的露，该藏的藏<ul><li>我们设计程序的要求是”高内聚，低耦合”。高内聚就是类的内部数据细节自己完成 ，不允许外部干涉；低耦合:仅暴露少量的方法给外部使用。</li></ul></li><li>封装(数据的隐藏)<ul><li>通常禁止访问一个对象中数据中的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></li><li><strong>属性私有，get/set</strong></li></ul><p><strong>alt+insert</strong></p><ul><li><p>封装的意义：</p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口，系统的可维护性提高了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;    <span class="comment">//属性私有    private String name;    private int id;    private char sex;    private int age;    //提供一些可以操作这个属性的方法    //提供一些public的get、set方法    //get获得这个数据    public String getName()    &#123;        return this.name;    &#125;    //set给这个数据设置值    public void setName(String name)    &#123;        this.name =name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        if(age&gt;120 || age&lt;0)        &#123;            this.age = 3;        &#125;        else&#123;            this.age = age;        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Student;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Student s1 = <span class="keyword">new</span> Student();        s1.setName(<span class="string">&quot;sb&quot;</span>);        System.out.println(s1.getName());        s1.setAge(<span class="number">15</span>);        System.out.println(s1.getAge());    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> opp;<span class="keyword">import</span> opp.Student;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        Student s1 = <span class="keyword">new</span> Student();        s1.setName(<span class="string">&quot;sb&quot;</span>);        System.out.println(s1.getName());        s1.setAge(<span class="number">15</span>);        System.out.println(s1.getAge());    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>判断两个方法是否相同看-方法名-参数</strong></p></li></ul><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思是”扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承。(<strong>一个儿子只有一个爸爸，一个爸爸有可以有多个儿子</strong>)</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类(派生类)，一个为父类(基类)。子类继承父类，使用关键字extands来表示。</li><li>子类和父类之间，从意义上讲应该具有”is a”的关系。</li><li>object类</li><li>super(代表父,this代表当前)</li><li>方法重写</li></ul><p><strong>子类继承了父类就会拥有父类的全部方法。</strong></p><p><strong>父类public的方法可以继承，private的方法无法继承。</strong></p><p><strong>Ctrl+h——显示继承的关系</strong></p><p><strong>在JAVA中所有的类都默认直接或间接继承object类</strong></p><hr><p><strong>super注意点</strong></p><ul><li>super调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须只能出现在子类的方法或者构造方法中。</li><li>super和this不能同时调用构造方法。</li></ul><p><strong>和this对比</strong></p><ul><li>代表的对象不同<ul><li>this:本身调用者这个对象。</li><li>super:代表父类对象的应用。</li></ul></li><li>前提：<ul><li>this:没有继承也可以使用。</li><li>super:只能在继承条件下才可以使用。</li></ul></li><li>构造方法：<ul><li>this():本类的构造。</li><li>super():父类的构造。</li></ul></li></ul><hr><p><strong>方法重写：</strong></p><p><strong>重写需要有继承关系，子类重写父类的方法</strong></p><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符:范围可以扩大，但是不能缩小public-&gt;Portected&gt;Default&gt;private</li><li>抛出异常:可以被缩小，但不能扩大ClassNotFoundException–&gt;Exception(大)</li></ul><p>重写，子类的方法和父类必要一致，方法体不同。</p><p><strong>为什么要重写？</strong></p><ul><li>父类的功能，子类不一定需要，或者不一定满足。</li></ul><p>Alt+Insert:override</p><h2 id="10-多态"><a href="#10-多态" class="headerlink" title="10.多态"></a>10.多态</h2><ul><li>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多。（父类、有关系的类）</li><li>多态存在的条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li>注意：多态是方法的多态，属性没有多态性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;        <span class="meta">@java</span>.lang.<span class="function">Override        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;            System.out.println(<span class="string">&quot;son&quot;</span>);        &#125;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;            System.out.println(<span class="string">&quot;eat&quot;</span>);        &#125;    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;<span class="keyword">import</span> DuoTai.Student;<span class="keyword">import</span> DuoTai.Person;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//一个对象的实际类型是确定的        //new Student();        //new Person();        //可以指向的引用类型就不确定了        //父类的引用指向子类        //Student能调用的方法都是自己的或者继承父类的        Student s1 = new Student();        Person  s2 = new Student();        Object s3 = new Student();       //子类重写了父类的方法，执行子类的方法        s2.run();        s1.run();       //对象能执行那些方法只要看对象左边的类型，和右边关系不大        ((Student)s2).eat();//强制类型转换 高转低        s1.eat();    &#125;&#125;/*1.多态是方法的多态，属性没有多态2.父类和子类有联系 类型转换异常 ClassCastException3.多态存在的条件：有继承关系，方法需要重写（否则就是调用各自的方法，那就没有任何区别了）4. 父类的引用指向子类对象 Father f1 = new Son();Static是静态方法属于类，不属于实例final常量private方法：都没有重写 哪来的多态呢 */</span></span><br></pre></td></tr></table></figure><hr><p><strong>instanceof类型转换（与JAVA基础差不多，只是这里的类型转换指的是引用类型的转换）</strong></p><p>判断一个对象是什么类型 instanceof，判断两个类之间是否存在父子关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> DuoTai;<span class="keyword">import</span> DuoTai.Student;<span class="keyword">import</span> DuoTai.Person;<span class="keyword">import</span> DuoTai.Teacher;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">//System.out.println(x instanceof y);        //就是看x和y之间有没有父子，没有则报错        //Object - Person - Student        Object object = new Student();        System.out.println(object instanceof Student);        System.out.println(&quot;###########&quot;);        Student student = new Student();        System.out.println(student instanceof  Person);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>static关键字详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//static加在方法上叫静态方法，加在属性上叫静态属性public class Student &#123;        private static  int age;//静态变量        private double score;//非静态变量        public  void run()&#123;        &#125;        public static void  go()&#123;        &#125;    public static void main(String[] args) &#123;        Student s1 = new Student();        //静态可以这样调用        System.out.println(Student.age);        new Student().run();        //非静态        System.out.println(s1.age);        go();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;    <span class="comment">//赋初始值    &#123;        //匿名代码块（不建议这么写）        System.out.println(&quot;匿名代码块&quot;);    &#125;    //只执行一次    static &#123;        //静态代码块        System.out.println(&quot;静态代码块&quot;);    &#125;    public Person()&#123;        System.out.println(&quot;构造方法&quot;);    &#125;    public static void main(String[] args) &#123;        Person person1 =  new Person();        System.out.println(&quot;##############&quot;);        Person person2 =  new Person();    &#125;&#125;/** * 静态代码块 * 匿名代码块 * 构造方法 *///输出静态代码块匿名代码块构造方法##############匿名代码块构造方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//静态导入包import static java.lang.Math.random;public class demo01 &#123;    public static void main(String[] args) &#123;        System.out.println(random());//代替Math，random    &#125;&#125;//final表示该类不能被继承</span></span><br></pre></td></tr></table></figure><h2 id="11-抽象类"><a href="#11-抽象类" class="headerlink" title="11.抽象类"></a>11.抽象类</h2><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法，如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字类创建对象，它是用来让子类继承的。</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类继承的。</li><li>子类继承抽象列，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Static;<span class="comment">//abstract抽象类//extends单继承 接口多继承(例如插座可以插很多个插头)public abstract class demo02 &#123;    //约束，有人帮我们实现    //抽象方法 只有方法名字 没有方法实现    //抽象类的所有方法，继承了他的子类都要实现它的方法    //除非它的子类也是abstract,那就让它的子子类去实现......    public abstract void doSomething()&#123;    &#125;    /**     *不能new这个抽象类，只能靠子类去实现它，     *抽象类中可以写普通的方法     * 抽象方法必须在抽象类中     * 抽象的抽象 约束     * 存在的意义：抽象出来 提高开发效率 后期可扩展性比较高     * /    /&#125;</span></span><br></pre></td></tr></table></figure><h2 id="12-接口"><a href="#12-接口" class="headerlink" title="12.接口"></a>12.接口</h2><ul><li>普通类:只有具体实现</li><li>抽象类：具体实现和规范(抽象方法)都有</li><li>接口:只有规范,自己无法写方法，约束和实现分离。</li><li>接口就是规范，定义的一组规则，体现了现实世界中的”如果你是… 则必须能…”的思想。如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人。……</li><li><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定了就必须要遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口，为什么我们讨论设计模式都只针具备了抽象能力的语言(C++,java,c#等)，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li></ul><p><strong>声明类的关键字是class,声明接口的关键字是interface</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="comment">//interface定义的关键字：接口都需要实现类//抽象的思维-架构师public interface UserService &#123;    //接口中的所有定义其实都是抽象的public    //接口中定义常量    //一般来说是没有在接口中定义常量的    public static final int AGE = 99;    //返回类型+方法    //定义的方法都是public abstract    void  add(String name);    void  delete(String name);    void  update(String name);    void  query(String name);&#125;</span></span><br></pre></td></tr></table></figure><p><strong>作用:</strong></p><ul><li>约束</li><li>定义一些方法，让不同的人来实现</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化-因为接口中没有构造方法</li><li>implements可以实现多个接口</li><li>必须重写接口中的方法</li></ul><h2 id="13-内部类"><a href="#13-内部类" class="headerlink" title="13.内部类"></a>13.内部类</h2><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就成为内部类，而A类相对B类来说就是外部类了。</li><li>成员内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);    &#125;    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);        &#125;        <span class="comment">//获得外部类的私有属性        public void getID()&#123;            System.out.println(id);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    <span class="comment">//new-外部类        Outer outer = new Outer();        //通过这个外部类来实例化内部类        Outer.Inner inner = outer.new Inner();        inner.in();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;    <span class="comment">//局部内部类    public void method()&#123;        class Inner&#123;        &#125;    &#125;&#125;//一个java类中只能有一个public class//但能有多个class类class A&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dem0o01;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        <span class="comment">// Apple apple = new Apple();        //没有名字初始化类-就是匿名初始化类        //不用将实例保存到变量中        new Apple().eat();    &#125;&#125;class Apple&#123;    public void eat()&#123;        System.out.println(&quot;1&quot;);    &#125;&#125;interface UserService&#123;  &#125;</span></span><br></pre></td></tr></table></figure><p>(上面一些奇奇怪怪的创建类的方法不推荐使用，否则这个代码就只有你能看懂啦。)</p><h1 id="6-异常"><a href="#6-异常" class="headerlink" title="6.异常"></a>6.异常</h1><h2 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h2><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或者硬盘可能满了。等等。</li><li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是:Exception,意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</li><li>异常程序在运行过程中出现的不期而遇的各种状况，如：文件找不到、网络链接失败、非法参数等。</li><li>异常发生在程序运行期间，它影响了正常的程序执行流程。</li></ul><h2 id="2-简单分类"><a href="#2-简单分类" class="headerlink" title="2.简单分类"></a>2.简单分类</h2><ul><li>要理解JAVA异常处理是如何工作的，你需要掌握以下三种类型的异常：</li><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误ERROR:错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><h2 id="3-异常体系结构"><a href="#3-异常体系结构" class="headerlink" title="3.异常体系结构"></a>3.异常体系结构</h2><ul><li>JAVA把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超累。</li><li>在JAVA API 中已经定义了许多异常类，这些异常类分为两大类，错误ERROR和异常Exception。</li></ul><h2 id="4-ERROR"><a href="#4-ERROR" class="headerlink" title="4.ERROR"></a>4.ERROR</h2><ul><li>ERROR类对象由java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>JAVA虚拟机运行错误,当JVM不在有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定于(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而却绝大多数是程序运行时不允许出现的状况。</li></ul><h2 id="5-Exception"><a href="#5-Exception" class="headerlink" title="5.Exception"></a>5.Exception</h2><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210426201055911.png" alt="image-20210426201055911"></p><ul><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和Exception的区别:Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程；Exception通常情况下可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li></ul><h2 id="6-异常处理机制"><a href="#6-异常处理机制" class="headerlink" title="6.异常处理机制"></a>6.异常处理机制</h2><ul><li>抛出异常</li><li>捕获异常</li><li>异常处理五个关键字<ul><li>try、catch、finally、throw、throws </li></ul></li></ul><p>（快捷键ctrl+alt+t快速选择语句将所选中的语句包裹起来）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.security.mscapi.CPublicKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.AttributeInUseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abnormal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//监控异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;<span class="comment">//捕获异常/里面的参数是捕获错误的类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常啦&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;<span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//假设在这个方法中处理不了异常，在方法上抛出异常。</span></span><br><span class="line">        <span class="comment">//主动抛出异常throw throws</span></span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动抛出异常，一般在方法中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-自定义异常"><a href="#7-自定义异常" class="headerlink" title="7.自定义异常"></a>7.自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常，只需要继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可以分为一下几个步骤：</li></ul><ol><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo01</span><span class="params">(<span class="keyword">int</span> a )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail  = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString：异常的打印信息</span></span><br><span class="line">    <span class="comment">//实现了一个自定义的异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo01&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;detail=&quot;</span> + detail +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> demo01</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为:&quot;</span>+a);</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> demo01(a);<span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (demo01 e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JAVA%E5%9F%BA%E7%A1%80.assets/image-20210427165820171.png" alt="image-20210427165820171"></p><p>视频<a href="https://www.bilibili.com/video/BV12J41137hu?t=17">【狂神说Java】Java零基础学习视频通俗易懂_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-JAVA基础&quot;&gt;&lt;a href=&quot;#1-JAVA基础&quot; class=&quot;headerlink&quot; title=&quot;1.JAVA基础&quot;&gt;&lt;/a&gt;1.JAVA基础&lt;/h1&gt;&lt;h2 id=&quot;1-Hello-world&quot;&gt;&lt;a href=&quot;#1-Hello-world&quot; c</summary>
      
    
    
    
    <category term="JAVA" scheme="http://example.com/categories/JAVA/"/>
    
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="-JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用---四则运算表达式求值</title>
    <link href="http://example.com/2021/04/24/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>http://example.com/2021/04/24/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-04-24T05:08:24.000Z</published>
    <updated>2021-04-24T05:11:05.648Z</updated>
    
    <content type="html"><![CDATA[<p>栈的应用——四则运算表达式求值</p><h2 id="后缀表达式计算"><a href="#后缀表达式计算" class="headerlink" title="后缀表达式计算"></a>后缀表达式计算</h2><p>先将    数学表达式 用<strong>后缀(逆波兰)表示法</strong>表示。</p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/QQ%E6%88%AA%E5%9B%BE20210423203619-1619183614531-1619240927723.png"></p><p><strong>运算规则：从左到右遍历表达式每个数字和符号，遇到数字就进栈，遇到符号，就将处于栈顶的两个数字出栈，进行运算，运算结果进栈</strong></p><p><strong>运算流程图如下：</strong></p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6-1619240927723.jpg"></p><h2 id="将中缀表达式转化为后缀表达式"><a href="#将中缀表达式转化为后缀表达式" class="headerlink" title="将中缀表达式转化为后缀表达式"></a>将中缀表达式转化为后缀表达式</h2><p><strong>规则：从左到右遍历中缀表达式的每个数字和符号吗，若是数字则输出，即称为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右符号或优先级低于栈顶符号(乘除优先加减)则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</strong></p><p><img src="/images/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.assets/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F(2)-1619240927723.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;栈的应用——四则运算表达式求值&lt;/p&gt;
&lt;h2 id=&quot;后缀表达式计算&quot;&gt;&lt;a href=&quot;#后缀表达式计算&quot; class=&quot;headerlink&quot; title=&quot;后缀表达式计算&quot;&gt;&lt;/a&gt;后缀表达式计算&lt;/h2&gt;&lt;p&gt;先将    数学表达式 用&lt;strong&gt;后缀(逆波兰</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="-数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="-栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>C语言动态内存开辟</title>
    <link href="http://example.com/2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/"/>
    <id>http://example.com/2021/04/22/C%E8%AF%AD%E8%A8%80%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F/</id>
    <published>2021-04-22T09:04:29.000Z</published>
    <updated>2021-04-22T09:07:51.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-动态内存管理"><a href="#1-动态内存管理" class="headerlink" title="1.动态内存管理"></a>1.动态内存管理</h1><h2 id="1-为什么存在动态内存管理"><a href="#1-为什么存在动态内存管理" class="headerlink" title="1.为什么存在动态内存管理"></a>1.为什么存在动态内存管理</h2><p>当前我们知道的<strong>内存的使用方式</strong>主要是两种。</p><p><strong>1.创建一个变量</strong></p><p>int a = 10;//局部变量  - 在栈区中开辟空间</p><p>int g_a = 10;//全局变量 - 静态区</p><hr><p>在内存中，分为三个区域</p><p><strong>栈区</strong>-局部变量、函数的形参、</p><p><strong>堆区</strong>-动态内存分配-malloc-free-calloc-realloc</p><p><strong>静态区</strong>-全局变量、静态变量、statint int a = 10;</p><hr><p><strong>2.创建一个数组</strong></p><p>int arr[10] =  { 10 };（局部范围-栈区，全局范围-静态区）</p><p>在空间上开辟10个字节的连续空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr</span>[50];</span><span class="comment">//50个struct S类型的数据</span></span><br><span class="line">    <span class="comment">//如果只有30个学生，就会有空间上的浪费</span></span><br><span class="line">    <span class="comment">//如果有60个学生，空间又会不够</span></span><br><span class="line">    <span class="comment">//数组的元素个数，是给定的一个常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>C语言是可以创建变长数组的 -C99中增加了（很多个编译器可能都还没有支持）</p><p>不够普遍。</p><hr><p>因为上面的两种开辟内存空间的方式比较局限，不能满足我们想用多少就开辟多少空间的需求，所以引出动态内存管理。</p><p><strong>提高内存的使用率。</strong></p><h2 id="2-相关函数"><a href="#2-相关函数" class="headerlink" title="2.相关函数"></a>2.相关函数</h2><h3 id="1-malloc和free"><a href="#1-malloc和free" class="headerlink" title="1.malloc和free"></a>1.malloc和free</h3><p><strong>头文件：#include&lt;stdlib.h&gt;</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//向内存申请10整型的空间</span></span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//p里面放的就是那块地址</span></span><br><span class="line">    <span class="comment">//失败时返回空指针NULL</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印错误原因的一个方式</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//正常使用空间</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p + i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当动态申请的空间不再使用的时候</span></span><br><span class="line">    <span class="comment">//就应该还给操作系统</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>malloc</strong></p><p>C语言提供了一个动态内存开辟的函数：</p><p>​    void* malloc (size_t size);</p><p>这个函数向内存申请一块连续可用的空间，并返回指向这块空间的指针。</p><ul><li>如果开辟成功，则返回一个指向开辟好空间的指针。</li><li>如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。</li><li>返回值的类型是*void，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。</li><li>如果size为0，malloc的行为是标准未定义的，取决于编译器。</li></ul><hr><p><strong>free</strong></p><p>C语言提供了另外一个函数free,专门是用来做动态内存释放和回收的。</p><p>free(空间);例如：上面开辟的那个，free(p);</p><p>//就算不free，刚才开辟的空间死掉的话，也会自动还给操作系统。</p><p>free之后，指向的将内存空间被释放了还给操作系统，但是p依然有能力找到这快空间，</p><p>p = NULL，主动将p赋值给空指针，彻底断开了联系，很好的避免了它犯错误。</p><p>free函数用来释放动态开辟的内存</p><ul><li><p>如果参数ptr指向的空间不是动态开辟的，那free函数的行为是未定义的。</p></li><li><p>如果参数prt是NULL指针，咋函数什么事都不做。</p></li></ul><h3 id="2-calloc"><a href="#2-calloc" class="headerlink" title="2.calloc"></a>2.calloc</h3><p>也是一个内存开辟函数，开辟一个空间并且把元素初始化为0.</p><p>原型如下：</p><p>void* </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>*p= (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(<span class="number">10</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));  </span><br><span class="line">    <span class="keyword">if</span>( p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(*p+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="comment">//free函数是用来释放动态开辟的内存空间的</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calloc和malloc一个初始化效率低一点，一个不初始化，效率高一点。</p><ul><li>函数的功能是为num个大小为size的元素开辟一块空间，并且把空间的每个字节初始化为0。</li><li>与函数malloc的区别只在于calloc会在返回地址之前把申请的空间的每个字节初始化为全0。</li></ul><h3 id="3-realloc"><a href="#3-realloc" class="headerlink" title="3.realloc"></a>3.realloc</h3><p><strong>调整动态开辟内存的大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//只是在使用malloc开辟的20个字节空间</span></span><br><span class="line">    <span class="comment">//假设这里，20个字节不能满足我们的使用要求</span></span><br><span class="line">    <span class="comment">//希望我们能够有40个字节的空间</span></span><br><span class="line">    <span class="comment">//这里就可以使用realloc来调整动态开辟的内存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">realloc</span><span class="params">(p,<span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> *p2 = <span class="built_in">realloc</span>(p,<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(p2+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>realloc函数的出现让动态内存管理更加灵活。</li><li>有时我们发现过去申请的内存空间太小了，有时候又会觉得申请的空间过大了，那为了合理的使用内存，我们一定会对内存的大小做灵活的调整。那realloc函数就可以做到对动态开辟内存大小的调整。函数原型如下：</li></ul><p>void* realloc (void* ptr,size_t size);</p><ul><li>ptr是要调整的内存地址</li><li>size是调整之后的大小</li><li>返回值为调整之后的内存起始位置</li><li>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间</li><li>realloc在调整内存空间存在两种情况</li></ul><p><strong>注意事项：</strong></p><ol><li>如果p指向的空间之后有足够的内存空间可以追加，则直接追加，后返回p指向空间的地址。</li><li>如果p指向的空间之后没有足够的内存空间可以追加，则realloc函数会重新找一块新的内存区域，开辟一块满足需求的空间并且把原来内存中的数据拷贝回来，释放旧的内存空间。最后返回新开辟的内存空间地址。</li><li>得用一个新的变量来接收realloc的返回值。</li><li>最后都要free</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-动态内存管理&quot;&gt;&lt;a href=&quot;#1-动态内存管理&quot; class=&quot;headerlink&quot; title=&quot;1.动态内存管理&quot;&gt;&lt;/a&gt;1.动态内存管理&lt;/h1&gt;&lt;h2 id=&quot;1-为什么存在动态内存管理&quot;&gt;&lt;a href=&quot;#1-为什么存在动态内存管理&quot; c</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于C语言的计算机网络编程(初识)</title>
    <link href="http://example.com/2021/04/04/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%88%9D%E8%AF%86/"/>
    <id>http://example.com/2021/04/04/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%88%9D%E8%AF%86/</id>
    <published>2021-04-04T03:09:07.000Z</published>
    <updated>2021-04-04T13:01:02.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a>1.计算机网络概述</h1><h2 id="1-最早的广域网"><a href="#1-最早的广域网" class="headerlink" title="1.最早的广域网"></a>1.最早的广域网</h2><p>在通信双方或多方之间，通过电路交换建立电路连接的网络。</p><p><img src="/images/image-20210401162927335.png"></p><h2 id="2-电路交换网的特点"><a href="#2-电路交换网的特点" class="headerlink" title="2.电路交换网的特点"></a>2.电路交换网的特点</h2><ol><li><p>建立链接-&gt;使用链接-&gt;释放链接</p></li><li><p>物理通路被双方独占。</p><p>计算机数据是突发式出现在数据链路上的，而电路交换网的建立链接、使用链接、释放链接三个过程使得传输效率太低，故电路交换不适合传输计算机数据。</p><h2 id="3-计算机的网络要求"><a href="#3-计算机的网络要求" class="headerlink" title="3.计算机的网络要求"></a>3.计算机的网络要求</h2><ol><li><p>不是为了打电话</p></li><li><p>结构简单，可靠的传输数据</p></li><li><p>能够连接不同种类的计算机</p></li><li><p>所有网络节点同等重要</p></li><li><p>必须由冗余的路由</p><p><strong>最早的计算机网络</strong>-美国创造的ARPA，最早的ARPA无法连接不同类型的计算机和不同类型操作系统。</p><h2 id="4-分组交换"><a href="#4-分组交换" class="headerlink" title="4.分组交换"></a>4.分组交换</h2><p> <strong>分组交换——</strong>通过标有地址的分组进行路由选择传送数据，使通信通道在传送期间被占用的一种交换方式。</p><p>分组的组成：每个分组都有首部和数据段组成。</p><p><img src="/images/image-20210401163007059.png"></p><h2 id="5-交换方式"><a href="#5-交换方式" class="headerlink" title="5.交换方式"></a>5.交换方式</h2><p>交换方式——<strong>存储转发</strong></p><p>节点收到分组，先暂时存储下来，再检查其首部，按照首部中的目的地址，找到合适的节点转发出去。</p><p><img src="/images/image-20210401162904189.png"></p><p>特点：</p><ol><li><p>以分组作为传输单位</p></li><li><p>独立的选择转发路由</p></li><li><p>逐段占用，动态分配传输带宽。</p><h2 id="6-因特网的发展史"><a href="#6-因特网的发展史" class="headerlink" title="6.因特网的发展史"></a>6.因特网的发展史</h2><p>从的那个APPANET向因特网的发展过程</p><p>1983年 TCP/IP协议称为APPANET的标准协议</p><p><strong>计算机网络世界的世界语——TPC/IP协议</strong></p><p>到现在为止，只要是能够通信、上网的机器，一定用的就是TPC/IP协议族。</p><p>（TPC/IP协议是由很多协议组成的）</p><h2 id="7-三级结构的因特网"><a href="#7-三级结构的因特网" class="headerlink" title="7.三级结构的因特网"></a>7.三级结构的因特网</h2><p>（NSFNET国家科学基金网）</p><p>围绕六台大型计算机中心建设起来的计算机网络</p><p>主干网、地区网、校园网、</p><p><img src="/images/image-20210401164144400.png"></p></li></ol></li></ol></li></ol><p>现在我们国家的网络基本由移动、联通、电信，来进行下分，说白了国家把网络的一些布置，和网络的下分交给了这三大机构来实现。</p><h2 id="8-多级结构因特网"><a href="#8-多级结构因特网" class="headerlink" title="8.多级结构因特网"></a>8.多级结构因特网</h2><p>NSFNET逐步商用因特网主干网代替</p><p><img src="/images/image-20210401164451581.png"></p><h2 id="9-TCP-IP协议简介"><a href="#9-TCP-IP协议简介" class="headerlink" title="9.TCP/IP协议简介"></a>9.TCP/IP协议简介</h2><p>为了使各种不同计算机之间进可以互联，ARPANET指定了一套计算机通信协议，即TCP/IP协议(族)。 </p><p>为了减少协议设计的复杂性，大多数网络模型均采用分层的方式来组织 ，每一层利用下一层提供的服务来为上一层提供服务，本层服务的实现细节对上层屏蔽。</p><h2 id="10-分层结构"><a href="#10-分层结构" class="headerlink" title="10.分层结构"></a>10.分层结构</h2><p>为了实现不同类型的计算机和不同类型的操作系统之间的通信，引入了分层的概念。</p><p>最早的分层体系结构叫做OSI开放系统互联模型，是由国际化标准组织（ISO）指定的，由于OSI过于复杂，所以到现在为止也没有使用它，而使用的是TCP/IP协议族。</p><p>OSI一共分为7层，TPC/IP协议族一共分为4层，虽然TPC/IP协议族层次少，但是却干了OSI7层所有任务</p><p><img src="/images/image-20210401170310168.png"></p><p><strong>应用层</strong>：应用程序间沟通的层（手机电脑上用的微信QQ,用户能操纵的全都是应用层的）</p><p>​    例如：FPT（文件传输协议）、Telnet、HTTP （超文本协议）等。</p><p><strong>传输层：</strong>提供进程之间的数据传送服务</p><p>​    负责传送数据、提供应用程序端到端的逻辑通信</p><p>​    例如：TCP、UDP。</p><p><strong>网络层：</strong>提供基本的数据封包传送功能</p><p>​    最大可能的让每个数据包都能到大目的主机</p><p>​    例如：IP（网际协议）、ICMP等。</p><p><strong>链路层：</strong>负责数据帧的发送和接收</p><p>​    每层完成自己的任务，最终通过不同层次的处理完成数据的收发。</p><p><img src="/images/image-20210401172352190.png"></p><p>（U形 从我传输数据到张3）</p><h2 id="11-IP协议简介"><a href="#11-IP协议简介" class="headerlink" title="11.IP协议简介"></a>11.IP协议简介</h2><p><strong>IP协议也叫做网际协议。</strong></p><p>特指为实现在一个相互连接的网络系统上从源地址到目的地址传输数据包（互联网数据包）所提供必要功能的协议。</p><p><strong>特点：</strong></p><p>​    不可靠：它不能保证IP数据包能成功到达它的目的地，仅提供尽力而为的传输服务。</p><p>(就告诉你对方是谁，至于你怎么传输，它不管。)</p><p>​    无连接：IP并不维护任何关于后续数据包的状态信息。每个数据包的处理是相互独立的。IP数据包可以不按发送顺序接收。</p><p><strong>IP数据包中含有发送它主机的IP地址（源地址）和接收它主机的地址（目的地址）。</strong></p><p><strong>在网络中IP地址是我们主机的唯一标识。</strong></p><h2 id="12-TPC协议简介"><a href="#12-TPC协议简介" class="headerlink" title="12.TPC协议简介"></a>12.TPC协议简介</h2><p><strong>TPC协议——传输控制协议。</strong></p><p><strong>TPC是一种面向连接的，可靠的传输层通信协议。</strong></p><p><strong>功能：</strong></p><p>​    提供不同主机上 的进程间通信。</p><p><strong>特点：</strong></p><ol><li><p>建立链接-&gt;使用链接-&gt;释放链接（虚电路）。</p></li><li><p>TPC数据包中包含序号和确认序号。（保证数据传输的无误）</p></li><li><p>对包进行排序并检错，而损坏的包可以被重传。</p><p><strong>服务对象：</strong></p><p>需要高度可靠性且面向连接的服务。</p><p>如HTTP（超文本协议）、FTP（文件传输协议）、SMTP（简单邮件传输协议）等。</p><p>（如果用的不都是TCP协议，就无法保证数据可以完整可靠的到达，从而出现问题，像文件传输、邮件传输、浏览网页，一定都是建立在TCP协议的基础上的。）</p><h2 id="13-UDO协议简介"><a href="#13-UDO协议简介" class="headerlink" title="13.UDO协议简介"></a>13.UDO协议简介</h2><p><strong>UDP协议——用户数据报协议</strong>。</p><p><strong>UDP是一种面向无连接的传输层通信协议</strong>。</p><p><strong>功能：</strong></p><p>​    提供不同主机间上的进程间通信。</p><p><strong>特点：</strong></p><ol><li><p>发送数据之前不需要建立链接。</p></li><li><p>不对数据包的顺序进行检查。（可能有顺序问题，但是快啊 ）</p></li><li><p>没有错误检测和重传机制。</p><p><strong>服务对象：</strong></p><p>主要用于”查询-应答”的服务</p><p>如：NFS、NTP、DNS等</p></li></ol></li></ol><h2 id="14-MAC地址、IP地址、Netmask、端口"><a href="#14-MAC地址、IP地址、Netmask、端口" class="headerlink" title="14.MAC地址、IP地址、Netmask、端口"></a>14.MAC地址、IP地址、Netmask、端口</h2><h3 id="1-网卡"><a href="#1-网卡" class="headerlink" title="1.网卡"></a><strong>1.网卡</strong></h3><p>​    网卡又称为网络适配器或网络接口卡NIC，但是现在更多的人愿意使用更为简单的名称’网卡’，通过网卡能够使不同的计算机之间连接，从而完成数据通信等功能。</p><h3 id="2-MAC地址："><a href="#2-MAC地址：" class="headerlink" title="2.MAC地址："></a><strong>2.MAC地址：</strong></h3><p>​    每一个网卡在出厂的时候都会给它分配一个编号，这个编号就叫做<strong>MAC地址</strong>。</p><p>MAC地址，用于标识网络设备，类似于身份证，且理论上全球唯一。</p><p>（MAC地址是可以修改的，但是一般是不建议修改的。）</p><p><strong>MAC地址的组成：</strong>——以太网内的MAC地址是一个48bit的值，通常人为识别时是通过16进制数来识别的，以两个十六进制数为一组，一共分为6组，每组通过冒号隔开，前三组叫做，厂商ID，后三组叫做，设备ID.</p><p>如何查询Linux的MAC地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>如何查询 Windows的MAC地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">鼠标右键点击计算机右下角电脑图标，选择网络和共享中心，选择更改适配器设置，找到联网的图标，双击打开，点击详细信息，即可找到MAC地址。</span><br></pre></td></tr></table></figure><h3 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3.IP地址"></a>3.<strong>IP地址</strong></h3><p>IP地址是一种Intenet上的主机编址方式，也称为网际协议地址。</p><p> IP地址是任意一台主机在网络中的唯一表示。</p><p><strong>IP地址的分类：</strong></p><p>IPV4——占32位，（主要用）</p><p>IPV6占128位，</p><p>（任意一个IP地址通过路由器都可以下分一个局域网。）</p><p><strong>IP地址组成：</strong></p><p>IPV4一般使用点分十进制字符串来表示，比如192.168.6.106</p><p>（ip地址有点类似于MAC地址，MAC地址是通过冒号把两个十六进制的数放一块来表示一组，一共有六组组成，而ipv4是通过点来把ip地址分开，相当于每一个点把它间隔1个字节，这是我们认为的时候是通过点分十进制的，但是如果实在网络中计算机识别，它还是一个整型的数据，占四个字节。）</p><hr><p>使用32bit，由（网络、ID、主机 ID）两部分组成</p><p>子网ID:IP地址中由子网掩码中1覆盖的连续位。</p><p>主机ID:IP地址中由子网掩码中0覆盖的连续位。</p><hr><p>子网ID和主机ID为什么这么区分呢？</p><p>——通过主机ID的范围可以确定当前一个网段到底可以下分多少个主机。</p><p><img src="/images/image-20210401191658443.png"></p><p><strong>IP地址的特点：</strong></p><p>子网ID不同的网络不能直接通信，如果要通信则需要路由器转发。</p><p>主机ID全为0的IP地址表示网段地址。</p><p>主机ID全为1（255个）的IP地址表示该网段的广播地址。 </p><p>例如：192.168.3.10和192.168.3.111可以直接通信。</p><p>​            对192.168.3.x网段而言，192.168.3.0表示网段， 192.168.3.255表示广播地址 。</p><p><strong>IP地址分类如下:</strong></p><p><strong>ABC三类地址是最常用的</strong></p><p>IPV4地址的分类（依据前8位进行区分）</p><p>A类地址：默认8bit子网ID,第一位为0，前八位范围00000000-011111111，0.x.x.x-127.x.x.x</p><p>B类地址：默认16bit子网ID，前两位为10，前八位范围10000000-10111111,128.x.x.x-191.x.x.x</p><p>C类地址：默认24bit子网ID,前三位为110，前八位范围11000000-11011111 ，192.x.x.x-223.x.x.x</p><p>D类地址：前四位为1110，多播（组播）地址,前八位范围11100000-11101111，  224.x.x.x-239.x.x.x</p><p>E类地址：前五位为11110，保留为今后使用，前八位范围11110000-11111111,</p><p>240.x.x.x-255.x.x.x</p><hr><p><strong>公有IP：</strong>（可直接连接Internet）</p><p>​    经由InterNIC所统一规划的IP。</p><p><strong>私有IP：</strong>（不可直接连接Internet）</p><p>​    主要用于局域网内的主机连接规划。</p><p><img src="/images/image-20210401194106678.png"></p><p>​    <strong>回环IP地址：</strong></p><p>通常127.0.0.1称为回环地址。</p><p>功能：主要测试本机的网络配置，能ping通127.0.0.1说明本机的网卡和IP协议安装都没有问题。</p><p>注意：127.0.0.1-127.255.255.254中的任何地址都将回环到本地主机中，</p><p>不属于任何一个有类别地址类，它代表设备的本地虚拟接口。</p><p><strong>查询IP地址的命令：</strong></p><p>Linux——ifconfig</p><p>Windows——ipconfig</p><p><strong>判断主机是否可以连接通信：</strong></p><p>ping ip地址，</p><p>如果显示%0 packet loss，就表示可以正常通信。</p><p><strong>子网掩码：</strong></p><p>子网掩码（subnet mask）又叫做网络掩码、地址掩码是一个32bit由1和0组成的数值，并且1和0 分别连续。</p><p>作用：指明IP地址中哪些位标识的是主机所在的子网以及哪些是标识的主机号。</p><p>特点：必须结合IP地址一起使用，不能单独存在。</p><p>​            IP地址中由子网掩码中1覆盖的连续位为子网ID，其余为主机ID。</p><p>子网掩码的表现形式：</p><p>192.168.220.0/255.255.255.0</p><p>192.168.220.0/24</p><p>手动配置:</p><p>Linux——<img src="/images/image-20210401200652709.png"></p><p>默认的子网掩码：</p><p>A类IP地址的默认子网掩码-255.0.0.0</p><p>B类IP地址的默认子网掩码-255.255.0.0</p><p>C类IP地址的默认子网掩码-255.255.255.0(对应的网络ID是前三个字节，主机ID是最后一个字节，最多能给他分配256个IP地址，其中.0和.255分别表示网段和广播地址，所以一共可以分配254个IP地址)</p><h3 id="4-端口："><a href="#4-端口：" class="headerlink" title="4.端口："></a>4.<strong>端口：</strong></h3><p>端口概述</p><p>TPC/IP协议采用端口标识通信的进程</p><p>用于区分一个系统里的多个进程</p><p>特点：</p><ol><li><p>对于同一个端口，在不同系统中对应着不同的进程。</p></li><li><p>对于同一个系统，一个端口只能被一个进程拥有。</p></li><li><p>一个进程拥有一个端口后，传输层送到该端口的数据全部被该进程接收，同样，进程送交给传送层的数据也通过该端口被送出。</p><p><strong>端口号：</strong></p><p>类似pid（进程号）标识一个进程，在网络程序中，用端口号(port)来标识一个运行的网络程序。</p><p><strong>特点：</strong></p><ol><li>端口号是无符号短整型类型。</li><li>每个端口都有一个端口号。</li><li>TPC、UDP维护各自独立的端口号。</li><li>网络应用程序，至少占用一个端口号，也可以占用多个端口号。</li></ol><p><strong>知名端口</strong>号（1~1023）</p><p>由互联网数字分配机构（IANA）根据用户需要进行统一分配</p><p>例如：FTP-21,HTTP-80</p><p>服务器通常使用的范围：</p><p>若强制使用，需加root权限 。</p><p><strong>动态端口</strong>（1024~65535）</p><p>应用程序通常使用的范围。</p><p>一般我们可以使用的端口号就在这个范围，比如：6666、7777、8888、9999、10000、10001等。</p><p><strong>注意：</strong></p><p>​    端口号类似于进程号，同一时刻只能标识一个进程。</p><p>​    可以重复使用。</p></li></ol><h2 id="15-数据包的组装、拆解"><a href="#15-数据包的组装、拆解" class="headerlink" title="15.数据包的组装、拆解"></a>15.数据包的组装、拆解</h2><h3 id="1-数据包在各个层之间的传输"><a href="#1-数据包在各个层之间的传输" class="headerlink" title="1.数据包在各个层之间的传输"></a>1.数据包在各个层之间的传输</h3><p><img src="/images/image-20210402121144462.png"></p><h3 id="2-链路层封包模式"><a href="#2-链路层封包模式" class="headerlink" title="2.链路层封包模式"></a>2.链路层封包模式</h3><p><img src="/images/image-20210402121958302.png"></p><p>目的地址：目的MAC地址</p><p>源地址：源MAC地址</p><p>类型：确定以太网头后面跟的是哪个协议</p><p>​            0X0800 IP协议</p><p>​            0x0806 arp协议</p><p>​            0x0835 rarp协议</p><p><strong>注意：</strong></p><p>1、IEE802.2/802.3封装常用在无线。</p><p>2、以太网封装常用在有线局域网</p><h3 id="3-网络层、传输层封包格式"><a href="#3-网络层、传输层封包格式" class="headerlink" title="3.网络层、传输层封包格式"></a>3.网络层、传输层封包格式</h3><p><img src="/images/image-20210402122735364.png"></p><h2 id="16-网络应用程序开发流程"><a href="#16-网络应用程序开发流程" class="headerlink" title="16.网络应用程序开发流程"></a>16.网络应用程序开发流程</h2><h3 id="1-TPC——面向连接"><a href="#1-TPC——面向连接" class="headerlink" title="1.TPC——面向连接"></a>1.TPC——面向连接</h3><p>电话系统服务模式的抽象。</p><p>每一次完整的数据传输都要经过建立连接、使用连接、终止连接的过程。</p><p>本质上，连接是一个管道，收发数据不但顺序一致，而且内容相同。</p><p>保证数据传输的可靠性。</p><p><img src="/images/image-20210402143007985.png"></p><h3 id="2-UDP面向无连接"><a href="#2-UDP面向无连接" class="headerlink" title="2.UDP面向无连接"></a>2.UDP面向无连接</h3><p>邮件系统服务模式的抽象。</p><p>每个分组都携带完整的目的地地址。</p><p>不能保证分组的先后顺序。</p><p>不进行分组出错的恢复和重传。</p><p>不保证数据传输的可靠性。</p><p><img src="/images/image-20210402143326619.png"></p><hr><p>无论采用面向连接的还是无连接的，两个进程通信过程中，大多采用c/s架构（客户端 服务器架构）,</p><p>client向server发送请求，server接收到后提供相应的服务。</p><p>在通信过程中往往都是client先发送请求，而server等待请求然后进行服务。</p><p><img src="/images/image-20210402143629366.png"></p><hr><p>c/s架构示例，（面向连接）</p><p><img src="/images/image-20210402144056505.png"></p><p>服务器要先与客户端进行连接，TCP三次握手，三次握手成功之后，才可以相互发送数据，结束时，TCP四次挥手。</p><hr><p><strong>suerver工作过程</strong></p><p>打开通信通道告诉本地主机，它愿意在一特定端口（如80）上接收客户请求，</p><p>等待客户请求到达该端口，</p><p>接收客户请求，并发送应答信号，激活一新的线程处理这个客户请求，</p><p>服务完成后，关闭新线程与客户的通信链路。</p><p><strong>client工作过程</strong></p><p>打开一通信通道并连接到服务器特定端口，</p><p>向服务器发送服务请求，等待并接收应答，</p><p>根据需求继续提出请求，</p><p>请求结束后关闭通信通道并终止。</p><hr><h1 id="2-UDP编程"><a href="#2-UDP编程" class="headerlink" title="2.UDP编程"></a>2.UDP编程</h1><h2 id="1-编程准备-字节序、地址转换"><a href="#1-编程准备-字节序、地址转换" class="headerlink" title="1.编程准备-字节序、地址转换"></a>1.编程准备-字节序、地址转换</h2><h3 id="1-字节序概述"><a href="#1-字节序概述" class="headerlink" title="1.字节序概述"></a>1.字节序概述</h3><p>是指多字节数据的存储顺序。</p><p><strong>分类：</strong></p><p>​        小端格式：将低位字节数据存储在低地址。</p><p>​        大端格式：将高位字节数据存储在低地址。</p><p><strong>注意：</strong></p><p>​        LSB:低地址。</p><p>​        MSB:高地址。</p><p><img src="/images/image-20210402151122456.png"></p><p><strong>如何判断当期机器的字节序：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">un</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">un</span> <span class="title">myun</span>;</span></span><br><span class="line">myun.a = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %#x\n&quot;</span>, myun.a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %#x\n&quot;</span>, myun.b);</span><br><span class="line"><span class="keyword">if</span> (myun.b == <span class="number">0x78</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端存储模式\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端存储模式\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字节序转换函数"><a href="#2-字节序转换函数" class="headerlink" title="2.字节序转换函数"></a>2.字节序转换函数</h3><p><strong>特点：</strong></p><ol><li>网络协议指定通信字节序为大端存储。</li><li>只有在字节数据处理时才需要考虑字节序。</li><li>运行在同一台计算机上的进程互相通信时，一般不用考虑字节序。</li><li>异构计算机之间通讯，需要转换自己的字节序为网络字节序。</li></ol><p><strong>在需要字节转换的时候一般调用特定字节序转换函数。</strong></p><blockquote><p>host —&gt; network</p><p>1——htonl</p><p>2——htons</p><p>network —&gt; host</p><p>3——ntohl</p><p>4——ntohs</p></blockquote><h4 id="1-htonl"><a href="#1-htonl" class="headerlink" title="1.htonl"></a>1.htonl</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint32_t htonl(uint32_t hostint32);</p><p><strong>功能：</strong></p><p>​        将32位主机字节序数据转换成网络字节序数据</p><p><strong>参数：</strong></p><p>​        hostint32:待转换的32位主机字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回网络字节序的值.</p><h4 id="2-htons"><a href="#2-htons" class="headerlink" title="2.htons"></a>2.htons</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint16_t htons(uint16_t hostint16);</p><p><strong>功能：</strong></p><p>​        将16位主机字节序数据转换成网络字节序数据</p><p><strong>参数：</strong></p><p>​        uint16_t: unsigned short int </p><p>​        hostint16:待转换的16位主机字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回网络字节序的值。</p><h4 id="3-ntohl"><a href="#3-ntohl" class="headerlink" title="3.ntohl"></a>3.ntohl</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint32_t ntosl(uint32_t hostint32);</p><p><strong>功能：</strong></p><p>​        将32位网络字节序数据主机字节序数据。</p><p><strong>参数：</strong></p><p>​        uint32_t: unsigned  int </p><p>​        netint32:待转换的32位网络字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回主机字节序的值。</p><h4 id="4-ntohs"><a href="#4-ntohs" class="headerlink" title="4.ntohs"></a>4.ntohs</h4><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>​        uint16_t ntosl(uint16_t hostint16);</p><p><strong>功能：</strong></p><p>​        将16位网络字节序数据主机字节序数据。</p><p><strong>参数：</strong></p><p>​        uint32_t: unsigned  short int </p><p>​        netint32:待转换的16位网络字节序数据。</p><p><strong>返回值：</strong><br>        成功：返回主机字节序的值。</p><hr><p>案例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Linux</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x123456789</span>;</span><br><span class="line">    <span class="keyword">short</span> b = <span class="number">0x1234</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,htonl(a));<span class="comment">//0x785612</span></span><br><span class="line">    <span class="comment">//转化为网络字节序变成了大端存储模式</span></span><br><span class="line">    <span class="comment">//c语言%#x是指带格式的16进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,htons(a));<span class="comment">//0x3412</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-地址转换函数"><a href="#3-地址转换函数" class="headerlink" title="3.地址转换函数"></a>3.地址转换函数</h3><p>人为识别的ip地址是点分十进制数串形式，但是计算机或者网络中识别的ip地址是整形数据，所以需要进行转化。</p><h4 id="1-inet-pton函数"><a href="#1-inet-pton函数" class="headerlink" title="1.inet_pton函数"></a>1.inet_pton函数</h4><p>字符串 ip地址转整型数据</p><p><strong>头文件：</strong></p><p>​        #include&lt;arpa/inet.h&gt;</p><p>int inet_pton(int famliy,const char &amp;strptr, void *addrptr)</p><p>人为识别的时候，ip地址就是一串字符串。让网络或者识别的时候，要将他转化为整型数据。用四字节的整数来保存整个ip地址。</p><p><strong>功能：</strong></p><p>​        将点分十进制的数转换成32位无符号整数。</p><p><strong>参数;</strong></p><p>​        family 协议族</p><pre><code>             AF_INET   IPV4网络协议</code></pre><p>​                AF_INET6 IPV6网络协议</p><p>​        strptr 点分十进制数串 </p><p>​        addrptr 32位无符号整数的地址</p><p><strong>返回值：</strong></p><p>​        成功返回1、失败返回其他</p><hr><p>案例：</p><p>​    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ip_str = <span class="string">&quot;192.168.3.103&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ip_int = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *ip_p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//将点分十进制ip地址转化为32位无符号整型数据</span></span><br><span class="line">    inet_pton(AF_INET ,ip_str,&amp;ip_int);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ip_net = %d\n&quot;</span>,ip_net);</span><br><span class="line">    ip_p = (<span class="keyword">char</span> *)&amp;ip_int;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in_uint = %d,%d,%d,%d\n&quot;</span>,*ip_p,*(ip_p+<span class="number">1</span>),*(ip_p+<span class="number">2</span>),*(ip_p+<span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/images/image-20210403100508157.png"></p><hr><h4 id="2-inet-ntop函数"><a href="#2-inet-ntop函数" class="headerlink" title="2.inet_ntop函数"></a>2.inet_ntop函数</h4><p>整型数据转字符串格式ip地址</p><p><strong>头文件：</strong></p><p>​    #include&lt;arpa/inet.h&gt;</p><p>const char *inet_ntop(int family,const void *addrptr,char *strptr,size_t len);</p><p><strong>功能：</strong></p><p>​    将32位无符号整数转换为点分十进制数串。</p><p><strong>参数：</strong><br>    family 协议族</p><p>​    addrptr 32位无符号整数</p><p>​    strptr点分十进制数串</p><p>​    len strptr缓冲区长度</p><p>​                len 的宏定义</p><p>​                #define INET_ADDRSTRLEN 16     //for IPV4</p><p>​                #define INET_ADDRSTRLEN 46     //for IPV6</p><p><strong>返回值：</strong></p><p>​    成功：则返回字符串首地址。</p><hr><p>案例;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ip_net[] = &#123;<span class="number">192.168</span><span class="number">.3</span><span class="number">.103</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ip_str[<span class="number">16</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    inet_ntop(AF_INET,&amp;ip_int,ip_str,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ip_s = %s\n&quot;</span>,ip_str);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="/images/image-20210403101223448.png"></p><hr><h4 id="3-inet-addr-和ine-ntoa"><a href="#3-inet-addr-和ine-ntoa" class="headerlink" title="3.inet_addr()和ine_ntoa()"></a>3.inet_addr()和ine_ntoa()</h4><p>只能用在IPV4的ip地址的转换中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">in_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></span>;</span><br><span class="line">功能：</span><br><span class="line">    将点分十进制ip地址转化为整型数据。</span><br><span class="line">参数：</span><br><span class="line">    cp:点分十进制ip地址</span><br><span class="line">返回值：</span><br><span class="line">    成功：整型数据</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br><span class="line">功能：</span><br><span class="line">    将整型数据转化为点分十进制的ip地址</span><br><span class="line">参数：</span><br><span class="line">    in:保存ip地址的结构体</span><br><span class="line">返回值:</span><br><span class="line">成功：点分十进制ip地址。</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-UDP介绍、编程流程"><a href="#2-UDP介绍、编程流程" class="headerlink" title="2.UDP介绍、编程流程"></a>2.UDP介绍、编程流程</h2><h3 id="1-UDP概述"><a href="#1-UDP概述" class="headerlink" title="1.UDP概述"></a>1.UDP概述</h3><p><strong>UDP协议：</strong></p><p>​    面向无连接的用户数据协议，在传输数据前不需要先建立连接，目的主机的运输层收到UDP报文后，不需要给出任何确认。</p><p><strong>UDP特点：</strong></p><ol><li>相比TCP速度稍快。</li><li>简单的请求/应答应用程序可以使用UDP.</li><li>对于海量的数据传输不应该使用UDP.</li><li>广播和多播应用必须使用 UDP。</li></ol><p><strong>UDP应用：</strong></p><p>​    DNS(域名解析)、NFS(网络文件系统)、RTP(流媒体)等。</p><p>​    一般语音和视频通话都是使用UDP来通信的</p><h3 id="2-网络的编程接口socket"><a href="#2-网络的编程接口socket" class="headerlink" title="2.网络的编程接口socket"></a>2.网络的编程接口socket</h3><p><strong>网络通信要解决的是不用主机进程间的通信。</strong></p><ol><li><p>首要问题是网络间进程标识问题。</p></li><li><p>以及多重协议的识别问题。</p><p>​    20世纪80年代初，加州大学Berkeley分校在BSD(一个UNIX OS版本)系统内实现了TPC/IP协议；其网络程序编程开发接口为socket。</p></li></ol><p>随着UNIX以及类UNIX的操作系统的广泛应用，socket成为最流行的网络程序开发接口。</p><p>(Linux操作系统就是类UNIX操作系统。)</p><p><strong>socket作用：</strong></p><p>​    提供不同主机上进程之间的通信。</p><p><strong>socket特点:</strong></p><ol><li>socket也成”套接字”。</li><li>是一种文件描述符，代表了一个通信管道的一个端点。</li><li>类似于对文件的操作一样（读写操作），可以使用read、write、close等函数对socket套接字进行网络数据的收取和发送等操作。</li><li>得到socket套接字（描述符）的方法调用socket()。</li></ol><p><strong>socket的分类：</strong></p><p>SOCK_STREAM，流式套接字，用于TCP。</p><p>SOCK_DGRAM，数据报套接字，用于UDP。</p><p>SOCK_ROW，原始套接字，对于其他层次的协议操作时需要使用这个类型。</p><h3 id="3-UDP编程c-s架构"><a href="#3-UDP编程c-s架构" class="headerlink" title="3.UDP编程c/s架构"></a>3.UDP编程c/s架构</h3><p><img src="/images/image-20210403161617968.png"></p><p>（左边UDP客户端                                                                 右边UDP服务器     ）</p><p>（服务器永远是被动的，客户端是主动的。）</p><p><strong>UDP网络编程流程：</strong></p><p>​    <strong>服务器：</strong></p><p>​            创建套接字socket()</p><p>​            将服务器的IP地址、端口号与套接字进行绑定bind()</p><p>​            (为什么要进行绑定，只有当你进行绑定了之后，服务器所对应的信息才能固定，客户端才能找到服务器。)</p><p>​            接收数据recvfrom()</p><p>​            发送数据sendto()</p><p>​    <strong>客户端：</strong></p><p>​            创建套接字socket()</p><p>​            发送数据sendto()</p><p>​            接收数据recvfrom()</p><p>​            关闭套接字close()</p><h3 id="4-UDP编程-创建套接字"><a href="#4-UDP编程-创建套接字" class="headerlink" title="4.UDP编程-创建套接字"></a>4.UDP编程-创建套接字</h3><p>int socket(int family,int type,int protocol);</p><p><strong>功能：</strong></p><p>​    创建一个用于网络通信的socket套接字（描述符）。</p><p><strong>参数：</strong></p><p>​    family:协议族(AF_INET、AF_INET6、PF_PACKET等)</p><p>​    type:套接字类(SOCK_STREAM、SOCK_DGRAM、SOCK_RAW等)</p><p>​    protocol:协议族类(0、IPPROTO_TCP、IPPROTO_UDP等)</p><p><strong>返回值：</strong></p><p>​    套接字</p><p><strong>特点：</strong></p><p>​     创建套接字时，系统不会分配端口。</p><p>​     创建的套接字默认属性是主动的，即主动发起服务的请求；当作为服务器时，往往需要修改为被动的。</p><p><strong>头文件：</strong></p><p>​    #include&lt;sys/socket.h&gt;</p><h3 id="5-创建UDP套接字demo"><a href="#5-创建UDP套接字demo" class="headerlink" title="5.创建UDP套接字demo"></a>5.创建UDP套接字demo</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//使用socket函数创建套接字</span></span><br><span class="line">    <span class="comment">//创建一个用于UDP网络编程的套接字</span></span><br><span class="line">    <span class="keyword">int</span> socket;</span><br><span class="line">    <span class="keyword">if</span>((socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fail to socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockfd = %d\n&quot;</span>,sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">sockfd = <span class="number">3</span>；</span><br></pre></td></tr></table></figure><h2 id="3-UDP编程-发送-、绑定、接收数据"><a href="#3-UDP编程-发送-、绑定、接收数据" class="headerlink" title="3.UDP编程 - 发送 、绑定、接收数据"></a>3.UDP编程 - 发送 、绑定、接收数据</h2><h3 id="1-IPV4套接字地址结构"><a href="#1-IPV4套接字地址结构" class="headerlink" title="1.IPV4套接字地址结构"></a>1.IPV4套接字地址结构</h3><p>**在网络编程中经常使用的结构体 **sockaddr_in</p><p> <strong>头文件：</strong>#include&lt;netinet/in.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  int_addr_t_s_addr;<span class="comment">//4字节</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socketaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;<span class="comment">//2 协议族</span></span><br><span class="line">    <span class="keyword">in_port_t</span> sin_port;<span class="comment">//2字节 端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">//4个字节 IP地址</span></span><br><span class="line">    <span class="keyword">char</span> sin_zero[<span class="number">8</span>];<span class="comment">//8个字节------填充，不起什么作用，一个char类型的数组。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了使不同格式地址能被传入套接字函数，地址须要强制转换成通用套接字地址结构。</p><p>因为：不同场合使用的结构体不一样，但是调用的函数却是同一个，所以定义一个通用结构体，当在指定场合使用时，再根据要求传入指定的结构体即可。</p><p><strong>通用结构体</strong></p><p>sockaddr</p><p>#include&lt;netinet/in.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family;<span class="comment">//2个字节</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];<span class="comment">//14个字节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>​    以上三个结构在Linux系统中已经定义。</p><h3 id="2-两种地址结构使用场合"><a href="#2-两种地址结构使用场合" class="headerlink" title="2.两种地址结构使用场合"></a>2.两种地址结构使用场合</h3><p>在定义源地址和目的地址结构时，选用struct sockaddr_in</p><p>例：</p><p>struct sockaddr_in my_addr;</p><p>当调用编程接口函数，且该函数也需要传入地址结构时需要用struct sockaddr进行强制转换。</p><p>例：</p><p>bind(sockfd,(struct sockaddr*)&amp;my_addr,sizeof(my_addr));</p><h3 id="3-发送数据-sendto函数"><a href="#3-发送数据-sendto函数" class="headerlink" title="3.发送数据-sendto函数"></a>3.发送数据-sendto函数</h3><p>ssize_t sendto(int sockfd const void *buf,</p><p>​                        size_t nbytes,int flags,</p><p>​                        const struct sockaddr *to,</p><p>​                        socklen_t addrlen);</p><p><strong>功能：</strong></p><p>​    向to结构体指针中指定的ip，发送UDP数据。</p><p><strong>参数：</strong></p><p>​    sockfd:套接字</p><p>​    buf:发送数据缓冲区</p><p>​    nbytes:发送数据缓冲区的大小</p><p>​        </p><p>​    flags:一般为0</p><p>​    to:指向目的主机地址结构体的指针</p><p>​    addrlen:to所指向内容的长度</p><p><strong>注意：</strong></p><p>​    to和addrlen确定目的地址</p><p>​    可以发送0长度的UDP数据包</p><p><strong>返回值：</strong></p><p>​    成功：发送数据的字符数</p><p>​    失败：-1</p><h3 id="4-向”网络调试助手”发送消息"><a href="#4-向”网络调试助手”发送消息" class="headerlink" title="4.向”网络调试助手”发送消息"></a>4.向”网络调试助手”发送消息</h3><h3 id="5-绑定-bind函数"><a href="#5-绑定-bind函数" class="headerlink" title="5.绑定 bind函数"></a>5.绑定 bind函数</h3><p>UDP网络程序想要收取数据需要什么条件？</p><p>​    确定的ip地址</p><p>​    确定的port</p><p>怎样完成上面的条件呢？</p><p>​    接收端 使用bind函数，来完成地址结构和socket套接字的绑定，这样ip、port就固定了。</p><p>​    发送端 在sendto函数中指定接收端的ip、port,就可以发送数据了。</p><hr><p>由于服务器是被动的，客户端是主动的，一般先运行服务器，后运行客户端，所以服务器需要固定自己的信息（ip、port），这样客户端才可以找到服务器并与之通信，客户端一般不需要bind绑定，因为系统会自动给客户端分配ip地址和端口号。</p><hr><p>int bind(int sockfd,</p><p>​                    const struct sockaddr * myaddr , socklen_t addrlen);</p><p><strong>功能：</strong></p><p>​    将本地协议地址与sockfd绑定。</p><p><strong>参数：</strong></p><p>​    sockfd: socket套接字</p><p>​    myaddr:指向特定协议的地址结构指针</p><p>​    addrlen:该地址结构的长度</p><p><strong>返回值：</strong></p><p>​    成功：返回0</p><p>​    失败：其他</p><h3 id="6-bind示例"><a href="#6-bind示例" class="headerlink" title="6.bind示例"></a>6.bind示例</h3><h3 id="7-接收数据——recvfrom-函数"><a href="#7-接收数据——recvfrom-函数" class="headerlink" title="7.接收数据——recvfrom 函数"></a>7.接收数据——recvfrom 函数</h3><p>ssize_t recvfrom(int sockfd,void *buf,</p><p>​                            size_t nbytes,int flags,</p><p>​                            struct sockaddr *from,</p><p>​                            socklen_t 8addrlen);</p><p><strong>功能：</strong></p><p>​    接收UDP数据 ，并将源地址信息保存在from指向的结构中。</p><p><strong>参数：</strong></p><p>​    sockfd:套接字</p><p>​    buf:接收数据缓区</p><p>​    flags:套接字标志(常为0)</p><p>​    from:源地址结构体指针，用来保存数据的来源</p><p>​    addrlen:from所指内容的长度</p><p><strong>注意：</strong></p><p>​    通过from和addrlen存放数据来源的信息</p><p>​    from和addrlen可以为NULL,表示不保存数据的来源</p><p><strong>返回值：</strong></p><p>​    成功：接收到的字符数</p><p>​    失败：-1</p><h3 id="8-接收”网络调试助手”的数据"><a href="#8-接收”网络调试助手”的数据" class="headerlink" title="8.接收”网络调试助手”的数据"></a>8.接收”网络调试助手”的数据</h3><h2 id="4-回顾"><a href="#4-回顾" class="headerlink" title="4.回顾"></a>4.回顾</h2><p><strong>UDP编程-client、server</strong></p><p>​    其实在网络编程开发中，clent和server双方既可以有发送数据还可以接收数据；一般认为服务的一方为server,而接受服务的一方为client.</p><p>​    <strong>C/S架构回顾</strong></p><h2 id="5-UDP客户端注意点"><a href="#5-UDP客户端注意点" class="headerlink" title="5.UDP客户端注意点"></a>5.UDP客户端注意点</h2><ol><li>本地ip,本地端口（我是谁）</li><li>目的ip.目的端口（发给谁）</li><li>在客户端代码中，我们只设置了目的ip,目的端口。</li></ol><p><img src="/images/image-20210404105327134.png">                            </p><h2 id="6-UDP服务器注意点"><a href="#6-UDP服务器注意点" class="headerlink" title="6.UDP服务器注意点"></a>6.UDP服务器注意点</h2><ol><li>服务器之所以需要bind是因为它的本地port是需要固定的，而不是随机的。</li><li>服务器也可以主动地给客户端发送数据。</li><li>客户端也可以用bind ，这样客户端的本地端口就是固定的了，但一般不这样做。</li></ol><hr><p>参考视频：<a href="https://www.bilibili.com/video/BV1pX4y1N7T4?p=41">https://www.bilibili.com/video/BV1pX4y1N7T4?p=41</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-计算机网络概述&quot;&gt;&lt;a href=&quot;#1-计算机网络概述&quot; class=&quot;headerlink&quot; title=&quot;1.计算机网络概述&quot;&gt;&lt;/a&gt;1.计算机网络概述&lt;/h1&gt;&lt;h2 id=&quot;1-最早的广域网&quot;&gt;&lt;a href=&quot;#1-最早的广域网&quot; class=&quot;</summary>
      
    
    
    
    <category term="网络编程" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-网络编程" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现字母数字雨小程序</title>
    <link href="http://example.com/2021/03/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E9%9B%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/03/31/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E9%9B%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-03-31T12:58:28.000Z</published>
    <updated>2021-03-31T13:00:53.815Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字母数字雨</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//随机数头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//包含easyX图形库 可以使用绘图函数 以及鼠标操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 20<span class="comment">//没串雨的字符个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RAIN_NUM 128<span class="comment">//雨的数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH 960</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEIGHT 640</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_W 15<span class="comment">//字符宽度</span></span></span><br><span class="line"><span class="comment">//结构体封装属性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rain</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> speed;</span><br><span class="line"><span class="keyword">char</span> str[STR_SIZE];<span class="comment">//每一串字符语</span></span><br><span class="line">&#125;rain[RAIN_NUM];</span><br><span class="line"><span class="comment">//每一个字符串由字符组成</span></span><br><span class="line"><span class="comment">//写一个函数生成字符</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">createch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//随机产生字符，使用rand函数,</span></span><br><span class="line"><span class="comment">//随机中的随机</span></span><br><span class="line"><span class="keyword">int</span> flag = rand() % <span class="number">3</span>;<span class="comment">// 0 1 2</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//产生0~9的随机数 加一个&#x27;0&#x27;把数字转化成字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;<span class="comment">//随机产生字母 大写 小写 26个字母</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ch = rand() % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].x = i*STR_W;<span class="comment">//每条雨之间的距离等距</span></span><br><span class="line">rain[i].y = rand() % HEIGHT;</span><br><span class="line">rain[i].speed = rand() % <span class="number">5</span> +<span class="number">5</span> ;<span class="comment">//在5 ~ 9之间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].str[j] = createch();<span class="comment">//初始化每条雨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//双缓冲绘图</span></span><br><span class="line">BeginBatchDraw();</span><br><span class="line"><span class="comment">//清楚屏幕</span></span><br><span class="line">cleardevice();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置颜色</span></span><br><span class="line">settextcolor(RGB(<span class="number">0</span>,<span class="number">255</span>-j*<span class="number">13</span>,<span class="number">0</span>));<span class="comment">//由下到上 越来越浅</span></span><br><span class="line"><span class="comment">//out text xy 输出文本到指定的位置</span></span><br><span class="line">outtextxy(rain[i].x,rain[i].y<span class="number">-15</span>*j,rain[i].str[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EndBatchDraw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeCh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到每一个字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; STR_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//让字符串的每一个字符，都有可能发生改变，但是不是同一时间发生改变。</span></span><br><span class="line">rain[i].str[rand() % STR_SIZE] = createch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让它动起来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GamePlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RAIN_NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">rain[i].y+=rain[i].speed;</span><br><span class="line"><span class="comment">//当它掉出屏幕后 传到上面</span></span><br><span class="line"><span class="keyword">if</span> (rain[i].y-STR_SIZE*STR_W &gt;= HEIGHT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//让速度重新生成</span></span><br><span class="line">rain[i].speed = rand() % <span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line">rain[i].y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeCh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下落的过程中，数字字母不断变化</span></span><br><span class="line"><span class="comment">//让程序暂停 原理就是运用死循环</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断是否有按键产生</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit() &amp;&amp; _getch() == <span class="string">&#x27; &#x27;</span>)<span class="comment">//有按键返回非0值，否则返回0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (_getch() != <span class="string">&#x27; &#x27;</span>);<span class="comment">//如果没有输入空格就一直等待</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个图形窗口,init初始化 大小 参数 宽高 SHOWCONSOLE显示黑窗口</span></span><br><span class="line">initgraph(WIDTH, HEIGHT);</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line">srand(GetTickCount());<span class="comment">//返回从开机到现在所经过的毫秒数，让所产生的随机数不断的变化。</span></span><br><span class="line">GameInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">GamePlay();</span><br><span class="line">GameDraw();</span><br><span class="line">changeCh();</span><br><span class="line">stop();</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考视频：<a href="https://www.bilibili.com/video/BV1kK411M7qo?t=5027">https://www.bilibili.com/video/BV1kK411M7qo?t=5027</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>自定义结构类型(2)</title>
    <link href="http://example.com/2021/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2/"/>
    <id>http://example.com/2021/03/28/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2/</id>
    <published>2021-03-28T03:21:44.000Z</published>
    <updated>2021-03-28T03:23:23.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>参考视频：<a href="https://www.bilibili.com/video/BV1oi4y1g7CF?p=58">https://www.bilibili.com/video/BV1oi4y1g7CF?p=58</a></p><p><strong>大纲：</strong></p><ol><li><p>结构体的声明</p></li><li><p>结构体的自引用</p></li><li><p>结构体内存对齐</p></li><li><p>结构体传参</p></li><li><p>结构体实现位段(位段的填充&amp;可移植性)</p><hr><p>char short  int long short float double -这些都叫做内置类型，是C语言自己的类型</p><p>对于一些复杂对象，光用内置函数是不够的。</p><p>复杂类型(自定义类型)-结构体、枚举、联合体。</p></li></ol><h2 id="1-结构体的声明"><a href="#1-结构体的声明" class="headerlink" title="1.结构体的声明"></a>1.结构体的声明</h2><ol><li><p><strong>结构体的基础知识</strong>：结构体是一些值的集合，这些值称为成员变量。结构体的每个成员可以是不同类型的变量。</p><hr><p><strong>结构体的声明</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>//随便定义名字</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    member-<span class="built_in">list</span>;</span><br><span class="line">&#125;vairable-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure></li></ol><p>例如描述一个学生</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明一个结构题类型</span></span><br><span class="line"><span class="comment">//声明一个学生类型，通过学生类型来创建学生变量(对象)</span></span><br><span class="line"><span class="comment">//描述学生；属性-名字-电话-性别</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//下面这些叫做成员变量</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];<span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">5</span>];<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">20</span>];<span class="comment">//学号</span></span><br><span class="line">&#125;s4, s5, s6;<span class="comment">//变量列表;//分号不能丢</span></span><br><span class="line"><span class="comment">//全局变量 上面的s4~6也是</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s3</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建结构体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊的声明</strong></p><p>在结构声明的时候，可以不完全的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名结构体类型 没给结构体名字</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">char</span> b ;</span><br><span class="line">    <span class="keyword">float</span> c;   </span><br><span class="line">&#125;x;<span class="comment">//没有结构体名字，只有一种创建方式，赶紧用这个匿名结构体类型的变量列表创建一个x，否则以后就创建不了了，因为该结构体没有具体的名字。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">char</span> b ;</span><br><span class="line">    <span class="keyword">float</span> c;   </span><br><span class="line">&#125;a[<span class="number">20</span>],*p;</span><br><span class="line"><span class="comment">//上面两个结构在声明的时候省略掉了结构体标签(tag)</span></span><br><span class="line"><span class="comment">//p = &amp;x;是不合法的，编译器会把上面的两个声明当成完全不同的两个类型。所以是非法的。</span></span><br></pre></td></tr></table></figure><h2 id="2-结构的自引用"><a href="#2-结构的自引用" class="headerlink" title="2.结构的自引用"></a>2.结构的自引用</h2><hr><p>数据结构：数据在内存中的存储结构  </p><hr><p><strong>错误自引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">// 4</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Nod</span> <span class="title">n</span>;</span> <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//n里面包含n,程序报错。//类似于递归的思路</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(struct Node);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正确方式：结构体能够找到同类型的其他的变量，用指针串连起来。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放数据的地方叫数据域 存放地址的地方叫指针域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">// 4</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span> <span class="comment">//4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>typedef重命名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>  //自引用的时候不建议省略名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">    </span><br><span class="line">&#125;Node;<span class="comment">//结尾的这个Node是类型名，不是变量名</span></span><br></pre></td></tr></table></figure><h2 id="3-结构体变量的定义和初始化"><a href="#3-结构体变量的定义和初始化" class="headerlink" title="3.结构体变量的定义和初始化"></a>3.结构体变量的定义和初始化</h2><p><strong>结构体变量的初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化结构体中的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">short</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">T</span> <span class="title">sy</span>;</span></span><br><span class="line">    <span class="keyword">int</span> a ;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="comment">//结构体初始化的时候用大括号</span></span><br><span class="line">    struct S s = &#123;&#x27;c&#x27;，&#123;2.21,2&#125;,100,3.14，&#x27;hello sb&#x27;&#125;;</span><br><span class="line">    <span class="comment">//结构体成员的访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c %d %lf %s\n&quot;</span>,s.c,s.a,s.d,s.arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,s.st.weight);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-结构体内存对齐"><a href="#4-结构体内存对齐" class="headerlink" title="4.结构体内存对齐"></a>4.结构体内存对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> C1;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> C1;</span><br><span class="line">    <span class="keyword">char</span> c2;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S1</span> <span class="title">s1</span> =</span> &#123;<span class="number">0</span>&#125;;<span class="comment">//一个0 将里面所有的内容都初始化0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S2</span> <span class="title">s2</span>=</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">// 12</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">// 8</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构体的对齐规则：</strong></p><p>1.第一个成员在与结构体变量偏移为0的地址处。</p><p>2.其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。</p><p>对齐数=编译器默认的一个对齐数与该成员大小的较小值。</p><p>VS中默认的值是8            gcc编译器没有默认对齐数。</p><p>3.结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。</p><p>4.如果嵌套结构体的情况，嵌套的结构对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</p><p><strong>为什么存在内存对齐？</strong></p><p>1.平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的，某些硬件平台只能在某些地址处取某些特定类型的数据。否则抛出硬件异常。</p><p>2.性能原因：数据结构(尤其是栈)应该尽可能地在自然边界对齐。原因在于，为了访问未对齐的内存，处理器需要做两次内存访问；而对齐的内存访问仅需要一次访问。</p><p><strong>总的来说：</strong></p><p>​    结构体的内存对齐是拿空间来换取时间的做法。提升一下效率。</p><p><strong>如何设计结构体</strong></p><p>既要满足对齐，又要节省空间。</p><p>​                                        <strong>让占用空间小的成员尽量集中在一起</strong>。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> c1;</span><br><span class="line"><span class="keyword">char</span> c2;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line">S1和S2的结构体成员一模一样，但是S1和S2所占空间的大小有了一些区别。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改默认对齐数</strong></p><p><strong>#pragma pack()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)<span class="comment">//设置默认对齐数为4</span></span></span><br><span class="line"><span class="comment">//默认对齐数设置为1，其实就没有对齐了，就该是什么就往里面放什么了。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()<span class="comment">//取消设置的默认对齐数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>结构在对齐方式不合适的时候，我们可以自己更改默认对齐数。</p><p><strong>offsetof()——结构体成员相对于结构体起始位置的偏移量</strong></p><p>头文件——#include&lt;stddef.h&gt;</p><p>(结构体名字,结构体成员)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,offsetof(struct S,c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-结构体传参"><a href="#5-结构体传参" class="headerlink" title="5.结构体传参"></a>5.结构体传参</h2><p>类似于：函数内部想改变函数外部的某个值的话，就要传地址进去。</p><p>（-&gt;是C语言和C++语言的一个运算符，叫做指向结构体成员运算符，用处是使用一个指向结构体或对象的指针访问其内成员。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(struct S* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ps-&gt;a = <span class="number">100</span>;</span><br><span class="line">ps-&gt;c = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">ps-&gt;d = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(struct S tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,tmp.a,tmp.c,tmp.d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传值</span></span><br><span class="line"><span class="comment">//如果害怕就打印一个值而传值过来可能会导致值的改变，就加一个const</span></span><br><span class="line"><span class="comment">//综合考虑建议结构体传参传地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> struct S* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,ps-&gt;a,ps-&gt;c,ps-&gt;d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;&#125;;</span><br><span class="line">Init(&amp;s);</span><br><span class="line">    Print1(s);</span><br><span class="line">    Print2(&amp;s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数传参的时候，参数是需要压栈，会有时间和空间上的系统开销。</p><p>如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h1&gt;&lt;p&gt;参考视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1oi4y1g7CF?p=58&quot;&gt;ht</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现飞翔的小鸟小游戏</title>
    <link href="http://example.com/2021/03/27/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9F%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2021/03/27/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9F%E5%B0%8F%E6%B8%B8%E6%88%8F/</id>
    <published>2021-03-27T07:01:53.000Z</published>
    <updated>2021-03-27T07:12:30.795Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频<a href="https://www.bilibili.com/video/BV1Xo4y1R7hs">https://www.bilibili.com/video/BV1Xo4y1R7hs</a></p><p><strong>缺点：撞柱子功能暂未实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//飞翔的小鸟</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;//C语言标准头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;//图形库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;//按键处理</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;//随机函数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mmstream.h&gt;//多媒体库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">数据设计</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line">IMAGE background;</span><br><span class="line">IMAGE bigBird[<span class="number">2</span>]; <span class="comment">//bigBird[0] bigBird[1]</span></span><br><span class="line">IMAGE endImg[<span class="number">2</span>];</span><br><span class="line">IMAGE up[<span class="number">2</span>];</span><br><span class="line">IMAGE down[<span class="number">2</span>];</span><br><span class="line">HWND hwnd;<span class="comment">//句柄-表示的是窗口的意思</span></span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bird</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="comment">//鸟的x和y坐标</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> speed; <span class="comment">//鸟的速度</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//鸟的属性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bird</span> <span class="title">myBird</span> =</span> &#123; <span class="number">124</span>,<span class="number">304</span>,<span class="number">100</span> &#125;;</span><br><span class="line"><span class="comment">//加载资源：把图片和变量名绑定在一起</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先加载掩码如 再加载背景图</span></span><br><span class="line">loadimage(&amp;background, <span class="string">&quot;./images/background.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;bigBird[<span class="number">0</span>], <span class="string">&quot;./images/birdy.bmp&quot;</span>,<span class="number">48</span>,<span class="number">48</span>);</span><br><span class="line">loadimage(&amp;bigBird[<span class="number">1</span>], <span class="string">&quot;./images/bird.bmp&quot;</span>,<span class="number">48</span>,<span class="number">48</span>);</span><br><span class="line">loadimage(&amp;endImg[<span class="number">0</span>], <span class="string">&quot;./images/endy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;endImg[<span class="number">1</span>], <span class="string">&quot;./images/end.bmp&quot;</span>);</span><br><span class="line"></span><br><span class="line">loadimage(&amp;down[<span class="number">0</span>], <span class="string">&quot;./images/downy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;down[<span class="number">1</span>], <span class="string">&quot;./images/down.bmp&quot;</span>);</span><br><span class="line"></span><br><span class="line">loadimage(&amp;up[<span class="number">0</span>], <span class="string">&quot;./images/upy.bmp&quot;</span>);</span><br><span class="line">loadimage(&amp;up[<span class="number">1</span>], <span class="string">&quot;./images/up.bmp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">鸟的模块</span></span><br><span class="line"><span class="comment">1.绘制鸟的过程</span></span><br><span class="line"><span class="comment">2.按键操作控制鸟的过程</span></span><br><span class="line"><span class="comment">3.音乐部分---多线程知识</span></span><br><span class="line"><span class="comment">要开辟一个线程来播放音乐，要不他会影响背景的效果</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="comment">//绘制鸟的过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawBigbird</span><span class="params">(<span class="keyword">int</span> x ,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//贴图（掩码图）</span></span><br><span class="line">putimage(x, y, &amp;bigBird[<span class="number">0</span>], SRCAND);</span><br><span class="line">putimage(x, y, &amp;bigBird[<span class="number">1</span>], SRCPAINT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程处理函数---》C语言中函数指针</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">playMusic</span><span class="params">(LPVOID pVoid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mciSendString(<span class="string">&quot;open jump.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play jump.mp3 wait&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;clos jump.mp3&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">柱子部分</span></span><br><span class="line"><span class="comment">1.画柱子</span></span><br><span class="line"><span class="comment">2.初始化柱子</span></span><br><span class="line"><span class="comment">3.移动柱子</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pillar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//上面柱子的属性</span></span><br><span class="line"><span class="keyword">int</span> x ;</span><br><span class="line"><span class="keyword">int</span> y ;</span><br><span class="line"><span class="keyword">int</span> h ;</span><br><span class="line"><span class="comment">//根据上面柱子的属性能够退出下面柱子的属性</span></span><br><span class="line"><span class="comment">//Height - h</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pillar</span> <span class="title">zhuzi</span>[3];</span></span><br><span class="line"><span class="comment">//初始化柱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPillar</span><span class="params">(struct pillar zhuzi[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zhuzi[i].h = rand() % <span class="number">100</span> + <span class="number">160</span>;</span><br><span class="line">zhuzi[i].y = <span class="number">0</span>;</span><br><span class="line">zhuzi[i].x = <span class="number">288</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画柱子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPillar</span><span class="params">(struct pillar zhuzi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//上面的柱子</span></span><br><span class="line">putimage(zhuzi.x, <span class="number">0</span>, <span class="number">52</span>, zhuzi.h,&amp;down[<span class="number">0</span>],<span class="number">0</span>,<span class="number">320</span> - zhuzi.h,SRCAND);</span><br><span class="line">putimage(zhuzi.x, <span class="number">0</span>, <span class="number">52</span>, zhuzi.h, &amp;down[<span class="number">1</span>], <span class="number">0</span>, <span class="number">320</span> - zhuzi.h, SRCPAINT);</span><br><span class="line"><span class="comment">//下面的柱子</span></span><br><span class="line">putimage(zhuzi.x, <span class="number">512</span>-(<span class="number">320</span>-zhuzi.h), <span class="number">52</span>, <span class="number">320</span>-zhuzi.h, &amp;up[<span class="number">0</span>], <span class="number">0</span>,<span class="number">0</span>, SRCAND);</span><br><span class="line">putimage(zhuzi.x, <span class="number">512</span> - (<span class="number">320</span> - zhuzi.h), <span class="number">52</span>, <span class="number">320</span> - zhuzi.h, &amp;up[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>, SRCPAINT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">通用性技术：</span></span><br><span class="line"><span class="comment">1.并发编程</span></span><br><span class="line"><span class="comment">2.网络编程</span></span><br><span class="line"><span class="comment">3.数据库编程</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="comment">//按键交互</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyDown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> userKey = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">userKey = _getch();</span><br><span class="line"><span class="comment">//暂停功能</span></span><br><span class="line"><span class="keyword">if</span> (userKey == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (_getch() != <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (userKey)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line">myBird.y -= myBird.speed;</span><br><span class="line">CreateThread(<span class="literal">NULL</span>,<span class="literal">NULL</span>, playMusic, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//碰地板和上边界处理</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hitFloor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (myBird.y &lt;= <span class="number">0</span> || myBird.y &gt;= (<span class="number">512</span> - <span class="number">48</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束动画</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gameOverAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  x = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">608</span>;</span><br><span class="line"><span class="keyword">while</span> (y &gt;= <span class="number">240</span>)</span><br><span class="line">&#123;</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;background);</span><br><span class="line">putimage(x, y, &amp;endImg[<span class="number">0</span>], SRCAND);</span><br><span class="line">putimage(x, y, &amp;endImg[<span class="number">1</span>], SRCPAINT);</span><br><span class="line">y -= <span class="number">50</span>;</span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">MessageBox(hwnd,<span class="string">&quot;GameOver You Die!&quot;</span>,<span class="string">&quot;提示&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">入口函数</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">//加载资源</span></span><br><span class="line">loadResource();</span><br><span class="line"><span class="comment">//创建图形窗口</span></span><br><span class="line">initgraph(<span class="number">288</span>, <span class="number">608</span>);</span><br><span class="line"><span class="comment">//柱子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">initPillar(zhuzi, i);</span><br><span class="line">zhuzi[i].x = <span class="number">288</span> + i * <span class="number">150</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">putimage(<span class="number">0</span>, <span class="number">0</span>, &amp;background);</span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line">drawBigbird(myBird.x, myBird.y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">zhuzi[i].x -= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(zhuzi[i].x &lt; (<span class="number">-52</span> - <span class="number">150</span>))</span><br><span class="line">&#123;</span><br><span class="line">initPillar(zhuzi, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">drawPillar(zhuzi[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hitFloor())</span><br><span class="line">&#123;</span><br><span class="line">gameOverAction();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鸟的自由落体</span></span><br><span class="line">myBird.y += <span class="number">10</span>;</span><br><span class="line"><span class="comment">//只有按键处理，没有按键不处理</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())</span><br><span class="line">&#123;</span><br><span class="line">keyDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时处理</span></span><br><span class="line">Sleep(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">_getch();<span class="comment">//等待用户按键-防止闪屏</span></span><br><span class="line"><span class="comment">//关闭窗口</span></span><br><span class="line">closegraph();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考视频&lt;a href=&quot;https://www.bilibili.com/video/BV1Xo4y1R7hs&quot;&gt;https://www.bilibili.com/video/BV1Xo4y1R7hs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：撞柱子功能暂未实现&lt;/st</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言推箱子小程序</title>
    <link href="http://example.com/2021/03/27/C%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/03/27/C%E8%AF%AD%E8%A8%80%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-03-26T16:03:07.000Z</published>
    <updated>2021-03-26T16:14:41.967Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频<a href="https://www.bilibili.com/video/BV1By4y1a79o?t=4428">https://www.bilibili.com/video/BV1By4y1a79o?t=4428</a></p><p><strong>包括黑窗界面和图形界面</strong></p><p><strong>BUG：当人物进入到目的地的时候就动不了了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//这个库函数不是C 语言标准的，在VS上可以直接用，在Linux上就不行。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用布尔类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用图形界面-图形界面头文件（需要安装）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="comment">//推箱子</span></span><br><span class="line"><span class="comment">//知识点：数组 、函数、</span></span><br><span class="line"><span class="comment">//开发环境 vs2019</span></span><br><span class="line"><span class="comment">//准备地图数据 用二维数组来存储</span></span><br><span class="line"><span class="comment">//表示——空地 0 墙 1 目的地 2 箱子 3 玩家 4  </span></span><br><span class="line"><span class="comment">//这两个是动态变化的 箱子+目的地 5 玩家+目的地 6 </span></span><br><span class="line"><span class="comment">//难点在于判断移动导致的变化</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPACE0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WALL1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEST2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLAYER4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 10</span></span><br><span class="line"><span class="comment">//当前所在关卡</span></span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//变成3纬数组 可以存多个地图</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">3</span>][ROW][COL] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设计地图样式</span></span><br><span class="line"><span class="comment">//map1</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//map2</span></span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//map3</span></span><br><span class="line">    &#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义一个图片的数组int image</span></span><br><span class="line">IMAGE img[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadImg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temFileName[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">sprintf_s(temFileName,<span class="string">&quot;./images/%d.bmp&quot;</span>, i);</span><br><span class="line">loadimage(img + i, temFileName, <span class="number">63</span>, <span class="number">63</span>); <span class="comment">//项目属性-高级-字符集-使用多字符字符集</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">map</span>[level][i][k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SPACE:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WALL:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX + DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER + DEST:</span><br><span class="line">putimage(k * <span class="number">63</span>, i * <span class="number">63</span>, img + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">map</span>[level][i][k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">map</span>[level][i][k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SPACE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WALL:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;▓&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;☆&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♂&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BOX + DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;◇&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLAYER + DEST:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;♀&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">map</span>[level][i][k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushBox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//找到玩家所在的下标</span></span><br><span class="line"><span class="comment">//地图里面哪些数据有可能是玩家</span></span><br><span class="line"><span class="comment">//PLAYER PLAYER+DEST</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k&lt;<span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k] == PLAYER)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end:;<span class="comment">//goto到这里</span></span><br><span class="line"><span class="comment">//获取键盘按键 -  _getch()-一触即发不需要按回车 getchar()-输入之后需要按回车</span></span><br><span class="line"><span class="keyword">char</span> key = _getch();</span><br><span class="line"><span class="comment">//printf(&quot;%d %c\n&quot;, key, key);</span></span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:<span class="comment">//向上移动</span></span><br><span class="line"><span class="comment">//什么情况下 玩家才能移动 才能推箱子？</span></span><br><span class="line"><span class="comment">//玩家的前面是空地(目的地)、玩家的前面是箱子（箱子的前面是什么） 可以动</span></span><br><span class="line"><span class="comment">//如果玩家的前面是空地</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i- <span class="number">1</span>][k] == SPACE || <span class="built_in">map</span>[level][i - <span class="number">1</span>][k] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">1</span>][k] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[level][i<span class="number">-1</span>][k] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i - <span class="number">2</span>][k] == SPACE || <span class="built_in">map</span>[level][i - <span class="number">2</span>][k] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">2</span>][k] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i - <span class="number">1</span>][k] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:<span class="comment">//向下移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == SPACE || <span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">1</span>][k] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">1</span>][k] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i + <span class="number">2</span>][k] == SPACE || <span class="built_in">map</span>[level][i + <span class="number">2</span>][k] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">2</span>][k] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i + <span class="number">1</span>][k] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:<span class="comment">//向左移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == SPACE || <span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">1</span>] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">1</span>] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k - <span class="number">2</span>] == SPACE || <span class="built_in">map</span>[level][i][k - <span class="number">2</span>] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">2</span>] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i][k - <span class="number">1</span>] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:<span class="comment">//向右移动</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == SPACE || <span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == DEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">1</span>] += PLAYER;</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">1</span>] == BOX)<span class="comment">//玩家的前面是箱子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[level][i][k + <span class="number">2</span>] == SPACE || <span class="built_in">map</span>[level][i][k + <span class="number">2</span>] == DEST)<span class="comment">//箱子的前面是空地或者是目的地</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">2</span>] += BOX;</span><br><span class="line"><span class="built_in">map</span>[level][i][k + <span class="number">1</span>] += (PLAYER - BOX);</span><br><span class="line"><span class="built_in">map</span>[level][i][k] -= PLAYER;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//什么情况下才过关呢，当前关卡没有箱子了 就通关了</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; COL; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[level][i][k] == BOX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置黑窗口的大小</span></span><br><span class="line">system(<span class="string">&quot;mode con  cols=30 lines=20&quot;</span>);<span class="comment">//设置cols和lines数值的时候不能有空格，否则会报错。</span></span><br><span class="line"><span class="comment">//创建图形界面窗口</span></span><br><span class="line"><span class="comment">//参数 窗口的宽度 高度 SHOWCONSOLE表示同时显示控制台和控制台</span></span><br><span class="line">initgraph(ROW*<span class="number">63</span>,COL*<span class="number">63</span>,SHOWCONSOLE);</span><br><span class="line"><span class="comment">//Easyx只能用于C++,所以源文件后缀改为.cpp</span></span><br><span class="line">loadImg();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">show();</span><br><span class="line">DrawMap();</span><br><span class="line"><span class="comment">//判断是否过关</span></span><br><span class="line"><span class="keyword">if</span> (Judge())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//切换关卡</span></span><br><span class="line">level++;<span class="comment">//最大只有三关，超过了就数组越界了</span></span><br><span class="line"><span class="keyword">if</span> (level &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;按任意键进入下一关......\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">pushBox(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getchar();——防止闪退的，加了while 1就不需要了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考视频&lt;a href=&quot;https://www.bilibili.com/video/BV1By4y1a79o?t=4428&quot;&gt;https://www.bilibili.com/video/BV1By4y1a79o?t=4428&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包括</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言贪吃蛇小程序</title>
    <link href="http://example.com/2021/03/25/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/03/25/C%E8%AF%AD%E8%A8%80%E8%B4%AA%E5%90%83%E8%9B%87%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-03-25T12:37:25.000Z</published>
    <updated>2021-03-25T12:43:52.041Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频</p><p><a href="https://www.bilibili.com/video/BV1LN41197zV?from=search&amp;seid=15462998985727977257">https://www.bilibili.com/video/BV1LN41197zV?from=search&amp;seid=15462998985727977257</a></p><p><strong>代码有点缺陷：1.食物有可能会生成在吃不到的地方</strong></p><p>​                        <strong>2.吃掉食物的音效添加失败</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及、 结构体 、循环、 函数 、easyx-是一个图形库帮助做界面的、数组、枚举</span></span><br><span class="line"><span class="comment">//1做界面 创建一个窗口 图形窗口</span></span><br><span class="line"><span class="comment">//2创建一个蛇 蛇的结构 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h &gt;</span></span></span><br><span class="line"><span class="comment">//多媒体设备接口的两个东西</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mmsystem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SNAKE_NUM 500 <span class="comment">//蛇的最大节数</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DIR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">UP,</span><br><span class="line">DOWN,</span><br><span class="line">LEFT,</span><br><span class="line">RIGHT,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//蛇的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//蛇的节数</span></span><br><span class="line"><span class="keyword">int</span> dir;<span class="comment">//蛇的方向</span></span><br><span class="line"><span class="keyword">int</span> speed;<span class="comment">//蛇的速度</span></span><br><span class="line">POINT coor[SNAKE_NUM];<span class="comment">//坐标</span></span><br><span class="line">&#125;snake;</span><br><span class="line"><span class="comment">//食物的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">int</span> r;<span class="comment">//食物的半径(大小）</span></span><br><span class="line"><span class="keyword">bool</span> flag;<span class="comment">//食物是否被吃了的标记</span></span><br><span class="line">DWORD color;<span class="comment">//食物的颜色</span></span><br><span class="line">&#125;food;</span><br><span class="line"><span class="comment">//数据的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//播放背景音乐</span></span><br><span class="line">mciSendString(<span class="string">&quot;open ./res/snake_bgm.mp3 alias  BGM&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play BGM repeat&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//init 初始化 graph 图形窗口SHOWCONSOLE-显示控制台</span></span><br><span class="line">initgraph(<span class="number">600</span>, <span class="number">480</span>);</span><br><span class="line"><span class="comment">//设置随机数种子</span></span><br><span class="line"><span class="comment">//GetTickCount获取系统从开机到现在所经过的毫秒数</span></span><br><span class="line">srand(GetTickCount());</span><br><span class="line"><span class="comment">//初始化 蛇 一开始有3节</span></span><br><span class="line">snake.size = <span class="number">3</span>;</span><br><span class="line">snake.speed = <span class="number">10</span>;</span><br><span class="line">snake.dir = RIGHT;<span class="comment">//初始化方向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//横着的是x轴,像右为正方向</span></span><br><span class="line"><span class="comment">//竖着的是y轴,向下为正方向</span></span><br><span class="line">snake.coor[i].x = <span class="number">40</span><span class="number">-10</span>*i; </span><br><span class="line">snake.coor[i].y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化食物</span></span><br><span class="line"><span class="comment">//rand-随机函数-随机生成一个整数，但是如果没有设置随机数种子，每次产生的都是固定的整数。</span></span><br><span class="line"><span class="comment">//设置种子需要头文件 stdlib.h</span></span><br><span class="line"><span class="comment">//一般把时间作为随机数种子，因为时间在不断变化的。</span></span><br><span class="line">food.x = rand() % <span class="number">640</span>;</span><br><span class="line">food.y = rand() % <span class="number">480</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">10</span>+<span class="number">5</span>;</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//双缓冲绘图 -防止卡顿</span></span><br><span class="line">BeginBatchDraw();</span><br><span class="line"><span class="comment">//设置背景颜色-两步</span></span><br><span class="line">setbkcolor(RGB(<span class="number">28</span>, <span class="number">115</span>, <span class="number">119</span>));</span><br><span class="line">cleardevice();<span class="comment">//清除图形屏幕</span></span><br><span class="line"><span class="comment">//绘制蛇</span></span><br><span class="line">setfillcolor(RED); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size; i++)</span><br><span class="line">&#123;</span><br><span class="line">solidcircle(snake.coor[i].x, snake.coor[i].y, <span class="number">5</span>);<span class="comment">//此函数用来画填充圆</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制食物</span></span><br><span class="line"><span class="comment">//判断食物是否存在</span></span><br><span class="line"><span class="keyword">if</span> (food.flag)</span><br><span class="line">&#123;</span><br><span class="line">solidcircle(food.x, food.y,food.r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双缓冲结束</span></span><br><span class="line">EndBatchDraw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//蛇的移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SnakeMove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//移动是什么发生改变？  ---坐标</span></span><br><span class="line"><span class="comment">//**</span></span><br><span class="line"><span class="comment">//让身体跟着头移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = snake.size - <span class="number">1</span>; i &gt;<span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line">snake.coor[i] = snake.coor[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断方向</span></span><br><span class="line"><span class="keyword">switch</span> (snake.dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> UP:</span><br><span class="line">snake.coor[<span class="number">0</span>].y-=snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].y &lt;= <span class="number">0</span>)<span class="comment">//超出了上边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].y = <span class="number">480</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWN:</span><br><span class="line">snake.coor[<span class="number">0</span>].y+= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].y&gt;= <span class="number">480</span>)<span class="comment">//超出了下边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LEFT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x-= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &lt;= <span class="number">0</span>)<span class="comment">//超出了左边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].x = <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RIGHT:</span><br><span class="line">snake.coor[<span class="number">0</span>].x+= snake.speed;</span><br><span class="line"><span class="keyword">if</span> (snake.coor[<span class="number">0</span>].x &gt;= <span class="number">600</span>)<span class="comment">//超出了右边界</span></span><br><span class="line">&#123;</span><br><span class="line">snake.coor[<span class="number">0</span>].x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过按键改变蛇的移动方向</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keycontrol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断一下有没有按键</span></span><br><span class="line"><span class="keyword">if</span> (_kbhit())<span class="comment">//如果有按键就返回1真</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取键盘输入</span></span><br><span class="line"><span class="keyword">switch</span> (_getch())<span class="comment">//_getch是个阻塞函数，</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断输入的是什么</span></span><br><span class="line"><span class="comment">//键值 72 80 75 77 上下左右</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != DOWN)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = UP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != UP)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = DOWN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != RIGHT)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = LEFT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="keyword">if</span> (snake.dir != LEFT)</span><br><span class="line">&#123;</span><br><span class="line">snake.dir = RIGHT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//空格暂停</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_getch() == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断蛇吃食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EatFood</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (food.flag &amp;&amp; snake.coor[<span class="number">0</span>].x &gt;= food.x-food.r &amp;&amp; snake.coor[<span class="number">0</span>].x &lt;= food.x+food.r &amp;&amp;</span><br><span class="line">snake.coor[<span class="number">0</span>].y &gt;= food.y - food.r &amp;&amp; snake.coor[<span class="number">0</span>].y &lt;= food.y + food.r)</span><br><span class="line">&#123;</span><br><span class="line">food.flag = <span class="literal">false</span>;</span><br><span class="line">snake.size++;</span><br><span class="line"><span class="comment">//下面的吃掉音效添加失败</span></span><br><span class="line">mciSendString(<span class="string">&quot;open ./res/eatfood.mp3 alias  BGM2&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">mciSendString(<span class="string">&quot;play BGM2 &quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//食物被吃掉之后再次初始化</span></span><br><span class="line"><span class="keyword">if</span> (!food.flag)</span><br><span class="line">&#123;</span><br><span class="line">food.x = rand() % <span class="number">640</span>;</span><br><span class="line">food.y = rand() % <span class="number">480</span>;</span><br><span class="line">food.color = RGB(rand() % <span class="number">256</span>, rand() % <span class="number">256</span>, rand() % <span class="number">256</span>);</span><br><span class="line">food.r = rand() % <span class="number">10</span> + <span class="number">5</span>;</span><br><span class="line">food.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以加一个分数，吃一个食物加n分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GameInit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//while 1直接卡死 不让他闪退 </span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">GameDraw();</span><br><span class="line">SnakeMove();</span><br><span class="line">Sleep(<span class="number">50</span>);<span class="comment">//延迟xx毫秒(减速)</span></span><br><span class="line">keycontrol();</span><br><span class="line">EatFood();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考视频&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1LN41197zV?from=search&amp;amp;seid=15462998985727977257&quot;&gt;https://www.bilibili.com/vide</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>自定义数据类型</title>
    <link href="http://example.com/2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-22T12:13:35.000Z</published>
    <updated>2021-03-24T11:34:59.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h1><h2 id="1什么是位段"><a href="#1什么是位段" class="headerlink" title="1什么是位段"></a>1什么是位段</h2><p>位段的声明和结构是类似的，有两个不同</p><p>1位段的成员必须是int、unsigned int 或signed int 。</p><p>2位段的成员名后边有一个冒号和一个数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">int_a:<span class="number">2</span>;</span><br><span class="line">     int_b:<span class="number">5</span>;</span><br><span class="line">    int_c:<span class="number">10</span>;</span><br><span class="line">    int_d:<span class="number">30</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A就是一个位段类型</span><br><span class="line">那位段A的大小是多少？</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//位段 位是二进制位</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//后面的：是所对应变零需要的比特位</span></span><br><span class="line"><span class="keyword">int</span> a:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> d:<span class="number">30</span>;</span><br><span class="line">    <span class="comment">//一共47个比特位——6个字节就够了*8=48bit</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>；</span></span><br><span class="line"><span class="class">  <span class="title">printf</span>(&quot;%<span class="title">d</span>\<span class="title">n</span>&quot;,<span class="title">sizeof</span>(<span class="title">s</span>));</span><span class="comment">//占8个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2位段的内存分配"><a href="#2位段的内存分配" class="headerlink" title="2位段的内存分配"></a>2位段的内存分配</h2><p>1位段成员可以是int unsigned int signed int  或者是char（属于整型家族）类型。</p><p>2位段的空间上是按照需要以4个字节或者1个字节（char)的方式开辟的。</p><p>3位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段。</p><p><strong>在定义位段的变量中，最后一个不能大于32</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a : <span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> b : <span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span> c : <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> d : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    s.a = <span class="number">10</span>;</span><br><span class="line">    s.b = <span class="number">20</span>;</span><br><span class="line">    s.c = <span class="number">3</span>;</span><br><span class="line">    s.d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3位段的跨平台问题"><a href="#3位段的跨平台问题" class="headerlink" title="3位段的跨平台问题"></a>3位段的跨平台问题</h2><p>1int位段被当成有符号数还是无符号数是不确定的。</p><p>2位段中最大位的数目不能确定。（16位机器最大16，32位机器最大32，写成27，在16位机器会出问题）</p><p>3位段中的成员在内存中从左向右 分配，还是从右向左分配标准尚未定义。</p><p>4当一个结构包含两个位段，第二个成员比较大，无法容纳第一个剩余的位段时，是舍弃剩余的位还是利用，这是不确定的。</p><p><strong>总结：</strong></p><p>​    和结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是有跨平台的问题存在。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举故名思义就是一一列举</p><p>把可能的取值一一列举</p><h2 id="1定义"><a href="#1定义" class="headerlink" title="1定义"></a>1定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值</span></span><br><span class="line">    Mon,</span><br><span class="line">    Tus,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值—— 常量</span></span><br><span class="line">    MALE,<span class="comment">//0</span></span><br><span class="line">    FEMALE,<span class="comment">//1      可以在后面加入 = 给他一个初始值</span></span><br><span class="line">    <span class="comment">//如果前面的赋值了，后面的没有赋值，就按顺序往下延。</span></span><br><span class="line">    </span><br><span class="line">    SECRET<span class="comment">//2</span></span><br><span class="line">        </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//规定好了它的取值</span></span><br><span class="line">    <span class="comment">//enum是类型</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line">    <span class="comment">//S</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">red,<span class="comment">//0</span></span><br><span class="line">    green,<span class="comment">//1</span></span><br><span class="line">    blue<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在上面定义的枚举常量中green所对应的值就是2，那么我们在这可不可以直接给s赋值为2呢？</span></span><br><span class="line">    <span class="comment">//可以看到编译器并没有报错，说明编译器的语法检测不严格。</span></span><br><span class="line">    <span class="comment">//2在这里是整型</span></span><br><span class="line">    <span class="comment">//Color是枚举类型，两侧的类型是有差异的</span></span><br><span class="line">    <span class="comment">//在c++中会报错，c++语法检测更为严格</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">s</span> =</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> red 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> green 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> blue 2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color = red;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举的写法比这个要更加好一些</span></span><br></pre></td></tr></table></figure><h2 id="2枚举的优点"><a href="#2枚举的优点" class="headerlink" title="2枚举的优点"></a>2枚举的优点</h2><p>为什么使用枚举？</p><p>我们可以使用#define来定义常量，使用枚举的优点是什么呢。</p><p>1增加代码的可读性和可维护性。</p><p>2和#define定义的标识符比较枚举有类型检查，更加严谨。</p><p>3防止命名污染（<strong>命名冲突</strong>)（封装）。</p><p> <strong>封装就是把数据和函数打包到一个类里面</strong></p><p>4便于调试。</p><p>5使用方便，一次可以定义多个常量。</p><hr><p>程序的执行过程</p><p>c语言的源代码–预编译-链接-可执行程序</p><p>这里的预编译就是在处理#define之类的东西</p><p>预编译会把所有的注释都删除</p><hr><p>enum的大小怎么算呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    male,</span><br><span class="line">    female,</span><br><span class="line">    secret</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">sex</span> <span class="title">s</span> <span class="title">male</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h1><h2 id="1联合类型的定义"><a href="#1联合类型的定义" class="headerlink" title="1联合类型的定义"></a>1联合类型的定义</h2><p>联合是一种特殊的自定义类型，这种自定义类型的变量也包含一系列的成员，特征是这些成员公用同一块空间（所以联合也叫共用体）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;<span class="comment">//一个字节</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//四个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//4个字节</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">sb</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.c));<span class="comment">//注意是句号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.a));</span><br><span class="line">    <span class="comment">//三个地址相同</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2特点"><a href="#2特点" class="headerlink" title="2特点"></a>2特点</h2><p>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合有能力 保存最大的那个成员）。</p><p>联合体内的成员不能同时使用</p><hr><p>结构体、枚举、联合体的关键字不一样，性质也不一样</p><hr><h2 id="3联合大小的计算"><a href="#3联合大小的计算" class="headerlink" title="3联合大小的计算"></a>3联合大小的计算</h2><p>联合的大小至少是最大成员的大小。</p><p>当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。</p><p>相关推荐视频——<a href="https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位段&quot;&gt;&lt;a href=&quot;#位段&quot; class=&quot;headerlink&quot; title=&quot;位段&quot;&gt;&lt;/a&gt;位段&lt;/h1&gt;&lt;h2 id=&quot;1什么是位段&quot;&gt;&lt;a href=&quot;#1什么是位段&quot; class=&quot;headerlink&quot; title=&quot;1什么是位段&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(5)</title>
    <link href="http://example.com/2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/"/>
    <id>http://example.com/2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/</id>
    <published>2021-03-18T11:18:52.000Z</published>
    <updated>2021-03-18T11:21:08.130Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>常用的连续存储管理技术有固定分区存储管理和可变分区存储管理。</p></li><li><p>程序流程图中带有箭头的线段表示的是控制流。</p></li><li><p>若二叉树没有叶子结点，则为空二叉树。</p></li><li><p>带链栈的栈底指针是随栈的操作而动态变化的。</p></li><li><p>若带链队列中只有一个元素，则对头指针与队尾指针必定相同。</p></li><li><p>清晰第一，效率第二的论点已经成为当今主导的程序设计风格。</p></li><li><p>需求分析方法可以分为结构化分析方法和面向对象分析方法两大类。结构化分析方法的常用工具：数据流图（DFD图）、数据字典（DD）、判定表、判定树。</p></li><li><p>数据库应用系统包括数据库、数据库管理系统、人员（数据库管理员和用户）、硬件平台、软件平台、应用软件、应用界面7个部分。</p></li><li><p>数据库设计是数据应用的核心。</p></li><li><p>在数据库系统中，数据模型包括概念模型、逻辑模型和物理模型。</p></li><li><p>从关系中找到满足给定条件的元组的操作称为选择。</p></li><li><p>计算机系统由硬件系统和软件系统组成。</p></li><li><p>I/O方中的程序查询方式是指当 CPU需要执行I/O操作时，程序将主动查询I/O设备是否准备好。</p></li><li><p>采用循序存储的完全二叉树属于非线性结构。</p></li><li><p>应避免滥用goto语句。</p></li><li><p>需求分析阶段的工作可以分为4个方面：需求获取、需求分析、需求规格说明编写和需求评审。</p></li><li><p>数据库是指长期存储在计算机内的、有组织的、可共享的数据集合。</p></li><li><p>逻辑数据模型是面向数据库系统的模型，着重于在数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>I/O方式中的程序中断方式指的是当出现异常情况时，CPU暂时停止当前程序的运行，转向执行相应的服务程序。</p></li><li><p>对象的基本特点是：标识唯一性、分类性、多态性、模块独立性好。可移植性</p></li><li><p>数据字典(DD)的作用是定义数据流图中各个成分的具体含义。</p></li><li><p>逻辑数据模型又称为数据模型，是面向数据库系统的模型，着重于数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>进程一旦创建，即进入就绪状态。</p></li><li><p>算法的复杂度包括时间复杂度与空间复杂度。</p></li><li><p>软件需求规格说明书的作用不包括软件可行性研究的依据。</p></li><li><p>数据库系统可以减少数据冗余和增强数据独立性，而文件系统不能。</p></li><li><p>物理数据模型，也称物理模型，是面向计算机物理表示的模型，此模型给出了数据模型在计算机上物理结构的表示。</p></li><li><p>虚拟存储器是对主存的扩展。</p></li><li><p>在主存储器和CPU之间增加高速缓冲存储器来解决CPU和主存之间速度不匹配的问题。</p></li><li><p>程序和计算机执行程序的活动不再一一对应，在多道程序环境下。</p></li><li><p>算法的时间复杂度是指执行算法所需要的计算工作量。</p></li><li><p>面向对象方法中继承是指类之间共享属性和操作的机制。</p></li><li><p>在数据库管理系统提供的数据语言中，负责数据模式定义的是数据定义语言。</p></li><li><p>在E-R图中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>CPU可以通过总线访问计算机内存和各种输入输出设备。</p></li><li><p>采用虚拟存储管理技术的主要有点是可为用户提供比物理内存大的多的逻辑地址空间。</p></li><li><p>线性链表可以有多个指针域。</p></li><li><p>软件声明周期是指软件产品从提出、实现、使用维护到停止使用退役的过程。</p></li><li><p>软件设计汇总模块划分应遵循的准则是高内聚低耦合。</p></li><li><p>数据库系统中支持安全性定义和检查的语言是数据控制语言。</p></li><li><p>分布式计算机系统指的是由多态分散的计算机经网络连接而成，且可协作完成同一任务的系统。</p></li><li><p>固定分区存储管理技术采用静态地址重定位。</p></li><li><p>程序可以作为算法的一种描述方法。</p></li><li><p>软件声明周期可分为定义阶段、开发阶段和维护阶段，定义阶段包括问题定义、可行性研究和需求分析，开发阶段包括概要设计、详细设计、实现和测试，维护阶段包括使用和维护。</p></li><li><p>概要设计的任务为：设计软件系统解雇，数据结构及数据库设计，编写概要设计文档，概要设计文档评审。</p></li><li><p>数据库系统的三级模式结构为：概念模式、内模式和外模式。</p></li><li><p>在关系数据库中，用来表示实体间联系的是二维表。</p></li><li><p>实时操作系统是指当外界事件或数据产生时，系统能够接收并以足够快的速度予以处理和相应，能够控制所欲任务协调一直运行。飞机的飞行控制系统使用实时操作系统。</p></li><li><p>I/O方式中的DMA方式是指T/O设备与主存之间由硬件组成的直接数据通路，用于成组数据传送。</p></li><li><p>数据的处理效率与数据的存储结构有关。</p></li><li><p>先到先服务的作用调度与队列结构有关联。</p></li><li><p>软件过程不规范不属于软件危机表现。</p></li><li><p>模块独立性的概念是抽象、模块化、信息隐蔽和局部化的直接结果。</p></li><li><p>数据库设计中反映用户对数据要求的模式是外模式。</p></li><li><p>在关系模式模型中必须有键，键由一个或多个属性组成，其值能够唯一关系中的一个元组（表中的一行）。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;常用的连续存储管理技术有固定分区存储管理和可变分区存储管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序流程图中带有箭头的线段表示的是控制流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若二叉树没有叶子结点，则为空二叉树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带链栈的栈</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(4)</title>
    <link href="http://example.com/2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/"/>
    <id>http://example.com/2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/</id>
    <published>2021-03-17T12:20:46.000Z</published>
    <updated>2021-03-17T12:21:25.721Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在栈中，栈项指针的动态变化决定栈中元素的个数。</p></li><li><p>详细设计的人物是为软件结构体中的每一个模块确定实现算法和局部数据结构，用某种选定的表达工具表示算法和数据结构的细节。</p></li><li><p>扇出指由一个模块直接调用的其他模块个数。</p></li><li><p>按照传统的数据模型分类，数据模型分为层次模型、网状模型、关系模型。</p></li><li><p>数据库管理系统能实现对数据库汇总数据的查询、插入、修改和删除，这类功能称为数据操纵功能。</p></li><li><p>机器周期的同步标准是CPU访问存储器一次所需要的时间。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足，进程将从运行状态变迁为等待（阻塞）状态，需要调用阻塞进程原语。</p></li><li><p>软件测试的实施步骤是单元测试、集成测试、确认测试。</p></li><li><p>数据库管理系统中关系代数的运算有：投影运算、选择运算、笛卡尔积、交、连接等。</p></li><li><p>当一个进程在运行过程中释放了系统资源后要调用唤醒进程原语。</p></li><li><p>机器数补码的符号位取反即是偏移码。</p></li><li><p>所有的线性结构都可以采用顺序存储结构。</p></li><li><p>在希尔排序法中，没经过一次数据交换后能消除多个逆序。</p></li><li><p>对象实现了数据和操作(方法)的结合，其实现的机制是封装。</p></li><li><p>软件需求规格说明的内容不包括算法的详细设计。</p></li><li><p>数据库系系统减少了数据冗余</p></li><li><p>第一范式（INF）要求主属性（主键）不为空且不重复，字段不可再分。</p></li><li><p>从表中任何一个结点位置出发就可以不重复的访问到表中其他所有结点的链表是循环链表。</p></li><li><p>面向对象的主要特征：抽象、封装、继承、多态。</p></li><li><p>数据库中的数据具有集成、共享的特点，可以被不同应用程序所使用，减少相同数据重复存储的现象。</p></li><li><p>在任何一个关系数据控中，第一范式（1NF）是对关系模式的基本要求。</p></li><li><p>系统在创建一个进程时需要调用阻塞进程原语。</p></li><li><p>虚拟存储器是对主存的逻辑扩展，虚拟存储器的空间大小取决于计算机的访存能力而不是实际外存的大小。</p></li><li><p>将数据和操作置于对象统一体中的实现方式是封装。</p></li><li><p>数据流图（DFD）的作用是支持软件系统功能建模。</p></li><li><p>数据库管理系统(DBMS)是一种系统软件。</p></li><li><p>一个数据库可以有多个外模式（也成子模式或者用户模式），但概念模式和内模式（物理模式）只能有一个。</p></li><li><p>进程调度仅负责对CPU进行分配。</p></li><li><p>计算机内部采用二进制来表示指令和数据。</p></li><li><p>快速排序每经过一次元素交换就会产生新的逆序。</p></li><li><p>需求分析阶段产生的主要分档是需求规格说明书。</p></li><li><p>软件测试用例是为测试设计的数据，由测试输入数据和与之对应的预期输出结构两部分组成。</p></li><li><p>内模式对数据库的存储方式和物理结构的逻辑进行描述。</p></li><li><p>过程控制系统属于实时系统。</p></li><li><p>地址重定位方式包括静态地址重定位和动态地址重定位。</p></li><li><p>数据流图(DPD)中的有向箭头向右表示数据流。</p></li><li><p>代码编写阶段可进行的软件测试是单元测试。</p></li><li><p>数据模型通常由数据结构、数据操作及数据约束三部分组成。</p></li><li><p>在关系表中，属性值必须是另一个表主键的有效值或空值，这样的属性是外键。</p></li><li><p>静态地址重定位要求程序必须占用连续固定的内存空间。</p></li><li><p>动态地址重定位是在程序执行期间进行的。</p></li><li><p>静态地址重定位是在程序执行之前进行的。</p></li><li><p>循环链表是一种链式存储结构，循环队列是队列的一种顺序存储结构。</p></li><li><p>栈是线性结构。</p></li><li><p>二叉链表是二叉树的存储结构。</p></li><li><p>循环队列是队列的存储结构。</p></li><li><p>“数据流”应表示数据流名违背了数据流图(DFD)构造规则。</p></li><li><p>用树型结构表示实体及其之间联系的模型称为层次模型。用网状结构表示实体及其之间的联系模型称为网状模型。关系模型采用二维表来表示关系。</p></li><li><p>允许多个联机用户同时使用一台计算机系统进行计算的操作系统称为分时操作系统。</p></li><li><p>计算机中CPU通过总线与内存、外设等链接。</p></li><li><p>在循环队列中，对头指针和队尾指针的动态变化决定队列的长度</p></li><li><p>白盒测试的主要技术有逻辑覆盖测试、基本路径测试等。</p></li><li><p>在关系模式中凡能唯一标识元组最小属性集成为该关系的键或码。</p></li><li><p>在数据库中，产生数据不一致的根本原因是数据冗余。</p></li><li><p>操作系统的功能和任务主要有处理机管理（进程管理）、存储管理、设备管理、文件管理和用户接口。</p></li><li><p>软件需求规格说明书要涵盖用户对系统的所有需求，包括功能要求、性能要求、接口要求、设计约束等。</p></li><li><p>软件需求规格说明书的可验证性指描述的每一个用户都可在有限代价的有效过程中验证确认，对于软件没有可以验证性。</p></li><li><p>基本路径测试是属于白盒测试方法且是动态测试。</p></li><li><p>概念模型时用于现实世界的建模，与具体地DBMS无关。</p></li><li><p>关于计算机内带符号的定点数，补码的符号位取反即是偏移码。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在栈中，栈项指针的动态变化决定栈中元素的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详细设计的人物是为软件结构体中的每一个模块确定实现算法和局部数据结构，用某种选定的表达工具表示算法和数据结构的细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扇出指由一个模块直接调</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(3)</title>
    <link href="http://example.com/2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/"/>
    <id>http://example.com/2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/</id>
    <published>2021-03-16T10:55:59.000Z</published>
    <updated>2021-03-16T10:56:34.720Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>整数在计算机中存储和运算通常采用的格式是补码。</p></li><li><p>在操作系统中，将文件名转化为文件存储地址的结构是文件目录。</p></li><li><p>在长度为n的有序链表中进行查找，最坏情况下需要比较的次数为n。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。一个对象通常可由对象名（标识）、属性和操作三部分组成。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>数据库管理阶段的数据库系统的基本特点：数据集成性、数据的共享性高，冗余性低、数据独立性高、数据统一管理与控制。</p></li><li><p>对于关系模式，若其中的每个属性已经不能再分为简单项，则它属于第一范式。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足要调用阻塞进程原语。</p></li><li><p>进程是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先入后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：循序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指程序、数据和文档的集合。</p></li><li><p>数据库中存储的是数据以及数据之间的联系。</p></li><li><p>在关系数据库设计中，关系模式是用来记录用户数据的二维表。（关系模式采用二维表来表示关系，简称表）</p></li><li><p>在计算机中，运算器的基本功能是进行算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存的最大容量取决于计算机的地址位数。</p></li><li><p>循环链表的存储空间不一定是连续的。</p></li><li><p>对象是由描述对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>消息传递是对象间通信手段，一个对象通过像另一个对象发送消息来请求其服务。</p></li><li><p>类是对象的抽象，一个对象则是其对应类的一个实例。</p></li><li><p>数据库管理系统的主要功能包括：数据库的定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据数据库的并发性与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>整数在计算机存储和运算通常采用的格式是补码。</p></li><li><p>一个计算机系统中有成千上万个文件，为了便于对文件进行存取和管理，计算机系统建立文件的索引，即文件名和文件物理位置之间的映射关系，这种我呢间的索引称为文件目录。</p></li><li><p>规则不属于对象构成成分。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>I/O方式中使计算机系统并行工作程度最高的是程序查询。</p></li><li><p>计算机中的缓冲技术用于提高主机和设备交换信息的速度。</p></li><li><p>对长度为n的线性表进行快速排序，最坏的情况下需要比较的次数为n（n-1）/2。</p></li><li><p>对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>黑盒测试又称功能测试或数据驱动测试，着重测试软件的功能。黑盒测试依据需求规格说明书的功能描述。</p></li><li><p> 概念数据模型，简称概念模型，他是一种面向客观世界、面向用户的模型，它与具体的数据库管理系统和具体的计算机平台无关。</p></li><li><p>概念模型着重与客观世界复杂事物描述及对它们内在联系的刻画。目前，最著名的概念模型有实体-联系模型和面向对象模型。</p></li><li><p>总线带宽是指总线的数据传输率。</p></li><li><p>在快速排序法中，每经过一次数据交换（或移动后）能消除多个逆序。</p></li><li><p>结构化程序设计的重要原则是自项向下、逐步求精、模块及限制使用goto语句。</p></li><li><p>多态性是面向对象程序设计的特性。</p></li><li><p> 没有从属节点的模块是原子模块。</p></li><li><p>扇入指调用一个给定模块的模块个数。</p></li><li><p>结构图是描述软件系统结构的图形工具。</p></li><li><p>深度是指控制的层数。数据模型通常由数据结构、数据操作及数据约束3部分组成。完整性规则属于数据约束。</p></li><li><p>数据库概念设计阶段得到的结果是E-R模型。</p></li><li><p>进程是可以并发执行的程序的执行过程，它具有动态性、共享性、独立性、制约性和并发性5种属性。</p></li><li><p>二叉树属于非线性结构，但满二叉树与完全二叉树可以按层次进行顺序存储。</p></li><li><p>需求分析对待开发软件提出的需求进行分析并给出详细定于，是确定软件系统要做什么的阶段。</p></li><li><p>宽度指最大模块数的层的控制跨度（横向最大模块数）。</p></li><li><p>概念模式在关系数据库中，描述全局数据逻辑结构。</p></li><li><p>将实体-联系模型转换为关系模型时，一个多对多的联系可以转换为一个独立的关系模式，关系的键为联系中各实体键的组合。</p></li><li><p>CPU芯片内部连接各元件的总线是内部总线。</p></li><li><p>如果一个进程在运行时因某种原因暂停，该进程将脱离运行状态进入阻塞状态。</p></li><li><p>软件生存周期中，解决软件“怎么做”的阶段是软件设计。</p></li><li><p>软件深度表示控制的层数。</p></li><li><p>将数据库的结构划分成多个层次，是为了提高数据库的数据独立性。</p></li><li><p>关系的实体完整性要求关系中不能为空的属性是主键属性。</p></li><li><p>计算机工作的本质是取指令、分析指令和执行指令。</p></li><li><p>软件设计常用的工具有结构体、程序流程图、N-S图、PAD图、HIPO图、判定表、PDL。DFD（数据流程图）是需求分析阶段使用的工具。</p></li><li><p>软件测试的目的是发现程序中的错误。</p></li><li><p>用树型结构表示实体之间联系的模型时层次模型。</p></li><li><p>处于阻塞状态的进程，当阻塞原因解除后即进入就绪状态。</p></li><li><p>文件内容不属于文件属性。</p></li><li><p>需求分析产生的主要文档是需求规格说明书。</p></li><li><p>黑盒测试方法和技术有等价类划分法、边界值分析法、错误推测法和因果图等。</p></li><li><p>白盒从屙屎的主要技术有逻辑覆盖测试、基本路径测试，其中逻辑覆盖测试包括语句覆盖、路径覆盖、判定覆盖、条件覆盖、判断-条件覆盖。</p></li><li><p>在E-R图汇中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>关系模式的候选关键字可以有1个或多个。</p></li><li><p>在CPU执行一条指令的过程中至少占用一个机器周期。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整数在计算机中存储和运算通常采用的格式是补码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在操作系统中，将文件名转化为文件存储地址的结构是文件目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在长度为n的有序链表中进行查找，最坏情况下需要比较的次数为n。&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(2)</title>
    <link href="http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/"/>
    <id>http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/</id>
    <published>2021-03-15T14:44:57.000Z</published>
    <updated>2021-03-15T14:45:45.134Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>要是用外存储器中的信息，应先将其调入内存储器。</p></li><li><p>进制是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先进后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：顺序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。</p></li><li><p>在数据库中存储的是数据以及数据之间的联系。</p></li><li><p>关系模式是用来记录用户数据的二维表。</p></li><li><p>在一C语言程序中可以进行多种算法的实现，对算法的个数没有规定。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。</p></li><li><p>赋值运算符的优先级高于逗号运算符的优先级。</p></li><li><p>数组定义后，不可以对数组整体赋值。</p></li><li><p>全局变量的作用域是从声明处到文件的结束。</p></li><li><p>关键字typedef的作用只是将C语言中的已有的数据类型作了置换，并不是增加新的类型。</p></li><li><p>当对文件的读（写）操作完成之后，必须将他关闭，否则可能导致数据丢失。</p></li><li><p>选择中打开一个已存在的文件并进行了写操作后，原有文件中的全部数据不一定被覆盖，也可以对源文件进行追加操作等。</p></li><li><p>选项中在一个程序中当对文件进行了写操作后，不用先关闭该文件然后再打开，才能读到第一个数据，可以用fseek()函数进行重新定位即可。</p></li><li><p>C语言中的文件可以进行随机读写。</p></li><li><p>在计算机中，运算器的基本功能是继续宁算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存最大容量取决于计算机地址位数。</p></li><li><p>线性表链式存储结构的特点是，用一组不连续的存储单元存储线性表中的各个元素。线性链表的存储单元是任意的，即各数据结点取得存储序列可以是连续的，也可以是不连续的。循环链表采链式存储结构，因此存储空间也可以是不连续的。</p></li><li><p>二叉树的性质，对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>软件应首先满足用户的功能需求。</p></li><li><p>数据库管理系统的主要功能包括：数据模式定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据库的并发控制与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>使用顺序、选择、循环三种基本结构构成的程序可以解决所有问题，而不只是解决简单问题。</p></li><li><p>C语言是一种结构化程序设计语言。</p></li><li><p>程序化程序设计提倡模块化的设计方法。</p></li><li><p>在C语言中整型常量可以用十进制、八进制和十六进制等进制形式表示，但不包括二进制。</p></li><li><p>C语言中标识符由字母、数字、下划线、组成，另外关键字不能作为标识符。</p></li><li><p>算数运算符+的优先级高于- =，且- = 的结合方向为自右向左。</p></li><li><p>default语句在switch语句中可以省略。</p></li><li><p>宏替换没有数据类型限制。</p></li><li><p>宏定义卸载函数的花括号外边，作用域为其后的程序，通常在文件的最开头。</p></li><li><p>宏名一般用大写，但不是必须用大写。</p></li><li><p>计算机完成一条指令所花费的时间称为一个执行周期。</p></li><li><p>人工管理阶段没有专门的软件对数据进行管理。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要是用外存储器中的信息，应先将其调入内存储器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进制是程序的执行过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;循环队列是队列的一种顺序存储结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈先进后出，队列先进先出。&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(1)</title>
    <link href="http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/"/>
    <id>http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/</id>
    <published>2021-03-15T05:49:37.000Z</published>
    <updated>2021-03-15T05:57:35.037Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>计算机完成一条指令所花费的时间称为一个指令周期。</p></li><li><p>顺序程序具有顺序性、封闭性和可再现性的特点，使得程序设计者能够控制程序执行的过程（包括执行顺序、执行时间），对程序执行的中间结果和状态可以预先估计，这样就可以方便地进行程序的测试和调试。</p></li><li><p>为了降低算法的空间复杂度，主要应减少输入数据所占的存储空间以及额外空间，通常采用压缩存储技术。</p></li><li><p>算法的计算工作量是用算法所执行的基本运算次数来度量的，而算法所执行的基本运算次数是问题规模（通常用整数）表示的函数。</p></li><li><p>算法的复杂程度与程序的编制无关。</p></li><li><p>算法需要考虑可行性、确定性、有穷性等。</p></li><li><p>栈按先进后出的原则组织数据，所以入栈最早的元素最后出栈。队列按先进先出的原则组织数据，所以入队最早的元素最先退队。</p></li><li><p>树的总的结点数为树中所有结点的度数之和再加1.</p></li><li><p>结构化程序设计的目的：通过设计结构良好的程序保证程序动态执行的正确性，使程序易理解、易调试、易维护，以提高软件开发的效率，减少出错率，减少出错率，因此结构化程序强调程序的易读性。</p></li><li><p>系统软件是管理计算机的资源，提高计算机的使用效率，为用户提供各种服务的软件，如操作系统、数据库管理、编译程序、汇编程序和网络软件等。</p></li><li><p>数据库管理技术的三个阶段是人工管理阶段、文件系统阶段和数据库系统阶段。人工管理阶段没有专门的软件对数据进行管理。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>C语言中的非执行语句不会被编译，不会生成二进制的机器指令。</p></li><li><p>由C语言构成的指令序列称C源程序，C源程序经过C语言编译程序编译之后生成一个后缀为.OBJ的二进制文件（称为目标文件）；最后要由”连接程序”把此.OBJ文件与C语言提供的各种数据库函数连接起来生成一个后缀为.EXE的可执行文件。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。关键字不能作为标识符。</p></li><li><p>取模运算符%，二元运算符，具有左结合性。</p></li><li><p>在VC6.0平台中，int4字节，double8字节</p></li><li><p>C语言的逻辑运算符比较特别，他的操作数没有明确的数据类型，可以是任意合法的表达式。</p></li><li><p>不能将一个整数直接赋给指针变量作为地址。</p></li><li><p>函数的返回这可以是地址，即指针。</p></li><li><p>函数调用中形参值的变化不会传递给实参。</p></li><li><p>指针是用来存放地址的变量，用（类型名 *指针变量名）的形式定义。赋值时应将某个变量地址即&amp;x赋值给指针变量。</p></li><li><p>scanf(“%s”,s)表示输入一个字符串，遇到空格后会结束输入。所以当字符串内带有空格时，不能使用此语句。</p></li><li><p>在C语言中，只有在使用时才占用内存单元的变量，其存储类型是auto和register</p></li><li><p>不能再定义结构体的同时，又用结构体类型名定义变量。</p></li><li><p>预处理命令是以#号开头的命令，这些，命令因该在函数外书写，一般在源文件的最前面书写，但不是必须在起始位置书写。</p></li><li><p>C语言的预处理能够实现宏定义和条件编译等功能</p></li><li><p>buffer-用于接收数据的内存地址，大小至少是size*count字节</p></li><li><p>size-单位元素的大小，单位是字节</p></li><li><p>count-元素的个数，每个元素是size字节</p></li><li><p>stream-输入流</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算机完成一条指令所花费的时间称为一个指令周期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;顺序程序具有顺序性、封闭性和可再现性的特点，使得程序设计者能够控制程序执行的过程（包括执行顺序、执行时间），对程序执行的中间结果和状态可以预先估计，这样就可以方便地进行程序</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3月C语言二级(2)</title>
    <link href="http://example.com/2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/"/>
    <id>http://example.com/2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/</id>
    <published>2021-03-10T15:03:46.000Z</published>
    <updated>2021-03-10T15:29:06.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4什么是字符常量"><a href="#4什么是字符常量" class="headerlink" title="4什么是字符常量"></a>4什么是字符常量</h3><p>单引号括起来，中间只有一个字符。“a”,’abc’都是不对的</p><h3 id="5什么是字符串常量"><a href="#5什么是字符串常量" class="headerlink" title="5什么是字符串常量"></a>5什么是字符串常量</h3><p>双引号括起来，中间由若干字符和转义字符组成。</p><p>例如：“abc” “acb\n”</p><h3 id="6字符计算"><a href="#6字符计算" class="headerlink" title="6字符计算"></a>6字符计算</h3><p>‘B’ - ‘A’ = 1</p><p>‘a’ - ‘A’ = 32</p><h2 id="2字符变量"><a href="#2字符变量" class="headerlink" title="2字符变量"></a>2字符变量</h2><h3 id="1定义形式：-char-变量名-值"><a href="#1定义形式：-char-变量名-值" class="headerlink" title="1定义形式： char 变量名[=值]"></a>1定义形式： char 变量名[=值]</h3><p>例如：</p><p>char a = ‘a’;</p><p>char a = 97;</p><h2 id="3字符的输入输出"><a href="#3字符的输入输出" class="headerlink" title="3字符的输入输出"></a>3字符的输入输出</h2><p>printf中应用格式控制符%c在相应位是输出字符。]</p><p>scanf中应用格式控制符%c接收字符</p><p>注意：</p><p>​    <strong>在scanf中要一次输入完全部字符，中间不要按tab,空格，回车，因为tab，空格、回车，也是字符，会被接收</strong></p><hr><p>字符输出：putchar(字符)</p><p>字符输入：变量= getchar();</p><p>注意：<br>空格、tab、回车会被接收</p><h2 id="4程序举例"><a href="#4程序举例" class="headerlink" title="4程序举例"></a>4程序举例</h2><p><strong>重点算法 字母大小写转换</strong></p><p>例1：把从终端输入的小写字母转换成大写字母，其他字符不变</p><p>分析：</p><p>1小写字母转大写需要减去32</p><p>2如何判断小写字母，在’a’到’Z’之间的字符</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310200349872.png" alt="image-20210310200349872"></p><p>例2：统计字符中大写字母和小写字母的个数</p><img src="C:/Users/xuanxuan/Desktop/3月c语言二级考试.assets/image-20210310200513256.png" alt="image-20210310200513256" style="zoom:200%;" /><h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1><p>大纲分析</p><p>1库函数的正确调用</p><p>2函数的定义方法</p><p>3函数的类型和返回值</p><p>4形式参数与实在参数，参数值的传递</p><p>5函数的正确调用，嵌套调用，递归调用。</p><p>6局部变量和全局变量</p><p>7变量的存储类别（自动，静态，寄存器，外部）</p><p>变量的作用域和生存期</p><h2 id="1库函数"><a href="#1库函数" class="headerlink" title="1库函数"></a>1库函数</h2><h3 id="1c语言是由函数组成的"><a href="#1c语言是由函数组成的" class="headerlink" title="1c语言是由函数组成的"></a>1c语言是由函数组成的</h3><p>从main()函数开始，在main()函数结束</p><h3 id="2标准库函数的引入"><a href="#2标准库函数的引入" class="headerlink" title="2标准库函数的引入"></a>2标准库函数的引入</h3><p>通过命令行的形式#include&lt;库函数头文件&gt;</p><p>或者#include”库函数头文件”</p><h3 id="3标准库函数的调用形式"><a href="#3标准库函数的调用形式" class="headerlink" title="3标准库函数的调用形式"></a>3标准库函数的调用形式</h3><p>函数名(参数表)</p><p>例如：</p><p> y = sqrt(13);——开平方</p><h3 id="3常用数学公式"><a href="#3常用数学公式" class="headerlink" title="3常用数学公式"></a>3常用数学公式</h3><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310201107634.png" alt="image-20210310201107634"></p><p>#include&lt;math.h&gt;</p><h2 id="2函数的定义和返回值"><a href="#2函数的定义和返回值" class="headerlink" title="2函数的定义和返回值"></a>2函数的定义和返回值</h2><h3 id="1用户自定义函数的一般形式"><a href="#1用户自定义函数的一般形式" class="headerlink" title="1用户自定义函数的一般形式"></a>1用户自定义函数的一般形式</h3><p>函数返回值的类型名 函数名（类型名 形参1，</p><p>类型名 形参2,…….） 函数的首部</p><p>{</p><p>说明部分</p><p>语句部分                    //函数体</p><p>}</p><p><strong>注意：</strong></p><p>1函数名及形参由用户定义的标识符组成</p><p>2同一程序中函数名必须唯一</p><p>3形参名字在同一函数中命名唯一</p><p>4不能在函数内部定义函数</p><p>5如果不指定返回值类型，返回值为int型</p><p>6函数调用前必须先定义（说明）</p><p>7无返回值，在函数返回类型处，用void</p><hr><h3 id="2返回值"><a href="#2返回值" class="headerlink" title="2返回值"></a>2返回值</h3><p>函数返回值通过return语句返回，形式：return表达式；</p><p>一个函数中允许有多条return,但是只能有一条执行</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210717411.png" alt="image-20210310210717411"></p><h2 id="3函数的调用"><a href="#3函数的调用" class="headerlink" title="3函数的调用"></a>3函数的调用</h2><h3 id="1调用方法"><a href="#1调用方法" class="headerlink" title="1调用方法"></a>1调用方法</h3><p>1函数名（实在参数表）</p><p>2函数名（）无实参情况下</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210839305.png" alt="image-20210310210839305"></p><h2 id="4函数的说明"><a href="#4函数的说明" class="headerlink" title="4函数的说明"></a>4函数的说明</h2><p>函数的调用原则</p><p>先定义，后调用。如果函数在调用之后，除返回值是int和char型的，都需要在程序之前进行说明</p><p>说明形式：</p><p>类型名 函数名（参数类型1，参数类型2）；</p><p>说明值：main()函数之外，main()函数之中</p><p>例：<br>double add(double,double);</p><h2 id="5函数调用之间的数据传递"><a href="#5函数调用之间的数据传递" class="headerlink" title="5函数调用之间的数据传递"></a>5函数调用之间的数据传递</h2><p>函数调用中，实参的数据和形参对应传递</p><p>两种传递方式</p><p>1值传递</p><p>只传送值，实参不做改变</p><p>2地址传递</p><p>传送值，实参被改变</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211747377.png" alt="image-20210310211747377"></p><h2 id="6程序距离"><a href="#6程序距离" class="headerlink" title="6程序距离"></a>6程序距离</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211820461.png" alt="image-20210310211820461"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211916480.png" alt="image-20210310211916480"></p><h1 id="第八章-地址和指针"><a href="#第八章-地址和指针" class="headerlink" title="第八章 地址和指针"></a>第八章 地址和指针</h1><p>  大纲分析</p><p>1变量的地址和指针</p><p>2指针变量的定义和指针变量的基类型</p><p>3给指针变量赋值</p><p>4对指针变量的操作</p><p>5函数之间地址值的传递</p><h2 id="1变量的地址和指针"><a href="#1变量的地址和指针" class="headerlink" title="1变量的地址和指针"></a>1变量的地址和指针</h2><p>计算机的内存是以字节为单位的一片连续的存储空间，每一个字节都有一个编号，这个编号就成为了内存地址。</p><p>每个变量的地址是指该变量所占存储的单元的第一个字节的地址</p><p>回忆：<br>计算机的存储点位</p><p>二进制的位bit</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310212657371.png" alt="image-20210310212657371"></p><p>一种特殊的变量</p><p>这种变量只是用来存放内存地址的，起名为指针变量</p><p>假设定义了一个只存地址的变量p</p><p>把变量a的地址赋予指针变量p</p><p>则指针变量p的值为1245052</p><p>当访问变量a时，访问的是什么？5</p><p>当访问指针变量P时，访问的是什么？1245052</p><hr><p>当访问变量时，为“直接存取（直接访问）”我们也可以通过指针变量间接的访问该地址中原来的值。</p><p>此时成为”间接存取（间接访问）“</p><h2 id="2指针变量的定义和指针变量的"><a href="#2指针变量的定义和指针变量的" class="headerlink" title="2指针变量的定义和指针变量的"></a>2指针变量的定义和指针变量的</h2><p>定义指针变量的一般形式如下：<br>类型名 指针变量名</p><p>或</p><p>类型名 <em>指针变量名1，</em>指针变量名2,…；</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224241889.png" alt="image-20210310224241889"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224315129.png" alt="image-20210310224315129"></p><h2 id="3给指针变量赋值"><a href="#3给指针变量赋值" class="headerlink" title="3给指针变量赋值"></a>3给指针变量赋值</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224519420.png" alt="image-20210310224519420"></p><hr><p>给指针变量赋地址值之外，还可以给指针变量赋一个特殊的值，该值为’’空’’值</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224850845.png" alt="image-20210310224850845"></p><p><strong>注意：</strong></p><p>此时，指针变量p中不是没有值，而是有一个’’空’’值。</p><h2 id="4对指针变量的操作"><a href="#4对指针变量的操作" class="headerlink" title="4对指针变量的操作"></a>4对指针变量的操作</h2><p>通过指针来引用一个存储单元，”间址运算符”</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310225724159.png" alt="image-20210310225724159"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;4什么是字符常量&quot;&gt;&lt;a href=&quot;#4什么是字符常量&quot; class=&quot;headerlink&quot; title=&quot;4什么是字符常量&quot;&gt;&lt;/a&gt;4什么是字符常量&lt;/h3&gt;&lt;p&gt;单引号括起来，中间只有一个字符。“a”,’abc’都是不对的&lt;/p&gt;
&lt;h3 id=&quot;5什么</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
</feed>
