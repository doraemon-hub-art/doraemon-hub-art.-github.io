<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-24T12:59:05.088Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Do2eM0N</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言实现通讯录小程序</title>
    <link href="http://example.com/2021/03/24/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%AE%AF%E5%BD%95%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/03/24/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%AE%AF%E5%BD%95%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-03-24T12:58:36.000Z</published>
    <updated>2021-03-24T12:59:05.088Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NAME 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SEX 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TEL 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ADDR 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">OPTION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">EXIT,</span><br><span class="line">ADD,</span><br><span class="line">DEL,</span><br><span class="line">SEARCH,</span><br><span class="line">MODIFY,</span><br><span class="line">SHOW,</span><br><span class="line">SORT</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//描述人的信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PeoInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> sex[MAX_SEX];</span><br><span class="line"><span class="keyword">char</span> tel[MAX_TEL];</span><br><span class="line"><span class="keyword">char</span> addr[MAX_ADDR];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**********************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****1.add          2.del     ****\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****3.search       4.modify  ****\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****5.show         6.sort    ****\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*****0.exit                   ****\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**********************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通讯录类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contact</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PeoInfo</span> <span class="title">data</span>[<span class="title">MAX</span>];</span><span class="comment">//存放MAX个信息</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//记录当前已经有的元素个数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitContact</span><span class="params">(struct Contact*ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(ps-&gt;data, <span class="number">0</span>, <span class="keyword">sizeof</span>(ps-&gt;data));</span><br><span class="line">ps-&gt;size = <span class="number">0</span>;<span class="comment">//设置通讯录最初只有0个元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddContact</span><span class="params">(struct Contact* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;size == MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通讯录已经满了，无法增加。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入名字：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[ps-&gt;size].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(ps-&gt;data[ps-&gt;size].age));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入性别：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[ps-&gt;size].sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入电话：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[ps-&gt;size].tel);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入地址：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[ps-&gt;size].addr);</span><br><span class="line"></span><br><span class="line">ps-&gt;size++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;增加成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowContact</span><span class="params">(<span class="keyword">const</span> struct Contact* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ps-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通讯录中什么也没有\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打印标题</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;电话&quot;</span>, <span class="string">&quot;地址&quot;</span>);</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n&quot;</span></span><br><span class="line">, ps-&gt;data[i].name,</span><br><span class="line">ps-&gt;data[i].age,</span><br><span class="line">ps-&gt;data[i].sex,</span><br><span class="line">ps-&gt;data[i].tel,</span><br><span class="line">ps-&gt;data[i].addr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FindByName</span><span class="params">(<span class="keyword">const</span> struct Contact* ps, <span class="keyword">char</span> name[MAX_NAME])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ps-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(ps-&gt;data[i].name, name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//找不到的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DelContact</span><span class="params">(struct Contact* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要删除人的名字；\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line"><span class="comment">//查找要删除的人在什么位置</span></span><br><span class="line"><span class="comment">//找到了返回名字所在元素的下标</span></span><br><span class="line"><span class="comment">//找不到返回-1</span></span><br><span class="line"><span class="keyword">int</span> pos = FindByName(ps, name);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要删除的人不存在。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = pos; j &lt; ps-&gt;size - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">ps-&gt;data[j] = ps-&gt;data[j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">ps-&gt;size--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SearchContact</span><span class="params">(<span class="keyword">const</span> struct  Contact* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的联系人姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line"><span class="keyword">int</span> pos = FindByName(ps, name);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要查找的人不存在\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印标题</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;电话&quot;</span>, <span class="string">&quot;地址&quot;</span>);</span><br><span class="line"><span class="comment">//打印数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n&quot;</span>,</span><br><span class="line">ps-&gt;data[pos].name,</span><br><span class="line">ps-&gt;data[pos].age,</span><br><span class="line">ps-&gt;data[pos].sex,</span><br><span class="line">ps-&gt;data[pos].tel,</span><br><span class="line">ps-&gt;data[pos].addr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ModifyContact</span><span class="params">(struct Contact* ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[MAX_NAME];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的联系人姓名&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line"><span class="keyword">int</span> pos = FindByName(ps, name);</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你要修改人的信息不存在。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入名字：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[pos].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入年龄：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;(ps-&gt;data[pos].age));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入性别：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[pos].sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入电话：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[pos].tel);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入地址：&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ps-&gt;data[pos].addr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//创建通讯录</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Contact</span> <span class="title">con</span>;</span><span class="comment">//con就是通讯录 里面包含1k的元素的数和size</span></span><br><span class="line"><span class="comment">//初始化通讯录信息</span></span><br><span class="line">InitContact(&amp;con);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择&gt;&gt;&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">switch</span> (input)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ADD:</span><br><span class="line">AddContact(&amp;con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEL:</span><br><span class="line">DelContact(&amp;con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SEARCH:</span><br><span class="line">SearchContact(&amp;con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODIFY:</span><br><span class="line">ModifyContact(&amp;con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SHOW:</span><br><span class="line">ShowContact(&amp;con);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SORT:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EXIT:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;退出通讯录\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;选择错误，请重新选择\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自定义数据类型</title>
    <link href="http://example.com/2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/03/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-22T12:13:35.000Z</published>
    <updated>2021-03-24T11:34:59.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h1><h2 id="1什么是位段"><a href="#1什么是位段" class="headerlink" title="1什么是位段"></a>1什么是位段</h2><p>位段的声明和结构是类似的，有两个不同</p><p>1位段的成员必须是int、unsigned int 或signed int 。</p><p>2位段的成员名后边有一个冒号和一个数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">int_a:<span class="number">2</span>;</span><br><span class="line">     int_b:<span class="number">5</span>;</span><br><span class="line">    int_c:<span class="number">10</span>;</span><br><span class="line">    int_d:<span class="number">30</span>;</span><br><span class="line">&#125;;</span><br><span class="line">A就是一个位段类型</span><br><span class="line">那位段A的大小是多少？</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//位段 位是二进制位</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//后面的：是所对应变零需要的比特位</span></span><br><span class="line"><span class="keyword">int</span> a:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> d:<span class="number">30</span>;</span><br><span class="line">    <span class="comment">//一共47个比特位——6个字节就够了*8=48bit</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>；</span></span><br><span class="line"><span class="class">  <span class="title">printf</span>(&quot;%<span class="title">d</span>\<span class="title">n</span>&quot;,<span class="title">sizeof</span>(<span class="title">s</span>));</span><span class="comment">//占8个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2位段的内存分配"><a href="#2位段的内存分配" class="headerlink" title="2位段的内存分配"></a>2位段的内存分配</h2><p>1位段成员可以是int unsigned int signed int  或者是char（属于整型家族）类型。</p><p>2位段的空间上是按照需要以4个字节或者1个字节（char)的方式开辟的。</p><p>3位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段。</p><p><strong>在定义位段的变量中，最后一个不能大于32</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> a : <span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> b : <span class="number">4</span>;</span><br><span class="line"><span class="keyword">char</span> c : <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> d : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    s.a = <span class="number">10</span>;</span><br><span class="line">    s.b = <span class="number">20</span>;</span><br><span class="line">    s.c = <span class="number">3</span>;</span><br><span class="line">    s.d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3位段的跨平台问题"><a href="#3位段的跨平台问题" class="headerlink" title="3位段的跨平台问题"></a>3位段的跨平台问题</h2><p>1int位段被当成有符号数还是无符号数是不确定的。</p><p>2位段中最大位的数目不能确定。（16位机器最大16，32位机器最大32，写成27，在16位机器会出问题）</p><p>3位段中的成员在内存中从左向右 分配，还是从右向左分配标准尚未定义。</p><p>4当一个结构包含两个位段，第二个成员比较大，无法容纳第一个剩余的位段时，是舍弃剩余的位还是利用，这是不确定的。</p><p><strong>总结：</strong></p><p>​    和结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是有跨平台的问题存在。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举故名思义就是一一列举</p><p>把可能的取值一一列举</p><h2 id="1定义"><a href="#1定义" class="headerlink" title="1定义"></a>1定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值</span></span><br><span class="line">    Mon,</span><br><span class="line">    Tus,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>//星期</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//枚举的可能取值—— 常量</span></span><br><span class="line">    MALE,<span class="comment">//0</span></span><br><span class="line">    FEMALE,<span class="comment">//1      可以在后面加入 = 给他一个初始值</span></span><br><span class="line">    <span class="comment">//如果前面的赋值了，后面的没有赋值，就按顺序往下延。</span></span><br><span class="line">    </span><br><span class="line">    SECRET<span class="comment">//2</span></span><br><span class="line">        </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//规定好了它的取值</span></span><br><span class="line">    <span class="comment">//enum是类型</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line">    <span class="comment">//S</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">red,<span class="comment">//0</span></span><br><span class="line">    green,<span class="comment">//1</span></span><br><span class="line">    blue<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在上面定义的枚举常量中green所对应的值就是2，那么我们在这可不可以直接给s赋值为2呢？</span></span><br><span class="line">    <span class="comment">//可以看到编译器并没有报错，说明编译器的语法检测不严格。</span></span><br><span class="line">    <span class="comment">//2在这里是整型</span></span><br><span class="line">    <span class="comment">//Color是枚举类型，两侧的类型是有差异的</span></span><br><span class="line">    <span class="comment">//在c++中会报错，c++语法检测更为严格</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> <span class="title">s</span> =</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> red 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> green 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> blue 2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color = red;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举的写法比这个要更加好一些</span></span><br></pre></td></tr></table></figure><h2 id="2枚举的优点"><a href="#2枚举的优点" class="headerlink" title="2枚举的优点"></a>2枚举的优点</h2><p>为什么使用枚举？</p><p>我们可以使用#define来定义常量，使用枚举的优点是什么呢。</p><p>1增加代码的可读性和可维护性。</p><p>2和#define定义的标识符比较枚举有类型检查，更加严谨。</p><p>3防止命名污染（<strong>命名冲突</strong>)（封装）。</p><p> <strong>封装就是把数据和函数打包到一个类里面</strong></p><p>4便于调试。</p><p>5使用方便，一次可以定义多个常量。</p><hr><p>程序的执行过程</p><p>c语言的源代码–预编译-链接-可执行程序</p><p>这里的预编译就是在处理#define之类的东西</p><p>预编译会把所有的注释都删除</p><hr><p>enum的大小怎么算呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    male,</span><br><span class="line">    female,</span><br><span class="line">    secret</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">sex</span> <span class="title">s</span> <span class="title">male</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h1><h2 id="1联合类型的定义"><a href="#1联合类型的定义" class="headerlink" title="1联合类型的定义"></a>1联合类型的定义</h2><p>联合是一种特殊的自定义类型，这种自定义类型的变量也包含一系列的成员，特征是这些成员公用同一块空间（所以联合也叫共用体）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c;<span class="comment">//一个字节</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//四个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//4个字节</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">sb</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.c));<span class="comment">//注意是句号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;(s.a));</span><br><span class="line">    <span class="comment">//三个地址相同</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2特点"><a href="#2特点" class="headerlink" title="2特点"></a>2特点</h2><p>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合有能力 保存最大的那个成员）。</p><p>联合体内的成员不能同时使用</p><hr><p>结构体、枚举、联合体的关键字不一样，性质也不一样</p><hr><h2 id="3联合大小的计算"><a href="#3联合大小的计算" class="headerlink" title="3联合大小的计算"></a>3联合大小的计算</h2><p>联合的大小至少是最大成员的大小。</p><p>当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。</p><p>相关推荐视频——<a href="https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1oi4y1g7CF?p=63&amp;spm_id_from=pageDriver</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位段&quot;&gt;&lt;a href=&quot;#位段&quot; class=&quot;headerlink&quot; title=&quot;位段&quot;&gt;&lt;/a&gt;位段&lt;/h1&gt;&lt;h2 id=&quot;1什么是位段&quot;&gt;&lt;a href=&quot;#1什么是位段&quot; class=&quot;headerlink&quot; title=&quot;1什么是位段&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(5)</title>
    <link href="http://example.com/2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/"/>
    <id>http://example.com/2021/03/18/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-5/</id>
    <published>2021-03-18T11:18:52.000Z</published>
    <updated>2021-03-18T11:21:08.130Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>常用的连续存储管理技术有固定分区存储管理和可变分区存储管理。</p></li><li><p>程序流程图中带有箭头的线段表示的是控制流。</p></li><li><p>若二叉树没有叶子结点，则为空二叉树。</p></li><li><p>带链栈的栈底指针是随栈的操作而动态变化的。</p></li><li><p>若带链队列中只有一个元素，则对头指针与队尾指针必定相同。</p></li><li><p>清晰第一，效率第二的论点已经成为当今主导的程序设计风格。</p></li><li><p>需求分析方法可以分为结构化分析方法和面向对象分析方法两大类。结构化分析方法的常用工具：数据流图（DFD图）、数据字典（DD）、判定表、判定树。</p></li><li><p>数据库应用系统包括数据库、数据库管理系统、人员（数据库管理员和用户）、硬件平台、软件平台、应用软件、应用界面7个部分。</p></li><li><p>数据库设计是数据应用的核心。</p></li><li><p>在数据库系统中，数据模型包括概念模型、逻辑模型和物理模型。</p></li><li><p>从关系中找到满足给定条件的元组的操作称为选择。</p></li><li><p>计算机系统由硬件系统和软件系统组成。</p></li><li><p>I/O方中的程序查询方式是指当 CPU需要执行I/O操作时，程序将主动查询I/O设备是否准备好。</p></li><li><p>采用循序存储的完全二叉树属于非线性结构。</p></li><li><p>应避免滥用goto语句。</p></li><li><p>需求分析阶段的工作可以分为4个方面：需求获取、需求分析、需求规格说明编写和需求评审。</p></li><li><p>数据库是指长期存储在计算机内的、有组织的、可共享的数据集合。</p></li><li><p>逻辑数据模型是面向数据库系统的模型，着重于在数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>I/O方式中的程序中断方式指的是当出现异常情况时，CPU暂时停止当前程序的运行，转向执行相应的服务程序。</p></li><li><p>对象的基本特点是：标识唯一性、分类性、多态性、模块独立性好。可移植性</p></li><li><p>数据字典(DD)的作用是定义数据流图中各个成分的具体含义。</p></li><li><p>逻辑数据模型又称为数据模型，是面向数据库系统的模型，着重于数据库系统一级的实现。成熟并大量使用的逻辑模型有层次模型、网状模型、关系模型和面向对象模型等。</p></li><li><p>进程一旦创建，即进入就绪状态。</p></li><li><p>算法的复杂度包括时间复杂度与空间复杂度。</p></li><li><p>软件需求规格说明书的作用不包括软件可行性研究的依据。</p></li><li><p>数据库系统可以减少数据冗余和增强数据独立性，而文件系统不能。</p></li><li><p>物理数据模型，也称物理模型，是面向计算机物理表示的模型，此模型给出了数据模型在计算机上物理结构的表示。</p></li><li><p>虚拟存储器是对主存的扩展。</p></li><li><p>在主存储器和CPU之间增加高速缓冲存储器来解决CPU和主存之间速度不匹配的问题。</p></li><li><p>程序和计算机执行程序的活动不再一一对应，在多道程序环境下。</p></li><li><p>算法的时间复杂度是指执行算法所需要的计算工作量。</p></li><li><p>面向对象方法中继承是指类之间共享属性和操作的机制。</p></li><li><p>在数据库管理系统提供的数据语言中，负责数据模式定义的是数据定义语言。</p></li><li><p>在E-R图中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>CPU可以通过总线访问计算机内存和各种输入输出设备。</p></li><li><p>采用虚拟存储管理技术的主要有点是可为用户提供比物理内存大的多的逻辑地址空间。</p></li><li><p>线性链表可以有多个指针域。</p></li><li><p>软件声明周期是指软件产品从提出、实现、使用维护到停止使用退役的过程。</p></li><li><p>软件设计汇总模块划分应遵循的准则是高内聚低耦合。</p></li><li><p>数据库系统中支持安全性定义和检查的语言是数据控制语言。</p></li><li><p>分布式计算机系统指的是由多态分散的计算机经网络连接而成，且可协作完成同一任务的系统。</p></li><li><p>固定分区存储管理技术采用静态地址重定位。</p></li><li><p>程序可以作为算法的一种描述方法。</p></li><li><p>软件声明周期可分为定义阶段、开发阶段和维护阶段，定义阶段包括问题定义、可行性研究和需求分析，开发阶段包括概要设计、详细设计、实现和测试，维护阶段包括使用和维护。</p></li><li><p>概要设计的任务为：设计软件系统解雇，数据结构及数据库设计，编写概要设计文档，概要设计文档评审。</p></li><li><p>数据库系统的三级模式结构为：概念模式、内模式和外模式。</p></li><li><p>在关系数据库中，用来表示实体间联系的是二维表。</p></li><li><p>实时操作系统是指当外界事件或数据产生时，系统能够接收并以足够快的速度予以处理和相应，能够控制所欲任务协调一直运行。飞机的飞行控制系统使用实时操作系统。</p></li><li><p>I/O方式中的DMA方式是指T/O设备与主存之间由硬件组成的直接数据通路，用于成组数据传送。</p></li><li><p>数据的处理效率与数据的存储结构有关。</p></li><li><p>先到先服务的作用调度与队列结构有关联。</p></li><li><p>软件过程不规范不属于软件危机表现。</p></li><li><p>模块独立性的概念是抽象、模块化、信息隐蔽和局部化的直接结果。</p></li><li><p>数据库设计中反映用户对数据要求的模式是外模式。</p></li><li><p>在关系模式模型中必须有键，键由一个或多个属性组成，其值能够唯一关系中的一个元组（表中的一行）。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;常用的连续存储管理技术有固定分区存储管理和可变分区存储管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序流程图中带有箭头的线段表示的是控制流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若二叉树没有叶子结点，则为空二叉树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带链栈的栈</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(4)</title>
    <link href="http://example.com/2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/"/>
    <id>http://example.com/2021/03/17/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-4/</id>
    <published>2021-03-17T12:20:46.000Z</published>
    <updated>2021-03-17T12:21:25.721Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在栈中，栈项指针的动态变化决定栈中元素的个数。</p></li><li><p>详细设计的人物是为软件结构体中的每一个模块确定实现算法和局部数据结构，用某种选定的表达工具表示算法和数据结构的细节。</p></li><li><p>扇出指由一个模块直接调用的其他模块个数。</p></li><li><p>按照传统的数据模型分类，数据模型分为层次模型、网状模型、关系模型。</p></li><li><p>数据库管理系统能实现对数据库汇总数据的查询、插入、修改和删除，这类功能称为数据操纵功能。</p></li><li><p>机器周期的同步标准是CPU访问存储器一次所需要的时间。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足，进程将从运行状态变迁为等待（阻塞）状态，需要调用阻塞进程原语。</p></li><li><p>软件测试的实施步骤是单元测试、集成测试、确认测试。</p></li><li><p>数据库管理系统中关系代数的运算有：投影运算、选择运算、笛卡尔积、交、连接等。</p></li><li><p>当一个进程在运行过程中释放了系统资源后要调用唤醒进程原语。</p></li><li><p>机器数补码的符号位取反即是偏移码。</p></li><li><p>所有的线性结构都可以采用顺序存储结构。</p></li><li><p>在希尔排序法中，没经过一次数据交换后能消除多个逆序。</p></li><li><p>对象实现了数据和操作(方法)的结合，其实现的机制是封装。</p></li><li><p>软件需求规格说明的内容不包括算法的详细设计。</p></li><li><p>数据库系系统减少了数据冗余</p></li><li><p>第一范式（INF）要求主属性（主键）不为空且不重复，字段不可再分。</p></li><li><p>从表中任何一个结点位置出发就可以不重复的访问到表中其他所有结点的链表是循环链表。</p></li><li><p>面向对象的主要特征：抽象、封装、继承、多态。</p></li><li><p>数据库中的数据具有集成、共享的特点，可以被不同应用程序所使用，减少相同数据重复存储的现象。</p></li><li><p>在任何一个关系数据控中，第一范式（1NF）是对关系模式的基本要求。</p></li><li><p>系统在创建一个进程时需要调用阻塞进程原语。</p></li><li><p>虚拟存储器是对主存的逻辑扩展，虚拟存储器的空间大小取决于计算机的访存能力而不是实际外存的大小。</p></li><li><p>将数据和操作置于对象统一体中的实现方式是封装。</p></li><li><p>数据流图（DFD）的作用是支持软件系统功能建模。</p></li><li><p>数据库管理系统(DBMS)是一种系统软件。</p></li><li><p>一个数据库可以有多个外模式（也成子模式或者用户模式），但概念模式和内模式（物理模式）只能有一个。</p></li><li><p>进程调度仅负责对CPU进行分配。</p></li><li><p>计算机内部采用二进制来表示指令和数据。</p></li><li><p>快速排序每经过一次元素交换就会产生新的逆序。</p></li><li><p>需求分析阶段产生的主要分档是需求规格说明书。</p></li><li><p>软件测试用例是为测试设计的数据，由测试输入数据和与之对应的预期输出结构两部分组成。</p></li><li><p>内模式对数据库的存储方式和物理结构的逻辑进行描述。</p></li><li><p>过程控制系统属于实时系统。</p></li><li><p>地址重定位方式包括静态地址重定位和动态地址重定位。</p></li><li><p>数据流图(DPD)中的有向箭头向右表示数据流。</p></li><li><p>代码编写阶段可进行的软件测试是单元测试。</p></li><li><p>数据模型通常由数据结构、数据操作及数据约束三部分组成。</p></li><li><p>在关系表中，属性值必须是另一个表主键的有效值或空值，这样的属性是外键。</p></li><li><p>静态地址重定位要求程序必须占用连续固定的内存空间。</p></li><li><p>动态地址重定位是在程序执行期间进行的。</p></li><li><p>静态地址重定位是在程序执行之前进行的。</p></li><li><p>循环链表是一种链式存储结构，循环队列是队列的一种顺序存储结构。</p></li><li><p>栈是线性结构。</p></li><li><p>二叉链表是二叉树的存储结构。</p></li><li><p>循环队列是队列的存储结构。</p></li><li><p>“数据流”应表示数据流名违背了数据流图(DFD)构造规则。</p></li><li><p>用树型结构表示实体及其之间联系的模型称为层次模型。用网状结构表示实体及其之间的联系模型称为网状模型。关系模型采用二维表来表示关系。</p></li><li><p>允许多个联机用户同时使用一台计算机系统进行计算的操作系统称为分时操作系统。</p></li><li><p>计算机中CPU通过总线与内存、外设等链接。</p></li><li><p>在循环队列中，对头指针和队尾指针的动态变化决定队列的长度</p></li><li><p>白盒测试的主要技术有逻辑覆盖测试、基本路径测试等。</p></li><li><p>在关系模式中凡能唯一标识元组最小属性集成为该关系的键或码。</p></li><li><p>在数据库中，产生数据不一致的根本原因是数据冗余。</p></li><li><p>操作系统的功能和任务主要有处理机管理（进程管理）、存储管理、设备管理、文件管理和用户接口。</p></li><li><p>软件需求规格说明书要涵盖用户对系统的所有需求，包括功能要求、性能要求、接口要求、设计约束等。</p></li><li><p>软件需求规格说明书的可验证性指描述的每一个用户都可在有限代价的有效过程中验证确认，对于软件没有可以验证性。</p></li><li><p>基本路径测试是属于白盒测试方法且是动态测试。</p></li><li><p>概念模型时用于现实世界的建模，与具体地DBMS无关。</p></li><li><p>关于计算机内带符号的定点数，补码的符号位取反即是偏移码。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在栈中，栈项指针的动态变化决定栈中元素的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;详细设计的人物是为软件结构体中的每一个模块确定实现算法和局部数据结构，用某种选定的表达工具表示算法和数据结构的细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扇出指由一个模块直接调</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(3)</title>
    <link href="http://example.com/2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/"/>
    <id>http://example.com/2021/03/16/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-3/</id>
    <published>2021-03-16T10:55:59.000Z</published>
    <updated>2021-03-16T10:56:34.720Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>整数在计算机中存储和运算通常采用的格式是补码。</p></li><li><p>在操作系统中，将文件名转化为文件存储地址的结构是文件目录。</p></li><li><p>在长度为n的有序链表中进行查找，最坏情况下需要比较的次数为n。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。一个对象通常可由对象名（标识）、属性和操作三部分组成。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>数据库管理阶段的数据库系统的基本特点：数据集成性、数据的共享性高，冗余性低、数据独立性高、数据统一管理与控制。</p></li><li><p>对于关系模式，若其中的每个属性已经不能再分为简单项，则它属于第一范式。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>一个正在运行的进程由于所申请的资源得不到满足要调用阻塞进程原语。</p></li><li><p>进程是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先入后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：循序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指程序、数据和文档的集合。</p></li><li><p>数据库中存储的是数据以及数据之间的联系。</p></li><li><p>在关系数据库设计中，关系模式是用来记录用户数据的二维表。（关系模式采用二维表来表示关系，简称表）</p></li><li><p>在计算机中，运算器的基本功能是进行算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存的最大容量取决于计算机的地址位数。</p></li><li><p>循环链表的存储空间不一定是连续的。</p></li><li><p>对象是由描述对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>消息传递是对象间通信手段，一个对象通过像另一个对象发送消息来请求其服务。</p></li><li><p>类是对象的抽象，一个对象则是其对应类的一个实例。</p></li><li><p>数据库管理系统的主要功能包括：数据库的定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据数据库的并发性与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>整数在计算机存储和运算通常采用的格式是补码。</p></li><li><p>一个计算机系统中有成千上万个文件，为了便于对文件进行存取和管理，计算机系统建立文件的索引，即文件名和文件物理位置之间的映射关系，这种我呢间的索引称为文件目录。</p></li><li><p>规则不属于对象构成成分。</p></li><li><p>软件工程的三要素是方法、工具和过程。</p></li><li><p>I/O方式中使计算机系统并行工作程度最高的是程序查询。</p></li><li><p>计算机中的缓冲技术用于提高主机和设备交换信息的速度。</p></li><li><p>对长度为n的线性表进行快速排序，最坏的情况下需要比较的次数为n（n-1）/2。</p></li><li><p>对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>黑盒测试又称功能测试或数据驱动测试，着重测试软件的功能。黑盒测试依据需求规格说明书的功能描述。</p></li><li><p> 概念数据模型，简称概念模型，他是一种面向客观世界、面向用户的模型，它与具体的数据库管理系统和具体的计算机平台无关。</p></li><li><p>概念模型着重与客观世界复杂事物描述及对它们内在联系的刻画。目前，最著名的概念模型有实体-联系模型和面向对象模型。</p></li><li><p>总线带宽是指总线的数据传输率。</p></li><li><p>在快速排序法中，每经过一次数据交换（或移动后）能消除多个逆序。</p></li><li><p>结构化程序设计的重要原则是自项向下、逐步求精、模块及限制使用goto语句。</p></li><li><p>多态性是面向对象程序设计的特性。</p></li><li><p> 没有从属节点的模块是原子模块。</p></li><li><p>扇入指调用一个给定模块的模块个数。</p></li><li><p>结构图是描述软件系统结构的图形工具。</p></li><li><p>深度是指控制的层数。数据模型通常由数据结构、数据操作及数据约束3部分组成。完整性规则属于数据约束。</p></li><li><p>数据库概念设计阶段得到的结果是E-R模型。</p></li><li><p>进程是可以并发执行的程序的执行过程，它具有动态性、共享性、独立性、制约性和并发性5种属性。</p></li><li><p>二叉树属于非线性结构，但满二叉树与完全二叉树可以按层次进行顺序存储。</p></li><li><p>需求分析对待开发软件提出的需求进行分析并给出详细定于，是确定软件系统要做什么的阶段。</p></li><li><p>宽度指最大模块数的层的控制跨度（横向最大模块数）。</p></li><li><p>概念模式在关系数据库中，描述全局数据逻辑结构。</p></li><li><p>将实体-联系模型转换为关系模型时，一个多对多的联系可以转换为一个独立的关系模式，关系的键为联系中各实体键的组合。</p></li><li><p>CPU芯片内部连接各元件的总线是内部总线。</p></li><li><p>如果一个进程在运行时因某种原因暂停，该进程将脱离运行状态进入阻塞状态。</p></li><li><p>软件生存周期中，解决软件“怎么做”的阶段是软件设计。</p></li><li><p>软件深度表示控制的层数。</p></li><li><p>将数据库的结构划分成多个层次，是为了提高数据库的数据独立性。</p></li><li><p>关系的实体完整性要求关系中不能为空的属性是主键属性。</p></li><li><p>计算机工作的本质是取指令、分析指令和执行指令。</p></li><li><p>软件设计常用的工具有结构体、程序流程图、N-S图、PAD图、HIPO图、判定表、PDL。DFD（数据流程图）是需求分析阶段使用的工具。</p></li><li><p>软件测试的目的是发现程序中的错误。</p></li><li><p>用树型结构表示实体之间联系的模型时层次模型。</p></li><li><p>处于阻塞状态的进程，当阻塞原因解除后即进入就绪状态。</p></li><li><p>文件内容不属于文件属性。</p></li><li><p>需求分析产生的主要文档是需求规格说明书。</p></li><li><p>黑盒测试方法和技术有等价类划分法、边界值分析法、错误推测法和因果图等。</p></li><li><p>白盒从屙屎的主要技术有逻辑覆盖测试、基本路径测试，其中逻辑覆盖测试包括语句覆盖、路径覆盖、判定覆盖、条件覆盖、判断-条件覆盖。</p></li><li><p>在E-R图汇中，用矩形表示实体集，用椭圆表示属性，用菱形表示联系。</p></li><li><p>关系模式的候选关键字可以有1个或多个。</p></li><li><p>在CPU执行一条指令的过程中至少占用一个机器周期。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;整数在计算机中存储和运算通常采用的格式是补码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在操作系统中，将文件名转化为文件存储地址的结构是文件目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在长度为n的有序链表中进行查找，最坏情况下需要比较的次数为n。&lt;/p&gt;
&lt;/li</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(2)</title>
    <link href="http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/"/>
    <id>http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-2/</id>
    <published>2021-03-15T14:44:57.000Z</published>
    <updated>2021-03-15T14:45:45.134Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>要是用外存储器中的信息，应先将其调入内存储器。</p></li><li><p>进制是程序的执行过程。</p></li><li><p>循环队列是队列的一种顺序存储结构。</p></li><li><p>栈先进后出，队列先进先出。</p></li><li><p>结构化程序的基本结构有：顺序结构、选择（分支）结构和重复（循环结构）。</p></li><li><p>软件是指与计算机系统操作有关的计算机程序、规程、规则，以及可能有的文件、文档及数据。</p></li><li><p>在数据库中存储的是数据以及数据之间的联系。</p></li><li><p>关系模式是用来记录用户数据的二维表。</p></li><li><p>在一C语言程序中可以进行多种算法的实现，对算法的个数没有规定。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。</p></li><li><p>赋值运算符的优先级高于逗号运算符的优先级。</p></li><li><p>数组定义后，不可以对数组整体赋值。</p></li><li><p>全局变量的作用域是从声明处到文件的结束。</p></li><li><p>关键字typedef的作用只是将C语言中的已有的数据类型作了置换，并不是增加新的类型。</p></li><li><p>当对文件的读（写）操作完成之后，必须将他关闭，否则可能导致数据丢失。</p></li><li><p>选择中打开一个已存在的文件并进行了写操作后，原有文件中的全部数据不一定被覆盖，也可以对源文件进行追加操作等。</p></li><li><p>选项中在一个程序中当对文件进行了写操作后，不用先关闭该文件然后再打开，才能读到第一个数据，可以用fseek()函数进行重新定位即可。</p></li><li><p>C语言中的文件可以进行随机读写。</p></li><li><p>在计算机中，运算器的基本功能是继续宁算数和逻辑运算。</p></li><li><p>理论上计算机虚拟内存最大容量取决于计算机地址位数。</p></li><li><p>线性表链式存储结构的特点是，用一组不连续的存储单元存储线性表中的各个元素。线性链表的存储单元是任意的，即各数据结点取得存储序列可以是连续的，也可以是不连续的。循环链表采链式存储结构，因此存储空间也可以是不连续的。</p></li><li><p>二叉树的性质，对任何一棵二叉树，度为0的结点（即叶子结点）总是比度为2的结点多一个。</p></li><li><p>对象是由描述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。</p></li><li><p>软件应首先满足用户的功能需求。</p></li><li><p>数据库管理系统的主要功能包括：数据模式定义、数据存取的物理构建、数据操纵、数据完整性、安全性的定义与检查、数据库的并发控制与故障恢复、数据的服务。</p></li><li><p>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</p></li><li><p>使用顺序、选择、循环三种基本结构构成的程序可以解决所有问题，而不只是解决简单问题。</p></li><li><p>C语言是一种结构化程序设计语言。</p></li><li><p>程序化程序设计提倡模块化的设计方法。</p></li><li><p>在C语言中整型常量可以用十进制、八进制和十六进制等进制形式表示，但不包括二进制。</p></li><li><p>C语言中标识符由字母、数字、下划线、组成，另外关键字不能作为标识符。</p></li><li><p>算数运算符+的优先级高于- =，且- = 的结合方向为自右向左。</p></li><li><p>default语句在switch语句中可以省略。</p></li><li><p>宏替换没有数据类型限制。</p></li><li><p>宏定义卸载函数的花括号外边，作用域为其后的程序，通常在文件的最开头。</p></li><li><p>宏名一般用大写，但不是必须用大写。</p></li><li><p>计算机完成一条指令所花费的时间称为一个执行周期。</p></li><li><p>人工管理阶段没有专门的软件对数据进行管理。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要是用外存储器中的信息，应先将其调入内存储器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进制是程序的执行过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;循环队列是队列的一种顺序存储结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈先进后出，队列先进先出。&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C二级错题积累(1)</title>
    <link href="http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/"/>
    <id>http://example.com/2021/03/15/C%E4%BA%8C%E7%BA%A7%E9%94%99%E9%A2%98%E7%A7%AF%E7%B4%AF-1/</id>
    <published>2021-03-15T05:49:37.000Z</published>
    <updated>2021-03-15T05:57:35.037Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>计算机完成一条指令所花费的时间称为一个指令周期。</p></li><li><p>顺序程序具有顺序性、封闭性和可再现性的特点，使得程序设计者能够控制程序执行的过程（包括执行顺序、执行时间），对程序执行的中间结果和状态可以预先估计，这样就可以方便地进行程序的测试和调试。</p></li><li><p>为了降低算法的空间复杂度，主要应减少输入数据所占的存储空间以及额外空间，通常采用压缩存储技术。</p></li><li><p>算法的计算工作量是用算法所执行的基本运算次数来度量的，而算法所执行的基本运算次数是问题规模（通常用整数）表示的函数。</p></li><li><p>算法的复杂程度与程序的编制无关。</p></li><li><p>算法需要考虑可行性、确定性、有穷性等。</p></li><li><p>栈按先进后出的原则组织数据，所以入栈最早的元素最后出栈。队列按先进先出的原则组织数据，所以入队最早的元素最先退队。</p></li><li><p>树的总的结点数为树中所有结点的度数之和再加1.</p></li><li><p>结构化程序设计的目的：通过设计结构良好的程序保证程序动态执行的正确性，使程序易理解、易调试、易维护，以提高软件开发的效率，减少出错率，减少出错率，因此结构化程序强调程序的易读性。</p></li><li><p>系统软件是管理计算机的资源，提高计算机的使用效率，为用户提供各种服务的软件，如操作系统、数据库管理、编译程序、汇编程序和网络软件等。</p></li><li><p>数据库管理技术的三个阶段是人工管理阶段、文件系统阶段和数据库系统阶段。人工管理阶段没有专门的软件对数据进行管理。</p></li><li><p>在实体联系模型中，实体是客观存在并且可以相互区别的事物。</p></li><li><p>C语言中的非执行语句不会被编译，不会生成二进制的机器指令。</p></li><li><p>由C语言构成的指令序列称C源程序，C源程序经过C语言编译程序编译之后生成一个后缀为.OBJ的二进制文件（称为目标文件）；最后要由”连接程序”把此.OBJ文件与C语言提供的各种数据库函数连接起来生成一个后缀为.EXE的可执行文件。</p></li><li><p>C语言中标识符由字母、下划线、数字组成，且开头必须是字母或下划线。关键字不能作为标识符。</p></li><li><p>取模运算符%，二元运算符，具有左结合性。</p></li><li><p>在VC6.0平台中，int4字节，double8字节</p></li><li><p>C语言的逻辑运算符比较特别，他的操作数没有明确的数据类型，可以是任意合法的表达式。</p></li><li><p>不能将一个整数直接赋给指针变量作为地址。</p></li><li><p>函数的返回这可以是地址，即指针。</p></li><li><p>函数调用中形参值的变化不会传递给实参。</p></li><li><p>指针是用来存放地址的变量，用（类型名 *指针变量名）的形式定义。赋值时应将某个变量地址即&amp;x赋值给指针变量。</p></li><li><p>scanf(“%s”,s)表示输入一个字符串，遇到空格后会结束输入。所以当字符串内带有空格时，不能使用此语句。</p></li><li><p>在C语言中，只有在使用时才占用内存单元的变量，其存储类型是auto和register</p></li><li><p>不能再定义结构体的同时，又用结构体类型名定义变量。</p></li><li><p>预处理命令是以#号开头的命令，这些，命令因该在函数外书写，一般在源文件的最前面书写，但不是必须在起始位置书写。</p></li><li><p>C语言的预处理能够实现宏定义和条件编译等功能</p></li><li><p>buffer-用于接收数据的内存地址，大小至少是size*count字节</p></li><li><p>size-单位元素的大小，单位是字节</p></li><li><p>count-元素的个数，每个元素是size字节</p></li><li><p>stream-输入流</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算机完成一条指令所花费的时间称为一个指令周期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;顺序程序具有顺序性、封闭性和可再现性的特点，使得程序设计者能够控制程序执行的过程（包括执行顺序、执行时间），对程序执行的中间结果和状态可以预先估计，这样就可以方便地进行程序</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3月C语言二级(2)</title>
    <link href="http://example.com/2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/"/>
    <id>http://example.com/2021/03/10/3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2/</id>
    <published>2021-03-10T15:03:46.000Z</published>
    <updated>2021-03-10T15:29:06.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4什么是字符常量"><a href="#4什么是字符常量" class="headerlink" title="4什么是字符常量"></a>4什么是字符常量</h3><p>单引号括起来，中间只有一个字符。“a”,’abc’都是不对的</p><h3 id="5什么是字符串常量"><a href="#5什么是字符串常量" class="headerlink" title="5什么是字符串常量"></a>5什么是字符串常量</h3><p>双引号括起来，中间由若干字符和转义字符组成。</p><p>例如：“abc” “acb\n”</p><h3 id="6字符计算"><a href="#6字符计算" class="headerlink" title="6字符计算"></a>6字符计算</h3><p>‘B’ - ‘A’ = 1</p><p>‘a’ - ‘A’ = 32</p><h2 id="2字符变量"><a href="#2字符变量" class="headerlink" title="2字符变量"></a>2字符变量</h2><h3 id="1定义形式：-char-变量名-值"><a href="#1定义形式：-char-变量名-值" class="headerlink" title="1定义形式： char 变量名[=值]"></a>1定义形式： char 变量名[=值]</h3><p>例如：</p><p>char a = ‘a’;</p><p>char a = 97;</p><h2 id="3字符的输入输出"><a href="#3字符的输入输出" class="headerlink" title="3字符的输入输出"></a>3字符的输入输出</h2><p>printf中应用格式控制符%c在相应位是输出字符。]</p><p>scanf中应用格式控制符%c接收字符</p><p>注意：</p><p>​    <strong>在scanf中要一次输入完全部字符，中间不要按tab,空格，回车，因为tab，空格、回车，也是字符，会被接收</strong></p><hr><p>字符输出：putchar(字符)</p><p>字符输入：变量= getchar();</p><p>注意：<br>空格、tab、回车会被接收</p><h2 id="4程序举例"><a href="#4程序举例" class="headerlink" title="4程序举例"></a>4程序举例</h2><p><strong>重点算法 字母大小写转换</strong></p><p>例1：把从终端输入的小写字母转换成大写字母，其他字符不变</p><p>分析：</p><p>1小写字母转大写需要减去32</p><p>2如何判断小写字母，在’a’到’Z’之间的字符</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310200349872.png" alt="image-20210310200349872"></p><p>例2：统计字符中大写字母和小写字母的个数</p><img src="C:/Users/xuanxuan/Desktop/3月c语言二级考试.assets/image-20210310200513256.png" alt="image-20210310200513256" style="zoom:200%;" /><h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1><p>大纲分析</p><p>1库函数的正确调用</p><p>2函数的定义方法</p><p>3函数的类型和返回值</p><p>4形式参数与实在参数，参数值的传递</p><p>5函数的正确调用，嵌套调用，递归调用。</p><p>6局部变量和全局变量</p><p>7变量的存储类别（自动，静态，寄存器，外部）</p><p>变量的作用域和生存期</p><h2 id="1库函数"><a href="#1库函数" class="headerlink" title="1库函数"></a>1库函数</h2><h3 id="1c语言是由函数组成的"><a href="#1c语言是由函数组成的" class="headerlink" title="1c语言是由函数组成的"></a>1c语言是由函数组成的</h3><p>从main()函数开始，在main()函数结束</p><h3 id="2标准库函数的引入"><a href="#2标准库函数的引入" class="headerlink" title="2标准库函数的引入"></a>2标准库函数的引入</h3><p>通过命令行的形式#include&lt;库函数头文件&gt;</p><p>或者#include”库函数头文件”</p><h3 id="3标准库函数的调用形式"><a href="#3标准库函数的调用形式" class="headerlink" title="3标准库函数的调用形式"></a>3标准库函数的调用形式</h3><p>函数名(参数表)</p><p>例如：</p><p> y = sqrt(13);——开平方</p><h3 id="3常用数学公式"><a href="#3常用数学公式" class="headerlink" title="3常用数学公式"></a>3常用数学公式</h3><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310201107634.png" alt="image-20210310201107634"></p><p>#include&lt;math.h&gt;</p><h2 id="2函数的定义和返回值"><a href="#2函数的定义和返回值" class="headerlink" title="2函数的定义和返回值"></a>2函数的定义和返回值</h2><h3 id="1用户自定义函数的一般形式"><a href="#1用户自定义函数的一般形式" class="headerlink" title="1用户自定义函数的一般形式"></a>1用户自定义函数的一般形式</h3><p>函数返回值的类型名 函数名（类型名 形参1，</p><p>类型名 形参2,…….） 函数的首部</p><p>{</p><p>说明部分</p><p>语句部分                    //函数体</p><p>}</p><p><strong>注意：</strong></p><p>1函数名及形参由用户定义的标识符组成</p><p>2同一程序中函数名必须唯一</p><p>3形参名字在同一函数中命名唯一</p><p>4不能在函数内部定义函数</p><p>5如果不指定返回值类型，返回值为int型</p><p>6函数调用前必须先定义（说明）</p><p>7无返回值，在函数返回类型处，用void</p><hr><h3 id="2返回值"><a href="#2返回值" class="headerlink" title="2返回值"></a>2返回值</h3><p>函数返回值通过return语句返回，形式：return表达式；</p><p>一个函数中允许有多条return,但是只能有一条执行</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210717411.png" alt="image-20210310210717411"></p><h2 id="3函数的调用"><a href="#3函数的调用" class="headerlink" title="3函数的调用"></a>3函数的调用</h2><h3 id="1调用方法"><a href="#1调用方法" class="headerlink" title="1调用方法"></a>1调用方法</h3><p>1函数名（实在参数表）</p><p>2函数名（）无实参情况下</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310210839305.png" alt="image-20210310210839305"></p><h2 id="4函数的说明"><a href="#4函数的说明" class="headerlink" title="4函数的说明"></a>4函数的说明</h2><p>函数的调用原则</p><p>先定义，后调用。如果函数在调用之后，除返回值是int和char型的，都需要在程序之前进行说明</p><p>说明形式：</p><p>类型名 函数名（参数类型1，参数类型2）；</p><p>说明值：main()函数之外，main()函数之中</p><p>例：<br>double add(double,double);</p><h2 id="5函数调用之间的数据传递"><a href="#5函数调用之间的数据传递" class="headerlink" title="5函数调用之间的数据传递"></a>5函数调用之间的数据传递</h2><p>函数调用中，实参的数据和形参对应传递</p><p>两种传递方式</p><p>1值传递</p><p>只传送值，实参不做改变</p><p>2地址传递</p><p>传送值，实参被改变</p><p>例</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211747377.png" alt="image-20210310211747377"></p><h2 id="6程序距离"><a href="#6程序距离" class="headerlink" title="6程序距离"></a>6程序距离</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211820461.png" alt="image-20210310211820461"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310211916480.png" alt="image-20210310211916480"></p><h1 id="第八章-地址和指针"><a href="#第八章-地址和指针" class="headerlink" title="第八章 地址和指针"></a>第八章 地址和指针</h1><p>  大纲分析</p><p>1变量的地址和指针</p><p>2指针变量的定义和指针变量的基类型</p><p>3给指针变量赋值</p><p>4对指针变量的操作</p><p>5函数之间地址值的传递</p><h2 id="1变量的地址和指针"><a href="#1变量的地址和指针" class="headerlink" title="1变量的地址和指针"></a>1变量的地址和指针</h2><p>计算机的内存是以字节为单位的一片连续的存储空间，每一个字节都有一个编号，这个编号就成为了内存地址。</p><p>每个变量的地址是指该变量所占存储的单元的第一个字节的地址</p><p>回忆：<br>计算机的存储点位</p><p>二进制的位bit</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310212657371.png" alt="image-20210310212657371"></p><p>一种特殊的变量</p><p>这种变量只是用来存放内存地址的，起名为指针变量</p><p>假设定义了一个只存地址的变量p</p><p>把变量a的地址赋予指针变量p</p><p>则指针变量p的值为1245052</p><p>当访问变量a时，访问的是什么？5</p><p>当访问指针变量P时，访问的是什么？1245052</p><hr><p>当访问变量时，为“直接存取（直接访问）”我们也可以通过指针变量间接的访问该地址中原来的值。</p><p>此时成为”间接存取（间接访问）“</p><h2 id="2指针变量的定义和指针变量的"><a href="#2指针变量的定义和指针变量的" class="headerlink" title="2指针变量的定义和指针变量的"></a>2指针变量的定义和指针变量的</h2><p>定义指针变量的一般形式如下：<br>类型名 指针变量名</p><p>或</p><p>类型名 <em>指针变量名1，</em>指针变量名2,…；</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224241889.png" alt="image-20210310224241889"></p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224315129.png" alt="image-20210310224315129"></p><h2 id="3给指针变量赋值"><a href="#3给指针变量赋值" class="headerlink" title="3给指针变量赋值"></a>3给指针变量赋值</h2><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224519420.png" alt="image-20210310224519420"></p><hr><p>给指针变量赋地址值之外，还可以给指针变量赋一个特殊的值，该值为’’空’’值</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310224850845.png" alt="image-20210310224850845"></p><p><strong>注意：</strong></p><p>此时，指针变量p中不是没有值，而是有一个’’空’’值。</p><h2 id="4对指针变量的操作"><a href="#4对指针变量的操作" class="headerlink" title="4对指针变量的操作"></a>4对指针变量的操作</h2><p>通过指针来引用一个存储单元，”间址运算符”</p><p><img src="3%E6%9C%88C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7-2.assets/image-20210310225724159.png" alt="image-20210310225724159"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;4什么是字符常量&quot;&gt;&lt;a href=&quot;#4什么是字符常量&quot; class=&quot;headerlink&quot; title=&quot;4什么是字符常量&quot;&gt;&lt;/a&gt;4什么是字符常量&lt;/h3&gt;&lt;p&gt;单引号括起来，中间只有一个字符。“a”,’abc’都是不对的&lt;/p&gt;
&lt;h3 id=&quot;5什么</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>3月C语言二级</title>
    <link href="http://example.com/2021/03/09/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7/"/>
    <id>http://example.com/2021/03/09/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7/</id>
    <published>2021-03-09T01:04:06.000Z</published>
    <updated>2021-03-09T01:10:45.926Z</updated>
    
    <content type="html"><![CDATA[<p>二级C语言程序设计</p><h1 id="第一章-程序的概念"><a href="#第一章-程序的概念" class="headerlink" title="第一章 程序的概念"></a>第一章 程序的概念</h1><h2 id="1程序的概念"><a href="#1程序的概念" class="headerlink" title="1程序的概念"></a>1程序的概念</h2><p>程序是指令的集合</p><p>指令-编译-计算机运行</p><p>指令：编写程序的执行程序（要干什么的步骤）</p><p>编译：将程序转换为二进制（怎么干）</p><p>计算机运行：将二进制运行出结果</p><h2 id="2-C程序的运行过程"><a href="#2-C程序的运行过程" class="headerlink" title="2 C程序的运行过程"></a>2 C程序的运行过程</h2><p>.c文件(源程序)——.obj(目标程序——二进制程序)——.exe(可执行程序(debug文件夹中))——计算机运行</p><p>​                         ——连接程序（运行库）</p><h2 id="3-程序设计的步骤"><a href="#3-程序设计的步骤" class="headerlink" title="3 程序设计的步骤"></a>3 程序设计的步骤</h2><p>（1）确定数据结构</p><p>（<strong>2</strong>）<strong>确定算法</strong>——有穷性（步骤有限）</p><p>​                          ——确定性（含义确切）</p><p>​                          ——可行性（能够实现）</p><p>​            有零个或多个输入（数据输入）</p><pre><code>         有一个或多个输出（数据输出）</code></pre><p>（3）编码</p><p>（4）在计算机上调试程序</p><p>（5）整理并写出文档资料</p><h2 id="4结构化程序"><a href="#4结构化程序" class="headerlink" title="4结构化程序"></a>4结构化程序</h2><p>三大结构：<br>顺序结构：程序从上到下顺序执行</p><p>选择结构：程序可以沿着不同路径执行</p><p>循环结构：指定程序重复执行</p><h1 id="第二章-C程序设计的初步知识"><a href="#第二章-C程序设计的初步知识" class="headerlink" title="第二章 C程序设计的初步知识"></a>第二章 C程序设计的初步知识</h1><h2 id="1大纲分析"><a href="#1大纲分析" class="headerlink" title="1大纲分析"></a>1大纲分析</h2><p>（1）C的数据类型（基本结构，<strong>构造类型，指针类型，无值类型</strong>，）及其定义方法</p><p>（2）C运算符的种类、运算优先级和结核性。</p><p>（3）不同类型数据间的转换与运算</p><p>（4）C表达式类型（赋值表达式，<strong>算数表达式，关系表达式，逻辑表达式，条件表达式</strong>,逗号表达式）和求值规则。</p><h2 id="2简单C语言构成和格式"><a href="#2简单C语言构成和格式" class="headerlink" title="2简单C语言构成和格式"></a>2简单C语言构成和格式</h2><p>#include&lt;stdio.h&gt;——命令行 调用标准库函数</p><p>main ——主函数 程序的入口 有且只有一个叫做 main()的函数</p><p>{</p><p>​    printf(“xxx”);</p><p>}</p><h2 id="3标识符"><a href="#3标识符" class="headerlink" title="3标识符"></a>3标识符</h2><h3 id="（1）什么是标识符"><a href="#（1）什么是标识符" class="headerlink" title="（1）什么是标识符"></a>（1）什么是标识符</h3><p>符合一定规则的符号集合</p><h3 id="（2）标识符命名规则"><a href="#（2）标识符命名规则" class="headerlink" title="（2）标识符命名规则"></a>（2）标识符命名规则</h3><p>由字母（a-z,A-Z),数字（0-9），下划线</p><p>必须由字母，下划线开头，如A3,_sb</p><p>不能是c语言关键字</p><p>区分小写b2和B2是两个不同的标识符</p><p>长度一定，与系统有关（考试不涉及）</p><h3 id="（3）标识符的分类"><a href="#（3）标识符的分类" class="headerlink" title="（3）标识符的分类"></a>（3）标识符的分类</h3><p>-关键字</p><p>-预定义标识符（系统中具有某些功能含义的名字）</p><p>-用户标识符</p><p>例如：</p><p>正确的标识符：sum a2 a_2 ,_a2</p><p>错误的标识符：2a a? if while</p><h2 id="4常量"><a href="#4常量" class="headerlink" title="4常量"></a>4常量</h2><h3 id="（1）什么是常量"><a href="#（1）什么是常量" class="headerlink" title="（1）什么是常量"></a>（1）什么是常量</h3><p>常量就是在程序汇其值不能被改变的量</p><p>例如：π</p><h3 id="（2）常量类型"><a href="#（2）常量类型" class="headerlink" title="（2）常量类型"></a>（2）常量类型</h3><p>-数值型常量-整型常量 -1， 0 ，2不带小数点</p><p>​                     -实型常量 -12.68带小数点的</p><p><strong>在C语言中0和0.0是两个不同的东西</strong></p><p>-非数值型常量 -字符型常量 ‘A’</p><p>​                           -字符串常量 “A”</p><h3 id="3-如何定义符号常量"><a href="#3-如何定义符号常量" class="headerlink" title="(3)如何定义符号常量"></a>(3)如何定义符号常量</h3><p>关键字define</p><p>用法#define 标识符 常量值</p><h2 id="5变量"><a href="#5变量" class="headerlink" title="5变量"></a>5变量</h2><h3 id="1-什么是变量"><a href="#1-什么是变量" class="headerlink" title="(1)什么是变量"></a>(1)什么是变量</h3><p>在程序运行中，值可以改变的量</p><h3 id="（2）变量的命名规则"><a href="#（2）变量的命名规则" class="headerlink" title="（2）变量的命名规则"></a>（2）变量的命名规则</h3><p>与标识符相同  字母数字下划线组成，必须由字母下划线开头，不可以是c语言的关键字</p><p>（3）变量的特点</p><p>变量在内存汇总要占用连续的若干个字节</p><p>所占用的字节数由变量的数据类型确定</p><p>变量使用必须要先定义</p><p><strong>记忆理解：一个大小的盒子，大小取决于数据类型</strong></p><h3 id="（3）整型数据"><a href="#（3）整型数据" class="headerlink" title="（3）整型数据"></a>（3）整型数据</h3><p>整型数据</p><p>整型常量的表示形式</p><p>十进制整数：0、-111</p><p>八进制整数：00、-0111</p><p>十六进制整数： 0x0、-0x111</p><p>注意：**只有十进制整数有负数、八进制最大到7、十六进制最大到F **</p><h3 id="（4）整型数据存储形式"><a href="#（4）整型数据存储形式" class="headerlink" title="（4）整型数据存储形式"></a>（4）整型数据存储形式</h3><p>计算机的存储单位</p><p>二进制的位bit</p><p>8 bit = 1字节  1024字节 = 1Kb  1024kb = 1m  1024m = 1g</p><h3 id="（5）负数的存储"><a href="#（5）负数的存储" class="headerlink" title="（5）负数的存储"></a>（5）负数的存储</h3><p>-转成反码</p><p>-在反码上加一 （得到补码）</p><p><strong>注意转换是最高位符号位不转换，如果是无符号的，最高位当做数字</strong></p><p>整数</p><h3 id="（6）整型数据"><a href="#（6）整型数据" class="headerlink" title="（6）整型数据"></a>（6）整型数据</h3><p>-有符号位(没有负数)</p><p> unsigned</p><p>-无符号位（有正负）</p><p>signed</p><h3 id="7-实型数据"><a href="#7-实型数据" class="headerlink" title="(7)实型数据"></a>(7)实型数据</h3><p>实型常量（浮点数、实数）的表示形式</p><p>一般形式的实数：12.3456、-1.23456、7.0</p><p>指数形式的实数：-1.2345E3、0.12345e-4</p><p>注意：<strong>E或e之前必须要有数字、之后必须是整数、数字和E（e）之间没有空格</strong></p><hr><p>实型数据类型</p><p>float单精度浮点型</p><p>double双精度浮点型</p><p>注意：</p><p><strong>如不特别定义任意用到一个实数在C中都是double类型的，超出范围处理成0值，实数存在误差</strong></p><h2 id="6算数表达式"><a href="#6算数表达式" class="headerlink" title="6算数表达式"></a>6算数表达式</h2><h3 id="（1）基本运算符号"><a href="#（1）基本运算符号" class="headerlink" title="（1）基本运算符号"></a>（1）基本运算符号</h3><p>注意：<strong>不同类型转换，例如1/2.0 = 0.5</strong></p><p><strong>相同类型结构类型不变 例如：1/2 = 0</strong></p><p><strong>若是单精度后面加0变成双精度</strong></p><p><strong>%左右运算必须都是整数</strong></p><h3 id="（2）运算规则（优先级）"><a href="#（2）运算规则（优先级）" class="headerlink" title="（2）运算规则（优先级）"></a>（2）运算规则（优先级）</h3><p><strong>先函数，再括号，后乘除，终加减</strong></p><p>强制转换类型 （数据类型）（表达式 ）</p><p><strong>实型转换为整型时，把小数位砍掉</strong></p><h2 id="7赋值表达式"><a href="#7赋值表达式" class="headerlink" title="7赋值表达式"></a>7赋值表达式</h2><h3 id="1-主要运算符号"><a href="#1-主要运算符号" class="headerlink" title="(1)主要运算符号="></a>(1)主要运算符号=</h3><p>形式 变量名 = 表达式 ，例如 a = 10</p><p>理解记忆：*<em>变量好比一个盒子，把等于号右边东西放到左边的盒子里面</em></p><p><strong>注意：</strong></p><p>（1）等号优先级最低，先计算右边，在赋值给左边；</p><p>（2）n =n+1；有意义，在原有变量n的基础上，增加1；</p><p>（3）左边不能是表达式 a + b = c <strong>错误</strong></p><p>（4）右边可以是赋值表达式 a = b = 7 +1 ;但是 a = 7 +1 = b<strong>是错误的</strong></p><p>主要运算符号+= -= *= /= %=</p><h3 id="2-赋值运算的类型转换"><a href="#2-赋值运算的类型转换" class="headerlink" title="(2)赋值运算的类型转换"></a>(2)赋值运算的类型转换</h3><p>​    赋值两边类型不一致，将等号右边的值转换成左边数据类型，仅限数值，成为”赋值兼容”</p><p>整型运算符转换原则：</p><p>1运算符号两边一个短整型，一个长整型，都转化成长整型</p><p>2运算符号两边一个无符号，一个有符号，都转化成无符号</p><p>整数赋值转换原则：</p><p>1左短右长，截取右边，丢高保低</p><p>2左无右有，赋值右边，负数变整数</p><p>3左有右无，复制右边，高位为1，变负数</p><h3 id="（3）自增、自减、逗号运算符"><a href="#（3）自增、自减、逗号运算符" class="headerlink" title="（3）自增、自减、逗号运算符"></a>（3）自增、自减、逗号运算符</h3><p>++ – </p><p>注意：</p><p><strong>1自增、自减符号可以放在变量前面形成前缀，也可以放在后面形成后缀</strong></p><p><strong>2如果是前缀，先做自我运算，后运算语句</strong></p><p><strong>3如果是后缀，先运算语句，后运行语句</strong></p><p><strong>4不要在一个表达式中多次对同一个变量做++,–运算</strong></p><hr><p>逗号表达式：<br>    逗号表达式运算法则从左到右，一个表达式一个表达式计算，全部运算完毕后，最后一个表达式的结构是整个表达式的值</p><h1 id="第三章-顺序结构"><a href="#第三章-顺序结构" class="headerlink" title="第三章 顺序结构"></a>第三章 顺序结构</h1><p>大纲分析：<br>1表达式语句，空语句，复合语句</p><p>2输入和输出函数的调用，正确输入数据并正确设计输出格式</p><h2 id="1赋值语句"><a href="#1赋值语句" class="headerlink" title="1赋值语句"></a>1赋值语句</h2><p>赋值语句也称为表达式语句，主要在赋值表达式后加入分号：,构成表达式语句</p><h2 id="2数据输出"><a href="#2数据输出" class="headerlink" title="2数据输出"></a>2数据输出</h2><p>1什么是数据输出</p><p>2C语言如何进行数据输出</p><p>注意：</p><p><strong>C语言没有输入输出语句，应用标准库中的函数完成输出</strong></p><h3 id="（1）格式控制"><a href="#（1）格式控制" class="headerlink" title="（1）格式控制"></a>（1）格式控制</h3><p>格式控制的作用</p><p>1按照指定的输出格式输出，格式有%符号和紧跟的其后格式描述符组成，如整型%d，单精度%f,双精度%lf</p><p>2原样输出文字和字符</p><h3 id="（2）数据输出"><a href="#（2）数据输出" class="headerlink" title="（2）数据输出"></a>（2）数据输出</h3><p>%c——输出一个字符</p><p>%d——整型、</p><p>%0 ——输出八进制形式</p><p>%x(X)——输出十六进制形式</p><p>%u——以无符号输出整形数</p><p>%f——输出单精度数或双精度，也可用%lf输出双精度</p><p>%e(3)——以质数形式输出浮点数</p><p>%g(G)——系统决定使用%f还是%e输出保证输出宽度最小</p><p>%s——输出一个字符串，遇到\0终止，不受最大宽度约束</p><p>%p——输出变量内存地址</p><p>%%——输出一个%</p><h3 id="3-长度修饰符"><a href="#3-长度修饰符" class="headerlink" title="(3)长度修饰符"></a>(3)长度修饰符</h3><p>输出数据所占宽度的格式说明</p><p>（1）默认输出实际宽度，且右对齐</p><p>（2）%nd整数输出，小于n左边补空格，右对齐</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302152159882.png" alt="image-20210302152159882"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302152234672.png" alt="image-20210302152234672"></p><h3 id="（4）printf使用注意事项"><a href="#（4）printf使用注意事项" class="headerlink" title="（4）printf使用注意事项"></a>（4）printf使用注意事项</h3><p>（1）输出自由控制</p><p>（2）如有格式控制即%，有几项后边输出几项，类型必须匹配，%多于输出项，会出乱码，%少于输出项，多余的不输出</p><p>（3）转义字符\n回车\r换行但无回车\t 制表  \a响铃等控制符</p><p>（4）输出% 输出两个%%</p><p>（5）printf(函数有返回值)</p><p>（6）尽量不要在printf中做变量运算，printf（”%d %d”,k,++k)</p><p>(7)如果出现*号，顺序写入</p><h2 id="3数据输入"><a href="#3数据输入" class="headerlink" title="3数据输入"></a>3数据输入</h2><p>scanf函数调用形式：<br>scanf(格式控制，输入项1，输入项2…….);</p><p>注意：</p><p><strong>1务必使用&amp;运算符，除非变量本身是地址变量</strong></p><p><strong>2输入double类型时候一定使用%lf</strong></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153230356.png" alt="image-20210302153230356"></p><h3 id="1-scanf函数使用说明"><a href="#1-scanf函数使用说明" class="headerlink" title="(1)scanf函数使用说明"></a>(1)scanf函数使用说明</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153318246.png" alt="image-20210302153318246"></p><p> 特别注意：<strong>如果在scanf格式控制符出加入其他符号，输入时必须按照它原样格式输出</strong></p><h2 id="4复合语句和空语句"><a href="#4复合语句和空语句" class="headerlink" title="4复合语句和空语句"></a>4复合语句和空语句</h2><p>一对大括号之间多条语句组成的一个语句组称为复合语句</p><p>{;;}</p><h1 id="第四章-选择结构"><a href="#第四章-选择结构" class="headerlink" title="第四章 选择结构"></a>第四章 选择结构</h1><p>大纲分析：<br>1用if语句实现选择结构</p><p>2用switch语句实现多分支选择结构</p><p>3选择结构的嵌套</p><h3 id="1什么是逻辑值"><a href="#1什么是逻辑值" class="headerlink" title="1什么是逻辑值"></a>1什么是逻辑值</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153854555.png" alt="image-20210302153854555"></p><h3 id="2什么是关系运算"><a href="#2什么是关系运算" class="headerlink" title="2什么是关系运算"></a>2什么是关系运算</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302153923659.png" alt="image-20210302153923659"></p><p>注意：</p><p><strong>关系运算尽量避免两个浮点数做相等比较</strong></p><h2 id="3逻辑运算符"><a href="#3逻辑运算符" class="headerlink" title="3逻辑运算符"></a>3逻辑运算符</h2><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154444443.png" alt="image-20210302154444443"></p><h2 id="4if语句合用if语句构成的选择结构"><a href="#4if语句合用if语句构成的选择结构" class="headerlink" title="4if语句合用if语句构成的选择结构"></a>4if语句合用if语句构成的选择结构</h2><h3 id="（1）语句形式"><a href="#（1）语句形式" class="headerlink" title="（1）语句形式"></a>（1）语句形式</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154538668.png" alt="image-20210302154538668"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210302154632832.png" alt="image-20210302154632832"></p><h3 id="5条件表达式"><a href="#5条件表达式" class="headerlink" title="5条件表达式"></a>5条件表达式</h3><p>条件运算符 ？</p><p>条件表达式形式：表达式1？表达式2：表达式3</p><p>含义：当表达式1非零时，运算表达式2的值，否则运算表达式3的值 </p><h2 id="6swich语3句及break"><a href="#6swich语3句及break" class="headerlink" title="6swich语3句及break"></a>6swich语3句及break</h2><h3 id="（1）语句形式-1"><a href="#（1）语句形式-1" class="headerlink" title="（1）语句形式"></a>（1）语句形式</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303180141802.png" alt="image-20210303180141802"></p><p>表达式可以是整型表达式，也可以是字符型表达式</p><h2 id="7goto语句（非大纲考点要求）"><a href="#7goto语句（非大纲考点要求）" class="headerlink" title="7goto语句（非大纲考点要求）"></a>7goto语句（非大纲考点要求）</h2><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303180443728.png" alt="image-20210303180443728"></p><h1 id="第五章-循环结构"><a href="#第五章-循环结构" class="headerlink" title="第五章 循环结构"></a>第五章 循环结构</h1><p>大纲分析</p><p>1 for循环结构</p><p>2 while 和do -while循环结构</p><p>3 continue 语句和break语句</p><p>4循环的嵌套</p><h2 id="1while循环语句"><a href="#1while循环语句" class="headerlink" title="1while循环语句"></a>1while循环语句</h2><h3 id="（1）一般形式"><a href="#（1）一般形式" class="headerlink" title="（1）一般形式"></a>（1）一般形式</h3><p>while（表达式）循环体</p><h2 id="2do-while循环语句"><a href="#2do-while循环语句" class="headerlink" title="2do-while循环语句"></a>2do-while循环语句</h2><p>do 循环体 while(表达式)</p><h2 id="3while与do-while的比较"><a href="#3while与do-while的比较" class="headerlink" title="3while与do-while的比较"></a>3while与do-while的比较</h2><h3 id="（1）形式比较"><a href="#（1）形式比较" class="headerlink" title="（1）形式比较"></a>（1）形式比较</h3><p>while(表达式)循环体</p><p>do循环体while(表达式)</p><h3 id="（2）最少循环次数"><a href="#（2）最少循环次数" class="headerlink" title="（2）最少循环次数"></a>（2）最少循环次数</h3><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184133675.png" alt="image-20210303184133675"></p><h3 id="（3）程序举例"><a href="#（3）程序举例" class="headerlink" title="（3）程序举例"></a>（3）程序举例</h3><p>计算1+。。。+100的值</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184446431.png" alt="image-20210303184446431"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184544016.png" alt="image-20210303184544016"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184631102.png" alt="image-20210303184631102"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184717250.png" alt="image-20210303184717250"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184734878.png" alt="image-20210303184734878"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303184947480.png" alt="image-20210303184947480"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185058367.png" alt="image-20210303185058367"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185154032.png" alt="image-20210303185154032"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303185234962.png" alt="image-20210303185234962"></p><h2 id="4for语句循环结构"><a href="#4for语句循环结构" class="headerlink" title="4for语句循环结构"></a>4for语句循环结构</h2><h3 id="（1）for循环一般形式"><a href="#（1）for循环一般形式" class="headerlink" title="（1）for循环一般形式"></a>（1）for循环一般形式</h3><p>for(表达式1：表达式2：表达式3)</p><h2 id="5嵌套循环"><a href="#5嵌套循环" class="headerlink" title="5嵌套循环"></a>5嵌套循环</h2><p><strong>重点算法：判断素数（质数）</strong></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222626730.png" alt="image-20210303222626730"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222726775.png" alt="image-20210303222726775"></p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222741403.png" alt="image-20210303222741403"></p><h2 id="6break和continue"><a href="#6break和continue" class="headerlink" title="6break和continue"></a>6break和continue</h2><p>break跳出switch.循环向下继续运行</p><p>continue结束本次循环 继续下次循环</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222855849.png" alt="image-20210303222855849"></p><hr><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303222917811.png" alt="image-20210303222917811"></p><h1 id="第六章-字符型数据"><a href="#第六章-字符型数据" class="headerlink" title="第六章 字符型数据"></a>第六章 字符型数据</h1><p>大纲分析</p><p>大纲中只规定了 字符串与字符数组</p><p>但本章涉及一下内容：</p><p>1字符常量，字符串常量</p><p>2字符变量的定义及使用</p><p>3字符型与整型数据的换算关系</p><p>4转义字符</p><p>5字符的输入与输出</p><h2 id="1什么是ASCII码"><a href="#1什么是ASCII码" class="headerlink" title="1什么是ASCII码"></a>1什么是ASCII码</h2><p>由于计算机只识别二进制，字符转换成固定数字存储。形成一张字符与数字的对照表格。</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223624766.png" alt="image-20210303223624766"></p><p> <img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223709749.png" alt="image-20210303223709749"></p><h2 id="2什么是字符常量"><a href="#2什么是字符常量" class="headerlink" title="2什么是字符常量"></a>2什么是字符常量</h2><p>​        单引号括起来，中间只有一个字符”a”,’abc’都是不对的</p><h2 id="3什么是转义字符常量"><a href="#3什么是转义字符常量" class="headerlink" title="3什么是转义字符常量"></a>3什么是转义字符常量</h2><p>单引号括起来，中间由反斜杠开头后跟一个特定字符。</p><p><img src="C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7.assets/image-20210303223957570.png" alt="image-20210303223957570"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;二级C语言程序设计&lt;/p&gt;
&lt;h1 id=&quot;第一章-程序的概念&quot;&gt;&lt;a href=&quot;#第一章-程序的概念&quot; class=&quot;headerlink&quot; title=&quot;第一章 程序的概念&quot;&gt;&lt;/a&gt;第一章 程序的概念&lt;/h1&gt;&lt;h2 id=&quot;1程序的概念&quot;&gt;&lt;a href=&quot;#1程</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-二级" scheme="http://example.com/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>C语言笔记</title>
    <link href="http://example.com/2021/03/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/09/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-09T00:05:43.000Z</published>
    <updated>2021-03-25T02:56:58.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-类型"><a href="#1-类型" class="headerlink" title="1.类型"></a>1.类型</h1><p>​    （1）整型int</p><p>​    （2）字符型char</p><p>​    （3）实型（浮点型）</p><p>​                单精度实型float</p><p>​                    双精度实型double</p><p>精确到第几位？</p><p>例如%。3f，就是小数点后保留三位</p><p>​        （4）unsigned int ——无符号整型</p><h1 id="2-输入与输出-scanf-printf"><a href="#2-输入与输出-scanf-printf" class="headerlink" title="2.输入与输出  scanf printf"></a>2.输入与输出  scanf printf</h1><p>每一个scanf函数调用都紧跟在一个printf函数调用的后面，这样做可以提示用户何时输入，以及输入什么。</p><h2 id="（1）输入函数scanf"><a href="#（1）输入函数scanf" class="headerlink" title="（1）输入函数scanf"></a>（1）输入函数scanf</h2><p>​                            例：num1把那个值放在那个地址处</p><p>清空输入缓冲区</p><p>如果在scanf(“%d,%d,%d”,&amp;a,&amp;b,&amp;c)</p><p>这双引号里面有逗号，那么在控制台之内输入的时候就要以逗号隔开</p><p>双引号中间的叫做格式化字符串，&amp;叫做取地址符。</p><h2 id="（2）输出函数printf"><a href="#（2）输出函数printf" class="headerlink" title="（2）输出函数printf"></a>（2）输出函数printf</h2><p>printf(“”,)格式化字符串  输出列表</p><h3 id="1-使用Printf函数输出八进制和十六进制数"><a href="#1-使用Printf函数输出八进制和十六进制数" class="headerlink" title="1.使用Printf函数输出八进制和十六进制数"></a>1.使用Printf函数输出八进制和十六进制数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换符号“%o”、“%X”</span><br></pre></td></tr></table></figure><h3 id="2-域宽"><a href="#2-域宽" class="headerlink" title="2.域宽"></a>2.域宽</h3><p>指的是存放输出数据的宽度</p><h1 id="3-Main函数"><a href="#3-Main函数" class="headerlink" title="3.Main函数"></a>3.Main函数</h1><p>(1)主函数程序的如空有且只有一个</p><p>（2）int main (mian前面的int表示main函数调用返回一个整型值)</p><p>（3）void main 已经过时</p><p>（4）main放在哪里都行，都先执行他</p><h1 id="4-打印的类型"><a href="#4-打印的类型" class="headerlink" title="4.打印的类型"></a>4.打印的类型</h1><h2 id="（1）-d"><a href="#（1）-d" class="headerlink" title="（1）%d"></a>（1）%d</h2><p>（十进制有符号整数）</p><p>例如%-6d——输出的整型占6个字符宽</p><p>-号为左对齐符号，默认为向右对齐</p><p>%u 十进制无符号整数<br>%f 浮点数<br>%s 字符串</p><p>%c 单个字符<br>%p 指针的值<br>%e 指数形式的浮点数<br>%x, %X 无符号以十六进制表示的整数<br>%0 无符号以八进制表示的整数<br>%g 自动选择合适的表示法</p><h1 id="5-计算所占字节数量"><a href="#5-计算所占字节数量" class="headerlink" title="5.计算所占字节数量"></a>5.计算所占字节数量</h1><p>计算元素个数</p><p>sizeof(arr)/sizeof(arr[0])</p><p>sizeof</p><h1 id="6-计算机中的单位"><a href="#6-计算机中的单位" class="headerlink" title="6.计算机中的单位"></a>6.计算机中的单位</h1><p>(1) bit 比特位</p><p>(2) byte字节</p><p>(3) kb</p><p>(4) mb</p><p>(5) gb</p><p>(6) tb</p><p>(7) pb</p><h1 id="7-变量"><a href="#7-变量" class="headerlink" title="7.变量"></a>7.变量</h1><p>（1）定义变量的类型：类型 变量名 赋值</p><p>（2）{}大括号</p><p>（3）定义在{}之外的叫做全局变量</p><p>  (4)全局变量和局部变量可以同时存在，并且局部变量优先</p><p>（5）局部变量和全局变量的名字最好不要一样，容易产生bug</p><p>  (6)局部变量只能在他所在的那个局部使用</p><p>（7）c语言语法规定，变量要定义在当前代码块的前面</p><h1 id="8-常量"><a href="#8-常量" class="headerlink" title="8.常量"></a>8.常量</h1><h2 id="（1）字面常量"><a href="#（1）字面常量" class="headerlink" title="（1）字面常量"></a>（1）字面常量</h2><p>3： 100： 3.14：</p><h2 id="（2）const修饰的常变量"><a href="#（2）const修饰的常变量" class="headerlink" title="（2）const修饰的常变量"></a>（2）const修饰的常变量</h2><p>​         （const常属性）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">4</span>; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//n是变量 但是又有常属性,所以我们称n是常变量</span></span><br></pre></td></tr></table></figure><h2 id="3-define定义的标识符常量"><a href="#3-define定义的标识符常量" class="headerlink" title="(3)#define定义的标识符常量"></a>(3)#define定义的标识符常量</h2><h2 id="（4）枚举常量"><a href="#（4）枚举常量" class="headerlink" title="（4）枚举常量"></a>（4）枚举常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举---一一列举</span></span><br><span class="line"><span class="comment">//性别：男 女 保密</span></span><br><span class="line"><span class="comment">//三原色：红黄蓝</span></span><br></pre></td></tr></table></figure><p>枚举关键字—enum</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">        <span class="comment">//这三个叫做枚举常量</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FEMALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SECRET);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-字符串"><a href="#9-字符串" class="headerlink" title="9.字符串"></a>9.字符串</h1><p>例子：名字 身份证号…</p><p>==不能用来比较两个字符串是否相等，应该用一个库函数-strcmp</p><p>（1）就是双引号引出的东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="string">&quot;hellow sb&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;</span>;<span class="comment">//空字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)字符串的结束标志是一个\0的转义字符，在计算字符串长度的时候\0是结束标志，不算作字符串的内容 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据在计算机存储的时候，存储的是2进制</span></span><br><span class="line">    <span class="comment">//#av$</span></span><br><span class="line">    <span class="comment">//a - 97 </span></span><br><span class="line">    <span class="comment">//A -65</span></span><br><span class="line">    <span class="comment">//  </span></span><br><span class="line">    <span class="comment">//ascii 编码</span></span><br><span class="line">    <span class="comment">//ascii 码值</span></span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">&quot;ABC&quot;</span> ； <span class="comment">//数组</span></span><br><span class="line">     <span class="comment">//&quot;ABC&quot; -- &#x27;A&#x27; &#x27;B&#x27; &#x27;C&#x27; &#x27;\0&#x27; -- &#x27;\0&#x27;</span></span><br><span class="line">       <span class="comment">//字符串的结束标志</span></span><br><span class="line">     <span class="keyword">char</span> arr2[] = &#123;<span class="string">&#x27;A&#x27;</span> ,<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="comment">//&#x27;\0&#x27; - 0</span></span><br><span class="line">    <span class="comment">//&#x27;A&#x27; - 97</span></span><br><span class="line">    <span class="comment">// &#x27;A&#x27; &#x27;B&#x27; &#x27;C&#x27;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-计算字符串长度"><a href="#10-计算字符串长度" class="headerlink" title="10.计算字符串长度"></a>10.计算字符串长度</h1><p>strlen()</p><p>计算字符串长度时\0是结尾的标志，不算做字符数量</p><p><strong>只有从前往后数的时候碰到\0才会停止</strong></p><h1 id="11-转义字符"><a href="#11-转义字符" class="headerlink" title="11.转义字符"></a>11.转义字符</h1><p>（转变原来的意思）</p><p>​        (1).\n 换行</p><p>​        (2).\t 水平制表符</p><p>​                    (类似于Tab)</p><p>​        （3）.? </p><p>​                    （在连续书写多个问号的时候，防止他们被解析成三字母词）</p><p>​                        (在c语言早期的时候有个东西叫做三字母词—？？+)</p><p>​        （4）.+任意带有转义字符的字母，使其不被解析为转义字符</p><p>​        （5）\转义任意，例：’/‘  转义两个单引号中后面的那个，使其打印出来的就是一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main（）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;c:\test\32\test.c));</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">                         //此输出结果为13</span></span><br></pre></td></tr></table></figure><p>（6）\ddd   ddd表示一道三个八进制数字</p><p>例子：上框中 32作为8进制代表的那个十进制数字，作为ascii码值，对应的字符</p><p>​       32=====》10进制 26======》作为ASCII码值代表的数</p><p>（7）\xdd   dd表示2个16进制的数字</p><h1 id="12-库函数"><a href="#12-库函数" class="headerlink" title="12.库函数"></a>12.库函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)printf</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//(2)字符串操作函数</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//(3)引入数学公式</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//(4)引入system</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h1 id="13-注释"><a href="#13-注释" class="headerlink" title="13.注释"></a>13.注释</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(从c++引进的)</span></span><br><span class="line"><span class="comment">/*  */</span>  (C原本的注释，开始 只要在碰到*/就会停止)</span><br></pre></td></tr></table></figure><h1 id="14-if-while语句"><a href="#14-if-while语句" class="headerlink" title="14. if   while语句"></a>14. if   while语句</h1><h1 id="15-函数举例"><a href="#15-函数举例" class="headerlink" title="15.函数举例"></a>15.函数举例</h1><p>例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>；</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">sum = Add(a, b) </span><br><span class="line">    <span class="comment">//f(x) = 2*x+1</span></span><br><span class="line">    <span class="comment">//f(x,y) = x+y</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x+y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">int</span> num2 = <span class="number">20</span> ;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"> <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"> sum = Add(num1,num2)</span><br><span class="line"> sum = Add(a,b) </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;SUM = %d\n&quot;</span> , sum)</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-自定义函数"><a href="#16-自定义函数" class="headerlink" title="16.自定义函数"></a>16.自定义函数</h1><h1 id="17-数组"><a href="#17-数组" class="headerlink" title="17.数组"></a>17.数组</h1><p><strong>一组相同元素的集合</strong></p><p>数组的大小要拿常量来指定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a = 1;</span></span><br><span class="line">   <span class="comment">// int b = 2;</span></span><br><span class="line">    <span class="comment">//int c = 3;</span></span><br><span class="line">    <span class="comment">//int 4 = 4;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">//定义一个存放10个整数数字的数组</span></span><br><span class="line">    <span class="comment">//char ch[20];</span></span><br><span class="line">   <span class="comment">// float arr2[5];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>(1)下标    </p><p>语法规定 数组的下标从0开始</p><p><img src="https://i.loli.net/2020/11/29/2CmWdisDt1Hxe6p.png" alt="image-20201121115222649"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[下标]);</span><br><span class="line"><span class="comment">//直接访问对应数组的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//这里的int指的是数组中各个元素的类型，并不是数组的类型，</span></span><br><span class="line"><span class="comment">//数组的类型较为复杂</span></span><br><span class="line"><span class="comment">//求数组中的元素个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])); </span><br></pre></td></tr></table></figure><h1 id="18-操作符"><a href="#18-操作符" class="headerlink" title="18.操作符"></a>18.操作符</h1><h2 id="（1）算数操作符"><a href="#（1）算数操作符" class="headerlink" title="（1）算数操作符"></a>（1）算数操作符</h2><h2 id="（2）移位操作符"><a href="#（2）移位操作符" class="headerlink" title="（2）移位操作符"></a>（2）移位操作符</h2><p>移的位是二进制位</p><p>左移&lt;&lt;                 右移&gt;&gt; </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型1站四个字节 ——32个bit位</span></span><br><span class="line">    <span class="comment">//000000000000000000000000000000001</span></span><br><span class="line">    <span class="comment">//四个字节放的就是这个二进制序列 </span></span><br><span class="line">    <span class="comment">//左边丢弃右边补零</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/H9MjELVF7pdbe13.png" alt="image-20201121154224594"></p><h2 id="（3）位操作符"><a href="#（3）位操作符" class="headerlink" title="（3）位操作符"></a>（3）位操作符</h2><p>这个位还是二进制位</p><p>&amp;按位与</p><p>|按位或</p><p>^按位异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位与</span></span><br><span class="line"><span class="comment">//--对应的二进制要与（并且）一下 </span></span><br><span class="line"><span class="comment">//c语言中0为假，非0就是真</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>; <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a&amp;b; <span class="comment">//001  </span></span><br><span class="line">    <span class="comment">//只有两个都为1按位与出来才是1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为 <span class="comment">//1(1)  (换为十进制)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;  <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a|b; <span class="comment">//111</span></span><br><span class="line">    <span class="comment">//只要有一个不是0按位或出来就是1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为<span class="comment">//7</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位异或</span></span><br><span class="line"><span class="comment">//计算规律 对应的二进制位相同则为0</span></span><br><span class="line"><span class="comment">//         对应的二进制位相异则为1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;  <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;<span class="comment">//101</span></span><br><span class="line">    <span class="keyword">int</span> c = a|b; <span class="comment">//110</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="（4）赋值操作符"><a href="#（4）赋值操作符" class="headerlink" title="（4）赋值操作符"></a>（4）赋值操作符</h2><p>​      [1]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line">    a = <span class="number">20</span>;<span class="comment">//赋值 // ==判断相等</span></span><br><span class="line"> <span class="comment">//a = a+10;  (给a加10在赋给a)等价于 </span></span><br><span class="line">    <span class="comment">//a += 10;</span></span><br><span class="line">    例子</span><br><span class="line">      <span class="comment">//a = a - 20;</span></span><br><span class="line">        a -= <span class="number">20</span> ；</span><br><span class="line">      <span class="comment">//a = a &amp; 2;</span></span><br><span class="line">        a &amp;= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//符合赋值符</span></span><br><span class="line">    <span class="comment">//+= -= *= ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（5）单目操作符"><a href="#（5）单目操作符" class="headerlink" title="（5）单目操作符"></a>（5）单目操作符</h2><pre><code>  双目操作符</code></pre><p>​    三目操作符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a  = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    a + b;<span class="comment">//+双目操作符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    ！---逻辑反操作</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//在c语言中我们表示真假</span></span><br><span class="line">    <span class="comment">//0 表示假 一切非0 表示真 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>!a )</span><br><span class="line">        <span class="comment">//为真 固定输出为一个数字1</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    sizeof 计算的是变量/类型所占空间的大小</p><p>单位是字节</p><p><img src="https://i.loli.net/2020/11/29/yxUpEYLumiVh4HN.png" alt="image-20201121162503188"></p><p>sizeof  计算int不可省略括号 计算a可以省略括号</p><p>~对一个数的二进制进行按位取反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;<span class="comment">//四个字节 32bit</span></span><br><span class="line">    <span class="keyword">int</span> b = ~a;</span><br><span class="line">    <span class="comment">//按位（二进制位）取反</span></span><br><span class="line">    <span class="comment">//1010  变成</span></span><br><span class="line">    <span class="comment">//0101 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原码 反码 补码</span></span><br><span class="line"><span class="comment">//负数在内存中存储的时候，存储的是二进制的补码</span></span><br><span class="line"><span class="comment">//使用的打印的是这个数的原码</span></span><br><span class="line"><span class="comment">//先补码-1得到反码 ，反码按位取反变成原码</span></span><br></pre></td></tr></table></figure><p>– ++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-- ++ （--++的值都是1 ）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = a++;<span class="comment">//后置++,先使用,再++</span></span><br><span class="line">    <span class="comment">// int b = ++a;前置++,先++，再使用</span></span><br><span class="line">    <span class="comment">//后置--  先使用 再--</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n b = %d\n&quot;</span>, a ,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// *</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(类型)---强制类型转换 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = (<span class="keyword">int</span>) <span class="number">3.14</span>;<span class="comment">//我要把3.14强制转换 3.14是double类型的</span></span><br><span class="line">    <span class="comment">//这里让他强制转化为int型的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（6）关系操作符"><a href="#（6）关系操作符" class="headerlink" title="（6）关系操作符"></a>（6）关系操作符</h2><p>比较大小 看关系是什么  </p><p>大于等于&gt;=</p><p>不等于！=</p><h2 id="（7）逻辑操作符"><a href="#（7）逻辑操作符" class="headerlink" title="（7）逻辑操作符"></a>（7）逻辑操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&amp;&amp;逻辑与 必须两个都是非0的 一0一非0输出也为0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//真 -非0</span></span><br><span class="line">    <span class="comment">//假 - 0</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a&amp;&amp;b;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;c = &amp;d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//||逻辑或 a和b里有一个为真就行  </span></span><br><span class="line"><span class="comment">//他俩都为假的时候才为假 都是真的那都是真的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c =  a||b;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（8）条件操作符（三目操作符）"><a href="#（8）条件操作符（三目操作符）" class="headerlink" title="（8）条件操作符（三目操作符）"></a>（8）条件操作符（三目操作符）</h2><p>比较抽象</p><p>exp1? exp2 : exp3;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    exp1? exp2 : exp3;</span></span><br><span class="line"><span class="meta">#inculde <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span>  max = <span class="number">0</span>;<span class="comment">//存储</span></span><br><span class="line">   </span><br><span class="line">    max = (a &gt; b ? a : b )</span><br><span class="line">        <span class="comment">//如果a&gt;b这个表达式的结果为真</span></span><br><span class="line">   <span class="comment">//则max 为a  不管如何max都放的是ab的等较大值</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        max = a ;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        max = b ;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（9）逗号表达式"><a href="#（9）逗号表达式" class="headerlink" title="（9）逗号表达式"></a>（9）逗号表达式</h2><p>epx1,exp2,exp3….expn</p><p>用逗号隔开表达式</p><h2 id="（10）下标引用操作符"><a href="#（10）下标引用操作符" class="headerlink" title="（10）下标引用操作符"></a>（10）下标引用操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//数组中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    arr[<span class="number">4</span>] ;<span class="comment">//[]下标引用操作符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（11）函数调用操作符"><a href="#（11）函数调用操作符" class="headerlink" title="（11）函数调用操作符"></a>（11）函数调用操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z =<span class="number">0</span>;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">int</span> sum =  ADD(a,b); <span class="comment">//()-函数调用操作符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="（12）解引用操作符"><a href="#（12）解引用操作符" class="headerlink" title="（12）解引用操作符"></a>（12）解引用操作符</h1><p>（13）</p><p>（14）</p><h1 id="19-复制基础框架"><a href="#19-复制基础框架" class="headerlink" title="19.复制基础框架"></a>19.复制基础框架</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="20-综合练习"><a href="#20-综合练习" class="headerlink" title="20.综合练习"></a>20.综合练习</h1><h2 id="（1）求两个数的较大值"><a href="#（1）求两个数的较大值" class="headerlink" title="（1）求两个数的较大值"></a>（1）求两个数的较大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-定义一个函数来求两个数的较大值"><a href="#2-定义一个函数来求两个数的较大值" class="headerlink" title="(2)定义一个函数来求两个数的较大值"></a>(2)定义一个函数来求两个数的较大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//接收a b</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="comment">//大括号为函数体</span></span><br><span class="line">    <span class="keyword">if</span> ( x &gt; y )</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    max = Max(a,b);</span><br><span class="line">    <span class="comment">//定义一个名为Max的函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="21-原码、-补码、反码"><a href="#21-原码、-补码、反码" class="headerlink" title="21.     原码、  补码、反码"></a>21.     原码、  补码、反码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">只要是整数 内存中存储的都是二机制的补码</span><br><span class="line">    对于<span class="comment">//正数来说，他的原码补码反码相同</span></span><br><span class="line">   <span class="comment">//负数 存的是补码</span></span><br><span class="line">    原码是直接按照正方写出的二进制数列</span><br><span class="line">    反码从原码的符号位不变其他位取反得到</span><br><span class="line">    补码 反码+<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2020/11/29/sPKAugpDYBOeoQc.png" alt="image-20201122213736103"></h1><h1 id="22-常见关键字"><a href="#22-常见关键字" class="headerlink" title="22.常见关键字"></a>22.常见关键字</h1><p>关键字不能与变量名冲突</p><p>关键字不能自己创建</p><p>关键字不能做变量名</p><h2 id="（1）static"><a href="#（1）static" class="headerlink" title="（1）static"></a>（1）static</h2><p>static可以修饰局部变量</p><p>可以修饰全局变量</p><p>可以修饰函数</p><p>-2<img src="https://i.loli.net/2020/11/29/h6HuSskTFBWyRZI.png" alt="image-20201122214135006"></p><p><img src="C:/Users/xuanxuan/Desktop/C笔记.assets/image-20201130164931937.png" alt="image-20201130164931937"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量-自动变量（省略auto）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//register </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// register int a =10;</span></span><br><span class="line">    <span class="comment">//建议把a定义成寄存器变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">int</span> 定义的变量是有符号的</span><br><span class="line">        (<span class="keyword">signed</span>) <span class="keyword">int</span> ;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    无符号为没有正负</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//struce -结构体关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="keyword">int</span> main</span><br><span class="line">           <span class="comment">//typedef-类型定义-类型重定义</span></span><br><span class="line">     <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u_int</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static-用来修饰局部变量</span></span><br><span class="line"><span class="comment">//修饰局部变量时局部变量的生命周期变长</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//a为一个静态的局部变量</span></span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出这个函数a不销毁了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/qgJ91dckfthulMo.png" alt="image-20201123092942576"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰全局变量</span></span><br><span class="line"><span class="comment">//改变了变量的作用域 </span></span><br><span class="line"><span class="comment">//让静态的全局变量只能在自己所在的原文件内部使用</span></span><br><span class="line"><span class="comment">//出了原文件就无法使用了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//extern -声明外部符号的</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> g_val ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static修饰函数也是改变了函数的作用域</span></span><br><span class="line"><span class="comment">//这种说法不准确</span></span><br><span class="line"><span class="comment">//正确说法是</span></span><br><span class="line"><span class="comment">//static修饰函数 改变了函数的链接属性</span></span><br><span class="line"><span class="comment">//外部链接属性==&gt;内部链接属性</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//在外部 static  int Add(int x, int  y)</span></span><br><span class="line"><span class="comment">//        z = x + y;</span></span><br><span class="line"><span class="comment">//     return z;</span></span><br><span class="line">声明外部函数</span><br><span class="line">    <span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="23-define定义常量和宏"><a href="#23-define定义常量和宏" class="headerlink" title="23.#define定义常量和宏"></a>23.#define定义常量和宏</h1><p>预处理指令，不是关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define定义的标识符常量</span></span><br><span class="line"><span class="comment">//#define MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define可以定义宏-带参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y)</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//宏的定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(X,Y) X&gt;Y?X:Y</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int a = MAX；</span></span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//函数</span></span><br><span class="line">    <span class="keyword">int</span> max = Max(a,b);</span><br><span class="line">    pritnf(<span class="string">&quot;max =%d\n&quot;</span>,max);</span><br><span class="line">    <span class="comment">//宏的方式</span></span><br><span class="line">    max = MAX(a,b);</span><br><span class="line">    <span class="comment">//max = (a&gt;b?a:b);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h1 id="24-指针"><a href="#24-指针" class="headerlink" title="24.指针"></a>24.指针</h1><p>指针——是个变量 用来存放地址</p><p>每个小格子的编号——地址</p><p>（1）如何产生地址</p><p>​        32位 ——有三十二跟地址线/数据线</p><p>​        正负电10之分</p><p>​    电信号转化为为数字信号</p><p>%p用来打印地址 </p><p>​           </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//给a申请4个字节</span></span><br><span class="line">    <span class="comment">//只要是个值就可以存起来</span></span><br><span class="line">     <span class="keyword">int</span>* p = &amp;a;</span><br><span class="line">    <span class="comment">//p现在是一个指针变量 </span></span><br><span class="line">    <span class="comment">//p的类型是int*</span></span><br><span class="line">    <span class="comment">//p里面存的是a的地址</span></span><br><span class="line">    <span class="comment">//有一种变量是用来存放地址的——指针变量</span></span><br><span class="line">    <span class="comment">//&amp;a;//取地址</span></span><br><span class="line">  <span class="comment">//  printf(&quot;%p\n&quot;,&amp;a);</span></span><br><span class="line"> <span class="comment">//  printf(&quot;%p\n,p&quot;);</span></span><br><span class="line">    <span class="comment">//*p,这颗*就是解引用操作符/间接访问操作符</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = dp\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;创建变量a a的地址中放了<span class="number">10</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;a; 创建p变量存a的地址</span><br><span class="line">*p = <span class="number">20</span>;对p里面存的地址进行操作，通过p找到a</span><br><span class="line">    *p就是a,把a的<span class="number">10</span>改成了<span class="number">20</span></span><br></pre></td></tr></table></figure><p>​               </p><p>例子</p><p>//地址就是二进制序列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span>*pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">        <span class="comment">//打印字符%c</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>​                                                </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针大小32位平台4个字节，64 位平台8个字节</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&quot;w&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>*pc = &amp;ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pc));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="25-结构体"><a href="#25-结构体" class="headerlink" title="25.结构体"></a>25.结构体</h1><p>如何描述复杂对向——结构体</p><p>自己创造出来的一种类型</p><p>struct——结构体关键字</p><p>定义===》初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//改名字的库函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个结构体类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数的类型</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//c语言程序设计</span></span><br><span class="line">    <span class="keyword">short</span> price;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//分号结束类型定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//利用结构体类型创建一个该类型的结构体变量出来</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;c语言程序设计&quot;</span>，<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">book</span>*<span class="title">pb</span> =</span> &amp;b1;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用pb打印一下书名和价格</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pb-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pb-&gt;price);</span><br><span class="line">    <span class="comment">//.操作符应用于结构体变.成员</span></span><br><span class="line">   <span class="comment">//-&gt;结构体指针 -&gt;成员</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*intf(&quot;%s\n&quot;,(*pb).name);</span></span><br><span class="line"><span class="comment">printf(&quot;%s\n&quot;,(*pb).price);*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">// printf(&quot;书名：%s\n&quot;,b1.name);</span></span><br><span class="line">    <span class="comment">//printf(&quot;价格：%d\n&quot;,b1.price);</span></span><br><span class="line">    b1.price = <span class="number">15</span>;<span class="comment">//改变价格 price为变量</span></span><br><span class="line">    <span class="comment">//name不可这样改</span></span><br><span class="line">    <span class="comment">//strcpy字符串拷贝 库函数</span></span><br><span class="line">    <span class="comment">//改名字 stycpy关于字符串操作</span></span><br><span class="line">    stycpy(b1.name,<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;修改后的价格：%d\n&quot;</span>,b1.price);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="26-分支语句和循环语句"><a href="#26-分支语句和循环语句" class="headerlink" title="26.分支语句和循环语句"></a>26.分支语句和循环语句</h1><p>结构 </p><p>顺序结构 选择结构 循环结构</p><p>什么是语句：用分号隔开的就是，有一个分号算一个，直写一个分号也算一条语句——空语句，</p><p>一对大括号就是一个代码块</p><p>注意if和else的匹配</p><p>else和离他最近的if相匹配</p><h2 id="（1）分支语句（选择结构）"><a href="#（1）分支语句（选择结构）" class="headerlink" title="（1）分支语句（选择结构）"></a>（1）分支语句（选择结构）</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>1.后面加大括号{}可以输入多条语句，否则只能输入一跳语句</p><p>2.if语句中0表示假，非0表示真</p><p>3.if语句是一种分支语句可以实现单分支，也可以实现多分支</p><p> 4.else与他最近的（未匹配的if）相配对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单分支if</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if else</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        print(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">18</span> &amp;&amp;age&lt;<span class="number">28</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">28</span> &amp;&amp;age&lt;<span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">50</span> &amp;&amp;age&lt;<span class="number">90</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>)；</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(age&lt;<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(age&gt;=<span class="number">18</span> &amp;&amp;age&lt;<span class="number">28</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">28</span> &amp;&amp;age&lt;<span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(age&gt;=<span class="number">50</span> &amp;&amp;age&lt;<span class="number">90</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老不死&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同上</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =赋值 ==判断相等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">5</span> == num) <span class="comment">//这样写 出现错误可以立即显示 便于发现与改正</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sb\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">判断一个数是否为奇数 输入<span class="number">1</span><span class="number">-100</span>之间的奇数</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> <span class="comment">//我的错误示范</span></span><br><span class="line"><span class="comment">/* int main</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a = 0;</span></span><br><span class="line"><span class="comment">    printf(&quot;请输入一个数字&quot;);</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d\n&quot;,&amp;);</span></span><br><span class="line"><span class="comment">    if(a%2 == 0)</span></span><br><span class="line"><span class="comment">        printf(&quot;不是&quot;);</span></span><br><span class="line"><span class="comment">   else</span></span><br><span class="line"><span class="comment">        printf(&quot;是&quot;);</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> !=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>分支语句 </p><p>switch（整型表达式）</p><p>搭配break实现分支</p><p>产生的结果必须为整型</p><p>case整型常量表达式 case后面必需为整型常量表达式，</p><p>不要求顺序</p><p>default字句可以放在任意位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//case入口 braek跳出语句</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line"><span class="keyword">switch</span> (day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;星期天\n&quot;</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/29/V9THD48ldSszfQb.png" alt="image-20201123211047909"></p><p>相同的case没必要每个后面都加上case,合到一起即可</p><p>switch语句中可以出现if</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果输入了1~7以外的数</span></span><br><span class="line"><span class="comment">//顺序没有严格的措施</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"> pritnf(<span class="string">&quot;输入错误\n&quot;</span>)；</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">switch</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">m++;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m = %d\n, n = %d\n&quot;</span>, m,  n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5,3</span></span><br></pre></td></tr></table></figure><h2 id="（2）循环语句"><a href="#（2）循环语句" class="headerlink" title="（2）循环语句"></a>（2）循环语句</h2><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>条件表达式的执行次数总是比循环体的执行次数多一次</p><h3 id="将大写字母转换为小写字母"><a href="#将大写字母转换为小写字母" class="headerlink" title="将大写字母转换为小写字母"></a>将大写字母转换为小写字母</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in ch = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch +<span class="number">32</span>);</span><br><span class="line">        getchar();<span class="comment">//清理\n</span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h3><p>在循环语句中只要遇到break，就停止后期所有的循环，直接终止循环。所以:while中的break是用于永久终止循环的。</p><h3 id="continue："><a href="#continue：" class="headerlink" title="continue："></a>continue：</h3><p>是用于终止本次循环的，也就是本次循环中continue后边的代码不会再执行，而是直接跳转到while语句的判断部分。进行下一循环的入口判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件为真就执行 循环执行 直至为假</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="comment">//break;</span></span><br><span class="line">            <span class="comment">//1234</span></span><br><span class="line">       <span class="comment">//达到满足条件循环停止</span></span><br><span class="line">            <span class="comment">//continue;</span></span><br><span class="line">            <span class="comment">//1234 </span></span><br><span class="line">        <span class="comment">//回到while 陷入死循环</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getchar-putchar"><a href="#getchar-putchar" class="headerlink" title="getchar putchar"></a>getchar putchar</h3><p>可以接受一个键盘的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//getchar遇到 CTRL+Z停止</span></span><br><span class="line">    <span class="comment">//EOF文件结束标志</span></span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret =<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//接收</span></span><br><span class="line">    <span class="keyword">char</span> password [<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密码：&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">    <span class="comment">//输入密码 并存放在password数组中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认Y/N：&gt;&quot;</span>);</span><br><span class="line">    ret = getchar();</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;放弃确认\n&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for（一小部分文件丢失——暂未补充）"><a href="#for（一小部分文件丢失——暂未补充）" class="headerlink" title="for（一小部分文件丢失——暂未补充）"></a>for（一小部分文件丢失——暂未补充）</h2><p>语法for（exp1；exp2；exp3）</p><p>​                循环语句</p><p>exp1为初始化部分，用于初始化循环变量</p><p>exp2为条件判断部分，判断条件是否终止</p><p>exp3为循环调整，</p><p>把while循环中的三个部分放到了一起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-语句的循环控制变量"><a href="#for-语句的循环控制变量" class="headerlink" title="for 语句的循环控制变量"></a>for 语句的循环控制变量</h3><p>(1)不可以在for循环体内修改循环变量，防止for循环失去控制，陷入死循环</p><p><img src="https://i.loli.net/2020/11/29/fVl9D6ogEyKJscb.png" alt="image-20201126201152688"></p><p>（2）建议for语句的循环控制变量的取值采用“前闭后开区间”写法</p><p>for循环的初始化判断调整都是可以省略的</p><p>for(;;) 但是for循环的判断条件被省略的话，判断条件就恒为真，陷入死循环</p><p>如果不熟练，建议不要随便省略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;HEHE&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span>  i = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//输出运行结果为十个hehe</span></span><br></pre></td></tr></table></figure><p>执行流程</p><p><img src="https://i.loli.net/2020/11/29/sKzcgl35FmDwC9v.png" alt="image-20201126172057875"></p><h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><p>do语句</p><p>循环语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do语句的特点：</p><p>循环至少执行一次，使用的场景有限，所以不是经常使用</p><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><p>c语言的goto语句在哪都可以使用；理论上goto语句手机没有必要的</p><p>最常见的用法就是终止程序中某些深层嵌套的结构处理过程，例如一次跳出两层或多层循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    again:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello sb\n&quot;</span>)；</span><br><span class="line">                <span class="comment">//goto放哪里就跳到哪里</span></span><br><span class="line">            <span class="keyword">goto</span> again;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(disater)</span><br><span class="line">                        <span class="keyword">goto</span> errot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    error:</span><br><span class="line">        <span class="keyword">if</span>(disater)</span><br><span class="line">                <span class="comment">//处理错误情况 ，跳出循环，省去了使用break的麻烦</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="27-获取-显示字符"><a href="#27-获取-显示字符" class="headerlink" title="27.获取/显示字符"></a>27.获取/显示字符</h1><h2 id="缓冲区-输入的东西会先被存放在缓冲区"><a href="#缓冲区-输入的东西会先被存放在缓冲区" class="headerlink" title="缓冲区:输入的东西会先被存放在缓冲区"></a>缓冲区:输入的东西会先被存放在缓冲区</h2><p>输入缓冲区在键盘和getchar中间</p><h2 id="（1）getchar"><a href="#（1）getchar" class="headerlink" title="（1）getchar"></a>（1）getchar</h2><p>在这里</p><p>在代码运行窗口输入的回车也会被当做字符而被获取</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里输入一个1 结果：c1= 1 ,c2 = ,（\n）回车（换行符）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1,c2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:\n&quot;</span>);</span><br><span class="line">    c1 =  getchar();</span><br><span class="line">    c2 =  getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 = %c.c2 = %c\n&quot;</span>，c1,c2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-putchar"><a href="#2-putchar" class="headerlink" title="(2)putchar"></a>(2)putchar</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(ch = (getchar)) ! = EOF)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">             <span class="keyword">continue</span>;</span><br><span class="line">         <span class="built_in">putchar</span>(ch);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="28-scanf与scanf-s"><a href="#28-scanf与scanf-s" class="headerlink" title="28.scanf与scanf_s"></a>28.scanf与scanf_s</h1><p>scanf_s是scanf的安全版本</p><h1 id="29-综合练习（2）"><a href="#29-综合练习（2）" class="headerlink" title="29.综合练习（2）"></a>29.综合练习（2）</h1><h2 id="1-计算n的阶乘"><a href="#1-计算n的阶乘" class="headerlink" title="1.计算n的阶乘"></a>1.计算n的阶乘</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不考虑溢出的情况</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-计算1-10的阶乘"><a href="#2-计算1-10的阶乘" class="headerlink" title="2.计算1~10的阶乘"></a>2.计算1~10的阶乘</h2><p>在1题的基础上，在外面再套一个循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入10：&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">for</span>(n =<span class="number">1</span> ;n&lt;=<span class="number">10</span>;n++)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * i;</span><br><span class="line">    &#125;</span><br><span class="line">       sum = sum + ret;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-在一个有序数组在这中查找具体的某个数字n"><a href="#3-在一个有序数组在这中查找具体的某个数字n" class="headerlink" title="3.在一个有序数组在这中查找具体的某个数字n"></a>3.在一个有序数组在这中查找具体的某个数字n</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//写一个代码，在arr数组中找到7</span></span><br><span class="line">    <span class="keyword">int</span>  i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;sz;i++);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是:%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == sz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若有n个元素，最坏的情况要找n次，</p><p>或者先找中间元素，逐渐缩小查找范围</p><h2 id="4-编写代码掩饰多个字符从两端移动，向中间汇聚。"><a href="#4-编写代码掩饰多个字符从两端移动，向中间汇聚。" class="headerlink" title="4.编写代码掩饰多个字符从两端移动，向中间汇聚。"></a>4.编写代码掩饰多个字符从两端移动，向中间汇聚。</h2><h2 id="5-编写模拟登陆场景"><a href="#5-编写模拟登陆场景" class="headerlink" title="5.编写模拟登陆场景"></a>5.编写模拟登陆场景</h2><p>并且只能登陆三次，只允许输入三次密码，如果密码正确则提示登录成功，如果三次均输入错误，则退出程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-写三个数让他从大到小输出"><a href="#6-写三个数让他从大到小输出" class="headerlink" title="6.写三个数让他从大到小输出"></a>6.写三个数让他从大到小输出</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; 请输入三个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="comment">//算法实现 </span></span><br><span class="line">    <span class="comment">//a中放最大值 b次之 C中放最小值</span></span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//临时变量 防止在将a的值赋给b时，a的值丢失</span></span><br><span class="line">        <span class="keyword">int</span> tmp = a; </span><br><span class="line">        a = b;</span><br><span class="line">        b = tem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a;</span><br><span class="line">        a = c ;</span><br><span class="line">        c = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.打印1~100所有3的倍数 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-给定两个数求最大公约数"><a href="#8-给定两个数求最大公约数" class="headerlink" title="8.给定两个数求最大公约数"></a>8.给定两个数求最大公约数</h2><p>辗转相除法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,r,m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个大于零的整数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (r = m%n)</span><br><span class="line">&#123;</span><br><span class="line">m = n;</span><br><span class="line">n = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-打印1000-2000的闰年"><a href="#9-打印1000-2000的闰年" class="headerlink" title="9.打印1000~2000的闰年"></a>9.打印1000~2000的闰年</h2><p>1判断闰年的方法，能被4整除且不能被100整除</p><p>2能被400整除是闰年</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> year = <span class="number">1000</span>; year &lt;= <span class="number">2000</span>; year++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/xuanxuan/Desktop/2020.12.2.assets/image-20201203160113405.png" alt="image-20201203160113405"></p><h2 id="10-打印100-200的所有素数"><a href="#10-打印100-200的所有素数" class="headerlink" title="10.打印100~200的所有素数"></a>10.打印100~200的所有素数</h2><p>​        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//试除法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义整型并初始化</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//理解</span></span><br><span class="line">        <span class="comment">//让i从2开始</span></span><br><span class="line">        <span class="comment">//num开始被i除一直除到num-1</span></span><br><span class="line">        <span class="comment">//如果其中有num被i整除了，循环就终止，break</span></span><br><span class="line">        <span class="comment">//因为素数是除了1和他本身之外不能被其他数所整除</span></span><br><span class="line">        <span class="comment">//在这里只要i和Num不相等，num被其他说所整除，说明，num不是个属于素数，什么也不输出，1是默认的，可以将任意的num整除，在这里i从2开始，所以是素数的数只能被其本身所整除，即i = num,</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">100</span>; num &lt;= <span class="number">200</span>; num++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//i &lt;num</span></span><br><span class="line">            <span class="comment">//筛选——输出</span></span><br><span class="line">            <span class="comment">//有其他可以将num整除的数也将终止循环</span></span><br><span class="line"><span class="keyword">for</span> (  i = <span class="number">2</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num%i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//跳出来</span></span><br><span class="line">            <span class="comment">//就是i把num-1的数字都试过了，都不能将num整除</span></span><br><span class="line">            <span class="comment">//那么就是剩下i = num的情况了，此时这个数肯定为素数</span></span><br><span class="line">            <span class="comment">// i  =num</span></span><br><span class="line"><span class="keyword">if</span> (num == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一共有%d个质数\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果一个数可以写成a*b的形式，例如；c = a*b</span></span><br><span class="line"><span class="comment">//那么a和b中的一个数肯定小于等于开平方c</span></span><br><span class="line"><span class="comment">//sqrt——开平方的数学库函数—#include&lt;math.h&gt;</span></span><br><span class="line"><span class="comment">//方法2</span></span><br></pre></td></tr></table></figure><h2 id="11-求十个数的最大值"><a href="#11-求十个数的最大值" class="headerlink" title="11.求十个数的最大值"></a>11.求十个数的最大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;- &lt; sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = arr[i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span></span><br><span class="line">ma*</span><br><span class="line">           <span class="number">.0</span></span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-求1-。。。。1-10的和"><a href="#12-求1-。。。。1-10的和" class="headerlink" title="12.求1+。。。。1/10的和"></a>12.求1+。。。。1/10的和</h2><h2 id="13-乘法口诀标的打印"><a href="#13-乘法口诀标的打印" class="headerlink" title="13.乘法口诀标的打印"></a>13.乘法口诀标的打印</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在屏幕上输出乘法口诀表</span></span><br><span class="line"><span class="comment">//分析：9行，多上行行号就是多少，先确定行，再确定列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//行</span></span><br><span class="line"><span class="comment">//确定打印9行</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)<span class="comment">//循环-行数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每行打印的东西</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//%2d-打印两位 如果没有两位就用空格补齐</span></span><br><span class="line">            <span class="comment">//%-2d  向左对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d * %d = %-2d&quot;</span>i, j, i*j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-二分查找"><a href="#14-二分查找" class="headerlink" title="14.二分查找"></a>14.二分查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-猜数字游戏"><a href="#15-猜数字游戏" class="headerlink" title="15.猜数字游戏"></a>15.猜数字游戏</h2><p>1程序运行 电脑随机生成一个数字 猜大猜小有提示 </p><p>2菜单 循环运行</p><p>3时间戳：当前计算机的时间减去计算机的起始时间，1970年0时0分0秒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>(stdlib.h)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-关机程序（goto语句）"><a href="#16-关机程序（goto语句）" class="headerlink" title="16.关机程序（goto语句）"></a>16.关机程序（goto语句）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//在一分钟内关机</span></span><br><span class="line">    <span class="comment">//shoutdown -s -t 60</span></span><br><span class="line">    <span class="comment">//system执行系统命令的</span></span><br><span class="line">    system(<span class="string">&quot;shutdown -s -t 60&quot;</span>);</span><br><span class="line">again:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请注意。你的电脑在1分钟之内关机，如果输入我是sb，就取消关机\n请输入&gt;:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,input);</span><br><span class="line">    <span class="keyword">if</span>(stramp(input,<span class="string">&quot;我是sb&quot;</span>) == <span class="number">0</span> )<span class="comment">//比较两个字符串-strcmp</span></span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;shutdown -a&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-水仙花数字"><a href="#17-水仙花数字" class="headerlink" title="17.水仙花数字"></a>17.水仙花数字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么是水仙花数字——三位上的数字的立方和等于这个数字</span></span><br><span class="line"><span class="comment">//步骤；寻找100~999之间的数字，分解整数，并且验证每个数的平方，最后输出是水仙花数字的数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num, bai, shi, ge;<span class="comment">//定义这个数字和他的百位，十位，个位，为整形</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;水仙花数有：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (num = <span class="number">100</span>; num &lt; <span class="number">1000</span>; num++)<span class="comment">//定义数的区间——保证为三位数</span></span><br><span class="line">&#123;</span><br><span class="line">bai = num / <span class="number">100</span>;<span class="comment">//求出百位上的数</span></span><br><span class="line">shi = (num - bai * <span class="number">100</span>) / <span class="number">10</span>;<span class="comment">//求出十位上面的数</span></span><br><span class="line">ge = num % <span class="number">10</span>;<span class="comment">//求模——余数</span></span><br><span class="line"><span class="comment">//验证个十百位上的立方和是否等于这个数</span></span><br><span class="line"><span class="keyword">if</span> (num == bai*bai*bai +shi*shi*shi+ge*ge*ge)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="30-函数"><a href="#30-函数" class="headerlink" title="30.函数"></a>30.函数</h1><h2 id="1-函数是什么"><a href="#1-函数是什么" class="headerlink" title="1.函数是什么"></a>1.函数是什么</h2><p>函数是程序中的某一部分，负责执行某项特定任务，相对于其他代码，具备相对的独立性。</p><p>一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏，这些代码通常被集成为软件库。</p><p>在C语言中函数分为库函数和自定义函数</p><h2 id="2-库函数"><a href="#2-库函数" class="headerlink" title="2.库函数"></a>2.库函数</h2><p>C语言本身提供的函数叫做库函数</p><p>常用的c语言库函数有</p><ul><li><p>IO函数</p></li><li><p>字符串操作函数</p></li><li><p>内存操作函数</p></li><li><p>时间/日期函数</p></li><li><p>数学函数</p></li><li><p>其他库函数</p><p>例子</p><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strcpy</span></span><br><span class="line"><span class="comment">//源头要是比目的地字符串长</span></span><br><span class="line"><span class="comment">//必然会溢出</span></span><br><span class="line"><span class="comment">//必需保证源头数据比目的地数据短</span></span><br><span class="line"><span class="comment">//或者目的地的空间足够大</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//\0是字符串的结束标志</span></span><br><span class="line"><span class="keyword">int</span> arr1[] = <span class="string">&quot;sb&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">20</span>] = <span class="string">&quot;%%%%%%&quot;</span>;</span><br><span class="line"><span class="comment">//目标地址 来源地址 、</span></span><br><span class="line"><span class="comment">//目的地的内容会被覆盖</span></span><br><span class="line"><span class="built_in">strcpy</span>(arr2, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="comment">//将arr中的前五个字符替换成*</span></span><br><span class="line">memset(arr,&#x27; *&#x27; , 5);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//***** world</span></span><br></pre></td></tr></table></figure><h2 id="3-自定义函数"><a href="#3-自定义函数" class="headerlink" title="3.自定义函数"></a>3.自定义函数</h2><p>函数的基本组成：函数名 函数参数 返回类型 函数体</p><h3 id="1-定义一个函数求两个数的最大值"><a href="#1-定义一个函数求两个数的最大值" class="headerlink" title="(1)定义一个函数求两个数的最大值"></a>(1)定义一个函数求两个数的最大值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义函数</span></span><br><span class="line">get_max(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y )</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//函数的使用</span></span><br><span class="line">    <span class="comment">//a传给x,b传给y</span></span><br><span class="line">    <span class="comment">//传过去什么就用什么接收</span></span><br><span class="line">    <span class="keyword">int</span> max = get_max(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-写一个函数可以交换连个整型变量的内容"><a href="#2-写一个函数可以交换连个整型变量的内容" class="headerlink" title="(2)写一个函数可以交换连个整型变量的内容"></a>(2)写一个函数可以交换连个整型变量的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误示范——在主函数中实现两个整型变量的交换</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义函数但是失败了的示范</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="comment">//前面加上void意思是此函数没有返回值</span></span><br><span class="line"><span class="comment">//什么类型就用什么类型接收</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个临时变量用于交换</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = x;</span><br><span class="line">x = y;</span><br><span class="line">y = c;</span><br><span class="line"><span class="comment">//此时执行失败，在这个定义函数的区块中，交换是成功了，但是x和a，y和b</span></span><br><span class="line"><span class="comment">//两组之间没有联系</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//函数的使用</span></span><br><span class="line">exchange = (a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确示范</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里引入指针的概念</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *pa = &amp;a;<span class="comment">//pa的类型就是int* ,指针变量</span></span><br><span class="line"><span class="comment">//pa里面存的是a的地址</span></span><br><span class="line"><span class="comment">//加个*意思是解引用操作</span></span><br><span class="line">*pa;<span class="comment">//对pa进行解引用操作的意思是，通过pa里面存的这个地址，</span></span><br><span class="line"><span class="comment">//找到它所指向的内容，那这个*pa就是a，</span></span><br><span class="line"><span class="comment">//如果给 20</span></span><br><span class="line">*pa = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//就借助这个指针变量把a的值改成了20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//也就是说，如果要改变a的值，不用a亲自动手，指针变量也可以修改</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面出错的函数示范加上上面引入的指针概念，即可完成此代码的修改</span></span><br><span class="line"><span class="comment">//因为上面出错的原因是因为a与x，b与y，两对字母之间没有直接的关联，导致数据无法传递过去</span></span><br><span class="line">思路：将a和b的地址传过去，因为通过地址就可以找到代码</span><br><span class="line">    将地址传过去，就要用指针来接收</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="comment">//传过来地址，要用指针来接收</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>* pa,<span class="keyword">int</span>* pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = *pa;</span><br><span class="line">    <span class="comment">//将a备份到c中</span></span><br><span class="line">    <span class="comment">//然后改变a</span></span><br><span class="line">    *pa = *pb;</span><br><span class="line">    *pb = c;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    exchange(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-函数参数"><a href="#4-函数参数" class="headerlink" title="4.函数参数"></a>4.函数参数</h2><h3 id="实际参数（实参）"><a href="#实际参数（实参）" class="headerlink" title="实际参数（实参）"></a>实际参数（实参）</h3><p>真实传递给函数的参数</p><p>实参可以是：常量、变量、表达式、函数等。无论实参是何种类型的量，在进行函数调用时，他们都必须拥有确定的值（能够算出确切的值），以便把这些值传送给形参。</p><h3 id="形式参数（形参）"><a href="#形式参数（形参）" class="headerlink" title="形式参数（形参）"></a>形式参数（形参）</h3><p>一般情况下不存在</p><p>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的工程中才实例化（分配内存单元），所以叫形式参数。形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效。就是就收函数的x和y只在此函数中有效。</p><p>当实参传给形参的时候，形参其实是实参的一份临时拷贝，形参和实参之间没有联系，这时候，对形参的修改是不会改变形参的，例如上面失败的交换两个数值。</p><p>结论：形参实例化之后其实相当于实参的一份临时拷贝</p><h2 id="5-函数调用"><a href="#5-函数调用" class="headerlink" title="5.函数调用"></a>5.函数调用</h2><h3 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h3><p>函数的 形参和实参分别占有不同的内存块，对形参的修改不会影响实参</p><h3 id="传址调用"><a href="#传址调用" class="headerlink" title="传址调用"></a>传址调用</h3><p>传址调用是把函数外部创建变量的内地址传递给函数参数的一种调用方式。</p><p>这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量。</p><h3 id="什么时候用什么"><a href="#什么时候用什么" class="headerlink" title="什么时候用什么"></a>什么时候用什么</h3><p>如果只需要传递个值不用作出改变——传值</p><p>要改变函数外部的某些变量——传址</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><h4 id="（1）写一个函数输出100-200之间所有的质数"><a href="#（1）写一个函数输出100-200之间所有的质数" class="headerlink" title="（1）写一个函数输出100~200之间所有的质数"></a>（1）写一个函数输出100~200之间所有的质数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出100到200之间的质数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//是素数返回1，不是素数返回0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//可以优化一下J&lt;=sqrt(n)</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n%j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">            <span class="comment">//不能太着急，应让其检验完毕</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//0判断I是否为质数</span></span><br><span class="line"><span class="keyword">if</span> (is_prime(i) == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-写一个函数打印1000-2000之间的闰年"><a href="#2-写一个函数打印1000-2000之间的闰年" class="headerlink" title="(2)写一个函数打印1000~2000之间的闰年"></a>(2)写一个函数打印1000~2000之间的闰年</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个函数输出1000~2000之间的闰年</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//返回的值是什么就在函数定义前加入什么</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_runyear</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (year = <span class="number">1000</span>; year &lt; <span class="number">2000</span>; year++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//不要忘了下面调用函数中（）中的内容，判断什么要写好，要不代码无法运行</span></span><br><span class="line"><span class="keyword">if</span> (is_runyear(year) == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数在设计的时候，功能要单一，要干净</span></span><br></pre></td></tr></table></figure><h4 id="3-二分查找（折半查找）"><a href="#3-二分查找（折半查找）" class="headerlink" title="(3)二分查找（折半查找）"></a>(3)二分查找（折半查找）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line">   <span class="comment">//在一个有序数组中查找具体的某个数</span></span><br><span class="line"><span class="comment">//如果找到了返回，这个数的下标，找不到返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如我要在这个数组中找到7</span></span><br><span class="line"><span class="comment">//首先找到这组被查找元素的中间的元素</span></span><br><span class="line"><span class="comment">//假如说发现中间元素5要比我要找的数要小</span></span><br><span class="line"><span class="comment">//说明我要找的数在5的右边，这样我的范围就缩小了一半</span></span><br><span class="line"><span class="comment">//查找了一次范围就缩小了一半，这样的速度是比较快的</span></span><br><span class="line"><span class="comment">//这就叫二分查找(折半查找)</span></span><br><span class="line"><span class="comment">//那么怎么找到中间元素的下标呢</span></span><br><span class="line"><span class="comment">//原来的数组是1 2 3 4 5 6 7 8 9 10 </span></span><br><span class="line"><span class="comment">//他们的下标是0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">//左下标为0，右下标为9</span></span><br><span class="line"><span class="comment">//给定完这组元素的下标，就可以通过左右元素的下标来确定中间元素的下标</span></span><br><span class="line"><span class="comment">//就是这组被查找元素的左下标是0，右下标是9</span></span><br><span class="line"><span class="comment">//0和9的平均值是4，下标4锁定的元素是5，就可以认为5就是这组元素的中间元素了</span></span><br><span class="line"><span class="comment">//5这个元素比我要找的7要小</span></span><br><span class="line"><span class="comment">//说明我要被查找的元素范围就变成了6到10</span></span><br><span class="line"><span class="comment">//新的范围，左下标是5，右下标是9</span></span><br><span class="line"><span class="comment">//左右下标又可以求出一个平均值是7，又找到一个对应的元素是8</span></span><br><span class="line"><span class="comment">//所以这一组查找范围的中间元素是8</span></span><br><span class="line"><span class="comment">//用8再跟我要找的元素比一下，比我找的元素要大</span></span><br><span class="line"><span class="comment">//说明我要查找的元素在8的左边</span></span><br><span class="line"><span class="comment">//这时候要查找的范围被再次的缩小成了6到7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本思想，当我确定了被查找范围时候，要确定他的左下标和右下标，然后求出下标的平均值，</span></span><br><span class="line"><span class="comment">//找到中间元素，将中间元素和我要找的元素比一下，如果比我找的元素大，说明我要找的元素在他的左边，</span></span><br><span class="line"><span class="comment">//如果比我要找的元素小，说明我要找的元素在他的右边，</span></span><br><span class="line"><span class="comment">//这样确定出新的范围，出现新的左右下标。</span></span><br><span class="line"><span class="comment">//一直找到左右下标无法确定新的范围，他们之间没有元素可以被查找的时候，结束，说明没有找到</span></span><br><span class="line"><span class="comment">//如果在某一次查找的时候，找到了，下标相等了，说明找到了，把下标给过来</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//算法实现</span></span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;<span class="comment">//左下标</span></span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span> ;<span class="comment">//右下标</span></span><br><span class="line"><span class="comment">//放到循环中</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)<span class="comment">//这样才说明中间是有元素可以被查找的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;<span class="comment">//中间元素的下标</span></span><br><span class="line"><span class="comment">//拿到这个mid——锁定个元素</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)<span class="comment">//如果中间元素比我要找的k要小，</span></span><br><span class="line"><span class="comment">//被查找范围的右下标不用变，左下标变成mid+！</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找不到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//返回去了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行发现找不到结果——代码出现了问题</span></span><br><span class="line"><span class="comment">//自己找问题的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分位置添加注释后</span></span><br><span class="line"> <span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"><span class="comment">//实际上这地方传递过来的数组arr是首元素地址</span></span></span><br><span class="line"><span class="function"><span class="comment">//本质上这里的arr是个指针，因为指针才可以接收地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//算法实现</span></span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 4/4=1  无法得到元素个数</span></span><br><span class="line"><span class="comment">//sz出现了问题</span></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;<span class="comment">//左下标</span></span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span>;<span class="comment">//右下标</span></span><br><span class="line"><span class="comment">//放到循环中</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)<span class="comment">//这样才说明中间是有元素可以被查找的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;<span class="comment">//中间元素的下标</span></span><br><span class="line"><span class="comment">//拿到这个mid——锁定个元素</span></span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)<span class="comment">//如果中间元素比我要找的k要小，</span></span><br><span class="line"><span class="comment">//被查找范围的右下标不用变，左下标变成mid+！</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果找不到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//返回去了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//只要把数组传参传过去</span></span><br><span class="line"><span class="comment">//在内部是不能再上面的方式求元素个数了</span></span><br><span class="line"><span class="comment">//数组是一块连续的空间，他里面可以放很多个元素</span></span><br><span class="line"><span class="comment">//数组在传参的时候</span></span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k);<span class="comment">//在这里仅仅传的是数组第一个元素的地址，不是所有元素</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然传进去不行，那就在外面算，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改版(注释已经删除)(只有修改后的注释)</span></span><br><span class="line"><span class="comment">////二分查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//将多传递过来的参数sz接收</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number_search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> k,<span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = sz - <span class="number">1</span> ;</span><br><span class="line">    <span class="comment">//进入到这个循环中就是一次二分查找</span></span><br><span class="line">    <span class="comment">//在这里要进行很多次</span></span><br><span class="line">    <span class="comment">//每一次二分查找的第一步是找被查找范围的中间元素的下标</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        <span class="comment">//等于号不能丢</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k)</span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//将计算元素个个数</span></span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> ret = number_search(arr, k,sz);<span class="comment">//将sz也传过去</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找不到指定的数字\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1"><a href="#（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1" class="headerlink" title="（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1"></a>（4）写一个函数，实现，每调用一次这个函数，就会将num的值增加1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次调用一次函数，num的值就会增加1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这个时候的*p就是num</span></span><br><span class="line"><span class="comment">//*p++;这样写是错误的</span></span><br><span class="line">    <span class="comment">//这里++的优先级要高一些</span></span><br><span class="line">    <span class="comment">//目的是让*p  ++</span></span><br><span class="line">    <span class="comment">//应该写成</span></span><br><span class="line">    (*p)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//从外面操作——传址</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//1</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//2</span></span><br><span class="line">Add(&amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//3</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数的嵌套调用和链式访问"><a href="#6-函数的嵌套调用和链式访问" class="headerlink" title="6.函数的嵌套调用和链式访问"></a>6.函数的嵌套调用和链式访问</h2><h3 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h3><p>函数和函数之间是可以有机的组合在一起的</p><h3 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h3><p>把一个函数的返回值作为另外一个函数的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//求字符串的长度</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line">len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line"><span class="comment">//输出 3 </span></span><br><span class="line"><span class="comment">//一句话搞定</span></span><br><span class="line"><span class="comment">//这就是链式访问，像一个链条一样将函数有机的串在了一起</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"><span class="comment">//输出还是3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>下面这串代码会输出什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我以为就是输出43</span></span><br><span class="line"><span class="comment">//补充printf(&quot;&quot;,)这里面的内容分别是——格式化字符串——输出列表</span></span><br><span class="line"><span class="comment">//pirntf返回值是打印在屏幕上的字符数 </span></span><br><span class="line"><span class="comment">//但是答案却是4321</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf的返回值是打印在屏幕上字符的个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">43</span>)));</span><br><span class="line"><span class="comment">//先打印 43 ——打印了两个字符——返回值是2——打印2-打印了1个字符——返回值1</span></span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43)));</span></span><br><span class="line"><span class="comment">//首先printf(&quot;%d&quot;, printf(&quot;%d&quot;, printf(&quot;%d&quot;, 43)))中最里面的printf开始打印</span></span><br><span class="line"><span class="comment">//输出43——打印了两个是字符———那么他的返回值就是2</span></span><br><span class="line"><span class="comment">//此时式子变成printf(&quot;%d&quot;, printf(&quot;%d&quot;, 2))</span></span><br><span class="line"><span class="comment">//输出2——打印了一个字符——返回值是1</span></span><br><span class="line"><span class="comment">//式子变成printf(&quot;%d&quot;, 1)</span></span><br><span class="line"><span class="comment">//打印1——over</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-函数的声明和定义"><a href="#7-函数的声明和定义" class="headerlink" title="7.函数的声明和定义"></a>7.函数的声明和定义</h2><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p>1.告诉编译器有一个函数叫什么，参数是什么，返回类型是什么，但是具体是不是存在，无关紧要。</p><p>2.函数的声明一般出现在函数的使用之前。要满足先声明后使用。</p><p>3.函数的声明一般要放在头文件中的。</p><p>当函数定义放到主函数后面的话，代码无法运行报错</p><p>这里就用到了函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="comment">//在这个函数声明中的x和y是可以省略掉的，因为我们根本就不回去用他</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//函调用</span></span><br><span class="line">sum = Add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时候把函数定义放到主函数的下面</span></span><br><span class="line"><span class="comment">//程序会报错——“Add未定义”</span></span><br><span class="line"><span class="comment">//虽然定义了但是程序并不知道</span></span><br><span class="line"><span class="comment">//这里就需要在主函数前面进行一个声明——函数声明</span></span><br><span class="line">Add(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> z = x + y;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样写是比较啰嗦的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数声明正确的用法"><a href="#函数声明正确的用法" class="headerlink" title="函数声明正确的用法"></a>函数声明正确的用法</h4><p>创建三个文件add.h   add.c   test.c</p><p>自己写的头文件用双引号引</p><p>#include  “ “   </p><p>在这里add.h和add.c共同构成一个加法模块</p><p>补充：在#include&lt;stdio.h&gt;中</p><p>当程序运行到这行是</p><p>程序会把相关有用的全部拷贝过来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">在add.h(头文件)文件中</span><br><span class="line">    <span class="comment">//写函数声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ADD_H</span></span><br><span class="line">    <span class="comment">//如果没有定义过后面那个符号</span></span><br><span class="line">    <span class="comment">//那就先定义一下define</span></span><br><span class="line">    <span class="comment">//如果定义过了，就为假</span></span><br><span class="line">    <span class="comment">//下面的代码就不要了</span></span><br><span class="line">    <span class="comment">//防止用一个头文件被引用多次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ADD_H</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">在add.C文件中</span><br><span class="line">    <span class="comment">//写函数的定义</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z；</span><br><span class="line">&#125;</span><br><span class="line">在test.c文件中</span><br><span class="line">    <span class="comment">//直接进行用这个上面定义的加法函数</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;add.h&quot;</span></span></span><br><span class="line">    <span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum  =  Add(a,b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//为什么要这么弄呢？</span></span><br><span class="line"><span class="comment">//如果吧所有的代码函数都放到同一个test.c文件中</span></span><br><span class="line"><span class="comment">//项目组十个人分工，布置任务</span></span><br><span class="line"><span class="comment">//没法同时都在一个test.c文件中工作，</span></span><br><span class="line"><span class="comment">//这样分开工作，最后include引用,组合在一起</span></span><br><span class="line"><span class="comment">//功能复杂——分模块写</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>函数的定义是指函数的具体实现，交代函数的功能实现。</p><h2 id="8-函数递归"><a href="#8-函数递归" class="headerlink" title="8.函数递归"></a>8.函数递归</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>递归必须要有结束条件，否则程序将崩溃</p><p>递归函数条件终止后就会逐层返回</p><p>。</p><h3 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h3><p>一个函数自己调用自己。把大事化小</p><p>详解：</p><p>程序调用自身的编程技巧成为递归。递归作为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序，就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的主要思考方式在于：把大事化小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//史上最简单的递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//死循环的打印sbsb</span></span><br><span class="line"><span class="comment">//走着走着挂了 </span></span><br><span class="line"><span class="comment">//递归常见的错误——栈溢出</span></span><br><span class="line"><span class="comment">//什么是栈溢出——</span></span><br><span class="line"><span class="comment">//内存划分——栈区-堆区-静态区</span></span><br><span class="line"><span class="comment">//对应   放置-栈区-局部变量-函数形参</span></span><br><span class="line"><span class="comment">//堆区-动态开辟的内存  malloc calloc</span></span><br><span class="line"> <span class="comment">//静态区-全局变量-Staic修饰的变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sbsb\n&quot;</span>);</span><br><span class="line">main();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stack overflow——栈溢出</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><p>接收一个整型值（无符号），按照顺序打印它的每一位，例如：输入：1234，输出1 2 3 4 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(n / <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先将输出的123传到n这里</span></span><br><span class="line"><span class="comment">//程序运行到if这里，进行判断,123&gt;9条件成立，进行下一步,进入if</span></span><br><span class="line"><span class="comment">//接着将123/10 = 12余的3丢掉</span></span><br><span class="line"><span class="comment">//函数接着调用自己</span></span><br><span class="line"><span class="comment">//12&gt;9条件成立，继续进行下一步，进入if</span></span><br><span class="line"><span class="comment">//再将12/10 = 1 余的2丢掉</span></span><br><span class="line"><span class="comment">//函数再次调用自己</span></span><br><span class="line"><span class="comment">//此时1&gt;9条件不成立，进行到printf处，1%10 = 0余1，将1输出</span></span><br><span class="line"><span class="comment">//到现在，递归函数的条件已经终止(不成立)，开始进行逐层返回</span></span><br><span class="line"><span class="comment">//梳理一下层数</span></span><br><span class="line"><span class="comment">//1层 输入 123，</span></span><br><span class="line"><span class="comment">//2层 输入 12</span></span><br><span class="line"><span class="comment">//3层 输入 1</span></span><br><span class="line"><span class="comment">//4层 条件不成立 输出1</span></span><br><span class="line"><span class="comment">//由2层开始逐层向上返回</span></span><br><span class="line"><span class="comment">//2层 12%10 = 1余数 2，将2输出</span></span><br><span class="line"><span class="comment">//1层 123%10 = 12余数3，将3输出</span></span><br><span class="line"><span class="comment">//最后得出结果1 2 3 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">print(num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归的两个必要条件"><a href="#递归的两个必要条件" class="headerlink" title="递归的两个必要条件"></a>递归的两个必要条件</h3><p>1存在限制条件，当满足这个限制条件的时候，递归便不再继续。</p><p>2每次递归调用之后越来越接近这个限制条件。    </p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>编写代码，求字符串长度</p><p>strlen——求字符串长度</p><h4 id="（1）不用函数的"><a href="#（1）不用函数的" class="headerlink" title="（1）不用函数的"></a>（1）不用函数的</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);<span class="comment">//求字符串长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使用函数的（有临时变量——计数器）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里面模拟实现了一个strlen函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//传过来的是首元素的地址——char*-指针变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span><span class="comment">//求出的是长度——返回值是整型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//计算字符串的长度，count——计数器</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//不等于\0进入到循环之内</span></span><br><span class="line"><span class="comment">//即没有到字符串的结束位置</span></span><br><span class="line"><span class="comment">//当到\0处时，条件为假，调到return处</span></span><br><span class="line"><span class="keyword">while</span> (*str !=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//str里面存的是地址，他+1就是 看下一位是什么</span></span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建了一个数组，在这个数组里面放了，b i  t还有一个/0</span></span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = my_strlen(arr);<span class="comment">//arr数组传承那——传过去的不是整个数组，而是第一个元素的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len = %d\n&quot;</span>, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无计数器的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无计数器</span></span><br><span class="line"><span class="comment">//无计数器的计算字符串的位数</span></span><br><span class="line"><span class="comment">//大事化小——看第一位是不是\0</span></span><br><span class="line"><span class="comment">//终止条件，</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//bit\0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + my_strlen(str + <span class="number">1</span>); </span><br><span class="line"><span class="comment">//调整bit的所对应的位数 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归-与迭代"><a href="#递归-与迭代" class="headerlink" title="递归 与迭代"></a>递归 与迭代</h3><p>迭代——类似于循环</p><h4 id="练习——求n的阶乘（不考虑溢出）"><a href="#练习——求n的阶乘（不考虑溢出）" class="headerlink" title="练习——求n的阶乘（不考虑溢出）"></a>练习——求n的阶乘（不考虑溢出）</h4><p>​        </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算n的阶乘——使用函数</span></span><br><span class="line"><span class="comment">//jiecheng这个函数没用递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ji = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= z; i++)</span><br><span class="line">&#123;</span><br><span class="line">ji = ji * i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ji;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng2</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (z &lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> z * jiecheng2(z - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">ret = jiecheng2(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;上面这个数的阶乘是：%d&quot;</span>,ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求第n的斐波那契数（不考虑溢出）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求第n个斐波那契数</span></span><br><span class="line"><span class="comment">//斐波那契数列就是前两个数等于第三个数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (z &lt;= <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> fbn(z - <span class="number">1</span>) + fbn(z - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="comment">//TDD——测试驱动开发，先想函数如何实现，然后再进行编写</span></span><br><span class="line">ret = fbn(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第这个的斐波那数是%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是当输入50，想求第50个斐波那系数的时候，需要很长时间才能算出来，</span></span><br><span class="line"><span class="comment">//效率比较低，因为要求第50个斐波那系数，</span></span><br><span class="line"><span class="comment">//就要知道第48和第49个，要求他们两个，也同样要往前面推，求出两个，</span></span><br><span class="line"><span class="comment">//这都不是现成的，都需要机器先运算</span></span><br><span class="line"><span class="comment">//一层层的往下面拨，需要的数据太多了，2的次方数</span></span><br><span class="line"><span class="comment">//并且在这其中有很多的重复数据</span></span><br><span class="line"><span class="comment">//在此加入一个全局变量count来计算第三个斐波那系数被计算了多少次</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">加入全局变量count来计算<span class="number">3</span>被计算了几次</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">3</span>)<span class="comment">//测试第三个斐波那系数被计算了多少次</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fbn(z - <span class="number">1</span>) + fbn(z - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ret = fbn(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第这个的斐波那数是%d\n&quot;</span>, ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第三个斐波那数被计算了——%d次\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">上面递归的方法进行了太多的重复计算</span><br><span class="line">这个用循环的方法</span><br><span class="line"><span class="comment">//解释</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13 21 43 55 </span></span><br><span class="line"><span class="comment">//为了避免计算重复的是</span></span><br><span class="line"><span class="comment">//假设把第一个数的值赋给a,第二个数的值赋给b,</span></span><br><span class="line"><span class="comment">//将a+b的值赋给c</span></span><br><span class="line"><span class="comment">//循环往复</span></span><br><span class="line"><span class="comment">//其中前两个一加赋给第三个</span></span><br><span class="line"><span class="comment">//计算斐波那契数是从第三个开始</span></span><br><span class="line"><span class="comment">//创建循环的条件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fbn</span><span class="params">(<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//这是前两个斐波那契数</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//计算斐波那契数从第三个数开始</span></span><br><span class="line"><span class="keyword">while</span> (z &gt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = a + b;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">z--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">ret = fbn(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个斐波那契数%d&quot;</span>, n,ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="什么时候用递归什么时候用循环"><a href="#什么时候用递归什么时候用循环" class="headerlink" title="什么时候用递归什么时候用循环"></a>什么时候用递归什么时候用循环</h4><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>当递归加上限制条件的时候，还是会栈溢出（stack overflow）</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跑一会儿程序就会奔溃</span></span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    test(n+<span class="number">1</span>)</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test(<span class="number">1</span>)；</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归的经典案例"><a href="#递归的经典案例" class="headerlink" title="递归的经典案例"></a>递归的经典案例</h4><p>1汉诺塔问题</p><p>2青蛙跳台阶问题</p><p>n个台阶，一次可以跳1个或者2个，请问有多少种跳法</p><p>《剑指offer》</p><h1 id="31-数组"><a href="#31-数组" class="headerlink" title="31.数组"></a>31.数组</h1><h2 id="1-一维数组的创建和初始化"><a href="#1-一维数组的创建和初始化" class="headerlink" title="1.一维数组的创建和初始化"></a>1.一维数组的创建和初始化</h2><h3 id="数组的创建："><a href="#数组的创建：" class="headerlink" title="数组的创建："></a>数组的创建：</h3><p>数组是一组相同类型元素的集合，数组的创建方式</p><p>数组类型type_t </p><p>数组名称arr_name</p><p>const_n是一个常量表达式，用来指定数组的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个数组用来存放10个整型</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> arr2[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//char ch[n];——这样写不可以，数组的大小一定要用常量</span></span><br><span class="line"><span class="keyword">float</span> arr3[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> arr4[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>数组的初始化是指：在数组创建的同时给数组的内容一些合理初始值（初始化）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//——这种叫不完全初始化，前三个是123，剩下的元素默认初始化为0</span></span><br><span class="line">    <span class="comment">//字符数组</span></span><br><span class="line">char arr2[5] =&#123;&#x27;a&#x27;,&#x27;b（98）&#x27;&#125;;//初始化同样不完全，其中当把b替换成98时， 输出也是b，因为b的ascii码值就是98 </span><br><span class="line">    <span class="keyword">char</span> arr3[<span class="number">5</span>] = <span class="string">&quot;ab&quot;</span>；</span><br><span class="line">    <span class="keyword">char</span> arr4[] = <span class="string">&quot;abcdef&quot;</span>；<span class="comment">//不指定大小，进行初始化，他会根据初始化的内容，来确定数组几个元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr4));<span class="comment">//7</span></span><br><span class="line">    <span class="comment">//sizeof——计算arr4所占空间的大小——放了abcdef\0这七个元素</span></span><br><span class="line">    pritnf(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr4));<span class="comment">//6</span></span><br><span class="line">    <span class="comment">//strlen——求字符串长度，\0之前的字符个数，\0停止，\0不计数</span></span><br><span class="line">    <span class="comment">//////////////////////////////////////////////////////////</span></span><br><span class="line">   补充知识</span><br><span class="line">      <span class="built_in">strlen</span>和<span class="keyword">sizeof</span>没有什么关联</span><br><span class="line">       <span class="built_in">strlen</span>是求字符串长度的，想让他终止就得碰到\<span class="number">0</span>,没有\o，计算出的值就是个随机值-只能针对字符串求长度——库函数-要引头文件</span><br><span class="line">       <span class="keyword">sizeof</span>计算变量、数组、类型的大小、-单位是字节、——操作符</span><br><span class="line">  <span class="comment">/////////////////////////////////////////////////////////////</span></span><br><span class="line">       <span class="comment">//完全初始化就是规定了数组中有几个元素，后面就初始化几个元素</span></span><br><span class="line">       <span class="comment">//数组在创建的时候如果不想指定</span></span><br><span class="line"><span class="keyword">float</span> arr3[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> arr4[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h2><p>对于数组的使用我们之介绍了一个操作符：[]    ,下标引用操作符，它其实就是数组访问的操作符，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;abcdefe&quot;</span>;<span class="comment">//这里面放了[a] [b][c][d][e][f][\0]</span></span><br><span class="line"><span class="comment">/*printf(&quot;%c\n&quot;, arr[3]);*/</span><span class="comment">//输出字符串中的第三个字符</span></span><br><span class="line"><span class="comment">//这里的[]就是下标引用操作符</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        <span class="comment">//下面这个同上</span></span><br><span class="line">   <span class="comment">// for(i = 0; i &lt;(int)strlen(arr);i++)</span></span><br><span class="line">       <span class="comment">//for(i = 0; i&lt; lenli++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, arr[i]);<span class="comment">//输出abcdef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; sz ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,sz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>数组其实是用下标来访问的，下标是从0开始的。</p><p>数组的大小可以通过计算来得到。</p><h2 id="3-一维数组在内存中的存储"><a href="#3-一维数组在内存中的存储" class="headerlink" title="3.一维数组在内存中的存储"></a>3.一维数组在内存中的存储</h2><p>一维数组在内存中的排布</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出此一维数组在内存中的排布情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n&quot;</span>, i, &amp;arr[i]);</span><br><span class="line"><span class="comment">//在内存中连续开辟空间来存放1~10</span></span><br><span class="line"><span class="comment">//数组在内存中是连续存放的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组在内存中是连续存放的</p><h2 id="4-二维数组的创建和初始化"><a href="#4-二维数组的创建和初始化" class="headerlink" title="4.二维数组的创建和初始化"></a>4.二维数组的创建和初始化</h2><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组的创建</span><br><span class="line">    <span class="comment">//3行4列的二维数组</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="comment">//3行5列</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line"><span class="comment">//2行4列</span></span><br><span class="line"><span class="keyword">double</span> arr[<span class="number">2</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里创建一个3行4列的二维数组</span></span><br><span class="line"><span class="comment">//在第一行存放123没有初始化的位置放置0</span></span><br><span class="line"><span class="comment">//在第二行放置45，没有初始化的位置放置0</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维数组要明确几行几列，列不能省略，行可以省略</span><br></pre></td></tr></table></figure><h2 id="5-二维数组的使用"><a href="#5-二维数组的使用" class="headerlink" title="5.二维数组的使用"></a>5.二维数组的使用</h2><h2 id="6-二维数组在内存中的存储"><a href="#6-二维数组在内存中的存储" class="headerlink" title="6.二维数组在内存中的存储"></a>6.二维数组在内存中的存储</h2><p>5和6放到一起说了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">二维数组的使用也是通过下标的方式</span><br><span class="line"> 不管行还是列下标都是从<span class="number">0</span>开始</span><br><span class="line">     大致内容跟上跟一维数组一样</span><br><span class="line">    <span class="comment">//随之元素下标的增长，元素的地址也在有规律的增长，由此可以得出结论，数组再内存中是有连续存放的。</span></span><br><span class="line">    二维数组在内存中也是连续存放的，像一维数组一样</span><br><span class="line">    假想中是分行和列的，其实并不分，连续一条直线存放</span><br><span class="line">    把二维数组拆成几个一维数组</span><br><span class="line">    <span class="comment">//二维数组</span></span><br><span class="line">    arr[<span class="number">0</span>][j]</span><br><span class="line">    arr[<span class="number">1</span>][j]</span><br><span class="line">    arr[<span class="number">2</span>][j]</span><br><span class="line">    就可以想象成三个一维数组并排放置</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][j]);  <span class="comment">//打印此二维数组的所有元素</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d] = %p\n&quot;</span>, i, j, &amp;arr[i][j]);<span class="comment">//打印二维数组中各个元素的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-数组作为函数参数"><a href="#7-数组作为函数参数" class="headerlink" title="7.数组作为函数参数"></a>7.数组作为函数参数</h2><p>冒泡排序——将一个整型数组进行排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//确定冒泡的趟数</span></span><br><span class="line"><span class="comment">//这里从下面传上来的数组只是数组中首元素的地址0</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int sz = sizeof(arr) / sizeof(arr[0]);//假设10个元素</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确定每趟中多少对比较</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//动态的</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//打印数组的每个元素</span></span><br><span class="line"><span class="comment">//对arr数组进行冒泡排序</span></span><br><span class="line"><span class="comment">//10个元素需要进行9趟冒泡排序</span></span><br><span class="line"><span class="comment">//在外面算好元素个数然后传过去</span></span><br><span class="line">maopao(arr,sz);<span class="comment">//调用冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (i; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若改为已经排好顺序的数组，代码依然会老老实实的进行冒泡排序</span></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//假设这一趟要排序的数据已经有序</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                flag  =  <span class="number">0</span> ; <span class="comment">//本趟排序的数据其实并不完全有序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">maopao(arr,sz);</span><br><span class="line"><span class="keyword">for</span> (i; i &lt; sz; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//break只能用于循环或者if语句</span></span><br></pre></td></tr></table></figure><p>数组名是什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印的值是一样的但是意义是不一样的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]); </span><br><span class="line"><span class="comment">//前面两个代表的首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, &amp;arr);<span class="comment">//整个数组的地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line">pritnf(<span class="string">&quot;%p\n&quot;</span>, &amp;arr</span><br></pre></td></tr></table></figure><p>补充：<br>1sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组。</p><p>2……数组名，取出的是数组的地址。&amp;数组名，数组名表示整个数组。</p><p>除了12的两种情况之外，所有的数组名都表示数组首元素的地址。</p><h2 id="8-数组的应用实例1：三子棋"><a href="#8-数组的应用实例1：三子棋" class="headerlink" title="8.数组的应用实例1：三子棋"></a>8.数组的应用实例1：三子棋</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-数组的应用实例2：扫雷游戏"><a href="#9-数组的应用实例2：扫雷游戏" class="headerlink" title="9.数组的应用实例2：扫雷游戏"></a>9.数组的应用实例2：扫雷游戏</h2><h1 id="32-操作符"><a href="#32-操作符" class="headerlink" title="32.操作符"></a>32.操作符</h1><p>操作符和表达式</p><h2 id="1各种操作符的介绍"><a href="#1各种操作符的介绍" class="headerlink" title="1各种操作符的介绍"></a>1各种操作符的介绍</h2><p>分类</p><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * /</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    / </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意其中取模操作符%的两边都要是整数</span></span><br><span class="line"><span class="comment">//int a = 5 / 2; //商2余1  输出为2</span></span><br><span class="line"><span class="comment">//int a = 5 % 2;  // 输出余数1</span></span><br><span class="line"><span class="keyword">double</span> a = <span class="number">5</span> / <span class="number">2.0</span>;<span class="comment">//浮点型-让分子或分母任意一个为小数</span></span><br><span class="line"><span class="comment">//输出就是2.500000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %f\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p>只能作用与整数</p><p>对于位移操作符，不要移动负数位数的，例如&lt;&lt;-1，这是标准未定义的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a = 16;</span></span><br><span class="line"><span class="comment">//16用二进制表示1000</span></span><br><span class="line"><span class="comment">//16存在a中，a为整型，整型在内存中占4个字节，32个比特位</span></span><br><span class="line"><span class="comment">//这个32个比特位位</span></span><br><span class="line"><span class="comment">//这个空间就是单独创建出来给a的</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010000</span></span><br><span class="line"><span class="comment">//拿着整个二进制数列往右边移动，</span></span><br><span class="line"><span class="comment">//来检测一下这里是算数 右移还是逻辑右移</span></span><br><span class="line"><span class="comment">//如果是正数的话，右移不管是逻辑右移还是算数右移左边数都是补0</span></span><br><span class="line"><span class="comment">//所以要用一个负数来测一下</span></span><br><span class="line"><span class="comment">//来一个-1</span></span><br><span class="line"><span class="comment">//*******补充-原码就是这个数用二进制表示的形式</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &gt;&gt; <span class="number">1</span>;<span class="comment">//移动的是二进制位</span></span><br><span class="line"><span class="comment">//把b打印出来看看</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);  <span class="comment">//打印出-1，说明当前的编译器采用的是算数移位</span></span><br><span class="line"><span class="comment">//右移通常见到的都是算数右移</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//正数的二进制表示有，原码，补码，反码 </span></span><br><span class="line"><span class="comment">//存到内存中的是补码</span></span><br><span class="line"><span class="comment">//例如：-1怎么写出他的原、凡、补。</span></span><br><span class="line"><span class="comment">//因为他是负数，所以最高位先写1，1表示负数的意思</span></span><br><span class="line"><span class="comment">//最高位表示符号位</span></span><br><span class="line"><span class="comment">//10000000000000000000000000000001----原码</span></span><br><span class="line"><span class="comment">//前面的1表示负数的意思，后面的1表示十进制的一个数字是1，</span></span><br><span class="line"><span class="comment">//他们两个组合起来就是-1</span></span><br><span class="line"><span class="comment">//反码</span></span><br><span class="line"><span class="comment">//符号位不变，其他位按位取反、</span></span><br><span class="line"><span class="comment">//11111111111111111111111111111110---反码</span></span><br><span class="line"><span class="comment">//补码就是反码+1</span></span><br><span class="line"><span class="comment">//11111111111111111111111111111111--补码</span></span><br><span class="line"><span class="comment">//16进制f换成二进制是1111</span></span><br><span class="line"><span class="comment">//1111 第一个1是2的3次方是 8</span></span><br><span class="line"><span class="comment">//第二个1是4，第三个是2，第四个是1</span></span><br><span class="line"><span class="comment">//8421 = 15</span></span><br><span class="line"><span class="comment">//****************************</span></span><br><span class="line"><span class="comment">//当对补码进行移位-算数移位</span></span><br><span class="line"><span class="comment">//右移补充个1，虽然我丢了个1，又补充了个1，内容还是全1</span></span><br><span class="line"><span class="comment">//是全1，就是-1的补码，打印的就是-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &gt;&gt;右移操作符</span></span><br><span class="line"><span class="comment">//1算数右移 右边丢弃，左边补原符号位</span></span><br><span class="line"><span class="comment">//见到的基本上都是算术右移</span></span><br><span class="line"><span class="comment">//2逻辑右移 右边丢弃，左边补0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//整数的二进制表示有：原码 反码 补码</span></span><br><span class="line"><span class="comment">//存储到内存的是补码</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//5的二进制表示是101</span></span><br><span class="line"><span class="comment">//0000000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//经过向左移动左边补0后，当前的数字从5变成了10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>只能作用到整数上去</p><p>注意：他们的操作符数必须是整数</p><p>&amp;-按位与</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&amp;-按位与-按二进制位与</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//整型占32个比特位</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">//有一个为0就是0，两个都是1 才是1 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>|-按位或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000111</span></span><br><span class="line"><span class="comment">//有一个为1就是1，两个都是1 也是1 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>^-按位异或-按二进制位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//&amp;-按位与-按二进制位与</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &amp; b;</span><br><span class="line"><span class="comment">//拿到的都是这个数的补码</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000101</span></span><br><span class="line"><span class="comment">//00000000000000000000000000000110</span></span><br><span class="line">    <span class="comment">//对应的二进制如果相同为0，相异为1</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一道变态的面试题目</p><h4 id="不创建临时变量-第三个变量-实现两个数的交换"><a href="#不创建临时变量-第三个变量-实现两个数的交换" class="headerlink" title="不创建临时变量(第三个变量)实现两个数的交换"></a>不创建临时变量(第三个变量)实现两个数的交换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不创建临时变量(第三个变量)实现两个数的交换</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">先来一个创建临时变量的</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;<span class="comment">//创建c为临时变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line">c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">加减法</span><br><span class="line">    <span class="comment">//缺陷</span></span><br><span class="line">    <span class="comment">//当他们特别大的时候,没有超过最大值，但是加在一起的时候超过，必然就会有一些二进位丢失，就还原不出来了，缺陷——可能会溢出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">按位异或</span><br><span class="line">    <span class="comment">//执行效率不高，可读性比较差</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之前:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//整型在内存中战32个比特位</span></span><br><span class="line"><span class="comment">//ab分别用二进制表示</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100</span></span><br><span class="line"><span class="comment">//进行三次按位异或——相同为0，相异为1</span></span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">//00000000000000000000000000011110——这个所表示的数是30</span></span><br><span class="line"><span class="comment">//即现在的a变成了30</span></span><br><span class="line"><span class="comment">//*******现在要进行按位异或的ab分别是</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011110</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100</span></span><br><span class="line">b = a ^ b;</span><br><span class="line"><span class="comment">//得到</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010——这个所表示的数是10</span></span><br><span class="line"><span class="comment">//即现在的b变成了10</span></span><br><span class="line"><span class="comment">//*******现在要进行按位异或的ab分别是</span></span><br><span class="line"><span class="comment">//00000000000000000000000000011110</span></span><br><span class="line"><span class="comment">//00000000000000000000000000001010</span></span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">//得到</span></span><br><span class="line"><span class="comment">//00000000000000000000000000010100——这个所表示的数是20</span></span><br><span class="line"><span class="comment">//即现在的a变成了20</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;交换之后:a=%d,b=%d\n&quot;</span>, a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码实现求一个整数存储在内存中的二进制中1的个数"><a href="#编写代码实现求一个整数存储在内存中的二进制中1的个数" class="headerlink" title="编写代码实现求一个整数存储在内存中的二进制中1的个数"></a>编写代码实现求一个整数存储在内存中的二进制中1的个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="comment">//统计Num的补码中有几个1 </span></span><br><span class="line"><span class="keyword">while</span>(num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">count++;</span><br><span class="line">num = num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码存在问题，算负数的时候</span></span><br></pre></td></tr></table></figure><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><p>赋值操作符是一个很棒的操作符，你可以让他得到一个你之前不满意的值，也就是说你可以给自己重新赋值，</p><p>当一个变量已经有值了，但是你不满意这个值，就给他新一个值，（变量在开始创建的时叫做初始化，当变量已经有一个值得时候，再给他赋值）</p><p>可以连续进行赋值，但是不推荐。</p><p>连续赋值例子：x = a = b,将b赋给a，再将a赋给x,这样的写法不太容易读懂</p><p>而这样写会更加爽朗：a = b;  x = a;并且容易调试</p><p>容易混淆：一个=是赋值操作符，两个==这个是判断是否相等</p><h4 id="复合赋值符"><a href="#复合赋值符" class="headerlink" title="复合赋值符"></a>复合赋值符</h4><p>a = a +2;</p><p>a += 2;这个就是复合赋值符</p><p>a = a &gt;&gt; 1 ;</p><p>a &gt;&gt;= 1</p><p>a = a ^1</p><p>a ^= 1</p><h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><p>意思就是只有一个操作数</p><p>例如： a + b中的+，它两边有两个操作数，所以他就叫双目操作符</p><p>有哪些单目操作符</p><p>! 逻辑反操作——真变成假假变成真</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,!a);逻辑反操作，此时为假 输出为<span class="number">0</span></span><br><span class="line">    <span class="comment">//一般放在if语句中来使用，要根据实际的场景来进行使用</span></span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>+正值——正号一般都省略掉了</p><p>&amp;取地址——一般都和指针配合使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个东西与下面的解引用操作符是一对，通常会出现在一起</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//&amp;取地址操作符</span></span><br><span class="line"><span class="keyword">int</span>* p = &amp;a;<span class="comment">//p称为指针变量,int*是p的类型</span></span><br><span class="line"><span class="comment">//*p 解引用操作符</span></span><br><span class="line">*p</span><br><span class="line">    <span class="comment">//通过p里面所存的这个值，来找到它所指向的对象，*p就是它所指向的那个对象a，因为p是指向a的,p里面存了a的地址，所以p是指向a的，现在*p就是a，</span></span><br><span class="line">    <span class="comment">//现在我这样</span></span><br><span class="line">    *p = <span class="number">20</span>;<span class="comment">//现在a的值变成20了 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>*解引用操作符（间接访问操作符）</p><p>sizeof操作数的类型长度（以字节为单位）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;   <span class="comment">//4</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;r&#x27;</span>;  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">char</span>* p = &amp;c;  <span class="comment">//  指针的大小要不是4个字节，要不就是8个字节，与你电脑系统格式32位 还是64位有关，</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 他是一个数组，里面有十个整型元素，一个整型元素占四个字节，10个整型这里就是      40个字节</span></span><br><span class="line"><span class="comment">//对于数组来说，去掉数组名，剩下的就是他的类型，例如 int crr[40],它叫做crr，去掉他的名字，剩下int[40],这就是他的类型</span></span><br><span class="line">************</span><br><span class="line">    <span class="comment">//可以通过名称来计算大小，也可以通过类型来计算大小 </span></span><br><span class="line">    注意：当<span class="keyword">sizeof</span>后面是类型的时候是不可以省略括号的，当后面是名字的时候是可以省略括号的 </span><br><span class="line"><span class="comment">//下面sizeof计算的是变量所占内存空间的大小，变量包含数组，单位是字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(输入你要计算的东西));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例题：下面这个代码输出的两个值分别是什么</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s = a + <span class="number">5</span>));<span class="comment">//无论a是什么，现在放到了s的=后面，就要按着s的规矩来，一个四个字节的a放到s这里来，也只能存两个字节，因为s为短整型，只有两个字节。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s);<span class="comment">//这个地方输出0，并不意味着这个地方就放不下15，而是因为，sizeof这个操作符放的这个表达式是不会真实计算的，也就是说a+5仅仅是个摆设放在上面中s=的后面，</span></span><br><span class="line">    <span class="comment">//给我们的感觉是要把一个整型元素放在一个短整型元素中去，这个地方发生截断，但其实这个地方并不会发生截断，sizeof括号中放的这个表达式是不参与直接运算的，s的并没有发生变化，所以s还是0，输出0。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 0 和 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>~按位取反</p><p>这个位是第二进制位</p><p>对有所有位按位取反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//a在内存中的二进制位是</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000000  补码</span></span><br><span class="line">    <span class="comment">//按位取反得到</span></span><br><span class="line">    原码取反加一能得到补码</span><br><span class="line">        补码减一取反能得到原码</span><br><span class="line">    <span class="comment">//11111111111111111111111111111111  补码 </span></span><br><span class="line">    <span class="comment">//11111111111111111111111111111110  反码</span></span><br><span class="line">    <span class="comment">//10000000000000000000000000000001  原码  第一个为符号位</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,~a);   <span class="comment">//打印出来-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（类型）——强制类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = (<span class="keyword">int</span>)<span class="number">3.15</span>;</span><br><span class="line">pinrtf(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20201228160445425.png" alt="image-20201228160445425"></p><p>40 10 4 4    </p><h3 id="关系操作符-1"><a href="#关系操作符-1" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>比较大小  &gt; &gt;=  &lt; &lt;=  !=  ==</p><p>区别 = 和==</p><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><h4 id="amp-amp-逻辑与"><a href="#amp-amp-逻辑与" class="headerlink" title="&amp;&amp;逻辑与"></a>&amp;&amp;逻辑与</h4><p>逻辑与还具有短路的功能，当式子左边算出为假，那么后面的式子不管什么都不再计算，（后面的不会执行）</p><p>其中一个为假， 结果就为假，</p><p>两个都为真，结果 为真</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a  = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b  = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> c  = a &amp;&amp; b:</span><br><span class="line">    <span class="comment">//1为真 0为假 a和b有一个为假 就为假</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="||逻辑或"></a>||逻辑或</h4><p>一个为真或起来就真，</p><p>两个同时为假才为假。</p><p>例题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d d = %d &quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20201228161519161.png" alt="image-20201228161519161"></p><p>结果：1 2 3 4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上个式子a的值改成1</span></span><br><span class="line">结果为 <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">改成逻辑或</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, a =<span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ || ++b || d++;</span><br><span class="line">    <span class="comment">//只要开始为真，整体就为真，后面的不进行运算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d c = %d d = %d &quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件操作符（三目操作符）"><a href="#条件操作符（三目操作符）" class="headerlink" title="条件操作符（三目操作符）"></a>条件操作符（三目操作符）</h3><p>exp1 ? exp2 ：exp3</p><p> 如果表示式1的结果为真，表达式2要算，表达式2的结果整个表达式的结果，</p><p>如果表达式1的结果为假，表达式3要算，表达式3的结果是整个表达式的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果要实现下面这个代码，转成条件表达式是什么样？</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">5</span>)</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">b = <span class="number">-3</span>; </span><br><span class="line"><span class="comment">//****************************************************</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">b = (a &gt; <span class="number">5</span> ? <span class="number">3</span> : <span class="number">-3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：使用条件表达式得到两个的数较大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个数：\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">c = (a &gt; b ? a : b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;较大的数为：%d\n&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><p>exp1, exp2, exp3, …expN</p><p>逗号表达式，就是用逗号隔开多个表达式。</p><p>逗号表达式，从左向右依次执行。整个表达式的结果是最后一个表达式的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = (a &gt;b ,a = b+<span class="number">10</span>,a，b = a +<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//a &gt; b这个表达式不产生结果  a不产生结果</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span>( a = b +<span class="number">1</span>,c=  a /<span class="number">2</span>, d &gt; <span class="number">0</span> );</span><br><span class="line"><span class="comment">//真正起到判断作用的是最后一个d&gt;0,d大于0，条件为真，反之条件为假</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">3</span></span><br><span class="line">a = get_val();</span><br><span class="line">count_val(a);</span><br><span class="line"><span class="keyword">while</span> (a &gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里面上面的代码重复出现了两次，比较啰嗦</span></span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">    a = get_val();</span><br><span class="line">    count_val(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果使用逗号表达式，则为</span></span><br><span class="line"><span class="comment">//逻辑一模一样，重复的代码只出现了一次，使代码更加简洁，但有的时候可能不太容易理解。</span></span><br><span class="line"><span class="keyword">while</span>(a = get_val(),count_val(a),a &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下标引用、函数调用和结构成员"><a href="#下标引用、函数调用和结构成员" class="headerlink" title="下标引用、函数调用和结构成员"></a>下标引用、函数调用和结构成员</h3><p>1.[]下标引用操作符</p><p>操作数:一个数组名+一个索引值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr [<span class="number">10</span>];<span class="comment">//创建数组</span></span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">10</span>;<span class="comment">//实用下标引用操作符</span></span><br><span class="line">[]的两个操作符是arr和<span class="number">9</span>,一个是数组名，一个是索引值</span><br></pre></td></tr></table></figure><p>2.（）函数调用操作符 接收一个或多个操作数： 第一个操作数是函数名吗，剩余的操作数就是传递给函数的参数。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//这里的括号是我们定义函数时候的语法规则</span></span><br><span class="line"><span class="comment">//并不是函数调用操作符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max</span> <span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;y ?x &gt;:y;</span><br><span class="line">    <span class="comment">//这里用了一个三目操作符，复习一下</span></span><br><span class="line">    <span class="comment">//开始是条件，如果x &gt; y成立就返回x,不成立就返回y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> max = get_max(a , b );</span><br><span class="line">    <span class="comment">//调用函数的上面这个()，就是函数调用操作符，</span></span><br><span class="line">    <span class="comment">//函数调用操作符的操作数是多少呢？</span></span><br><span class="line"><span class="comment">//函数名get_max就是操作数，a,b这两个参数也是操作数，</span></span><br><span class="line">    <span class="comment">//这里一共有3个函数操作数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数调用操作符最少有<span class="number">1</span>个，当一个参数都没有时,就是函数名</span><br></pre></td></tr></table></figure><p>3.访问一个结构的成员</p><p>.结构体.成员名</p><p>结构体指针-&gt;成员名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何描述一个学生来引出概念</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//学生</span></span><br><span class="line"><span class="comment">//用结构体来描述一个学生</span></span><br><span class="line"><span class="comment">//&#123;&#125;里面</span></span><br><span class="line"><span class="comment">//*******************************************</span></span><br><span class="line">    创建了一个结构体类型，类型名字是下面那个</span><br><span class="line">    <span class="comment">//*********************************************</span></span><br><span class="line">    这里创建好了一个结构体类型，就相当于在盖房子的时候，设计好了图纸，</span><br><span class="line">    图纸画好了只是将房子的大致样子给描述了出来，但是房子还没有盖，</span><br><span class="line">    买完材料，照着图纸盖</span><br><span class="line">    <span class="comment">//*********************************************</span></span><br><span class="line">    向内存申请区域来存放我们相关的信息，</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义了一个结构体<span class="title">stu</span></span></span><br><span class="line"><span class="class">    //<span class="keyword">struct</span> <span class="title">stu</span>是一种学生类型  </span></span><br><span class="line"><span class="class">    //<span class="title">int</span> <span class="title">float</span>是一种类型，</span></span><br><span class="line"><span class="class">    //这里的<span class="keyword">struct</span> <span class="title">stu</span>也是一种类型</span></span><br><span class="line"><span class="class">    //类型是用来创建变量的</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//在这里面放的是描述学生的一些相关属性</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>]; </span><br><span class="line">    age;</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//类型是用来创建变量的</span></span><br><span class="line">    <span class="keyword">int</span>  a ;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">   <span class="comment">//类似于数组</span></span><br><span class="line">    **************************</span><br><span class="line">        <span class="comment">//使用结构体类型，创建了一个结构体变量</span></span><br><span class="line">        <span class="comment">//即创建了一个学生对象s1，并初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span> =</span> &#123; <span class="string">&quot;SB&quot;</span>，<span class="number">18</span>,<span class="number">30061128</span>&#125;;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.id);</span><br><span class="line">    <span class="comment">//. 操作符用来访问结构体成员</span></span><br><span class="line">    <span class="comment">//结构体变量.成员名</span></span><br><span class="line">    *******************************************************</span><br><span class="line">    <span class="comment">//在内存中开辟了空间，开辟了空间就有起始地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span>* <span class="title">ps</span> =</span> &amp;s1;<span class="comment">//取出s1的地址，存放到ps中,ps就是指针变量</span></span><br><span class="line">如何靠拿到的ps来打印sb的信息呢</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(*ps).name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*ps).age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(*ps).id);</span><br><span class="line">    <span class="comment">//****************************************************</span></span><br><span class="line">    精简的方式</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ps-&gt;name);<span class="comment">//意思同上//这样写更加直观一些</span></span><br><span class="line">    <span class="comment">//结构体指针-&gt;成员名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学操作符——为了求一个表达式的结果——表达式求值</p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p>表达式求值的顺序一部分是由操作符的优先级和结合性决定。</p><p>同样，有些表达式的操作数在求值的过程中可能需要转化为其他类型。</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>就是偷偷的进行类型转换</p><p>c的整型算数运算总是至少以缺省整型类型的精度来进行的，</p><h4 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升"></a>整型提升</h4><p>为了提升这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型,这种转换称为整型提升。</p><p>什么时候用到整型提升——可能小于int长度的整型值。</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">char</span> a,b,c;</span><br><span class="line">a = b + c ;</span><br><span class="line"><span class="comment">//b和C的值被提升为普通整型，然后再执行加法运算</span></span><br><span class="line"><span class="comment">//加法运算完成之后，结果将被截断，然后再存储于a中</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  a = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//3是一个整数，整型在二级制中占32个比特位</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000011</span></span><br><span class="line">    <span class="comment">//整数的原码补码反码相同</span></span><br><span class="line">    <span class="comment">//char是字符型变量，存放字符型变量</span></span><br><span class="line">    <span class="comment">//将3放到a里面切，a是一个字节，只能占8个比特位</span></span><br><span class="line">    <span class="comment">//这时候就会发生截断</span></span><br><span class="line">    <span class="comment">//调最小最低位字节的内容 </span></span><br><span class="line">    <span class="comment">//00000011</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">127</span>;</span><br><span class="line">    <span class="comment">//在二进制中表示为</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000111111</span></span><br><span class="line">    <span class="comment">//同上a</span></span><br><span class="line">    <span class="comment">//这里的b真正存的是</span></span><br><span class="line">    <span class="comment">//01111111</span></span><br><span class="line">    <span class="keyword">char</span> c = a + b;</span><br><span class="line">    <span class="comment">//a和b如何相加</span></span><br><span class="line">    <span class="comment">//为了提升计算的精度，就要进行整型提升</span></span><br><span class="line">    <span class="comment">//先把它补充成一个整型在二进制中存的位数</span></span><br><span class="line">    <span class="comment">//即32个比特，没有的位置补0</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000000011</span></span><br><span class="line">    <span class="comment">//00000000000000000000000000111111</span></span><br><span class="line">    <span class="comment">//够2就进1</span></span><br><span class="line">    <span class="comment">//结果为</span></span><br><span class="line">    <span class="comment">//00000000000000000000000001000010</span></span><br><span class="line">    <span class="comment">//求完这个结果还要把这个结果放到c里面去，</span></span><br><span class="line">    <span class="comment">//C是一个char类型,只能存8个比特位，继续进行截断，拿到他的8个比特位</span></span><br><span class="line">    <span class="comment">//得到</span></span><br><span class="line">    <span class="comment">//10000010</span></span><br><span class="line">    <span class="comment">//下面要进行打印，打印的类型仍然是个整型</span></span><br><span class="line">    <span class="comment">//这里还要进行整型提升</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>，c);</span><br><span class="line">    <span class="comment">//输出结果为-126，这是为什么呢？</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原码取反加1到得到反码</span></span><br></pre></td></tr></table></figure><p>如何进行整型提升呢？</p><p>整型提升是按照变量的数据类型的符号位来提升的</p><p>首先看变量是什么类型的（是否为有符号数），高位为该变量的符号位，按照高位提升、 补充，补充成32位（整型），无符号直接前面 补0就行了， </p><hr><p>整型提升的意义：<br>    表达式的整型运算要在CPU的相应运算器件内执行，CPU内整型运算器（ALU）的操作数的字节长度一般就是int的字节长度，同时也是CPU的通用寄存器的长度。</p><p>因此，即使两个char类型相同，在cpu执行时实际上也要先转化为 CPU 内整型操作数的标准长度。</p><p>通用cpu是难以直接实现两个8比特字节 直接相加运算（虽然机器指令中可能有这种字节相加指令）。所以，表达式中各种长度长度可能小于int长度的整型值，都必须先转换为int或unsign int，然后才能送入cpu去执行运算。</p><p>说白了，整型提升就是把其他类型的变量，转化为整型，然后再在程序中计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例题</span></span><br><span class="line"><span class="comment">//下面这个代码的输出结果是什么？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(c));<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(+c));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,<span class="keyword">sizeof</span>(!c));<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//上面这个代码中,c只要参与运算，就会发生整型提升，表达式c+，就会发生提升，所以sizeof(+c)是4个字节，表达式-c也会发生整型提升，所以sizeof(-c)是4个字节，但是sizeof(c)就是一个字节。</span></span><br><span class="line">    ***********************************************</span><br><span class="line">    <span class="comment">//前面加入的这几个符号是什么意思?</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h4><p>如果某个操作符的各个操作符属于不同的类型，那么除非一个操作数转换为另一个操作数的类型，否则操作就无法进行。下面的层次体系称为寻常算数转换。</p><p>下面的操作符从上往下所占空间越来越小</p><p>long double</p><p>double</p><p>float</p><p>unsigned long int</p><p>long int </p><p>unsigned int </p><p>int </p><p>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换为另一个操作数的类型后执行运算。</p><p>就是，假如说我们从上面随便取两个类型的变量来运算，就要先把小的变量转化为那个较大类型的变量来进行运算。</p><p>警告，但是算数转换要合理，要不然会有一些潜在的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> num = f;</span><br><span class="line"><span class="comment">//隐式转换，会有精度丢失</span></span><br></pre></td></tr></table></figure><h3 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h3><p>复杂的表达式的求值有三个影响的因素</p><p>1操作符的优先级</p><p>2操作符的结核性</p><p>3是否控制求值顺序</p><p>两个相邻的操作符限制性哪个？取决有他们的优先级。如果两者的优先级相同，取决于他们的结核性。</p><p>操作符的优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="meta">#incldue<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = b + a * <span class="number">3</span>;<span class="comment">//*优先级较高，先进行乘再进行加，</span></span><br><span class="line">    <span class="comment">//当相邻的操作符不相同的时候，他们就有自己的优先级</span></span><br><span class="line">    <span class="comment">//优先级高的先算，优先级低的后算</span></span><br><span class="line">    <span class="comment">//若两个操作符相同，那么应该先计算哪个呢？</span></span><br><span class="line">    <span class="comment">//这时候就引出我们要说的结核性</span></span><br><span class="line">    <span class="comment">//从哪边向哪边进行结合，</span></span><br><span class="line">    <span class="comment">//除了优先级和结核性</span></span><br><span class="line">    <span class="comment">//还要看——是否控制求值顺序</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先级较高，先进行乘再进行加，<br>当相邻的操作符不相同的时候，他们就有自己的优先级<br>优先级高的先算，优先级低的后算<br>若两个操作符相同，那么应该先计算哪个呢？<br>这时候就引出我们要说的结核性<br>从哪边向哪边进行结合，<br>除了优先级和结核性<br>还要看——是否控制求值顺序</p><p>不同的求值顺序，得到的值有可能不一样，</p><p>计算路径无法确定——有问题表达式</p><p>写代码要写不会出现计算路径问题的表达式</p><p>别让求值顺序影响代码的运行，这样的代码不好进行运算，容易出现问题。</p><p>在调用函数的时候，加入运算符，不知道先调用哪个函数了</p><p>无法说明通过这个符号，哪个函数先进行调用。</p><h1 id="33指针（初阶）"><a href="#33指针（初阶）" class="headerlink" title="33指针（初阶）"></a>33指针（初阶）</h1><h2 id="1指针是什么"><a href="#1指针是什么" class="headerlink" title="1指针是什么"></a>1指针是什么</h2><p>利用地址的这个值，直接找到所需的变量单元，地址指向该变量单元，因此，将地址形象化的称为指针，意思是通过它能找到以他为地址的内存单元。</p><p>要讲清楚指针，首先要先了解一下内存。</p><p>内存是一块大大的空间，为了更好的使用内存，我们把内存划分为一块一块的小格子，之后再给每个格子编上号。</p><p>一个内存单元的大小最好是一个字节。</p><p>通过地址就可以找到一个内存单元。</p><p>就是说，一个东西存着另一个东西的地址，通过这个地址可以直接找到对应的那个东西的数值，这个东西就是指针。</p><p>地址指向该变量单元，将他形象的成为指针。</p><p>用来存放地址的变量——指针变量</p><p>指针就是地址，地址就是指针。</p><p>指针就是一个变量，这个变量中存的是地址，也就是说指针就是地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//在内存中开辟一块空间</span></span><br><span class="line">    <span class="keyword">int</span> p = &amp;a;<span class="comment">//这里我们对变量a，取出他的地址，再将a的地址存放到变量p中，p就是一个指针变量。 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>32位平台指针大小是4，</p><h2 id="2指针和指针类型"><a href="#2指针和指针类型" class="headerlink" title="2指针和指针类型"></a>2指针和指针类型</h2><p>1指针类型决定了指针进行解引用操作的时候，能够访问空间的大小。</p><p>这就使我们未来在给指针进行赋值的时候要选择一个合适(合理)的大小。</p><p>2指针类型决定了：指针走一步走多远（指针的步长）</p><p>总结：指针类型决定了指针向前或者向后走一步有多大（距离-字节）</p><p>（指针的类型决定了，对指针解引用的时候有多大的权限（能够操作几个字节），比如char<em>的指针解引用就只能访问一个字节，而int</em> *的指针解引用就能访问4个字节。）</p><hr><p>指针加减整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line">    <span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line">    <span class="keyword">char</span>* pc = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果是什么呢？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210125144919989.png" alt="image-20210125144919989"></p><p>由此可看到，不同类型的指针，所存的地址是一样的。但是在加减整数的时候，同加减一个数，得到的结果是不一样的。</p><p>结论：</p><p>​        指针类型决定了，指针+1向后面跳了几个字节。</p><p>​        即上面的结论——指针的类型决定了指针的步长。就是在加减整数的时候跳多少字节 。不同的类型跳的字节数不同。</p><p>​        是什么类型加1 就跳过一个什么，例如是整型类型，加一就跳过一个整型，一个整型占4个字节，所以这时候的步长就是4，跳过了4个字节。加一个字符就跳过1个字节。</p><p>​    指针的类型决定了指针向前或向后走一步的有多长（距离）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将数组中的全部元素，都改成1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> * p = arr;<span class="comment">//数组名首元素地址</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p + <span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果将上面的p指针类型改成char*</span></span><br><span class="line"><span class="comment">//最后的结果不同，因为不同类型的指针大小不同</span></span><br><span class="line">********************</span><br><span class="line">    根据你的需求，将地址交给一个合理的指针</span><br></pre></td></tr></table></figure><h2 id="3野指针"><a href="#3野指针" class="headerlink" title="3野指针"></a>3野指针</h2><p>野指针就是指针指向的位置是不可知的——随机的，不正确的，没有明确限制的</p><p>局部变量不初始化，默认是随机值</p><p>在内存中随便找了一个位置放了这个随机值的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a ;<span class="comment">//局部变量不初始化，默认是随机值</span></span><br><span class="line">    <span class="keyword">int</span> *p ;<span class="comment">//局部的指针变量，就被初始化随机值。</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一个指针越出了，他所能管理的范围后，他就被成为野指针——指针越界访问</span><br><span class="line">    如下：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">12</span> : i++)</span><br><span class="line">&#123;</span><br><span class="line">p++:</span><br><span class="line">&#125;</span><br><span class="line">retunr <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">指针指向的那块内存空间释放了——(涉及到动态内存开辟)——延迟的问题</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">// a 为 局部变量，出这个变量就不存在了，这块内存空间就还给了操作系统</span></span><br><span class="line">     </span><br><span class="line"> <span class="keyword">return</span> &amp;a;</span><br><span class="line">    <span class="comment">//这里返回的是a在内存中的地址，让下面的int*p来进行接收，但是这里的a是局部变量。</span></span><br><span class="line">    <span class="comment">//返回的是局部变量的地址，除了这个局部变量所在的大括号，他所占的这个4个字节就还给内存空间了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = test();</span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何规避野指针</p><h4 id="1指针初始化"><a href="#1指针初始化" class="headerlink" title="1指针初始化"></a>1指针初始化</h4><p>当未初始化的指针变量进行解引用操作的时候，就是在内存中随便找了个地方，就把地址存到这里了。</p><p>初始化，然后再解引用</p><h4 id="2小心指针越界（指针越界访问）"><a href="#2小心指针越界（指针越界访问）" class="headerlink" title="2小心指针越界（指针越界访问）"></a>2小心指针越界（指针越界访问）</h4><h4 id="3指针指向空间释放，即设置NULL"><a href="#3指针指向空间释放，即设置NULL" class="headerlink" title="3指针指向空间释放，即设置NULL"></a>3指针指向空间释放，即设置NULL</h4><p>（这里在动态访问的时候会详解）</p><p>NULL是用来初始化指针的，给指针赋值。（int* p = NULL;）空指针</p><p>当指针不用的时候，把他设置为空指针，无法访问他的空间，不能用。（在调试程序窗口验证）</p><h4 id="4指针使用之前检查有效性"><a href="#4指针使用之前检查有效性" class="headerlink" title="4指针使用之前检查有效性"></a>4指针使用之前检查有效性</h4><h2 id="4指针运算"><a href="#4指针运算" class="headerlink" title="4指针运算"></a>4指针运算</h2><h4 id="指针加减整数"><a href="#指针加减整数" class="headerlink" title="指针加减整数"></a>指针加减整数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">int</span> *p = arr;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt;sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>.*p);</span><br><span class="line">        p = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针-指针"></a>指针-指针</h4><p>就是地址-地址</p><p>得到的其实是中间的元素个数</p><p>相反如果小地址减去大地址，得到的数就是负数。</p><p>不同类型的指针无法相减</p><p>这两个指针指向的同一块空间</p><p>不可预知的，我们也无法知道他的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#inlcude&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int arr[10]&#x3D;&#123;1,2,3,4,5,6,7,,9,10&#125;;</span><br><span class="line">&amp;arr[9] - &amp;arr[0];</span><br><span class="line">printf</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210205164103822.png" alt="image-20210205164103822"></p><p>C语言标准规定-允许像数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针比较。</p><p>再进行一次理解：（重复了）</p><p>就是允许和该指针和该数组最后一个元素后面的那个内存位置的指针进行比较，不能喝第一个前面那个指针内存地址进行比较。</p><p>指针的关系运算</p><p>&amp;数组名-数组名不是首元素的地址-数组名表示整个数组-数组名-取出的是整个数组的地址（整个数组的地址）</p><p>sizeof（arr）-sizeof（数组名）此时此刻的数组名，表示的是整个数组，计算的是整个数组的大小，单位是字节。</p><p>除了上面这两个情况——其他位置的数组名代表的都是首元素地址</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210205171046592.png" alt="image-20210205171046592"></p><h2 id="5指针和数组"><a href="#5指针和数组" class="headerlink" title="5指针和数组"></a>5指针和数组</h2><p>数组可以通过指针来进行访问，但是数组和指针不是一回事，数组可以存放多个相同类型的数组，指针可以存放地址，数组首元素的地址，或者说存放数组任意位置的地址。</p><p>他们不是一回事，但是他们两个之间有联系。</p><h2 id="6二级指针"><a href="#6二级指针" class="headerlink" title="6二级指针"></a>6二级指针</h2><p>平时我们写的指针都是一级指针，那么什么是二级指针呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* pa = &amp;a;</span><br><span class="line"><span class="keyword">int</span>** = ppa = &amp;pa;<span class="comment">//ppa就是二级指针</span></span><br><span class="line"><span class="comment">//3,4,5,6......同理</span></span><br><span class="line"><span class="keyword">int</span> ** 第一颗星表示他说指向的对象是个指针</span><br><span class="line">    第二表示ppa是个指针</span><br></pre></td></tr></table></figure><h2 id="7指针数组"><a href="#7指针数组" class="headerlink" title="7指针数组"></a>7指针数组</h2><p>指针数组——本质是个数组——是存放指针的数组gg</p><p>数组指针——本质是个指针</p><p>字符数组——存放字符，整型数组——存放整型</p><p>同理：指针数组——存放指针</p><p>arr[数组个数] = {  内容 }</p><p>到此为止c语言指针初级到此结束</p><h1 id="34实用调试技巧"><a href="#34实用调试技巧" class="headerlink" title="34实用调试技巧"></a>34实用调试技巧</h1><h2 id="1什么是bug"><a href="#1什么是bug" class="headerlink" title="1什么是bug"></a>1什么是bug</h2><p>导致计算机不能正常工作的东西叫做Bug</p><p>解决bug——调试</p><p>历史上的第一个bug——臭虫死在了晶体管上面，导致了该计算机无法正常工作</p><h2 id="2调试是什么，有多么重要"><a href="#2调试是什么，有多么重要" class="headerlink" title="2调试是什么，有多么重要"></a>2调试是什么，有多么重要</h2><p>像现实中做了坏事的心理，顺利而下就是犯罪，逆流而上就是真相。</p><p>一个优秀的程序员，是一位优秀的侦探。</p><p>猜测代码哪里出错了，但是不知道哪里真正的出错了，这样是不行的。</p><h2 id="3debug和release的介绍"><a href="#3debug和release的介绍" class="headerlink" title="3debug和release的介绍"></a>3debug和release的介绍</h2><p>二者都会产生一个可执行程序</p><p>二者的功能可能会有所不同</p><p>debug通常称为调试版本，他包含调试信息，并且不做任何优化，便于程序员调试程序。所以文件要较大一点。</p><p>release称为发布版本，它往往是进行了各种优化，使的程序在代码大小和运行速度上都是最优的，以便用户很好的使用，无法进行调试，所以文件要较小一点，</p><h2 id="4调试的基本步骤："><a href="#4调试的基本步骤：" class="headerlink" title="4调试的基本步骤："></a>4调试的基本步骤：</h2><p>1发现程序错误的存在</p><p>2以隔离、消除等方式对错误进行定位</p><p>3确定错误产生的原因</p><p>5提出纠正错误的解决办法</p><p>6对程序错误予以改正，重新测试</p><p>7测试完成，解决错误7</p><hr><p>1程序员写程序（发现错误代价最小）——交给——2软件测试人员——交给——3用户（可以反馈问题，代价比较大，给用户带来损失）</p><hr><h2 id="5windows环境调试介绍"><a href="#5windows环境调试介绍" class="headerlink" title="5windows环境调试介绍"></a>5windows环境调试介绍</h2><p>vs快捷键</p><p>f5——启动调试，和f9配合使用，单独使用不好用，快速跳到问题可能出现的地方。跳到执行逻辑的下一个断点</p><p>f9——设置（切换）断点，在按就消失了，断点——代码执行到断点处就停止下来</p><p>f10——逐过程</p><p>f11——每次都执行一个语句，但是这个快捷键可以使我们的执行逻辑进入到函数内部（这是最常用的）</p><p>shilt+f11——从函数内部跳出来</p><p>Shift+f5——停止调试</p><p>调试的时候程序当前的信息，自动窗口——打开后，将程序执行至此，显示离得较近的变量，让你来观察，去掉此时此刻不想观察的信息</p><h2 id="6调试实例"><a href="#6调试实例" class="headerlink" title="6调试实例"></a>6调试实例</h2><h2 id="7如何写出好（易于调试）的代码"><a href="#7如何写出好（易于调试）的代码" class="headerlink" title="7如何写出好（易于调试）的代码"></a>7如何写出好（易于调试）的代码</h2><h2 id="8编程常见的错误"><a href="#8编程常见的错误" class="headerlink" title="8编程常见的错误"></a>8编程常见的错误</h2><h1 id="35结构体"><a href="#35结构体" class="headerlink" title="35结构体"></a>35结构体</h1><h2 id="1结构体类型的声明"><a href="#1结构体类型的声明" class="headerlink" title="1结构体类型的声明"></a>1结构体类型的声明</h2><p>什么是结构（结构体）</p><p>结构是一些值的集合，这些值称为成员变量，结构的每个成员可以是不同类型的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//描述一个学生的一些数据信息</span></span><br><span class="line"><span class="comment">//名字</span></span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line"><span class="comment">//电话</span></span><br><span class="line"><span class="comment">//性别</span></span><br><span class="line"> <span class="keyword">typedef</span>(给这个类型重新起个名字)<span class="class"><span class="keyword">struct</span> <span class="title">stu</span>  //<span class="keyword">struct</span>是结构体关键字   这里的<span class="title">stu</span>叫做结构体标签  <span class="title">Struct</span> <span class="title">stu</span>是我们创建的结构体类型</span></span><br><span class="line"><span class="class">    //创建类型的时候没有占用内存空间</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员变量 member -list</span></span><br><span class="line">    <span class="keyword">char</span>  name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> age ;</span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> sexp[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;s1,s2,s3;<span class="comment">//这里的分号不能少，结构体声明是一条语句</span></span><br><span class="line"><span class="comment">//这里的s1s2s3是三个全局的结构体变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>(给这个类型重新起个名字)<span class="class"><span class="keyword">struct</span> <span class="title">stu</span>  //<span class="keyword">struct</span>是结构体关键字   这里的<span class="title">stu</span>叫做结构体标签  <span class="title">Struct</span> <span class="title">stu</span>是我们创建的结构体类型</span></span><br><span class="line"><span class="class">    //创建类型的时候没有占用内存空间</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员变量 member -list</span></span><br><span class="line">    <span class="keyword">char</span>  name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> age ;</span><br><span class="line">    <span class="keyword">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">char</span> sexp[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;STU;<span class="comment">//现在就可以用STU创建临时变量 ，这个STU是类型，上面的s是变量 ，现在这个STU就可以单独使用了</span></span><br><span class="line"><span class="keyword">int</span> mian</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span><span class="comment">//这个s是局部的结构体变量</span></span><br><span class="line">    <span class="comment">//当你拿这个结构体类型创建一个叫做s的变量，这里就占用了内存空间</span></span><br><span class="line">    <span class="comment">//就像盖房子，光有了图纸，没有具体的房子</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构成员的类型：结构的成员可以是标量、数组、指针、甚至是其他结构体。</p><h2 id="2结构体初始化和定义"><a href="#2结构体初始化和定义" class="headerlink" title="2结构体初始化和定义"></a>2结构体初始化和定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在创建结构体变量的时候给他一个值，就是结构体初始化，同其他变量的初始化</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu s1 = &#123; <span class="string">&quot;张3&quot;</span> , <span class="number">20</span> , <span class="string">&quot;1231564215&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;；<span class="comment">//局部变量，这个结构体类似于Python的字典</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">c</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> c; </span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> b ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>]</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> <span class="title">c</span> ;</span></span><br><span class="line"><span class="keyword">char</span> *pc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//结构体里面放置结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> <span class="title">T</span> =</span> &#123;<span class="string">&quot;HEHE&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;HELOW WORLD&quot;</span>,<span class="string">&quot;3.14&quot;</span>,ARR&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,t.ch);</span><br><span class="line">    <span class="comment">//这里通过.来进行层级区分</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3结构体成员访问"><a href="#3结构体成员访问" class="headerlink" title="3结构体成员访问"></a>3结构体成员访问</h2><p>结构体.成员 进行访问</p><h2 id="4结构体传参"><a href="#4结构体传参" class="headerlink" title="4结构体传参"></a>4结构体传参</h2><p>函数也可以调用</p><p>–&gt;箭头</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210206141542207.png" alt="image-20210206141542207"></p><p>打印结构体数据，在这里封装一个函数</p><p>print1和Print2哪个更好？</p><p>print1要再内存中再进行一份临时拷贝的形参，无论是速度还是性能都要逊于Print2,</p><p>而Pirnt2无论结构体多大最多8个字节（地址），所以Print2的系统开销更小一些。</p><p>综上所述，print2更好</p><hr><p>用更加正规的话说——函数传参的时候，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销会比较大，所以导致性能的下降。</p><p>函数传参的时候的压栈是什么呢？</p><p>内存在系统中是一块大的空间，里面分为几个空间。</p><p>栈区，堆区，静态区（学习计算机语言的时候所讲的）</p><p>栈区——局部变量、函数的形式参数、函数调用也开辟空间</p><p>堆区——动态内存分配、malloc/free、realloc、calloc、</p><p>静态区——全局变量、静态变量</p><p>每一次函数调用都要开辟空间</p><hr><p>涉及到数据结构的东西：</p><p>——————线性数据结构</p><p>顺序表——在内存中连续出现</p><p>链表——拿一条链子将多个数据串连起来</p><p>栈——顶上进顶上出，</p><p>队列</p><p>结论：结构体传参的时候，要传结构体的地址。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="36数据的存储"><a href="#36数据的存储" class="headerlink" title="36数据的存储"></a>36数据的存储</h1><p>就像是初级阶段类型的深入讲解</p><h2 id="1数据类型详细介绍"><a href="#1数据类型详细介绍" class="headerlink" title="1数据类型详细介绍"></a>1数据类型详细介绍</h2><p>c语言的类型分为两类</p><p>1内置类型：语言本身具有的类型</p><p>char </p><p>short</p><p>long</p><p>int </p><p>2自定义类型（构造类型）：</p><hr><p>类型的意义：</p><p>1使用这个类型开辟内存空间的大小（大小决定了使用范围）</p><p>2如何看待内存空间的视角（放置的东西不同，存进去的东西也不同）</p><hr><p>  整型家族</p><p>char</p><p>​    unsign char（无符号）  </p><p>​    signed  char (有符号)</p><p>剩下的同上Char分为有无符号</p><p>short</p><p>int</p><p>long</p><hr><p>浮点型家族</p><p>float单精度浮点型</p><p>double双精度浮点型</p><hr><p>构造类型（自定义类型）</p><p>数组类型</p><p>结构体类型Struct</p><p>枚举类型enum</p><p>联合类型union</p><hr><p>指针类型</p><p>创建的大小都是4个字节，统一的</p><p>目的是为了存放地址</p><p>int *p</p><p>char *</p><p>float *<br>viod *——无具体类型的指针——空指针</p><hr><p>空类型 ——void</p><p>当你写函数的时候，你不想调用他，void 函数()</p><p>通常应用于函数的返回类型，函数的参数，指针类型</p><p>如果你明确想不用这个函数传参</p><p>就在函数后面的参数部分写一个void</p><h2 id="2整型在内存中的存储：原码、反码、补码"><a href="#2整型在内存中的存储：原码、反码、补码" class="headerlink" title="2整型在内存中的存储：原码、反码、补码"></a>2整型在内存中的存储：原码、反码、补码</h2><p>变量的创建是要在内存中开辟空间的。空间的大小是根据不同的类型而决定的。</p><p>下面我们将要了解到数据在开辟内存空间中到底是如何存储的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反码、补码、原码的概念</p><p>计算机中有符号数（指的是整型有符号数字）有三种表示方法，即原码、补码、反码</p><p>三种表示方法均有符号位和数值位两部分，符号位都是用0表示正，用1表示负，而数值为三种表示方法各不相同。</p><p>（无符号数也可以说有着三种表示形式，只不过这三种表示在表示数字的时候是相同的）</p><p>（有符号数又分为正负数，其中的正数他的原凡补码也都是相同的，负数的原反补才是不相同的）</p><hr><p>原码：直接将二级制按照正负数的形式翻译成二进制就可以。</p><p>反码：将原码的符号位不变，其他位一次按位取反就可以得到了。</p><p>补码：反码+1得到补码</p><hr><p>对于整型来说：数据存放在内存中其实存放的就是二进制序列的补码</p><p>补码的出现让计算机中的加法减法按照统一的方法处理。</p><hr><p>复习：</p><p>整数分为有符号数和无符号数</p><p>有符号数-正数-原反补相同</p><p>​                -负数原反补不同-都要进行计算</p><p>无符号数-不区分正负-原反补相同</p><hr><h2 id="3大小端字节序介绍及判断"><a href="#3大小端字节序介绍及判断" class="headerlink" title="3大小端字节序介绍及判断"></a>3大小端字节序介绍及判断</h2><p>十六进制的数字在内存中是倒着存储的，这里引入大小端的概念</p><p>什么是大端小端？<br>大端 （存储）模式 ，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中</p><p>小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位，保存在内存的高地址中。</p><p>大端字节序存储模式</p><p>小端字节序存储模式</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计一个小程序判断当前机器的字节序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//写一段代码告诉我们当前机器的字节序是什么</span></span><br><span class="line"><span class="comment">//拿出四个字节中的第一个内容是什么</span></span><br><span class="line"><span class="comment">//假设a里面的是20</span></span><br><span class="line"><span class="comment">//推测如果是小端和大端分别是什么</span></span><br><span class="line"><span class="comment">//拿出的第一个字节是什么 14 or 00 ?</span></span><br><span class="line"><span class="comment">//所以说这四个字节我们就看第一个字节是什么</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//那么如何拿到第一个字节的内容呢?</span></span><br><span class="line"><span class="comment">//这里提到，指针的类型规定了，指针解引用操作一下能访问几个字节</span></span><br><span class="line"><span class="comment">//Char类型的指针解引用向后就访问一个字节的内容，拿到这一个字节的内容再判断它是什么</span></span><br><span class="line"><span class="keyword">char</span>* p = ( <span class="keyword">char</span>* ) &amp;a;</span><br><span class="line"><span class="comment">//强制类型转换，a的地址取出来，值不变，类型变成char*,放到p里面去</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数方法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数的作用很干净</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_sys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span>* p = (<span class="keyword">char</span>*)&amp;a;</span><br><span class="line"><span class="keyword">if</span> (*p == <span class="number">1</span>)</span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">char</span>*)&amp;a;</span><br><span class="line"><span class="comment">//直接对char*的地址进行解引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//写一段代码告诉我们当前机器的字节序是什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复习：指针类型的意义？</p><p>1指针类型决定了，指针解引用操作能访问几个字节</p><p>2指针类型决定了指针加1，或者减1操作时到底加的是几个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）以下代码输出什么？</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span> b = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d , c= %d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//输出结果为a = -1 , b = -1 , c= 255</span></span><br><span class="line"><span class="comment">//为什么会有一个255呢?</span></span><br><span class="line"><span class="comment">//默认有符号位的所以前两个一样</span></span><br><span class="line"><span class="comment">//-1的补码全是1</span></span><br><span class="line"><span class="comment">//char类型 8个比特位</span></span><br><span class="line"><span class="comment">//11111111</span></span><br><span class="line"><span class="comment">//打印出整型来，这里涉及到整型提升</span></span><br><span class="line"><span class="comment">//unsigned char无符号数整型提升</span></span><br><span class="line"><span class="comment">//高位补0</span></span><br><span class="line"><span class="comment">//高位是0——是正数</span></span><br><span class="line"><span class="comment">//正数的原凡补码相同——再将二进制转换为十进制的数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码输出什么？  (2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="number">-128</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//%u表示数据按十进制无符号数字</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//10000000  二进制序列表示</span></span><br><span class="line"><span class="comment">//00000000000000000000000010000000 原</span></span><br><span class="line"><span class="comment">//11111111111111111111111101111111 反</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000000 补</span></span><br><span class="line"><span class="comment">//存到a里面，8哥比特位</span></span><br><span class="line"><span class="comment">//1000000</span></span><br><span class="line"><span class="comment">//打印整数-整型提升</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000000</span></span><br><span class="line"><span class="comment">//无符号 原补反相同</span></span><br><span class="line"><span class="comment">//得到结果数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>char-signed char </p><p>​       -unsigned char 1个字节 8个比特位</p><p>有符号的char的范围是 -128————127</p><p>无符号的char的范围是0 - 255</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">按照补码的形式进行运算，最后格式化成为有符号整数</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">-20</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>，i + j);</span><br><span class="line"><span class="comment">//结果是  -10</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">9</span> ;  i &gt;= <span class="number">0</span> ; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果：死循环</span></span><br><span class="line">当<span class="number">-1</span>被认为成无符号数的时候，他就是无穷大的</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">-1</span> -i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>.<span class="built_in">strlen</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是：255</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span> ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是：死循环(永远成立)</span></span><br></pre></td></tr></table></figure><hr><h2 id="4浮点型在内存中的存储解析"><a href="#4浮点型在内存中的存储解析" class="headerlink" title="4浮点型在内存中的存储解析"></a>4浮点型在内存中的存储解析</h2><p>（本片段模糊）</p><p>常见的浮点数：3.14159 1E10 </p><p>浮点数家族包括：float double long double 类型。浮点数的表示范围：floar.h中定义浮点数存储;</p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210228112527344.png" alt="image-20210228112527344"></p><p><img src="C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0.assets/image-20210228120100068.png" alt="image-20210228120100068"></p><p>当你要存储一个二进制序列的时候，先把他用二进制表示</p><p>IEEE754规定：对于32位的浮点数，最高的1位是符号位s，接着的8位是质数E，剩下的23位为有效数字M</p><p><strong>E全为0</strong></p><p>这时，浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示-+0,以及接近于0的很小的数字。</p><p><strong>E全为0</strong></p><p>这时，如果有有效数字M全为0，表示-+无穷大（正负取决于符号位s）</p><h1 id="37指针（详解）"><a href="#37指针（详解）" class="headerlink" title="37指针（详解）"></a>37指针（详解）</h1><p>指针的进阶</p><p> 指针知识回顾</p><p>1指针就是个变量，用来存放地址，地址唯一标识一块内存空间</p><p>2指针的大小是固定的4/8个字节（32位平台/64位平台）</p><p>3指针是有类型，指针的类型决定了指针的+-整数的步长，指针解引用操作时候的权限</p><p>4指针的运算</p><p>由此我们进入指针的进阶</p><h2 id="1字符指针"><a href="#1字符指针" class="headerlink" title="1字符指针"></a>1字符指针</h2><p>在指针的类型中，我们知道有一种指针类型为字符指针char*                   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *pc = arr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出都是abcdef</span></span><br></pre></td></tr></table></figure><p>​                                      </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">    <span class="comment">//输出abcdef</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//什么意思 abcdef是一个常量字符串，其实就是把a的地址赋给了p</span></span><br></pre></td></tr></table></figure><p>​                  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> arr1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> arr2[] = <span class="string">&quot;acbdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* p2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>( arr1 = arr2 )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：haha</span></span><br><span class="line">arr1 <span class="number">2</span> 是两个不同的数组，数组名是首元素的地址，这两个地址在内存不同的空间</span><br></pre></td></tr></table></figure><h2 id="2指针数组"><a href="#2指针数组" class="headerlink" title="2指针数组"></a>2指针数组</h2><p>指针数组其实是数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//什么数组就存放什么</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//整型数组</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//字符数组</span></span><br><span class="line">    <span class="keyword">int</span>* parr[<span class="number">4</span>];<span class="comment">//存放整型指针的数组  - 指针数组</span></span><br><span class="line">    <span class="keyword">char</span>* pch[<span class="number">5</span>] ; <span class="comment">//存放字符型指针的数组 - 指针数组</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line">int c &#x3D; 30;</span><br><span class="line">int d &#x3D; 40;</span><br><span class="line">int* arr[4] &#x3D; &#123;&amp;a,&amp;b,&amp;c,&amp;d&#125;;</span><br><span class="line">for(i &#x3D; 0 ; i &lt; 4 ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"> printf(&quot;%d&quot;，*(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;结果输出为10 20 30 40 </span><br></pre></td></tr></table></figure><h2 id="3指针数组"><a href="#3指针数组" class="headerlink" title="3指针数组"></a>3指针数组</h2><h2 id="4数组传参和指针传参"><a href="#4数组传参和指针传参" class="headerlink" title="4数组传参和指针传参"></a>4数组传参和指针传参</h2><h2 id="5函数指针"><a href="#5函数指针" class="headerlink" title="5函数指针"></a>5函数指针</h2><h2 id="6函数指针数组"><a href="#6函数指针数组" class="headerlink" title="6函数指针数组"></a>6函数指针数组</h2><h2 id="7指向函数指针数组的指针"><a href="#7指向函数指针数组的指针" class="headerlink" title="7指向函数指针数组的指针"></a>7指向函数指针数组的指针</h2><h2 id="8回调函数"><a href="#8回调函数" class="headerlink" title="8回调函数"></a>8回调函数</h2><h2 id="9函数和数组面试题的解析"><a href="#9函数和数组面试题的解析" class="headerlink" title="9函数和数组面试题的解析"></a>9函数和数组面试题的解析</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-类型&quot;&gt;&lt;a href=&quot;#1-类型&quot; class=&quot;headerlink&quot; title=&quot;1.类型&quot;&gt;&lt;/a&gt;1.类型&lt;/h1&gt;&lt;p&gt;​    （1）整型int&lt;/p&gt;
&lt;p&gt;​    （2）字符型char&lt;/p&gt;
&lt;p&gt;​    （3）实型（浮点型）&lt;/p</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="-C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="-笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>进制之间的转换</title>
    <link href="http://example.com/2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2021/03/08/%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-03-08T12:12:09.000Z</published>
    <updated>2021-03-08T12:21:43.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><p>0123456789</p><p>这是我们最了解的进制，数学里面都是通用十进制进行计算的</p><p>进位规则：满十进一</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>01</p><p>进位规则：逢二进一</p><p>借位规则：借1当2</p><p>计算机中的二进制是一个非常微小的开关</p><p>开表示1，关表示0</p><h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><p>RGB</p><p>表示0-9 A-F(10-15)</p><p>例题引入：（1）10进制的16用十六进制怎么表示——10</p><p>（2）十六进制的19再进上去1位——1a</p><p>进制规则：满16进1</p><h1 id="进制转换方法"><a href="#进制转换方法" class="headerlink" title="进制转换方法"></a>进制转换方法</h1><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>二进制B，十进制D，十六进制H</p><p>（1）二进制转换为10进制</p><p>111000——从右以0开始，各位分别乘以2的几次方</p><p>（2）十进制转换为二进制（用1和0表示这个数）</p><p>整除法，除以2，从下到上写出来</p><p>验证参考（1）</p><p>（3）十六进制转换为十进制</p><p>B3H——3*16º+12x16</p><p>​    (4)十进制转换为十六进制</p><p>除16，；例如10余2,结果就是A2</p><p>（5）二进制转换为16进制</p><p>例如：11001011，从最后以为开始4个为一组分别变成两个十进制数，然后再将连个十进制的数变成16进制算完加个H，</p><p>不够就在前面舔0凑四位数（直接变成10进制数）</p><p>（6）十六进制转换为二进制</p><p>例如：A1H</p><p>分别拆开来 </p><p>A-10-1010</p><p>1-0001</p><p>得到10100001B</p><p>推荐视频</p><p><a href="https://www.bilibili.com/video/BV1As411673Q?from=search&amp;seid=8951961097421715023">https://www.bilibili.com/video/BV1As411673Q?from=search&amp;seid=8951961097421715023</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十进制&quot;&gt;&lt;a href=&quot;#十进制&quot; class=&quot;headerlink&quot; title=&quot;十进制&quot;&gt;&lt;/a&gt;十进制&lt;/h1&gt;&lt;p&gt;0123456789&lt;/p&gt;
&lt;p&gt;这是我们最了解的进制，数学里面都是通用十进制进行计算的&lt;/p&gt;
&lt;p&gt;进位规则：满十进一&lt;/p&gt;</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-计算机" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="-进制" scheme="http://example.com/tags/%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>blog_重建</title>
    <link href="http://example.com/2021/03/08/blog-%E9%87%8D%E5%BB%BA/"/>
    <id>http://example.com/2021/03/08/blog-%E9%87%8D%E5%BB%BA/</id>
    <published>2021-03-08T11:27:17.000Z</published>
    <updated>2021-03-08T11:44:21.001Z</updated>
    
    <content type="html"><![CDATA[<p>​        到了今天，第二次重建的差不多了，我才发现，上一次的三个文章被我误删了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        到了今天，第二次重建的差不多了，我才发现，上一次的三个文章被我误删了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="-hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="-经验" scheme="http://example.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
