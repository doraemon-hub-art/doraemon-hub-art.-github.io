<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半生瓜のblog</title>
  
  
  <link href="https://doraemon-hub-art.github.io/atom.xml" rel="self"/>
  
  <link href="https://doraemon-hub-art.github.io/"/>
  <updated>2022-02-17T14:15:05.990Z</updated>
  <id>https://doraemon-hub-art.github.io/</id>
  
  <author>
    <name>快乐的威猛先生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DIY显示器+亚克力板制作外壳</title>
    <link href="https://doraemon-hub-art.github.io/2022/02/17/DIY%E6%98%BE%E7%A4%BA%E5%99%A8+%E4%BA%9A%E5%85%8B%E5%8A%9B%E6%9D%BF%E5%88%B6%E4%BD%9C%E5%A4%96%E5%A3%B3/"/>
    <id>https://doraemon-hub-art.github.io/2022/02/17/DIY%E6%98%BE%E7%A4%BA%E5%99%A8+%E4%BA%9A%E5%85%8B%E5%8A%9B%E6%9D%BF%E5%88%B6%E4%BD%9C%E5%A4%96%E5%A3%B3/</id>
    <published>2022-02-17T14:10:03.000Z</published>
    <updated>2022-02-17T14:15:05.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月，我重启了DIY显示器的这个想法。</p><p>于是，我买了显示器面板，驱动板，一些螺丝，以及几块亚克力板，由于我对屏幕的大小以及外壳要做的大小没有什么概念，加上我不会CAD，所以，我准备手工切割，用胶水拼接一个外壳。</p><p>先看一下效果吧。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172210587.jpeg" alt="img"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172210606.jpeg" alt="img"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211595.jpeg" alt="img"></p><h2 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h2><p><strong>大致制作流程如下：</strong></p><p>1.用一块亚克力板做底板，根据显示器面板、驱动板的大小以及四个角的孔位打孔，确定摆放位置。</p><p>并将螺丝+双通尼龙柱固定在显示器面板所要放置的四个角落中。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211488.png" alt="img"></p><p>2.根据需要的大小将四周多余的切掉。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211775.png" alt="img"></p><p>3.根据大小切割出四周所需要的板子。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211883.png" alt="img"></p><p>4.用热熔胶将周围固定。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211748.png" alt="img"></p><p>5.根据需要在四周开孔，用水将粉末碎屑冲洗干净，加胶固定。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211757.png" alt="img"></p><p>6.连接固定各个零件，完成。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211285.png" alt="img"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211796.png" alt="img"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li> 在制作的过程中，最费时费力以及最难的就是亚克力板的切割了，没想到3mm就这么难切。 </li><li> 先用笔画线，然后用尺子抵着用勾刀划。划呀划呀划， 差不多了，一掰就开了(熟练了先用尺子比着用勾刀划个几刀后就可以把尺子拿走了，沿着痕迹划就行)。 </li><li> 打孔也比较费劲，可以用电钻开孔，然后用边上蹭，或用<strong>锉</strong>来回蹭， </li><li> 开始切得七扭八歪的，后来慢慢熟练了，会好一些。 </li><li> 本来准备用亚克力胶水粘的，感觉效果不好，所以我就用<strong>热熔胶</strong>了。 </li><li> 热熔胶凝固的速度很快，开始我想先挤一道，然后将板子放到上面，结果我刚放就凝固了，所以要先将板子立好，然后沿着根底下挤胶。 </li><li> 各个螺丝的点位如果高度不够可以用垫片垫。 </li><li><strong>做之前量一下或估计一下所需要的各个材料大小</strong>。 </li><li>如果都测量好了，建议让商家裁剪，会CAD更好。</li><li>TN屏的可视角度较小，相对于IPS屏来说。</li><li>看久了高色域屏，看低色域会有所不适应。</li><li>不游戏的话，高低刷屏幕差别不大。</li></ul><p>热熔胶凝固的速度很快，开始我想先挤一道，然后将板子放到上面，我刚放就凝固了，所以要先将板子立好，然后沿着根底下挤胶。</p><h2 id="所需材料及工具"><a href="#所需材料及工具" class="headerlink" title="所需材料及工具"></a>所需材料及工具</h2><p><strong>材料</strong>：</p><ul><li>40cm * 30cm *3mm的亚克力板2块，可以多买几块裁着练手。</li><li>M2螺丝25mm若干</li><li>M2双通尼龙六角柱18mm若干</li><li> 2mm * 4.5mm * 0.6mm尼龙塑料垫片若干 </li><li> M2螺丝8mm若干 </li><li>M2螺母若干</li><li>15.6英寸显示器面板</li><li>驱动板(注意支持你的显示器面板)，电源。</li><li>hdmi线</li></ul><p><strong>工具</strong>：</p><ul><li>电钻</li><li>钳子</li><li>2mm钻头，以及更大的钻头用来开孔。</li><li>锉</li><li>M2螺丝对应的螺丝刀，建议可拆卸用电钻往里打。</li><li>热熔胶枪+热熔胶</li><li>勾刀</li><li>钢尺</li><li>笔</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>主要花费：</p><table><thead><tr><th>物品</th><th>价格</th></tr></thead><tbody><tr><td>显示器面板</td><td>228</td></tr><tr><td>驱动板电源套装</td><td>75.9</td></tr><tr><td>亚克力板 x 4</td><td>60</td></tr><tr><td>hdmi线</td><td>9.9</td></tr><tr><td>螺丝</td><td>25.14</td></tr><tr><td>钻头 x 2</td><td>4</td></tr><tr><td>总计</td><td>402.94</td></tr></tbody></table><p>我的材料买多了，所以花费多一些，还有显示器面板，如果多蹲一蹲是有可能在小黄鱼蹲到更便宜的。</p><p>我这个不叫”DIY便携式显示器”是因为我不会背着它来回跑，只是放到固定的位置，由我来用。</p><p>录的视频还没有剪，做好了我会将链接放到文章最后。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202172211164.png" alt="img"></p><p>最后感谢你的阅读，如果对你有帮助，希望能给我点个赞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上个月，我重启了DIY显示器的这个想法。&lt;/p&gt;
&lt;p&gt;于是，我买了显示器面板，驱动板，一些螺丝，以及几块亚克力板，由于我对屏幕的大小以及外</summary>
      
    
    
    
    <category term="其他" scheme="https://doraemon-hub-art.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="-DIY" scheme="https://doraemon-hub-art.github.io/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>【Python】nonebot学习(1)</title>
    <link href="https://doraemon-hub-art.github.io/2022/02/14/%E3%80%90Python%E3%80%91nonebot%E5%AD%A6%E4%B9%A0(1)/"/>
    <id>https://doraemon-hub-art.github.io/2022/02/14/%E3%80%90Python%E3%80%91nonebot%E5%AD%A6%E4%B9%A0(1)/</id>
    <published>2022-02-14T09:34:28.000Z</published>
    <updated>2022-02-14T09:51:05.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nonebot学习-1"><a href="#nonebot学习-1" class="headerlink" title="nonebot学习(1)"></a>nonebot学习(1)</h1><p>具体的安装使用部署流程还请见其他作者的文章。</p><ul><li><p>使用nb run指令运行</p></li><li><p>从window下迁移到linux环境，记得安装相应的包。</p></li></ul><p>报错提示ModuleNotFoundError:No module named ‘xxx’</p><ul><li> ubuntu环境下部署</li></ul><p>下载对应的版本，更改权限(777)，安装脚手架pip install nb-cli，安装失败，可能是权限不够，切换至root用户安装。</p><ul><li>ubuntu挂到后台</li></ul><p>nohup xxx &amp;，例如：nohup nb run &amp;。jobs查看nohup挂到后台的程序，关闭终端后就看不见了。</p><p>若关闭进程，使用ps -ef查看所有进程，找到对应的ID,kill掉。</p><p>ls -a查看当前目录下所有文件(包括隐藏文件)。</p><ul><li>ubuntu窗口</li></ul><p>screen -R xxx新建窗口, alt+a+d退出窗口，screen -r xxx恢复窗口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nonebot学习-1&quot;&gt;&lt;a href=&quot;#nonebot学习-1&quot; class=&quot;headerlink&quot; title=&quot;nonebot学习(1)&quot;&gt;&lt;/a&gt;nonebot学习(1)&lt;/h1&gt;&lt;p&gt;具体的安装使用部署流程还请见其他作者的文章。&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="python" scheme="https://doraemon-hub-art.github.io/categories/python/"/>
    
    
    <category term="-python" scheme="https://doraemon-hub-art.github.io/tags/python/"/>
    
    <category term="-nonebot" scheme="https://doraemon-hub-art.github.io/tags/nonebot/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Python爬虫爬取豆瓣电影top榜</title>
    <link href="https://doraemon-hub-art.github.io/2022/02/09/%E3%80%90Python%E3%80%91Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top%E6%A6%9C/"/>
    <id>https://doraemon-hub-art.github.io/2022/02/09/%E3%80%90Python%E3%80%91Python%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top%E6%A6%9C/</id>
    <published>2022-02-09T13:17:05.000Z</published>
    <updated>2022-02-09T13:23:02.632Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>相关视频</strong>——<a href="https://www.bilibili.com/video/BV12E411A7ZQ?%E3%80%81">Python爬虫编程基础5天速成（2021全新合集）Python入门+数据分析</a></p><hr><p><strong>找到一个div,在div里面翻找你要的内容。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span>  BeautifulSoup      <span class="comment">#网页解析</span></span><br><span class="line"><span class="keyword">import</span>  re                          <span class="comment">#正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span>  urllib.request,urllib.error <span class="comment">#制定URL,获取网页数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正则表达式</span></span><br><span class="line"><span class="comment">#影片详情链接</span></span><br><span class="line">findLink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&#x27;</span><span class="string">&#x27;(.*?)&#x27;</span><span class="string">&#x27;&gt;&#x27;</span>) <span class="comment">#创建正则表达式对象，表示规则(字符串的模式)</span></span><br><span class="line"><span class="comment">#影片片名</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>,re.S)<span class="comment">#re.S让换行符包含在字符中</span></span><br><span class="line"><span class="comment">#影片名</span></span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#1.爬取网页</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>):<span class="comment">#前25个</span></span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        html = askURL(url) <span class="comment">#保存获取到的网页源码</span></span><br><span class="line">        <span class="comment"># 2.逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)<span class="comment">#html解析器</span></span><br><span class="line">        <span class="comment"># div这个东西，名字属性是item,_表示属性值</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&quot;item&quot;</span>):<span class="comment">#在一个一个的div class=item里面找</span></span><br><span class="line">            data = [] <span class="comment">#保存一部电影的所有信息</span></span><br><span class="line">            item = <span class="built_in">str</span>(item)<span class="comment">#转换成字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># re库用来通过正则表达式查找指定的字符串</span></span><br><span class="line">            <span class="comment">#根据正则表达式匹配对象，0表示第一个</span></span><br><span class="line">            <span class="comment">#正则表达式，要筛选的字符串</span></span><br><span class="line">            link = re.findall(findLink,item)[<span class="number">0</span>]<span class="comment">#拿到链接</span></span><br><span class="line">            data.append(link)</span><br><span class="line">            imgSrc = re.findall(findImgSrc,item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)</span><br><span class="line">            titles = re.findall(findTitle,item)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(titles)==<span class="number">2</span>):<span class="comment">#如果有两个名字</span></span><br><span class="line">                ctitle = titles[<span class="number">0</span>]<span class="comment">#添加中文名</span></span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = titles[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="comment">#去掉/</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(titles[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)<span class="comment">#留空——匹配格式</span></span><br><span class="line">            print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">   <span class="comment">#模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="comment">#注意空格</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 96.0.4664.110Safari / 537.36&quot;</span></span><br><span class="line">    &#125; <span class="comment">#用户代练，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器，本质上就是告诉浏览器，我们可以接收什么水平的文件内容</span></span><br><span class="line">    request = urllib.request.Request(url,headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       response = urllib.request.urlopen(request)</span><br><span class="line">       html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">       <span class="comment">#print(html)</span></span><br><span class="line">       <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;code&quot;</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e,<span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            print(e.reason )</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里作为程序入口</span></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&quot;__main__&quot;</span>: <span class="comment">#当前程序执行时</span></span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;相关视频&lt;/strong&gt;——&lt;a href=&quot;https://www.bilibili.com/video/BV12E411A7ZQ?%E3%80%81&quot;&gt;Python爬虫编程基础5天速成（2021全新合集）Python入门+数据分析&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="Python" scheme="https://doraemon-hub-art.github.io/categories/Python/"/>
    
    
    <category term="-Python" scheme="https://doraemon-hub-art.github.io/tags/Python/"/>
    
    <category term="-爬虫" scheme="https://doraemon-hub-art.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT模型/视图编程</title>
    <link href="https://doraemon-hub-art.github.io/2022/02/06/%E3%80%90QT%E3%80%91QT%E6%A8%A1%E5%9E%8B%E8%A7%86%E5%9B%BE%E7%BC%96%E7%A8%8B/"/>
    <id>https://doraemon-hub-art.github.io/2022/02/06/%E3%80%90QT%E3%80%91QT%E6%A8%A1%E5%9E%8B%E8%A7%86%E5%9B%BE%E7%BC%96%E7%A8%8B/</id>
    <published>2022-02-06T09:51:01.000Z</published>
    <updated>2022-02-06T09:56:59.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模型-视图编程"><a href="#模型-视图编程" class="headerlink" title="模型/视图编程"></a>模型/视图编程</h1><p>Qt中的模型/视图架构用来实现大量的数据存储、处理及显示。</p><p>MVC(Model-View-Controller)包括了3个组件：模型(model)是应用对象，用来表示数据；视图(View)是模型的用户界面，用来显示数据；控制(Controller)定义了用户界面对用户输入的反应方式。</p><p>委托(Delegate)用于定制数据的渲染和编辑方式。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061756409.png" alt="image-20220203134951360"></p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>所有的模型都基于QAbstractItemModel类，该类提供了十分灵活的接口来处理各种视图，这些视图的数据表现形式为表格(table)、列表(list)、树(tree)。</p><p>Qt提供了一些现成的模型来处理数据项:</p><p>QStringListModel存储简单的QString项目列表;</p><p>QStandardItemModel管理复杂的属性结构数据项，每一个数据项可以包含任意的数据；</p><p>QFileSystemModel、QSqlTableModel和QSqlRelationTableModel用来访问数据库。</p><p>当标准模型还无法满足需要时，可子类化QAbstractItemModel、QAbstractListModel或QAbstractTableModel来创建自定义的模型。</p><p><strong>常见的3种模型为列表模型、表格模型、树模型，如下图所示:</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031619351.png" alt="image-20220203161907307"></p><p>为确保数据的表示与数据获取相分离，Qt引入了模型索引的概念，输入和委托均可通过模型索引来请求数据并显示。只有模型需要知道怎样获取数据，被模型管理的数据类型可以被广泛的定义。模型索引包含一个指针，指向创建他们的模型，使用多个模型时可避免混淆。模型索引QModeIIndex类提供对一块数据的临时引用， 用来修改或检索模型中的数据，获取一个数据项的模型索引必须指定模型的3个属性：行号、列号和父项的模型索引。如:</p><p>QModelIndex index = model-&gt;index(row,column,parent)；</p><p>也可以通过模型指定的相关数据项对应的模型索引以及特定的角色来获取需要的类型数据，如:<br>QVariant value = model-&gt;data(index,role);</p><p><strong>常用的角色类型:</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061756428.png" alt="image-20220203174738323"></p><p><strong>示例:</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031748877.png" alt="image-20220203174829807"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTreeView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QStandardItemModel&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    <span class="comment">//创建标准项模型</span></span><br><span class="line">    QStandardItemModel model;</span><br><span class="line">    <span class="comment">//获取标准项模型的根项，跟项式不可见的</span></span><br><span class="line">    QStandardItem* parentItem = model.invisibleRootItem();</span><br><span class="line">    <span class="comment">//创建标准箱item0，并设置文本</span></span><br><span class="line">    QStandardItem* item0 = <span class="keyword">new</span> QStandardItem;</span><br><span class="line">    item0-&gt;setText(QString(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap0</span><span class="params">(<span class="number">50</span>,<span class="number">50</span>)</span></span>;</span><br><span class="line">    pixmap0.fill(Qt::red);</span><br><span class="line">    item0-&gt;setIcon(QIcon(pixmap0));</span><br><span class="line">    item0-&gt;setToolTip(QString(<span class="string">&quot;A项&quot;</span>));</span><br><span class="line">    <span class="comment">//将item0作为父项的子项</span></span><br><span class="line">    parentItem-&gt;appendRow(item0);</span><br><span class="line">    parentItem = item0;</span><br><span class="line">    <span class="comment">//创建item0的子项</span></span><br><span class="line">    QStandardItem* item1 = <span class="keyword">new</span> QStandardItem;</span><br><span class="line">    item1-&gt;setText(QString(<span class="string">&quot;B&quot;</span>));</span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap1</span><span class="params">(<span class="number">50</span>,<span class="number">50</span>)</span></span>;</span><br><span class="line">    pixmap1.fill(Qt::blue);</span><br><span class="line">    item1-&gt;setIcon(pixmap1);</span><br><span class="line">    item1-&gt;setToolTip(QString(<span class="string">&quot;B项&quot;</span>));</span><br><span class="line"></span><br><span class="line">    QStandardItem* item2 = <span class="keyword">new</span> QStandardItem;</span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap2</span><span class="params">(<span class="number">50</span>,<span class="number">50</span>)</span></span>;</span><br><span class="line">    pixmap2.fill(Qt::green);</span><br><span class="line">    item2-&gt;setData(<span class="string">&quot;C&quot;</span>,Qt::EditRole);</span><br><span class="line">    item2-&gt;setData(<span class="string">&quot;indexC&quot;</span>,Qt::ToolTipRole);</span><br><span class="line">    item2-&gt;setData(QIcon(pixmap2),Qt::DecorationRole);</span><br><span class="line"></span><br><span class="line">    parentItem-&gt;appendRow(item1);</span><br><span class="line">    parentItem-&gt;appendRow(item2);</span><br><span class="line">    <span class="comment">//在树视图中显示数据</span></span><br><span class="line">    QTreeView view;</span><br><span class="line">    view.setModel(&amp;model);</span><br><span class="line">    view.show();</span><br><span class="line">    <span class="comment">//模型问数据</span></span><br><span class="line">    QModelIndex indexA = model.index(<span class="number">0</span>,<span class="number">0</span>,QModelIndex());</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;indexA row count:&quot;</span>&lt;&lt;model.rowCount(indexA);</span><br><span class="line">    QModelIndex indexB = model.index(<span class="number">0</span>,<span class="number">0</span>,indexA);</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;indexB text:&quot;</span>&lt;&lt;model.data(indexB,Qt::EditRole).toString();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;indexB toolTip:&quot;</span>&lt;&lt;model.data(indexB,Qt::ToolTipRole).toString();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>Qt提供了QListView、QTabelView视图、QTreeView视图分别实现列表、表格与树视图效果。QListView将数据项显示为一个列表；QTableView将模型中的数据显示在一个表格中；QTreeView将模型中的数据项显示在具有层次的列表中。QTableView和QTreeView在显示项目的时候同时还可以显示标头，通过QHeaderView类实现。自定义视图类是基于QAbstractItemView抽象基类，如实现条形图，饼状图等特殊显示方式。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202041213743.png" alt="image-20220204121337670"></p><hr><p><strong>示例1:</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061756252.png" alt="image-20220204121752455"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QAbstractItemModel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QAbstractItemView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDirModel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTreeView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QListView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTableView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QSplitter&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    <span class="comment">//创建模型</span></span><br><span class="line">    QDirModel model;</span><br><span class="line">    <span class="comment">//创建树视图、列表视图、表格视图</span></span><br><span class="line">    QTreeView tree;</span><br><span class="line">    QListView <span class="built_in">list</span>;</span><br><span class="line">    QTableView table;</span><br><span class="line">     <span class="comment">//视图设置模型</span></span><br><span class="line">     tree.setModel(&amp;model);</span><br><span class="line">     <span class="built_in">list</span>.setModel(&amp;model);</span><br><span class="line">     table.setModel(&amp;model);</span><br><span class="line">    <span class="comment">//设置视图对象的选择方式为多选，list/table选择方式同tree</span></span><br><span class="line">     tree.setSelectionMode(QAbstractItemView::MultiSelection);</span><br><span class="line">     <span class="built_in">list</span>.setSelectionMode(tree.selectionMode());</span><br><span class="line">     table.setSelectionMode(tree.selectionMode());</span><br><span class="line">    <span class="comment">//树视图双击信号发射后，列表及表格视图刷新内容</span></span><br><span class="line">    QObject::connect(&amp;tree,SIGNAL(doubleClicked(QModelIndex)),&amp;<span class="built_in">list</span>,SLOT(setRootIndex(QModelIndex)) );</span><br><span class="line">    QObject::connect(&amp;tree,SIGNAL(doubleClicked(QModelIndex)),&amp;table,SLOT(setRootIndex(QModelIndex)) );</span><br><span class="line">     QSplitter* splitter = <span class="keyword">new</span> QSplitter;</span><br><span class="line">     splitter-&gt;addWidget(&amp;tree);</span><br><span class="line">     splitter-&gt;addWidget(&amp;<span class="built_in">list</span>);</span><br><span class="line">     splitter-&gt;addWidget(&amp;table);</span><br><span class="line">     splitter-&gt;setWindowTitle(QString(<span class="string">&quot;模型/视图&quot;</span>));</span><br><span class="line">     splitter-&gt;show();</span><br><span class="line">     <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>示例2:</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202041153536.png" alt="image-20220204115328476"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;weaponmodel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Weaponmodel::Weaponmodel(QObject* parent):QAbstractTableModel(parent)</span><br><span class="line">&#123;</span><br><span class="line">    armyMap[<span class="number">1</span>] = QString(<span class="string">&quot;空军&quot;</span>);</span><br><span class="line">    armyMap[<span class="number">2</span>] = QString(<span class="string">&quot;海军&quot;</span>);</span><br><span class="line">    armyMap[<span class="number">3</span>] = QString(<span class="string">&quot;陆军&quot;</span>);</span><br><span class="line">    armyMap[<span class="number">4</span>] = QString(<span class="string">&quot;海军陆战队&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">1</span>] = QString(<span class="string">&quot;战斗机1&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">2</span>] = QString(<span class="string">&quot;战斗机2&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">3</span>] = QString(<span class="string">&quot;战斗机3&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">4</span>] = QString(<span class="string">&quot;战斗机4&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">5</span>] = QString(<span class="string">&quot;战斗机5&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">6</span>] = QString(<span class="string">&quot;战斗机6&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">7</span>] = QString(<span class="string">&quot;战斗机7&quot;</span>);</span><br><span class="line">    weaponMap[<span class="number">8</span>] = QString(<span class="string">&quot;战斗机8&quot;</span>);</span><br><span class="line">    populateModel();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Weaponmodel::rowCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> army.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Weaponmodel::columnCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回指定索引的数据</span></span><br><span class="line"><span class="function">QVariant <span class="title">Weaponmodel::data</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!index.isValid())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QVariant();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(role == Qt::DisplayRole)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (index.column()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> army[army[index.row()]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> weaponMap[weaponType[index.row()]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> weapon[index.row()];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> QVariant();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QVariant();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QVariant <span class="title">Weaponmodel::headerData</span><span class="params">(<span class="keyword">int</span> section, Qt::Orientation orientation, <span class="keyword">int</span> role)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(role == Qt::DisplayRole &amp;&amp; orientation == Qt::Horizontal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> header[section];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QAbstractTableModel::headerData(section,orientation,role);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Weaponmodel::populateModel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     header&lt;&lt;QString(<span class="string">&quot;军种&quot;</span>)&lt;&lt;QString(<span class="string">&quot;种类&quot;</span>)&lt;&lt;QString(<span class="string">&quot;武器&quot;</span>);</span><br><span class="line">     army&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">     weaponType&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">5</span>&lt;&lt;<span class="number">7</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">8</span>&lt;&lt;<span class="number">6</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">     weapon&lt;&lt;QString(<span class="string">&quot;B-2&quot;</span>)&lt;&lt;QString(<span class="string">&quot;尼尔兹级&quot;</span>)&lt;&lt;QString(<span class="string">&quot;阿帕奇&quot;</span>)&lt;&lt;QString(<span class="string">&quot;黄蜂级&quot;</span>)&lt;&lt;QString(<span class="string">&quot;比例伯克级&quot;</span>)&lt;&lt;QString(<span class="string">&quot;AAAV&quot;</span>)&lt;&lt;QString(<span class="string">&quot;M1A1&quot;</span>)&lt;&lt;QString(<span class="string">&quot;F-22&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>示例3</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061756028.png" alt="image-20220205110959913"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stringlistmodel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StringListModel::rowCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_stringList.count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QVariant <span class="title">StringListModel::data</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!index.isValid())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QVariant();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index.row() == m_stringList.size())</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="keyword">return</span> QVariant();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(role == Qt::DisplayRole || role == Qt::EditRole)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="keyword">return</span> m_stringList.at(index.row());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">          <span class="keyword">return</span>  QVariant();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QVariant <span class="title">StringListModel::headerData</span><span class="params">(<span class="keyword">int</span> section, Qt::Orientation orientation, <span class="keyword">int</span> role)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(role != Qt::DisplayRole)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QVariant();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//水平表头</span></span><br><span class="line">    <span class="keyword">if</span>(orientation == Qt::Horizontal)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QString(<span class="string">&quot;column %1&quot;</span>).arg(section);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QString(<span class="string">&quot;Row %1&quot;</span>).arg(section);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Qt::ItemFlags <span class="title">StringListModel::flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!index.isValid())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Qt::ItemIsEnabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QAbstractItemModel::flags(index) | Qt::ItemIsEditable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringListModel::setData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> role)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//检测索引有效且项目可编辑</span></span><br><span class="line">    <span class="keyword">if</span>(index.isValid() &amp;&amp; role == Qt::EditRole)</span><br><span class="line">    &#123;</span><br><span class="line">        m_stringList.replace(index.row(),value.toString());</span><br><span class="line">        <span class="function">emit <span class="title">dataChanged</span><span class="params">(index,index)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringListModel::inseratRows</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> rows, <span class="keyword">const</span> QModelIndex &amp;index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//告知其它组建指定的行开始插入操作</span></span><br><span class="line">    beginInsertRows(QModelIndex(),position,position + rows <span class="number">-1</span> );</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span> ; row &lt; rows; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        m_stringList.insert(position,QString(<span class="string">&quot;你好&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//告知其它组件完成操作</span></span><br><span class="line">    endInsertRows();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StringListModel::removeRows</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> rows, <span class="keyword">const</span> QModelIndex &amp;index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//告知其他组件指定的行开始删除操作</span></span><br><span class="line">    beginRemoveRows(QModelIndex(),position,position + rows - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span> ; row &lt; rows;row++)</span><br><span class="line">    &#123;</span><br><span class="line">        m_stringList.removeAt(position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//告知其它组件完成操作</span></span><br><span class="line">    endRemoveRows();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;stringlistmodel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QListView&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTableView&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    QStringList <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;&lt;QString(&quot;太阳&quot;)&lt;&lt;QString(&quot;地球&quot;)&lt;&lt;QString(&quot;月亮&quot;)&lt;&lt;QString(&quot;木星&quot;);</span><br><span class="line">    StringListModel model(<span class="built_in">list</span>);//创建模型</span><br><span class="line">    model.insertRows(3,2);</span><br><span class="line">    model.removeRows(0,1);</span><br><span class="line"></span><br><span class="line">    QListView  listView;//创建列表视图</span><br><span class="line">    listView.setModel(&amp;model);//视图设置模型</span><br><span class="line">    listView.show();//视图显示</span><br><span class="line"></span><br><span class="line">    QTableView tableView;//创建表格视图</span><br><span class="line">    tableView.setModel(&amp;model);//视图设置模型</span><br><span class="line">    tableView.show();//视图显示</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>示例4:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QStandardItem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建标准项模型，7行4列</span></span><br><span class="line">    QStandardItemModel* model = <span class="keyword">new</span> QStandardItemModel(<span class="number">7</span>,<span class="number">4</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span> ; row &lt;<span class="number">7</span> ;row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> colum= <span class="number">0</span>;colum &lt; <span class="number">4</span>;colum++)</span><br><span class="line">        &#123;</span><br><span class="line">            QStandardItem* item = <span class="keyword">new</span> QStandardItem(QString(<span class="string">&quot;%1&quot;</span>).arg(row+<span class="number">4</span> +colum));</span><br><span class="line">            <span class="comment">//标准模型设置数据项</span></span><br><span class="line">            model-&gt;setItem(row,colum,item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_tableView = <span class="keyword">new</span> QTableView;</span><br><span class="line">    m_tableView-&gt;setModel(model);</span><br><span class="line">    setCentralWidget(m_tableView);<span class="comment">//设置主窗口的中心部件为表格视图</span></span><br><span class="line">    QItemSelectionModel *selectionModel = m_tableView-&gt;selectionModel();<span class="comment">//获取视图的选择模式</span></span><br><span class="line">    QModelIndex topLeft;<span class="comment">//左上角模型索引</span></span><br><span class="line">    QModelIndex bottomRight;<span class="comment">//右下角模型索引</span></span><br><span class="line">    topLeft = model-&gt;index(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    bottomRight = model-&gt;index(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//创建模型选择</span></span><br><span class="line">    <span class="function">QItemSelection <span class="title">selection</span><span class="params">(topLeft,bottomRight)</span></span>;</span><br><span class="line">    <span class="comment">//以选择的方式来选择项目</span></span><br><span class="line">    selectionModel-&gt;select(selection,QItemSelectionModel::Select);</span><br><span class="line">    <span class="comment">//添加动作addAction(动作文本，响应者，槽方法)</span></span><br><span class="line">    ui-&gt;menuBar-&gt;addAction(QString(<span class="string">&quot;当前项目&quot;</span>),<span class="keyword">this</span>,&amp;MainWindow::getCurrenItemData);</span><br><span class="line">    ui-&gt;menuBar-&gt;addAction(QString(<span class="string">&quot;切换选择&quot;</span>),<span class="keyword">this</span>,&amp;MainWindow::toggleSection);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关联选择模型的选择改变、当前项改变的信号</span></span><br><span class="line">    connect(selectionModel,&amp;QItemSelectionModel::selectionChanged,<span class="keyword">this</span>,&amp;MainWindow::updateSelection);</span><br><span class="line">    connect(selectionModel,&amp;QItemSelectionModel::currentChanged,<span class="keyword">this</span>,&amp;MainWindow::changeCurrent);</span><br><span class="line"></span><br><span class="line">    m_tableView2 = <span class="keyword">new</span> QTableView;</span><br><span class="line">    m_tableView2 -&gt;setWindowTitle(<span class="string">&quot;tableview2&quot;</span>);</span><br><span class="line">    m_tableView2-&gt;resize(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">    m_tableView2-&gt;setModel(model);</span><br><span class="line">    m_tableView2-&gt;setSelectionModel(selectionModel);</span><br><span class="line">    m_tableView2-&gt;show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::getCurrenItemData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug()&lt;&lt;QString(<span class="string">&quot;当前项数据:&quot;</span>)&lt;&lt;m_tableView-&gt;selectionModel()-&gt;currentIndex().data().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::toggleSection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//左上角模型索引</span></span><br><span class="line">    QModelIndex topLeft = m_tableView-&gt;model()-&gt;index(<span class="number">0</span>,<span class="number">0</span>,QModelIndex());</span><br><span class="line">    <span class="comment">//右下角模型索引</span></span><br><span class="line">    QModelIndex bottomRight = m_tableView-&gt;model()-&gt;index(m_tableView-&gt;model()-&gt;rowCount((QModelIndex))<span class="number">-1</span>,m_tableView-&gt;model()-&gt;columnCount(QModelIndex())<span class="number">-1</span>,QModelIndex());</span><br><span class="line">    <span class="comment">//项选择</span></span><br><span class="line">    <span class="function">QItemSelection <span class="title">curSelection</span><span class="params">(topLeft,bottomRight)</span></span>;</span><br><span class="line">    m_tableView-&gt;selectionModel()-&gt;select(curSelection,QItemSelectionModel::Toggle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::updateSelection</span><span class="params">(<span class="keyword">const</span> QItemSelection &amp;selected, <span class="keyword">const</span> QItemSelection &amp;deselected)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QModelIndex index;</span><br><span class="line">    <span class="comment">//indexes返回所有选择项的模型索引</span></span><br><span class="line">    QModelIndexList <span class="built_in">list</span> = selected.indexes();</span><br><span class="line">    <span class="comment">//给现在选择的项目填充数据</span></span><br><span class="line">    foreach (index,<span class="built_in">list</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QString text = QString(<span class="string">&quot;%1,%2&quot;</span>).arg(index.row()).arg(index.column());</span><br><span class="line">        m_tableView-&gt;model()-&gt;setData(index,text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清空 上一次选择的内容</span></span><br><span class="line">    <span class="built_in">list</span> = deselected.indexes();</span><br><span class="line">    foreach (index,<span class="built_in">list</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_tableView-&gt;model()-&gt;setData(index,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::changeCurrent</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;current, <span class="keyword">const</span> QModelIndex &amp;previous)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug()&lt;&lt;QString(<span class="string">&quot;从(%1,%2)到(%3,%4)&quot;</span>).arg(previous.row()).arg(previous.column()).arg(current.row()).arg(current.column());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>在模型/视图框架中，QAbstractItemDelegate是委托类的抽象基类，Qt默认的委托实现由QStyledItemDelegate类提供，这也被用作Qt标准视图的默认委托，选择    QStyledItemDelegate或QItemDelegate中其一来为视图中的项目绘制和提供编辑器。不同的是QStyledItemDelegate使用当前的样式来绘制项目，实现自定义委托建议使用QStyledItemDelegate作为基类。</p><p>Qt提供了项目试图的便捷类，这些类底层通过模型/视图框架实现。这些部件分别是QListWidget提供一个项目列表，QTreeWidget显示一个多层次的树结构，QTableWidget提供了一个以项目作为单元的表格。它们每一个类都继承了QAbstractItemView类的行为。之所以成为便捷因其用起来比较简单，使用于少量的数据的存储和显示。因没有将视图与模型分离，所以没有视图类灵活，不能和任意的模型一起使用。</p><p><strong>通过自定义委托来实现更高级的渲染。</strong></p><p><strong>示例：QSpinbox</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061706744.png" alt="image-20220206170615666"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;spinboxdelexgate.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QSpinBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">SpinBoxDelexgate::SpinBoxDelexgate(QObject* parent):QItemDelegate(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QWidget *<span class="title">SpinBoxDelexgate::createEditor</span><span class="params">(QWidget *parent, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QSpinBox *editor = <span class="keyword">new</span> QSpinBox(parent);</span><br><span class="line">    editor-&gt;setMinimum(<span class="number">0</span>);<span class="comment">//最小值</span></span><br><span class="line">    editor-&gt;setMaximum(<span class="number">100</span>);<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">return</span> editor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpinBoxDelexgate::setEditorData</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> value = index.model()-&gt;data(index,Qt::EditRole).toInt();</span><br><span class="line">      <span class="comment">//类型转换:QWidget* 转QSpinBox*</span></span><br><span class="line">      QSpinBox* spinBox = <span class="keyword">static_cast</span>&lt;QSpinBox*&gt;(editor);</span><br><span class="line">      <span class="comment">//编辑器设置数据</span></span><br><span class="line">      spinBox-&gt;setValue(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpinBoxDelexgate::updateEditorGeometry</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//视图设置自定义委托</span></span><br><span class="line">    editor-&gt;setGeometry(option.rect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="便捷部件类"><a href="#便捷部件类" class="headerlink" title="便捷部件类"></a>便捷部件类</h2><p><strong>示例:</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202061756349.png" alt="image-20220206174702701"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QListWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTreeWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTableWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    QListWidget listWidget;</span><br><span class="line">    <span class="comment">//添加项目</span></span><br><span class="line">    <span class="keyword">new</span> QListWidgetItem(<span class="string">&quot;天涯&quot;</span>,&amp;listWidget);</span><br><span class="line"></span><br><span class="line">    QListWidgetItem* listWidgetItem = <span class="keyword">new</span> QListWidgetItem;</span><br><span class="line">    listWidgetItem-&gt;setText(<span class="string">&quot;海角&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(<span class="number">50</span>,<span class="number">50</span>)</span></span>;</span><br><span class="line">    pixmap.fill(Qt::blue);</span><br><span class="line">    listWidgetItem-&gt;setIcon(QIcon(pixmap));</span><br><span class="line">    listWidgetItem-&gt;setToolTip(<span class="string">&quot;大海的角落&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//部件插入项目</span></span><br><span class="line">    listWidget.insertItem(<span class="number">1</span>,listWidgetItem);</span><br><span class="line">    <span class="comment">//部件设置排序(降序)</span></span><br><span class="line">    listWidget.sortItems(Qt::DescendingOrder);</span><br><span class="line"></span><br><span class="line">    listWidget.show();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建树部件</span></span><br><span class="line">    QTreeWidget treeWidget;</span><br><span class="line">    <span class="comment">//设置列数</span></span><br><span class="line">    treeWidget.setColumnCount(<span class="number">2</span>);</span><br><span class="line">    QStringList headers;</span><br><span class="line">    headers&lt;&lt;<span class="string">&quot;名字&quot;</span>&lt;&lt;<span class="string">&quot;数量&quot;</span>;</span><br><span class="line">    <span class="comment">//设置头</span></span><br><span class="line">    treeWidget.setHeaderLabels(headers);</span><br><span class="line">    <span class="comment">//添加项目</span></span><br><span class="line">    QTreeWidgetItem *item1 = <span class="keyword">new</span> QTreeWidgetItem(&amp;treeWidget);<span class="comment">//指定父项</span></span><br><span class="line">    item1-&gt;setText(<span class="number">0</span>,<span class="string">&quot;开心超人&quot;</span>);</span><br><span class="line">    QTreeWidgetItem *item11 = <span class="keyword">new</span> QTreeWidgetItem(item1);</span><br><span class="line">    item11-&gt;setText(<span class="number">0</span>,<span class="string">&quot;甜心超人&quot;</span>);</span><br><span class="line">    item11-&gt;setText(<span class="number">1</span>,<span class="string">&quot;小心超人&quot;</span>);</span><br><span class="line">    <span class="comment">//添加项目，并指定它的前一个项目是item1</span></span><br><span class="line">    QTreeWidgetItem* item2 = <span class="keyword">new</span> QTreeWidgetItem(&amp;treeWidget,item1);</span><br><span class="line">    item2-&gt;setText(<span class="number">0</span>,<span class="string">&quot;小小怪&quot;</span>);</span><br><span class="line">    treeWidget.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建表格部件</span></span><br><span class="line">    <span class="function">QTableWidget <span class="title">tableWidget</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    QTableWidgetItem *tableWidgetem = <span class="keyword">new</span> QTableWidgetItem(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    tableWidget.setItem(<span class="number">1</span>,<span class="number">1</span>,tableWidgetem);</span><br><span class="line">    <span class="comment">//创建表格项目，作为表头</span></span><br><span class="line">    QTableWidgetItem* headerV = <span class="keyword">new</span> QTableWidgetItem(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    tableWidget.setVerticalHeaderItem(<span class="number">0</span>,headerV);</span><br><span class="line">    QTableWidgetItem* headerH = <span class="keyword">new</span> QTableWidgetItem(<span class="string">&quot;What&quot;</span>);</span><br><span class="line">    tableWidget.setHorizontalHeaderItem(<span class="number">0</span>,headerH);</span><br><span class="line">    tableWidget.show();</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模型-视图编程&quot;&gt;&lt;a href=&quot;#模型-视图编程&quot; class=&quot;headerlink&quot; title=&quot;模型/视图编程&quot;&gt;&lt;/a&gt;模型/视图编程&lt;/h1&gt;&lt;p&gt;Qt中的模型/视图架构用来实现大量的数据存储、处理及显示。&lt;/p&gt;
&lt;p&gt;MVC(Model-Vie</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT富文本</title>
    <link href="https://doraemon-hub-art.github.io/2022/02/03/%E3%80%90QT%E3%80%91QT%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    <id>https://doraemon-hub-art.github.io/2022/02/03/%E3%80%90QT%E3%80%91QT%E5%AF%8C%E6%96%87%E6%9C%AC/</id>
    <published>2022-02-03T04:25:16.000Z</published>
    <updated>2022-02-03T04:28:37.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h1><p>QTextEdit支持富文本处理，即文档中可使用多种格式，如文字、图片、表格等。</p><p>PlainText为纯文本。</p><p>由此可类比， windows的记事本就是纯文本编辑器，word就是富文本编辑器。</p><p>文档的光标主要基于QTextCursor类，文档的框架主要基于QTextDocument类。</p><p>一个富文本的文档结构主要分为几种元素:框架(QTextFrameFormat)、文本块(QTextBlock)、表格(QTextTable)、列表(QTxtList)。</p><p>每种元素的格式有相应的format类表示：框架格式(QTextDFrameFormat)、文本块格式(QTextBlockFormat)、表格格式(QText)、列表格式(QTextListFormat)。这些格式通常配合QTextCursor类使用。</p><p>QTextEdit类就是一个富文本编辑器，在构建QTextEdit类对象时就已经构建了一个QTextDocument类对象和一个QTextCursor类对象。只需调用他们相应的操作即可。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031227890.png" alt="image-20220129211052245"></p><h2 id="文档边框格式"><a href="#文档边框格式" class="headerlink" title="文档边框格式"></a>文档边框格式</h2><p><strong>示例:</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031227628.png" alt="image-20220129211226050"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line"> <span class="comment">//获取文档对象</span></span><br><span class="line">QTextDocument* document = ui-&gt;textEdit-&gt;document();</span><br><span class="line"><span class="comment">//获取根 框架</span></span><br><span class="line">QTextFrame *rootFrame = document-&gt;rootFrame();</span><br><span class="line"><span class="comment">//文档格式框架</span></span><br><span class="line">QTextFrameFormat format;</span><br><span class="line">format.setBorderBrush(Qt::red);<span class="comment">//边框颜色</span></span><br><span class="line">format.setBorder(<span class="number">3</span>);<span class="comment">//边界宽度</span></span><br><span class="line"><span class="comment">//设置文档框架格式</span></span><br><span class="line"> rootFrame-&gt;setFrameFormat(format);</span><br><span class="line"> <span class="comment">//设置文本边框风格</span></span><br><span class="line"> QTextFrameFormat frameFormat;</span><br><span class="line"> frameFormat.setBackground(Qt::lightGray);</span><br><span class="line"> frameFormat.setMargin(<span class="number">10</span>);<span class="comment">//设置边距</span></span><br><span class="line"> frameFormat.setPadding(<span class="number">5</span>);<span class="comment">//设置填衬</span></span><br><span class="line"> frameFormat.setBorder(<span class="number">2</span>);</span><br><span class="line"> frameFormat.setBorderStyle(QTextFrameFormat::BorderStyle_DotDash  );</span><br><span class="line"> QTextCursor cursor = ui-&gt;textEdit-&gt;textCursor();</span><br><span class="line"> cursor.insertFrame(frameFormat);</span><br></pre></td></tr></table></figure><hr><h2 id="文本个格式、文本块格式、字符格式"><a href="#文本个格式、文本块格式、字符格式" class="headerlink" title="文本个格式、文本块格式、字符格式"></a>文本个格式、文本块格式、字符格式</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031227842.png" alt="image-20220130182600946"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加工具栏行选项</span></span><br><span class="line"></span><br><span class="line">   QAction* action_textFrame = <span class="keyword">new</span> QAction(<span class="string">&quot;框架&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">   connect(action_textFrame,&amp;QAction::triggered,<span class="keyword">this</span>,&amp;MainWindow::showTextFrame);</span><br><span class="line">   ui-&gt;mainToolBar-&gt;addAction(action_textFrame);</span><br><span class="line"></span><br><span class="line">   QAction* action_textBlock = <span class="keyword">new</span> QAction(<span class="string">&quot;文本块&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">   connect(action_textBlock,&amp;QAction::triggered,<span class="keyword">this</span>,&amp;MainWindow::showTextBlock);</span><br><span class="line">   ui-&gt;mainToolBar-&gt;addAction(action_textBlock);<span class="comment">//添加到工具栏中</span></span><br><span class="line"></span><br><span class="line">   QAction* action_textFont = <span class="keyword">new</span> QAction(<span class="string">&quot;字体&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">   action_textFont-&gt;setCheckable(<span class="literal">true</span>);</span><br><span class="line">   connect(action_textFont,&amp;QAction::triggered,<span class="keyword">this</span>,&amp;MainWindow::setTextFont);</span><br><span class="line">   ui-&gt;mainToolBar-&gt;addAction(action_textFont);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::showTextFrame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTextDocument* document  = ui-&gt;textEdit-&gt;document();<span class="comment">//获取文档对象</span></span><br><span class="line">    QTextFrame* frame = document-&gt;rootFrame();<span class="comment">//获取根框架</span></span><br><span class="line">    QTextFrame::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it = frame-&gt;begin();!(it.atEnd());it++)</span><br><span class="line">    &#123;</span><br><span class="line">        QTextFrame*childFrame  = it.currentFrame();<span class="comment">//获取当前框架指针</span></span><br><span class="line">        QTextBlock childBlock = it.currentBlock();<span class="comment">//获取当前文本块</span></span><br><span class="line">        <span class="keyword">if</span>(childFrame)</span><br><span class="line">        &#123;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">&quot;frame&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(childBlock.isValid())</span><br><span class="line">        &#123;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">&quot;block:&quot;</span>&lt;&lt;childBlock.text();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::showTextBlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTextDocument* document =   ui-&gt;textEdit-&gt;document();</span><br><span class="line">    QTextBlock block = document-&gt;firstBlock();</span><br><span class="line">    <span class="comment">//document-&gt;blockCount()返回文本块个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; document-&gt;blockCount();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;QString(<span class="string">&quot;文本块%1,文本块首行行号为:%2,长度:%3,内容%4&quot;</span>).arg(i).arg(block.firstLineNumber()).arg(block.length()).arg(block.text());</span><br><span class="line">        block = block.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::setTextFont</span><span class="params">(<span class="keyword">bool</span> checked)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checked)</span><br><span class="line">    &#123;</span><br><span class="line">        QTextCursor cursor = ui-&gt;textEdit-&gt;textCursor();</span><br><span class="line">        <span class="comment">//文本块格式</span></span><br><span class="line">        QTextBlockFormat blockFormat;</span><br><span class="line">        <span class="comment">//居中对齐</span></span><br><span class="line">        blockFormat.setAlignment(Qt::AlignCenter);</span><br><span class="line">        cursor.insertBlock(blockFormat);</span><br><span class="line">        <span class="comment">//字符格式</span></span><br><span class="line">        QTextCharFormat charFormat;</span><br><span class="line">        <span class="comment">//设置背景色</span></span><br><span class="line">        charFormat.setBackground(Qt::lightGray);</span><br><span class="line">        <span class="comment">//设置字符前景色(字符颜色)</span></span><br><span class="line">        charFormat.setForeground(Qt::blue);</span><br><span class="line">         <span class="comment">//字体</span></span><br><span class="line">        charFormat.setFont(QFont(QString(<span class="string">&quot;宋体&quot;</span>),<span class="number">12</span>,QFont::Bold,<span class="literal">true</span>));</span><br><span class="line">        <span class="comment">//下划线</span></span><br><span class="line">        charFormat.setFontUnderline(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//设置字符格式</span></span><br><span class="line">        cursor.setCharFormat(charFormat);</span><br><span class="line">        cursor.insertText(<span class="string">&quot;嘻嘻&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文档插入表格、列表、图片"><a href="#文档插入表格、列表、图片" class="headerlink" title="文档插入表格、列表、图片"></a>文档插入表格、列表、图片</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::insertTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTextCursor cursor =  ui-&gt;textEdit-&gt;textCursor();</span><br><span class="line">    QTextTableFormat format;<span class="comment">//表格格式</span></span><br><span class="line">    format.setCellSpacing(<span class="number">2</span>);<span class="comment">//表格外边空白</span></span><br><span class="line">    format.setCellPadding(<span class="number">10</span>);<span class="comment">//表格内边空白</span></span><br><span class="line">    cursor.insertTable(<span class="number">3</span>, <span class="number">3</span>,format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::insertList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTextListFormat format;<span class="comment">//列表格式</span></span><br><span class="line">    format.setStyle(QTextListFormat::ListDecimal);<span class="comment">//数字编号</span></span><br><span class="line">    ui-&gt;textEdit-&gt;textCursor().insertList(format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::insertImage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString filePath  = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">&quot;选择图片&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;JPEG(*.jpg *.jpeg);;&quot;</span><span class="string">&quot;GIF(*.gif);;&quot;</span><span class="string">&quot;PNG(*.png)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">QUrl <span class="title">url</span><span class="params">(QString(<span class="string">&quot;file://%1&quot;</span>).arg(filePath))</span></span>;</span><br><span class="line"></span><br><span class="line">    QImage image = QImageReader(filePath).read();</span><br><span class="line">    QTextDocument* document = ui-&gt;textEdit-&gt;document();</span><br><span class="line">    <span class="comment">//文档添加图片资源</span></span><br><span class="line">    document-&gt;addResource(QTextDocument::ImageResource,url,QVariant(image));</span><br><span class="line">    QTextCursor cursor =ui-&gt;textEdit-&gt;textCursor();</span><br><span class="line">    QTextImageFormat imgFormat;</span><br><span class="line">    imgFormat.setWidth(image.width());</span><br><span class="line">    imgFormat.setHeight(image.height());</span><br><span class="line">    imgFormat.setName(url.toString());</span><br><span class="line">    cursor.insertImage(imgFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202022331193.png" alt="image-20220202233158144"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySyntaxHighlighter::highlightBlock</span><span class="params">(<span class="keyword">const</span> QString &amp;text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTextCharFormat format;<span class="comment">//字符格式</span></span><br><span class="line">    format.setFontWeight(QFont::Bold);</span><br><span class="line">    format.setBackground(Qt::red);</span><br><span class="line">    format.setForeground(Qt::green) ;</span><br><span class="line">    QString pattern = <span class="string">&quot;\\bgood\\b&quot;</span>;<span class="comment">//匹配单词边界</span></span><br><span class="line">    <span class="function">QRegExp <span class="title">expression</span><span class="params">(pattern)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> index = text.indexOf(expression);</span><br><span class="line">   <span class="keyword">while</span>(index &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> length = expression.matchedLength();<span class="comment">//匹配到的字符长度</span></span><br><span class="line">        setFormat(index,length,format);</span><br><span class="line">        index = text.indexOf(expression,index + length);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="字符查找"><a href="#字符查找" class="headerlink" title="字符查找"></a>字符查找</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202202031227638.png" alt="image-20220203120216663"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">    QAction* action_textFind = <span class="keyword">new</span> QAction(<span class="string">&quot;查找&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">    connect(action_textFind,&amp;QAction::triggered,<span class="keyword">this</span>,&amp;MainWindow::textFind);</span><br><span class="line">    ui-&gt;mainToolBar-&gt;addAction(action_textFind);</span><br><span class="line">    m_findDialg = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);<span class="comment">//查找对话框</span></span><br><span class="line">    m_lineEdit = <span class="keyword">new</span> QLineEdit(m_findDialg);<span class="comment">//查找输入框</span></span><br><span class="line">    QPushButton* btn = <span class="keyword">new</span> QPushButton(m_findDialg);</span><br><span class="line">    btn-&gt;setText(<span class="string">&quot;查找下一个&quot;</span>);</span><br><span class="line">    connect(btn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MainWindow::textNext);</span><br><span class="line">    QVBoxLayout* layout = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line">    layout-&gt;addWidget(m_lineEdit);</span><br><span class="line">    layout-&gt;addWidget(btn);</span><br><span class="line">    m_findDialg-&gt;setLayout(layout);</span><br><span class="line">```</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::textFind</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_findDialg-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::textNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString strFind =  m_lineEdit-&gt;text();</span><br><span class="line">    <span class="keyword">bool</span> isFind = ui-&gt;textEdit-&gt;find(strFind,QTextDocument::FindBackward);</span><br><span class="line">    <span class="keyword">if</span>(isFind)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;QString(<span class="string">&quot;行号:%1,列号:%2&quot;</span>)</span><br><span class="line">                  .arg(ui-&gt;textEdit-&gt;textCursor().blockNumber())</span><br><span class="line">                  .arg(ui-&gt;textEdit-&gt;textCursor().columnNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;富文本&quot;&gt;&lt;a href=&quot;#富文本&quot; class=&quot;headerlink&quot; title=&quot;富文本&quot;&gt;&lt;/a&gt;富文本&lt;/h1&gt;&lt;p&gt;QTextEdit支持富文本处理，即文档中可使用多种格式，如文字、图片、表格等。&lt;/p&gt;
&lt;p&gt;PlainText为纯文本。&lt;/p&gt;</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT状态栏、任务栏、工具栏</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/29/%E3%80%90QT%E3%80%91QT%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E4%BB%BB%E5%8A%A1%E6%A0%8F%E3%80%81%E5%B7%A5%E5%85%B7%E6%A0%8F/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/29/%E3%80%90QT%E3%80%91QT%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E4%BB%BB%E5%8A%A1%E6%A0%8F%E3%80%81%E5%B7%A5%E5%85%B7%E6%A0%8F/</id>
    <published>2022-01-29T05:45:44.000Z</published>
    <updated>2022-01-29T05:46:10.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜单栏、工具栏、状态栏"><a href="#菜单栏、工具栏、状态栏" class="headerlink" title="菜单栏、工具栏、状态栏"></a>菜单栏、工具栏、状态栏</h1><p>主窗口框架(QMainWindow)拥有自己的布局，包括以下组件:</p><ul><li>菜单栏</li></ul><p>菜单栏包含了一个下拉菜单项的列表，这些菜单项通过QAction动作类实现。一个主窗口只能有一个菜单栏。</p><ul><li>工具栏</li></ul><p>工具栏一般用于常用的菜单项，也可以插入其他窗口部件，一个主窗口可以拥有多个工具栏。</p><ul><li>中心部件</li></ul><p>主窗口中心区域可以放入一个窗口部件作为中心部件，是应用程序的主要功能实现区域，一个主窗口只能有一个中心部件。</p><ul><li>dock部件</li></ul><p>dock部件又称为停靠部件，或停靠窗口，可停靠在窗口部件的四周，用来设置一些部件来实现一些功能，类似一个工具箱，一个主窗口可拥有多个dock部件。</p><ul><li>状态栏</li></ul><p>状态栏用于显示程序的一些状态信息，在主窗口的最底下，一个主窗口只能拥有一个状态栏。</p><h2 id="菜单栏、工具栏、状态栏-1"><a href="#菜单栏、工具栏、状态栏-1" class="headerlink" title="菜单栏、工具栏、状态栏"></a>菜单栏、工具栏、状态栏</h2><p> <strong>代码添加示例。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单</span></span><br><span class="line"> QMenu* editMenu = ui-&gt;menuBar-&gt;addMenu(<span class="string">&quot;编辑(&amp;E)&quot;</span>);</span><br><span class="line"> QAction *action_copy = editMenu-&gt;addAction(QIcon(<span class="string">&quot;test.png&quot;</span>),QString(<span class="string">&quot;复制(&amp;C)&quot;</span>));</span><br><span class="line"> action_copy-&gt;setShortcut(QKeySequence(<span class="string">&quot;Ctrl+C&quot;</span>));</span><br><span class="line"> <span class="comment">//添加到主窗口工具栏——工具栏添加动作按钮</span></span><br><span class="line"> ui-&gt;mainToolBar-&gt;addAction(action_copy);</span><br><span class="line"> <span class="comment">//动作按钮组，互斥选项，只能选择这其中的一个</span></span><br><span class="line"> QActionGroup* group = <span class="keyword">new</span> QActionGroup(<span class="keyword">this</span>);</span><br><span class="line"> QAction* action_L = group-&gt;addAction(<span class="string">&quot;左对齐(&amp;L)&quot;</span>);</span><br><span class="line"> QAction* action_R = group-&gt;addAction(<span class="string">&quot;右对齐(&amp;R)&quot;</span>);</span><br><span class="line"> QAction* action_C = group-&gt;addAction(<span class="string">&quot;居中对齐(&amp;C)&quot;</span>);</span><br><span class="line"> QAction* action_J = group-&gt;addAction(<span class="string">&quot;两端对齐(&amp;J)&quot;</span>);</span><br><span class="line"> <span class="comment">//设置可选</span></span><br><span class="line"> action_L-&gt;setCheckable(<span class="literal">true</span>);</span><br><span class="line"> action_R-&gt;setCheckable(<span class="literal">true</span>);</span><br><span class="line"> action_C-&gt;setCheckable(<span class="literal">true</span>);</span><br><span class="line"> action_J-&gt;setCheckable(<span class="literal">true</span>);</span><br><span class="line"> <span class="comment">//菜单栏中添加分隔线</span></span><br><span class="line"> editMenu-&gt;addSeparator();</span><br><span class="line"> <span class="comment">//添加到窗口菜单</span></span><br><span class="line"> editMenu-&gt;addAction(action_L);</span><br><span class="line"> editMenu-&gt;addAction(action_R);</span><br><span class="line"> editMenu-&gt;addAction(action_C);</span><br><span class="line"> editMenu-&gt;addAction(action_J);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 工具栏添加部件</span></span><br><span class="line"> QToolButton* toolBtn = <span class="keyword">new</span> QToolButton(<span class="keyword">this</span>);</span><br><span class="line"> toolBtn-&gt;setText(<span class="string">&quot;颜色&quot;</span>);</span><br><span class="line"> QMenu* colorMenu = <span class="keyword">new</span> QMenu(<span class="keyword">this</span>);</span><br><span class="line"> colorMenu-&gt;addAction(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line"> colorMenu-&gt;addAction(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line"> toolBtn-&gt;setMenu(colorMenu);</span><br><span class="line"> <span class="comment">//设置模式为弹出式菜单</span></span><br><span class="line"> toolBtn-&gt;setPopupMode(QToolButton::MenuButtonPopup);</span><br><span class="line"> ui-&gt;mainToolBar-&gt;addWidget(toolBtn);</span><br><span class="line"> <span class="comment">//添加调节大小窗口</span></span><br><span class="line"> QSpinBox* spinBox = <span class="keyword">new</span> QSpinBox(<span class="keyword">this</span>);</span><br><span class="line"> ui-&gt;mainToolBar-&gt;addWidget(spinBox);</span><br><span class="line"> <span class="comment">//显示临时信息</span></span><br><span class="line"> ui-&gt;statusBar-&gt;showMessage(QString(<span class="string">&quot;欢迎......&quot;</span>),<span class="number">3000</span>);</span><br><span class="line"> <span class="comment">//添加状态栏永久显示</span></span><br><span class="line"> QLabel* tag = <span class="keyword">new</span> QLabel(<span class="string">&quot;https://doraemon-hub-art.github.io&quot;</span>);</span><br><span class="line"> ui-&gt;statusBar-&gt;addPermanentWidget(tag);</span><br></pre></td></tr></table></figure><h2 id="自定义菜单栏"><a href="#自定义菜单栏" class="headerlink" title="自定义菜单栏"></a>自定义菜单栏</h2><p>自定义菜单需要定义一个继承QWidgetAction的类， 并重写createWidget方法，在该方法中自定义部件设置。</p><p><strong>示例MyAction.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYACTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYACTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidgetAction&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> :</span> <span class="keyword">public</span> QWidgetAction</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyAction(QObject* parent = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function">QWidget* <span class="title">createWidget</span><span class="params">(QWidget* parent)</span></span>;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getText</span><span class="params">(<span class="keyword">const</span> QString&amp; <span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendText</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QLineEdit* lineEdit;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYACTION_H</span></span></span><br></pre></td></tr></table></figure><p><strong>MyAction.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myaction.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QSplitter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line">MyAction::MyAction(QObject* parent):QWidgetAction(parent)</span><br><span class="line">&#123;</span><br><span class="line">    lineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    connect(lineEdit,&amp;QLineEdit::returnPressed,<span class="keyword">this</span>,&amp;MyAction::sendText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QWidget *<span class="title">MyAction::createWidget</span><span class="params">(QWidget *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//是否继承自菜单或者工具栏</span></span><br><span class="line">    <span class="comment">//是则创建父部件的子部件并返回子部件</span></span><br><span class="line">    <span class="keyword">if</span>(parent-&gt;inherits(<span class="string">&quot;QMenu&quot;</span>)||parent-&gt;inherits(<span class="string">&quot;QToolBar&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        QSplitter * splitter = <span class="keyword">new</span> QSplitter(parent);</span><br><span class="line">        QLabel* label = <span class="keyword">new</span> QLabel(<span class="string">&quot;插入文本:&quot;</span>);</span><br><span class="line">        splitter-&gt;addWidget(label);</span><br><span class="line">        splitter-&gt;addWidget(lineEdit);</span><br><span class="line">        <span class="keyword">return</span> splitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyAction::sendText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">emit <span class="title">getText</span><span class="params">(lineEdit-&gt;text())</span></span>;</span><br><span class="line">    lineEdit-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;菜单栏、工具栏、状态栏&quot;&gt;&lt;a href=&quot;#菜单栏、工具栏、状态栏&quot; class=&quot;headerlink&quot; title=&quot;菜单栏、工具栏、状态栏&quot;&gt;&lt;/a&gt;菜单栏、工具栏、状态栏&lt;/h1&gt;&lt;p&gt;主窗口框架(QMainWindow)拥有自己的布局，包括以下组件:&lt;</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT打印调试信息</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/28/%E3%80%90QT%E3%80%91QT%E6%89%93%E5%8D%B0%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/28/%E3%80%90QT%E3%80%91QT%E6%89%93%E5%8D%B0%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF/</id>
    <published>2022-01-28T10:43:07.000Z</published>
    <updated>2022-01-28T10:43:39.313Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QDebug打印调试信息</span></span><br><span class="line">   <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">   qDebug(<span class="string">&quot;十进制%d&quot;</span>,num);</span><br><span class="line">   qDebug(<span class="string">&quot;八进制%o&quot;</span>,num);</span><br><span class="line">   qDebug(<span class="string">&quot;十六进制%x&quot;</span>,num);</span><br><span class="line">   qreal PI = <span class="number">3.14</span>;</span><br><span class="line">   qDebug(<span class="string">&quot;浮点%f&quot;</span>,PI);</span><br><span class="line">   qDebug(<span class="string">&quot;科学计数法%e&quot;</span>,PI);</span><br><span class="line">   qDebug(<span class="string">&quot;123%%&quot;</span>);<span class="comment">//123%</span></span><br><span class="line">   <span class="comment">//另一种输入方式</span></span><br><span class="line">   qDebug()&lt;&lt;PI;</span><br><span class="line">   QString str = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">   qDebug()&lt;&lt;str;</span><br><span class="line">   qDebug().noquote()&lt;&lt;str;<span class="comment">//不带双引号输出</span></span><br><span class="line">   qDebug()&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;<span class="string">&quot;world&quot;</span>;<span class="comment">//默认输入，这两个单词中间会有空格</span></span><br><span class="line">   qDebug().nospace()&lt;&lt;<span class="string">&quot;hello&quot;</span>&lt;&lt;<span class="string">&quot;world&quot;</span>;<span class="comment">//去掉空格</span></span><br><span class="line">   <span class="comment">//控制台程序会输入到黑窗口</span></span><br><span class="line">   <span class="comment">//桌面应用程序会输出到-应用程序输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT文件处理</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2022-01-24T15:28:30.000Z</published>
    <updated>2022-01-24T15:29:28.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><p>QFile类用于文件操作，它提供了读写文件的接口，可以读写文件、二进制文件和Qt资源文件。</p><p>处理文本文件和二进制文件，可以使用QTextStream类和QDataStream类。处理临时文件可以使用QTemporaryFile,获取信息可以使用QFileInfo,处理目录可以使用QDir,监视文件和目录变化可以使用QFileSystemWatcher。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201242329099.png" alt="image-20220124203618757"></p><p><strong>QFile类示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件读取</span></span><br><span class="line">   <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;hello.txt&quot;</span>)</span></span>;</span><br><span class="line">   <span class="keyword">if</span>(file.open(QIODevice::ReadOnly))</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">       qint32 n = file.readLine(buffer,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">       <span class="keyword">if</span>(n != <span class="number">-1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">            qDebug()&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;buffer;</span><br><span class="line">            file.close();<span class="comment">//关闭文件</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">        qDebug()&lt;&lt;file.errorString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//文件写入</span></span><br><span class="line">   QFile dataFile;</span><br><span class="line">   <span class="keyword">double</span> dPI = <span class="number">3.1415926</span>;</span><br><span class="line">   <span class="keyword">int</span> age =<span class="number">19</span>;</span><br><span class="line">   dataFile.setFileName(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(dataFile.open(QFile::WriteOnly | QFile::Truncate))</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;dataFile)</span></span>;</span><br><span class="line">        <span class="comment">//设置精度</span></span><br><span class="line">        out.setRealNumberPrecision(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置字段宽度</span></span><br><span class="line">        out.setFieldWidth(<span class="number">20</span>);</span><br><span class="line">         <span class="comment">//设置对齐方式</span></span><br><span class="line">         out.setFieldAlignment(QTextStream::AlignCenter);</span><br><span class="line">        out&lt;&lt;QString(<span class="string">&quot;PI:&quot;</span>)&lt;&lt;dPI;</span><br><span class="line">        <span class="comment">//将整数以二进制方式写入</span></span><br><span class="line">        out&lt;&lt;bin&lt;&lt;age;</span><br><span class="line">        <span class="comment">//十六进制写入，并显示进制前缀</span></span><br><span class="line">        out&lt;&lt;hex&lt;&lt;showbase&lt;&lt;age;</span><br><span class="line">        <span class="comment">//科学计数法</span></span><br><span class="line">        out&lt;&lt;scientific&lt;&lt;dPI;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>操作二进制文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDataStream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//往文件中写入数据</span></span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="function">QFile  <span class="title">binFile</span><span class="params">(<span class="string">&quot;info.bat&quot;</span>)</span></span>;</span><br><span class="line">     <span class="keyword">if</span>(binFile.open(QIODevice::WriteOnly | QIODevice::Truncate))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function">QDataStream <span class="title">out</span><span class="params">(&amp;binFile)</span></span>;</span><br><span class="line">         out&lt;&lt;QString(<span class="string">&quot;半生瓜のblog&quot;</span>)&lt;&lt;QDate::fromString(<span class="string">&quot;2022-01-24&quot;</span>,<span class="string">&quot;yyyy-MM-dd&quot;</span>)&lt;&lt;(qint32)<span class="number">19</span>;</span><br><span class="line">          binFile.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         qDebug()&lt;&lt;binFile.errorString();</span><br><span class="line">     &#125;</span><br><span class="line">     binFile.setFileName(<span class="string">&quot;info.bat&quot;</span>);<span class="comment">//指明要操作的文件</span></span><br><span class="line">     <span class="keyword">if</span>(binFile.open(QIODevice::ReadOnly))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function">QDataStream <span class="title">in</span><span class="params">(&amp;binFile)</span></span>;</span><br><span class="line">        <span class="comment">//怎么写怎么读</span></span><br><span class="line">         QString Name;</span><br><span class="line">         QDate NowTime;</span><br><span class="line">         qint32 Age;</span><br><span class="line">         in&gt;&gt;Name&gt;&gt;NowTime&gt;&gt;Age;</span><br><span class="line">         qDebug()&lt;&lt;Name&lt;&lt;NowTime&lt;&lt;Age;</span><br><span class="line">         binFile.close();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">          qDebug()&lt;&lt;binFile.errorString();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例:获取文件信息</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201242329924.png" alt="image-20220124232543877"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FileInfo::getFileInfo</span><span class="params">(QString &amp;fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过这个类来获取文件的信息</span></span><br><span class="line">    <span class="function">QFileInfo <span class="title">info</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    qint64 size = info.size();<span class="comment">//获取文件大小</span></span><br><span class="line">    QDateTime createTime = info.created();<span class="comment">//获取文件创建时间</span></span><br><span class="line">    QDateTime lastModTime = info.lastModified();<span class="comment">//获取文件最后一次被的修改的时间</span></span><br><span class="line">    QDateTime lasReadTime = info.lastRead();<span class="comment">//获取文件最后一次被读取的时间</span></span><br><span class="line">    <span class="comment">//文件的属性信息</span></span><br><span class="line">    <span class="keyword">bool</span> isDir = info.isDir();<span class="comment">//是不是目录</span></span><br><span class="line">    <span class="keyword">bool</span> isFile = info.isFile();<span class="comment">//是不是文件</span></span><br><span class="line">    <span class="keyword">bool</span> isSymLink = info.isSymLink();<span class="comment">//是不是链接</span></span><br><span class="line">    <span class="keyword">bool</span> isHid = info.isHidden();<span class="comment">//是否隐藏</span></span><br><span class="line">    <span class="keyword">bool</span> isReadable = info.isReadable();<span class="comment">//是否可读</span></span><br><span class="line">    <span class="keyword">bool</span> isWritable = info.isWritable();<span class="comment">//是否可写</span></span><br><span class="line">    <span class="keyword">bool</span> isExcutable = info.isExecutable();<span class="comment">//是否可执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据读取信息设置控件信息</span></span><br><span class="line">    ui-&gt;FileSizeLineEdit-&gt;setText(QString::number(size));<span class="comment">//整型转字符串</span></span><br><span class="line">    ui-&gt;CreateTimeLineEdit-&gt;setText(createTime.toString());<span class="comment">//QDate转字符串</span></span><br><span class="line">    ui-&gt;LastModTimeLineEdit-&gt;setText(lastModTime.toString());</span><br><span class="line">    ui-&gt;LastCheckTimeLineEdit-&gt;setText(lasReadTime.toString());</span><br><span class="line">    ui-&gt;isDirCheckBox-&gt;setChecked(isDir);</span><br><span class="line">    ui-&gt;isFileCheckBox-&gt;setChecked(isFile);</span><br><span class="line">    ui-&gt;isExecutableCheckBox-&gt;setChecked(isExcutable);</span><br><span class="line">    ui-&gt;isSymLinkCheckBox-&gt;setChecked(isSymLink);</span><br><span class="line">    ui-&gt;isHiddenCheckBox-&gt;setChecked(isHid);</span><br><span class="line">    ui-&gt;isWritableCheckBox-&gt;setChecked(isWritable);</span><br><span class="line">    ui-&gt;isReadableCheckBox-&gt;setChecked(isReadable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FileInfo::on_browerFileBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//选择文件</span></span><br><span class="line">    QString fileName = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">&quot;打开文件&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;files(*)&quot;</span>);</span><br><span class="line">     <span class="comment">//选择目录QString path = QFileDialog::getExistingDirectory(this,&quot;选择目录&quot;,&quot;.&quot;);</span></span><br><span class="line">    ui-&gt;FileNameLineEdit-&gt;setText(fileName);<span class="comment">//文件名(带路径的)</span></span><br><span class="line">    getFileInfo(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件处理&quot;&gt;&lt;a href=&quot;#文件处理&quot; class=&quot;headerlink&quot; title=&quot;文件处理&quot;&gt;&lt;/a&gt;文件处理&lt;/h1&gt;&lt;p&gt;QFile类用于文件操作，它提供了读写文件的接口，可以读写文件、二进制文件和Qt资源文件。&lt;/p&gt;
&lt;p&gt;处理文本文件和二进</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT正则表达式</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/24/%E3%80%90QT%E3%80%91QT%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-24T08:54:46.000Z</published>
    <updated>2022-01-24T08:56:15.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT正则表达式"><a href="#QT正则表达式" class="headerlink" title="QT正则表达式"></a>QT正则表达式</h1><p>正则表达式即一个文本匹配字符串的一种模式。Qt中QRegExp类实现使用正则表达式进行模式匹配，且完全支持Unicode,主要应用:字符串验证、搜索、查找替换、分割。</p><p><strong>正则表达式中字符及字符集</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241110136.png" alt="    "></p><p><strong>正则表达式中的量词</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241655096.png" alt="image-20220124111743871"></p><p><strong>正则表达式中的断言</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241120248.png" alt="image-20220124112005197"></p><p><strong>QRegExp支持通配符</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201241120415.png" alt="image-20220124112047375"></p><p> <strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整匹配</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">reg</span><span class="params">(<span class="string">&quot;a&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;reg.exactMatch(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//任意个数字+两个非数字</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">reg0</span><span class="params">(<span class="string">&quot;\\d*\\D&#123;2&#125;&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;reg0.exactMatch(<span class="string">&quot;123ab&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用通配符匹配</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;*.txt&quot;</span>)</span></span>;</span><br><span class="line">   <span class="comment">//设置匹配语法</span></span><br><span class="line">   rx.setPatternSyntax(QRegExp::Wildcard);<span class="comment">//支持通配符</span></span><br><span class="line">   qDebug()&lt;&lt;rx.exactMatch(<span class="string">&quot;123.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//匹配单词边界</span></span><br><span class="line">   QRegExp reg1;</span><br><span class="line">   <span class="comment">//设置匹配模式</span></span><br><span class="line">   reg1.setPattern(<span class="string">&quot;\\b(hello|Hello)\\b&quot;</span>);</span><br><span class="line">   qDebug()&lt;&lt;reg1.indexIn(<span class="string">&quot;Hello everyone.&quot;</span>);<span class="comment">//返回起始下标</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//捕获匹配的文本</span></span><br><span class="line">   <span class="comment">//由(?:开始。)结束</span></span><br><span class="line">   <span class="function">QRegExp <span class="title">regHight</span><span class="params">(<span class="string">&quot;(\\d+)(?:\\s*)(cm|inchi)&quot;</span>)</span></span>;</span><br><span class="line">   qDebug()&lt;&lt;regHight.indexIn(<span class="string">&quot;Mr.WM 170cm&quot;</span>);</span><br><span class="line">   qDebug()&lt;&lt;regHight.cap(<span class="number">0</span>);<span class="comment">//完整</span></span><br><span class="line">   qDebug()&lt;&lt;regHight.cap(<span class="number">1</span>);<span class="comment">//第一部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//断言?!</span></span><br><span class="line">   QRegExp reg2;</span><br><span class="line">   reg2.setPattern(<span class="string">&quot;面(?!包)&quot;</span>);<span class="comment">//面后面不是包才匹配成功</span></span><br><span class="line">   QString str =<span class="string">&quot;我爱吃面食，面包也行吧。&quot;</span>;</span><br><span class="line">   str.replace(reg2,<span class="string">&quot;米&quot;</span>);<span class="comment">//我爱吃米食，面包也行吧</span></span><br><span class="line">   qDebug()&lt;&lt;str;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Qt5引入了新的类</span></span><br><span class="line">   <span class="function">QRegularExpression  <span class="title">regExp</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">   <span class="comment">//结果QRegularExpressionMatch(Valid, has match: 0:(0, 5, &quot;hello&quot;)</span></span><br><span class="line">   qDebug()&lt;&lt;regExp.match(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">   regExp.setPattern(<span class="string">&quot;[A-Z]&#123;3,8&#125;&quot;</span>);</span><br><span class="line">   <span class="comment">//设置匹配模式-大小写不敏感</span></span><br><span class="line">   regExp.setPatternOptions(QRegularExpression::CaseInsensitiveOption);</span><br><span class="line">   qDebug()&lt;&lt;regExp.match(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function">QRegularExpression <span class="title">reDate</span><span class="params">(<span class="string">&quot;^(\\d\\d)/(\\d\\d)/(\\d\\d\\d\\d)$&quot;</span>)</span></span>;<span class="comment">//日期</span></span><br><span class="line">   QRegularExpressionMatch match0 = reDate.match(<span class="string">&quot;01/24/2022&quot;</span>);</span><br><span class="line">   QString strMatch = match0.captured(<span class="number">0</span>);</span><br><span class="line">   qDebug()&lt;&lt;strMatch;</span><br><span class="line">   qDebug()&lt;&lt;match0;</span><br><span class="line"></span><br><span class="line">   QString sPattern;</span><br><span class="line">   sPattern = <span class="string">&quot;^(Jan|Feb|Mar|Apr|May) \\d\\d \\d\\d\\d\\d$&quot;</span>;</span><br><span class="line">   <span class="function">QRegularExpression <span class="title">rDate1</span><span class="params">(sPattern)</span></span>;</span><br><span class="line">   <span class="function">QString <span class="title">ss</span><span class="params">(<span class="string">&quot;Apr 01&quot;</span>)</span></span>;</span><br><span class="line">   QRegularExpressionMatch match2;</span><br><span class="line">   match2 = rDate1.match(ss,<span class="number">0</span>,QRegularExpression::PartialPreferCompleteMatch);    <span class="comment">//部分匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2.hasMatch();<span class="comment">//完整匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2.hasPartialMatch();<span class="comment">//部分匹配</span></span><br><span class="line">   qDebug()&lt;&lt;match2;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT正则表达式&quot;&gt;&lt;a href=&quot;#QT正则表达式&quot; class=&quot;headerlink&quot; title=&quot;QT正则表达式&quot;&gt;&lt;/a&gt;QT正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式即一个文本匹配字符串的一种模式。Qt中QRegExp类实现使用正则表达式进行模式匹配，且完</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT标准对话框</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/23/%E3%80%90QT%E3%80%91QT%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/23/%E3%80%90QT%E3%80%91QT%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/</id>
    <published>2022-01-23T14:43:07.000Z</published>
    <updated>2022-01-23T14:44:13.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT标准对话框"><a href="#QT标准对话框" class="headerlink" title="QT标准对话框"></a>QT标准对话框</h1><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243662.png" alt="image-20220123114821788"></p><p><strong>示例:</strong></p><ul><li>消息框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232236990.png" alt="image-20220123223658903"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;msgboxdlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line">MsgBoxDlg::MsgBoxDlg(QWidget* parent ):QDialog(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;标准信息对话框集合&quot;</span>);</span><br><span class="line">    <span class="comment">//构造部件</span></span><br><span class="line">    m_tipLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;请选择一种消息框&quot;</span>);</span><br><span class="line">    m_questionBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;问题消息框&quot;</span>);</span><br><span class="line">    m_infomationBtn= <span class="keyword">new</span> QPushButton(<span class="string">&quot;信息消息框&quot;</span>);</span><br><span class="line">    m_warningBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;警告消息框&quot;</span>);</span><br><span class="line">    m_criticalBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;错误消息框&quot;</span>);</span><br><span class="line">    m_aboutBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;关于消息框&quot;</span>);</span><br><span class="line">    m_aboutQtBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;关于Qt消息框&quot;</span>);</span><br><span class="line">    <span class="comment">//布局界面</span></span><br><span class="line">    m_mainLayout = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_tipLabel,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_questionBtn,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_infomationBtn,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_warningBtn,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_criticalBtn,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_aboutBtn,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_aboutQtBtn,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    connect(m_questionBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showQuestionMsgDlg);</span><br><span class="line">    connect(m_infomationBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showInfomationMsgDlg);</span><br><span class="line">    connect(m_warningBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showWarningMsgDlg);</span><br><span class="line">    connect(m_criticalBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showCriticalMsgDlg);</span><br><span class="line">    connect(m_aboutBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showAboutMsgDlg);</span><br><span class="line">    connect(m_aboutQtBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MsgBoxDlg::showAboutQtMsgDlg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showQuestionMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> res =  QMessageBox::question(<span class="keyword">this</span>,<span class="string">&quot;问题消息框&quot;</span>,<span class="string">&quot;您已打开问题消息框,是否关闭？&quot;</span>,QMessageBox::Ok | QMessageBox::Cancel,QMessageBox::Ok);</span><br><span class="line">   <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">   <span class="keyword">case</span> QMessageBox::Ok:</span><br><span class="line">       m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框-确定&quot;</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> QMessageBox::Cancel:</span><br><span class="line">       m_tipLabel-&gt;setText(<span class="string">&quot;问题消息框-取消&quot;</span>);</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showInfomationMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;信息消息框&quot;</span>);</span><br><span class="line">    QMessageBox::information(<span class="keyword">this</span>,<span class="string">&quot;信息提示框&quot;</span>,<span class="string">&quot;这是个信息提示框&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showWarningMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;警告消息&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> res = QMessageBox::warning(<span class="keyword">this</span>,<span class="string">&quot;警告消息框&quot;</span>,<span class="string">&quot;警告!&quot;</span>,QMessageBox::Save | QMessageBox::Cancel | QMessageBox::Discard,QMessageBox::Save);</span><br><span class="line">    <span class="keyword">switch</span> (res) &#123;</span><br><span class="line">    <span class="keyword">case</span> QMessageBox::Save:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了保存&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> QMessageBox::Discard:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了忽视&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QMessageBox::Cancel:</span><br><span class="line">        m_tipLabel-&gt;setText(<span class="string">&quot;用户点击了取消&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showCriticalMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;错误消息框&quot;</span>);</span><br><span class="line">    QMessageBox::critical(<span class="keyword">this</span>,<span class="string">&quot;错误消息框&quot;</span>,<span class="string">&quot;发生错误!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showAboutMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;关于消息框&quot;</span>);</span><br><span class="line">    QMessageBox::about(<span class="keyword">this</span>,<span class="string">&quot;关于&quot;</span>,<span class="string">&quot;关于消息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MsgBoxDlg::showAboutQtMsgDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_tipLabel-&gt;setText(<span class="string">&quot;关于Qt消息框&quot;</span>);</span><br><span class="line">    QMessageBox::aboutQt(<span class="keyword">this</span>,<span class="string">&quot;关于QT&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>输入对话框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243463.png" alt="image-20220123223756778"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;inputdlag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QInputDialog&gt;</span></span></span><br><span class="line">InputDlag::InputDlag(QWidget*parent):QDialog(parent)</span><br><span class="line">&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;输入对话框示例&quot;</span>);</span><br><span class="line">    m_nameTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">    m_sexTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;性别&quot;</span>);</span><br><span class="line">    m_ageTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;年龄:&quot;</span>);</span><br><span class="line">    m_scoreTitle = <span class="keyword">new</span> QLabel(<span class="string">&quot;打分:&quot;</span>);</span><br><span class="line">    m_nameLabel =  <span class="keyword">new</span> QLabel(<span class="string">&quot;快乐的威猛先生&quot;</span>);</span><br><span class="line">    m_sexLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    m_ageLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;19&quot;</span>);</span><br><span class="line">    m_scoreLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    m_nameBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑姓名&quot;</span>);</span><br><span class="line">    m_ageBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑年龄&quot;</span>);</span><br><span class="line">    m_sexBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑性别&quot;</span>);</span><br><span class="line">    m_scoreBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;编辑分数&quot;</span>);</span><br><span class="line"></span><br><span class="line">    m_mainLayout = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameTitle,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameLabel,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_nameBtn,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexTitle,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexLabel,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_sexBtn,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageTitle,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageLabel,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_ageBtn,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreTitle,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreLabel,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">    m_mainLayout-&gt;addWidget(m_scoreBtn,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//设置控件间的间隙</span></span><br><span class="line">    m_mainLayout-&gt;setSpacing(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//设置控件与窗体的间隙</span></span><br><span class="line">    m_mainLayout-&gt;setMargin(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    connect(m_nameBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editName);</span><br><span class="line">    connect(m_ageBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editAge);</span><br><span class="line">    connect(m_sexBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editSex);</span><br><span class="line">    connect(m_scoreBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;InputDlag::editScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">   QString sName = QInputDialog::getText(<span class="keyword">this</span>,<span class="string">&quot;标准字符串输入对话框&quot;</span>,<span class="string">&quot;请编辑姓名&quot;</span>,QLineEdit::Normal,m_nameLabel-&gt;text(),&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok &amp;&amp; !sName.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        m_nameLabel-&gt;setText(sName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">    <span class="keyword">int</span> age = QInputDialog::getInt(<span class="keyword">this</span>,<span class="string">&quot;标准int数据类型对话框&quot;</span>,<span class="string">&quot;请编辑年龄&quot;</span>,m_ageLabel-&gt;text().toInt(),<span class="number">0</span>,<span class="number">120</span>,<span class="number">1</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok)</span><br><span class="line">    &#123;</span><br><span class="line">      m_ageLabel-&gt;setText(QString(<span class="string">&quot;%1&quot;</span>).arg(age));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;</span><br><span class="line">    QStringList sexList;</span><br><span class="line">    sexList&lt;&lt;<span class="string">&quot;男&quot;</span>&lt;&lt;<span class="string">&quot;女&quot;</span>&lt;&lt;<span class="string">&quot;保密&quot;</span>;</span><br><span class="line">    QString sex = QInputDialog::getItem(<span class="keyword">this</span>,<span class="string">&quot;标准条目输入对话框&quot;</span>,<span class="string">&quot;请选择性别&quot;</span>,sexList,<span class="number">0</span>,<span class="literal">false</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok &amp;&amp; !sex.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        m_sexLabel-&gt;setText(sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDlag::editScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ok;<span class="comment">//保存函数调用是否成功</span></span><br><span class="line">    <span class="keyword">double</span> score = QInputDialog::getDouble(<span class="keyword">this</span>,<span class="string">&quot;标准double类型输入对话框&quot;</span>,<span class="string">&quot;请打分&quot;</span>,m_scoreLabel-&gt;text().toDouble(),<span class="number">0</span>,<span class="number">100</span>,<span class="number">1</span>,&amp;ok);</span><br><span class="line">    <span class="keyword">if</span>(ok)</span><br><span class="line">    &#123;</span><br><span class="line">        m_scoreLabel-&gt;setText(QString::number(score));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件对话框</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201232243631.png" alt="image-20220123224016456"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dialog::ShowFileDlg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString sPath = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">&quot;标准文件对话框&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;C++ files(*.cpp);;C files(*.c);;Header files(*.h)&quot;</span> );</span><br><span class="line">    m_fileLineBtn-&gt;setText(sPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT标准对话框&quot;&gt;&lt;a href=&quot;#QT标准对话框&quot; class=&quot;headerlink&quot; title=&quot;QT标准对话框&quot;&gt;&lt;/a&gt;QT标准对话框&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/blogimg/raw/ma</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【计算机网络】计算机网络基础知识笔记</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/22/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/22/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-22T14:10:09.000Z</published>
    <updated>2022-01-22T14:29:19.988Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>相关视频</strong>——<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=1">计算机网络微课堂（有字幕无背景音乐版）</a></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络、互联-连-网和因特网"><a href="#网络、互联-连-网和因特网" class="headerlink" title="网络、互联(连)网和因特网"></a>网络、互联(连)网和因特网</h3><ol><li>网络是由若干结点和连接这些结点的链路组成的。</li><li>多个网络还可以通过路由器互联起来，这样就构成了一个范围更大的网络，即互联网。因此，<strong>互联网是网络的网络</strong>。</li><li>因特网是世界上最大的互连网络。</li></ol><hr><p><strong>internet与Internet</strong></p><ul><li>interne互联网是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。</li><li>Internet因特网则是一个专用名词，它指当前全球最大的、开放的、由众多网咯相互连接而成的特定计算机网络，它采用TCP/IP协议族作为通信的规则，前身是美国的ARPANET。</li></ul><hr><h3 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211067.png" alt="image-20211128174107045"></p><p><strong>因特网服务提供者ISP</strong></p><p>Internet Service Provider</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211065.png" alt="image-20211128174159750"></p><p><strong>基于ISP的三层结构的因特网</strong></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216043.png" alt="image-20211128174315792"></p><h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3><p><strong>面向公众。</strong></p><p><strong>因特网协会ISOC。</strong></p><h3 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h3><ul><li> 边缘部分</li></ul><p>由所有连接在因特网上的主机组成，这部分是用户直接使用的，用来通信(传送数据、音频或视频)和资源共享。</p><ul><li>核心部分</li></ul><p>由大量网络和连接这些网络的路由器组成。这部分是边缘部分提供服务的(提供连通性和交换性)。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211069.png" alt="image-20211128174803586"></p><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><h4 id="电路交换Circuit-Switching"><a href="#电路交换Circuit-Switching" class="headerlink" title="电路交换Circuit Switching"></a>电路交换Circuit Switching</h4><ul><li>电话交换机接通电话线的方式称为电路交换。</li><li>从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211082.png" alt="image-20211128174950373"></p><ul><li>电路交换的三个步骤:<ol><li>建立连接(分配通信资源)</li><li>通话(一直占用通信资源)</li><li>释放连接(归还通信资源)</li></ol></li></ul><p><strong>电路交换示意图</strong>：</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222221607.png" alt="image-20211128175216746"></p><p><strong>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</strong></p><h4 id="分组交换Pactet-Switching"><a href="#分组交换Pactet-Switching" class="headerlink" title="分组交换Pactet Switching"></a>分组交换Pactet Switching</h4><p> <strong>表示一整块的数据称为报文。</strong></p><ul><li>发送方-构造分组-发送分组</li><li>路由器-缓存分组-转发分组(查表转发)</li><li>接收方-接收分组-还原报文</li></ul><hr><p>报文交换过时，不做讲解。</p><hr><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222221525.png" alt="image-20211128181240979"></p><h2 id="计算机网络的定义和分类"><a href="#计算机网络的定义和分类" class="headerlink" title="计算机网络的定义和分类"></a>计算机网络的定义和分类</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3><p>没有公认的唯一定义。</p><p><strong>计算机网路最简单的定义是:一些相互连接的、自治的计算机的集合。</strong></p><p><strong>互连</strong>：是指计算机之间可以通过有线或无线的方式进行数据通信。</p><p>**自治:**是指独立的计算机，它有自己的硬件和软件，可以单独运行使用。</p><p><strong>集合</strong>：是指至少需要两台计算机。</p><p><strong>计算机网络较好的定义是:<strong>计算机网络主要是由一些，</strong>通用的、可编程的硬件互连而成的</strong>，而这些硬件并非专门用来实现某一特定目的(例如传送数据或视频信号)。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类:</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类:</strong></p><ul><li>有线网络</li><li>无限网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个域网PAN</li></ul><p><strong>按拓扑结构分类:</strong></p><ul><li>总线型网络</li><li>星型网络</li><li>环型网络</li><li>网状型网络</li></ul><h2 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h2><ul><li>速率</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211755.png" alt="image-20211129112054273"></p><ul><li>带宽</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211765.png" alt="image-20211129112214632"></p><ul><li>吞吐量<ul><li>吞吐量表示在单位时间内容通过某个网络(或信道、接口)的数据量。</li><li>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或额定速率的限制。</li></ul></li><li>时延</li></ul><p><strong>完成一次通信在路上各个环节所花费的时间。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211798.png" alt="image-20211129113000756"></p><ul><li>时延带宽积</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211997.png" alt="image-20211129113356747"></p><ul><li>往返时间</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211687.png" alt="image-20211129115456122"></p><ul><li><p>利用率</p><ul><li>信道利用率:用来表示某信道有百分之几的时间是被利用的(有数据通过)。</li><li>网络利用率:全网络的信道利用率的加权平均。</li></ul></li><li><p>丢包率</p></li></ul><p>丢包率即分组丢失了率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong>。</p><hr><p>可以分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。</p><hr><p><strong>丢包率反映了网络的拥塞情况。</strong></p><hr><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="常见的计算机网络体系结构"><a href="#常见的计算机网络体系结构" class="headerlink" title="常见的计算机网络体系结构"></a>常见的计算机网络体系结构</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211737.png" alt="image-20211129124036710"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211789.png" alt="image-20211129124212350"></p><h3 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211800.png" alt="image-20211129141336258"></p><h3 id="计算机网络体系结构分层思想举例"><a href="#计算机网络体系结构分层思想举例" class="headerlink" title="计算机网络体系结构分层思想举例"></a>计算机网络体系结构分层思想举例</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211815.png" alt="image-20211129181020328"></p><h3 id="计算机网络体系结构中的准用术语"><a href="#计算机网络体系结构中的准用术语" class="headerlink" title="计算机网络体系结构中的准用术语"></a>计算机网络体系结构中的准用术语</h3><p>来源于OSI七层网络结构，也使用与TCP/IP的四层体系结构和五层原理体系结构。</p><ul><li><p><strong>实体</strong>：任何可发送或接收信息的硬件或软件进程。</p></li><li><p><strong>对等实体</strong>：收发双方相同层次中的实体。</p></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211928.png" alt="image-20211129181319829"></p><hr><ul><li><strong>协议</strong>：控制两个对等实体进行<strong>逻辑通信</strong>规则的集合。  </li></ul><p>之所以称为逻辑通信，是因为真是不存在，提出来是为了方便我们研究其中的某一层而不受其他层干扰。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211611.png" alt="image-20211129182105876"></p><ul><li>协议的三个要素<ul><li>语法:定义所交换信息的格式。(哪些字段，由哪些数据构成)</li><li>语义:定义收发双方所要完成的操作。 </li><li>同步:定义收发双方的时序关系。</li></ul></li></ul><hr><p>  <strong>服务</strong>：</p><ul><li>在协议的控制下，两个对等实体间的逻辑通信使得<strong>本层能够向上一层提供服务</strong>。</li><li>要实现本层协议，还需要使用下面一层所提供的服务。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222222439.png" alt="image-20211129182807008"></p><ul><li>协议是”水平的”，服务是”垂直的”。</li><li>实体看得见相邻下层提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实现是”透明”的。</li></ul><hr><p><strong>服务访问点</strong>：<strong>在同一系统中相邻两层的实体交换信息的逻辑接口，</strong>用于区分不同的服务类型。</p><ul><li>数据链路层的服务区分那个问点为帧的”类型”字段。</li><li>网络层的服务访问点为IP数据报首部中的”协议字段”。</li><li>运输层的服务访问点为”端口号”。</li></ul><hr><p><strong>协议数据单元PDU</strong>:<strong>对等层次之间传送的数据包</strong>称为该层的协议数据单元。(详情如下图所示)</p><p><strong>服务数据单元SDU</strong>:<strong>同一系统内，层与层之间交换的数据包</strong>称为服务数据单元。</p><p><strong>多个SDU可以合成为一个PDU，一个SDU也可以划分为几个PDU。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222220789.png" alt="image-20211129185730334"></p><hr><h1 id="物理层-需要计算"><a href="#物理层-需要计算" class="headerlink" title="物理层(需要计算)"></a>物理层(需要计算)</h1><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><ul><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流。</li><li>物理层为数据链路层屏蔽了各种传输媒体的差异，使<strong>数据链路层只考虑如何完成本层的协议和服务</strong>，而不必考虑网络具体的传输媒体是什么。</li></ul><hr><ul><li>物理层协议的主要任务<ul><li>机械特性:指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置。</li><li>电气特性:指明在接口电缆的各条线上出现的电压的范围。</li><li>功能特性:指明某条线上出现的某一电平的电压表示何种意义。</li><li>过程特性:指明对于不同功能的各种可能事件的出现顺序。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216939.png" alt="image-20211201141002980"></p><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211182.png" alt="image-20211201141357226"></p><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211486.png" alt="image-20211201145814049"></p><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222216356.png" alt="image-20211201150107003"></p><ul><li>码元:(就是构成信号的一段波形)在使用时间域的波形表示数字信号时，<strong>代表不同离散数值的基本波形</strong>。</li></ul><h3 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211524.png" alt="image-20211201151001037"></p><h3 id="基本调制方法"><a href="#基本调制方法" class="headerlink" title="基本调制方法"></a>基本调制方法</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211186.png" alt="image-20211201151153964"></p><p><strong>使用基本调制方法，1个码元只能包含有一个比特信息。</strong></p><h3 id="混合调制"><a href="#混合调制" class="headerlink" title="混合调制"></a>混合调制</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222220788.png" alt="image-20211201151447042"></p><h2 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211303.png" alt="image-20211202190829933"></p><p><strong>失真因素</strong></p><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><p><strong>奈氏准则</strong>：在假定的理想条件下，<strong>为了避免码间串扰，码元传输速率是有上限的。</strong></p><p>理想低通道的最高码元传输速率=2W Baud = 2W码元/秒</p><p>理想带通信道的最高码元传输速率= W Baud = W 码元/秒</p><p><strong>W：信道带宽(单位为Hz)</strong></p><p>Baud: 波特,即码元/秒</p><ul><li><p>码元传输速率又称为波特率、调制速率、波形速率或符号速率。它与比特率有一定关系:</p><ul><li>当1个码元只携带1比特的信息时，则波特率(码元/秒)与比特率(比特/秒)在数值上是相等的；</li><li>当1个码元携带n比特的信息量时，则波特率转换成比特率时，数值要乘以n。</li></ul></li><li><p>要提高信息传输速率(比特率)，就必须设法使每个码元能携带更多个比特的信息量。<strong>这需要才用多元制。</strong></p></li><li><p>实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的这个上限数值。</p></li></ul><hr><p><strong>香农公式</strong>:带宽受限且有高斯白噪声干扰的信道的极限信息传输速率。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217065.png" alt="image-20211202204650304"></p><ul><li>在信道带宽一定的情况下，根据奈氏准则和香农同时，先要提高信息的传输速率就必须采用多元制(更好的调制方法)和努力提高信道中的信噪比。</li><li>自从香农公式发表后，各种新的信号处理和调制方法就不断出现，其目的都是为了尽可能地接近香农公式给出的传输速率极限。</li></ul><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="数据链路层概述"><a href="#数据链路层概述" class="headerlink" title="数据链路层概述"></a>数据链路层概述</h2><p><strong>数据链路层在网络体系结构中所处的地位</strong></p><ul><li>链路(Link)就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。</li><li>数据链路(Data Link)是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217749.png" alt="image-20211203112128150"></p><hr><p><strong>数据链路层的三个重要问题</strong></p><ul><li>封装成帧</li><li>差错检测</li><li>可靠传输:尽管误码是不能完全避免的，但若能实现发送方发送什么，接收方就能收到什么，就成为可靠传输。</li></ul><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><ul><li><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。</p><ul><li>帧头和帧尾中包含有重要的控制信息。</li><li>帧头和帧尾的作用之一就是帧定界。</li></ul></li><li><p>透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。</p><ul><li>面向字节的物理链路使用<strong>字节填充</strong>(或称字符填充)的方法实现透明传输。</li><li>面向比特的物理链路层使用<strong>比特填充</strong>的方法实现透明传输。</li></ul></li><li><p>为了提高帧的传输效率，应当使<strong>帧的数据的长度尽可能大些</strong>。</p></li><li><p>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分长度上限，即<strong>最大传送单元MTU</strong>(Maximum Transfer Unit)。</p></li></ul><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><ul><li>​    实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变为0,0可能变为1.这称为<strong>比特差错</strong>。</li><li>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER</strong>(Bit Error Rate)。</li><li>使用<strong>差错检测码</strong>来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。</li></ul><hr><ul><li>奇偶校验<ul><li>在待发送的数据后面添加1位奇偶校验位，使整个数据(包括所添加的校验位在内)中”1”的个数为奇数(奇校验)或偶数(偶校验)。</li><li>如果有奇数个位发生误码，则奇偶性发生变化，可以检查出误码。</li><li>如果有偶数个位发生误码，则奇偶性不会发生变化，不能检查出误码(漏检); </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211858.png" alt="image-20211203123226725"></p><hr><ul><li>循环冗余校验CRC(Cyclic Redundancy Check)<ul><li>收发双方约定好一个生成多项式G(x);</li><li>发送方<strong>基于待发送的数据和生成多项式</strong>计算出差错检测码(冗余码)，将其添加到待传输数据的后面一起传输；</li><li>接口双方通过生成多项式来计算收到的数据是否产生了误码。</li></ul></li><li>示例:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222217481.png" alt="image-20211203143234819"></p><ul><li>检测码<strong>只能检测</strong>出帧在传输过程中出现了差错，但并不能定位错误，因此<strong>无法纠正错误</strong>。</li><li>想要纠正传输中的差错，可以使用冗余信息更多的纠错码来进行向前纠错。但纠错码的开销比较大，在计算机网络中较少使用。</li><li>循环冗余校验CRC有很好的检错能力(漏检率非常低)，虽然计算比较复杂，但非常有易于用硬件实现，因此被广泛应用于数据链路层。</li><li>在计算机网络中通常采用我们后续课程中将要讨论的<strong>检测重传方式</strong>来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于 数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</li></ul><hr><h2 id="可靠传输的基本概念"><a href="#可靠传输的基本概念" class="headerlink" title="可靠传输的基本概念"></a>可靠传输的基本概念</h2><ul><li>使用差错检测技术(例如循环冗余校验CRC)，接收方的数据链路层就可检测出帧在传输过程中是否产生了误码(比特错误)。</li><li>数据链路层向上层提供的服务类型<ul><li>不可靠传输服务:仅仅丢弃有误码的帧，其他什么也不做；</li><li>可靠传输服务:想办法实现发送端发送什么，接收端就收到什么。</li></ul></li><li>一般情况下，有线链路的误码率比较低，为了减小开销，并不要求数据链路层向上提供可靠传输服务。其实出现了误码，可靠传输的问题由其上层处理。</li><li>无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。</li></ul><hr><ul><li>比特差错只是传输差错中的一种。</li><li>从整个计算机网络体系结构来看，传输差错还包括分组丢失、分组失序以及分组重复。</li><li>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。</li><li><strong>可靠传输服务并不仅局限于数据链路层</strong>，其它各层均可选择实现可靠传输。</li><li>可靠传输的实现比较复杂，开销也比较大，是否使用取决于应用需求。</li></ul><hr><h2 id="三种可靠的传输机制"><a href="#三种可靠的传输机制" class="headerlink" title="三种可靠的传输机制"></a>三种可靠的传输机制</h2><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><p><strong>这三种可靠传输机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中。</strong></p><hr><h2 id="可靠传输的实现机制——停止-等待协议SW-Stop-and-Wait"><a href="#可靠传输的实现机制——停止-等待协议SW-Stop-and-Wait" class="headerlink" title="可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait)"></a>可靠传输的实现机制——停止-等待协议SW(Stop-and-Wait)</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211189.png" alt="image-20211210102758928"></p><p><strong>注意事项</strong>：</p><ul><li><p>接收端检测到数据分组有误码时，将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发送方尽早重传，也可以给发送方发送NAK分组。</p></li><li><p>为了让接收方能够判断所收到的数据分组是否是重复的，需要给数据分组编号。由于停止-等待协议的停等特性，只需1个比特编号就够了，即编号0和1。</p></li><li><p>为了让发送方能够判断所收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用的比特数量一样，数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路成实现停止-等待协议可以不用给ACK分组编号。</p></li><li><p>超级计时器设置的重传时间应仔细选择。一般可将重传时间选为略大于”从发送方到接收方的平均往返时间”。</p><ul><li>在数据链路层点对点的往返时间比较确定，重传时间比较好设定。</li><li>然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易。</li></ul><p><strong>信道利用率</strong></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211702.png" alt="image-20211210104308108"></p></li><li><p><strong>放往返时延RTT远大于数据帧发送时延TD时(例如使用卫星链路)，信道利用率非常低。</strong></p></li><li><p>若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。 </p></li><li><p>为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。</p></li><li><p>像停止等待协议这种通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ，意思是重传的请求时自动进行的。因为不需要接收方显式地请求发送方重传某个出错的分组。</p></li></ul><h2 id="回退N帧协议GBN"><a href="#回退N帧协议GBN" class="headerlink" title="回退N帧协议GBN"></a>回退N帧协议GBN</h2><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211115.png" alt="image-20211210113602913"></p><ul><li><p>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议。</p></li><li><p>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议。</p></li><li><p>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高。</p><h2 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218539.png" alt="image-20211210121720306"></p></li></ul><hr><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li><p>点对点协议PPP(Point-to-Protocol)是目前使用最广泛的点对点数据链路层协议。</p></li><li><p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由一下三部分构成：</p><ul><li>对各种协议数据报的封装方法(封装成帧)</li><li>链路控制协议LCP,用于建立、配置以及测试数据链路的连接</li><li>一套网络控制协议NCPs,其中的每一个协议支持不同的网络协议层</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218070.png" alt="image-20211211103428924"></p><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211200.png" alt="image-20211211103610922"></p><hr><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p><strong>面向字节的异步链路采用插入转义字符的字节填充法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211204.png" alt="image-20211211104001368"></p><ul><li><p><strong>发送方的处理</strong>：        </p><ul><li>出现的每一个7E(PPP帧的定界符)字节转变成2字节序列(7D,5E)。</li><li>出现的每一个7D(转义字符)变成2个字节序列(7D,5D)。</li><li>出现的一个ASCII码控制字符(数值小于0x20的字符)，则在该字符前面插入一个7D字节，同时将该字符的编码加上0x20。</li></ul><p>**接收方的处理:**进行反变换即可恢复出原来的帧的数据部分。</p></li></ul><hr><p><strong>面向比特的同步链路采用插入比特0的比特填充法。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211477.png" alt="image-20211211104627725"></p><p><strong>发送方的处理</strong>:    </p><ul><li>对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1，则立即填充1个比特0。</li></ul><p><strong>接收方的处理</strong>:</p><ul><li>对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1，就把其后的1个比特0删除。</li></ul><hr><h3 id="差错检测-1"><a href="#差错检测-1" class="headerlink" title="差错检测"></a>差错检测</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211771.png" alt="image-20211211104905728"></p><p><strong>接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧;反之，就丢弃这个帧。使用PPP的数据连路程向上不提供可靠传输服务。</strong></p><hr><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218734.png" alt="image-20211211105310989"></p><hr><h2 id="媒体接入控制"><a href="#媒体接入控制" class="headerlink" title="媒体接入控制"></a>媒体接入控制</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>  共享信道要着重考虑的一个问题就是如何协调多个发送和接受站点对 一个共享传输媒体的占用，即 <strong>媒体介入控制MAC</strong>。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211986.png" alt="image-20211218164314679"></p><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的点对点链路和链路层交换机的交换式局域网在有线领域已经完全取代了共享式局域网，但由于无线信道的广播天性，无限局域网仍然使用的是共享媒体技术。</p><hr><h3 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h3><p><strong>信道复用</strong></p><ul><li>复用(Multiplexing)是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。</li><li>当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道充分利用传输媒体的带宽。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218338.png" alt="image-20211218164851100"></p><hr><p><strong>常见的几种信道复用技术</strong></p><ul><li>频分复用FDM</li></ul><p>频分复用的所有用户同时占用不同的频带资源并行通信。</p><ul><li><p>时分复用TDM</p></li><li><p>波分复用WDM</p></li><li><p>码分复用CDM</p></li></ul><hr><p><strong>复用和多址</strong></p><ul><li>复用是将单一媒体的频带资源划分为很多子信道，这些子信道之间相互独立，互不干扰。从媒体的整体频带资源上看，每个子信道只占用该媒体频带资源的一部分。</li><li>多址( 更确切说应该称为多点接入)处理的是动态分配信道给用户。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道用酒地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)。</li><li>某种程度上，FDMA、TDMA、CDMA可以分别看成是FDM、TDM、CDM的应用。</li></ul><hr><h3 id="动态接入控制——随机接入"><a href="#动态接入控制——随机接入" class="headerlink" title="动态接入控制——随机接入"></a>动态接入控制——随机接入</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211324.png" alt="image-20211218171423334"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218915.png" alt="image-20211218171533987"></p><hr><p>CSMA/CD协议——争用期(碰撞窗口)</p><p><strong>CSMA/CD——总线局域网使用的协议</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222218400.png" alt="image-20211218171918314"></p><p>CSMA/CD协议——最小帧长</p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211107.png" alt="image-20211218172022123"></p><ul><li>以太网规定最小帧长为64字节，即521比特(512比特时间为争用期)；<ul><li>如果要发送的数据非常少，那么必须加入一些填充字节，使帧长不小于64字节。</li></ul></li><li>以太网的最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞。<ul><li>如果在争用期(共发送64字节)没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞。</li><li>如果在争用期内检测到碰撞，就立即终止发送，这时已经发送出去的数据一定小于64字节，因此凡长度小于64字节的帧都是由于碰撞而异常中止的无效帧。</li></ul></li></ul><hr><p><strong>CSMA/CD协议——最大帧长</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211272.png" alt="image-20211218180530913"></p><hr><p><strong>CSMA/CD协议——截断二进制指数退避算法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211448.png" alt="image-20211218180755083"></p><ul><li>若连续多次发生碰撞，就表明可能有较多的主机参与竞争信道。但使用上述退避算法可使重传需要推迟的平均时间随重传次数而增大(这也称为动态退避)，因而减小发生碰撞的概率，有利于整个系统的稳定。</li><li>当重传达16次仍不能成功时，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则丢弃该帧，并向高层报告。  </li></ul><hr><p><strong>CSMA/CA——信道利用率</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211459.png" alt="image-20211218181731572"></p><hr><p><strong>CSMA/CD协议——帧发送流程</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211507.png" alt="image-20211218181830509"></p><hr><p><strong>CSMA/CD协议——帧接收流程</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219879.png" alt="image-20211218182110407"></p><hr><h3 id="动态接入控制——随机接入-1"><a href="#动态接入控制——随机接入-1" class="headerlink" title="动态接入控制——随机接入"></a>动态接入控制——随机接入</h3><p><strong>无线局域网使用的协议——CSMA/CA</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211008.png" alt="image-20211218182959628"></p><ul><li> 802.11无线局域网使用CSMA/CA协议，在CSMA的基础上增加了一个碰撞避免CA功能。</li><li> 由于不可能避免所有的碰撞，并且无线信道误码率较高，802.11标准还使用了数据链路层确认机制(停止-等待协议)来保证数据被正确接收。</li><li> 802.11的MAC层标准定义了两种不用的媒体接入控制方式:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211268.png" alt="image-20211218183450872"></p><hr><p><strong>帧间间隔IFS</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219989.png" alt="image-20211218185852871"></p><hr><p><strong>CSMA/CA协议的工作原理</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211554.png" alt="image-20211218190810792"></p><ul><li>当站点检测到信道是空闲的，并且所发送的数据帧不是成功发送完上一个数据帧之后立即连续发送的数据帧，则不使用退避算法。</li><li>以下情况必须使用退避算法<ul><li>在发送数据帧之后检测到信道处于忙状态时；</li><li>在每一次重传一个数据帧时；</li><li>在每一次成功发送后要连续发送下一个帧时(这是为了避免一个站点长时间占用信道。)</li></ul></li></ul><hr><p><strong>CSMA/CA协议的退避算法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219762.png" alt="image-20211218191400390"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222219897.png" alt="image-20211218191646404"></p><hr><p><strong>CSMA/CA协议的信道预约和虚拟载波监听</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211077.png" alt="image-20211218192525693"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211401.png" alt="image-20211218192810615"></p><hr><h2 id="集线器与交换机的区别"><a href="#集线器与交换机的区别" class="headerlink" title="集线器与交换机的区别"></a>集线器与交换机的区别</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205724.png" alt="image-20211224210321350"></p><ul><li>使用集线器的以太网在逻辑上扔是一个总线网，各站共享总线资源，使用的还是CSMA/CD协议；</li><li>集线器只工作在物理层，它的每个接口仅简单地转发比特，不进行碰撞检测(由各站的网卡进行检测)；</li><li>集线器一般都有少量的容错能力和 网络管理功能。例如:若网络中某个网卡出现了故障， 不停的发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然可以正常工作。</li></ul><hr><p>使用集线器HUB在物理层扩展以太网</p><ul><li>以太网交换机</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211947.png" alt="image-20211224213741211"></p><ul><li>以太网交换机通常都有多个接口。每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都工作在全双工方式。</li><li>以太网交换机具有并行性，能同时连通多对接口，使多对主机能同时通信，无碰撞(不使用CSMA/CD协议)。</li><li>以太网交换机一般都具有多种速率的接口 ，例如:10mb/s、100mb/s、1Gb/s、10Gb/s接口的多种组合。</li><li>以太网交换机工作在数据链路层(也包括物理层)，它收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。</li><li>以太网交换机是一种即插即用设备，其内部的帧交换变是通过自学习算法自动地逐渐建立起来的。、</li><li>帧的两种转发方式:<ol><li>存储转发</li><li>直通交换:采用基于硬件的交叉矩阵(交换时延非常小，但不检查帧是否有差错)。</li></ol></li><li><strong>交换机可以隔离碰撞域</strong></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211344.png" alt="image-20211224214219768"></p><ul><li><strong>对比</strong></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211480.png" alt="image-20211224214323467"></p><hr><h2 id="以太网交换机自学习和转发帧的流程"><a href="#以太网交换机自学习和转发帧的流程" class="headerlink" title="以太网交换机自学习和转发帧的流程"></a>以太网交换机自学习和转发帧的流程</h2><ul><li>交换机工作在数据链路层(也包括物理层)</li><li>以太网交换机收到帧后，在帧交换表中查找帧的目的AMC地址所对应的接口号，然后通过该接口转发帧。</li><li>以太网交换机是一种即插即用的设备，<strong>刚上电启动时其内部的帧交换表是空的</strong>。随着网络中各主机间的通信，<strong>以太网交换机通过自学习算法自动主键建立起帧交换表</strong>。 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211548.png" alt="image-20211225223654672"></p><ul><li>每条记录的都有自己的有效时间，到期自动删除，这是因为MAC地址交换机接口的对应关系不是永久性的。</li></ul><hr><h2 id="以太网交换机的生成树协议STP"><a href="#以太网交换机的生成树协议STP" class="headerlink" title="以太网交换机的生成树协议STP"></a>以太网交换机的生成树协议STP</h2><ul><li><p>如何提高以太网的可靠性？</p><ul><li>添加冗余链路可以提高以太网的可靠性，同时也会带来负面效应——形成网络环路。</li><li>网络环路会带来以下问题<ul><li>广播风暴——会大量消耗网络资源，使得网络无法正常转发其他数据帧；主机收到重复的广播帧，大量消耗主机资源；交换机的帧交换表震荡(漂移)。</li></ul></li><li>以太网交换机使用生成树协议STP可以在增加冗余链路来提高网路可靠性的同时又避免网络环路带来的各种问题。<ul><li>不论交换机之间采用怎样的物理连接，交换机都能自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路)；</li><li>最终生成的树型逻辑拓扑要确保连通整个网络；</li><li>当首次链接交换机或网络物理拓扑发生变化时(有可能是认为改变或故障)，交换机都将进行生成树的重新计算。</li></ul></li></ul><hr><h2 id="虚拟局域网VLAN概述"><a href="#虚拟局域网VLAN概述" class="headerlink" title="虚拟局域网VLAN概述"></a>虚拟局域网VLAN概述</h2><ul><li>以太网交换机工作在数据链路层(也包括物理层)</li><li>使用一个或多个以太网交换机互连起来的交换机以台网，其所有站点都属于同一个广播域。  </li><li>随着交换式以太网规模的扩大，广播域相应扩大。</li><li>巨大的广播域会带来很多弊端<ul><li>广播风暴</li><li>难以管理和维护</li><li>潜在的安全问题</li></ul></li></ul><p><strong>广播风暴会浪费网络资源和各主机的CPU资源。</strong></p><ul><li>网络中会频繁使用广播信息<ul><li>TCP/IP协议栈中的很多协议都会使用广播 </li><li>地址解析协议ARP(已知IP地址，找出其相应的MAC地址)</li><li>路由信息协议RIP(一种小型的内部路由协议)</li><li>动态主机配置协议DHCP( 用于自动配置IP地址)</li></ul></li><li>分割广播域的方法<ul><li>使用路由器可以分割广播域</li><li>因为路由器默认情况下不对广播数据包进行转发，因此路由器很自然的就可以隔绝广播域，但是成本比较高，在这种情况下，虚拟局域网孕育而生。</li></ul></li><li>虚拟局域网VLAN(Virtual Local Area Network)是一种将局域网内的设备划分成与物理层位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205310.png" alt="image-20211225230438665"></p><p>也就是说同一个VLAN中可以广播通信，不用 VLAN之间不能广播通信。</p><hr><h2 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222205165.png" alt="image-20211226102813027"></p><ul><li><p>交换机的端口类型有以下三种</p><ul><li><p>Access</p></li><li><p>Trunk</p></li><li><p>Hybrid</p></li></ul></li><li><p>交换机各端口的缺省VLAN ID</p><ul><li>在思科交换机上称为Native VLAN，即本征VLAN。</li><li>在华为交换机上称为Port VLAN ID,即端口VLAN ID，简称PVID。</li></ul></li></ul><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211999.png" alt="image-20211226103845860"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211926.png" alt="image-20211226104126252"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211063.png" alt="image-20211226104534255"></p><hr><h1 id="MAC地址、IP地址以及ARP协议"><a href="#MAC地址、IP地址以及ARP协议" class="headerlink" title="MAC地址、IP地址以及ARP协议"></a>MAC地址、IP地址以及ARP协议</h1><ul><li>MAC地址是以太网的MAC子层所使用的地址；(数据链路层)</li><li>IP地址是TCP/IP体系结构网际层所使用的地址；(网际层)</li><li>ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址所获取到设备的MAC地址；(网际层)</li><li>尽管IP地址和ARP协议属于TCP/IP体系结构的网际层(而不属于数据链路层)，但是它们与MAC地址存在一定的关系，并且我们日常的网络应用都离不开MAC地址 、IP地址以及ARP协议。因此我们将这三者放在一起讨论。</li></ul><hr><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>使用点对点信道的数据链路层不需要使用地址。</p><ul><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识，即一个数据链路层地址；</li><li>在每个主机发送的帧中必须携带标识发送主机和接收主机的地址。由于这类地址是用于媒体接入控制MAC(Media Access Control)，因此这类地址被称为MAC地址。<ul><li>MAC地址一般是被固化在网卡(网络适配器)的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为硬件地址；</li><li>MAC地址有时也被称为物理地址。<strong>请注意:这并不意味着MAC地址属于网络体系结构中的物理层。</strong> (属于数据链路层。)</li></ul></li><li>一般情况下，用户主机会包含两个网络适配器:有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)，每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，<strong>严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各个设备的唯一标识。</strong></li></ul><hr><h3 id="IEEE-802局域网的MAC地址格式"><a href="#IEEE-802局域网的MAC地址格式" class="headerlink" title="IEEE 802局域网的MAC地址格式"></a>IEEE 802局域网的MAC地址格式</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211629.png" alt="image-20211218200923564"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211829.png" alt="image-20211218205055859"></p><hr><h3 id="IEE-802局域网的MAC地址发送顺序"><a href="#IEE-802局域网的MAC地址发送顺序" class="headerlink" title="IEE 802局域网的MAC地址发送顺序"></a>IEE 802局域网的MAC地址发送顺序</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211282.png" alt="image-20211218205624901"></p><p> 字节发送顺序: 第一字节——》第六字节</p><p>字节内的比特发送顺序: b0——》b7</p><hr><h3 id="单播MAC地址举例"><a href="#单播MAC地址举例" class="headerlink" title="单播MAC地址举例"></a>单播MAC地址举例</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211565.png" alt="image-20211218205848042"></p><hr><h3 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h3><p><strong>判断地址是否是多播地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211597.png" alt="image-20211218210629375"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211847.png" alt="image-20211218210751071"></p><h3 id="随机MAC地址"><a href="#随机MAC地址" class="headerlink" title="随机MAC地址"></a>随机MAC地址</h3><p>略……</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>IP地址属于网络层的范畴。</strong></p><ul><li>IP地址是因特网(Internet)上的主机和路由器所使用的地址，用于标识两部分信息:<ul><li>网络编号:标识因特网上数以百万计的网络</li><li>主机编号:标识同一网络上不同主机(或路由器各接口)</li></ul></li></ul><hr><h3 id="从网络体系结构看IP地址与MAC地址"><a href="#从网络体系结构看IP地址与MAC地址" class="headerlink" title="从网络体系结构看IP地址与MAC地址"></a>从网络体系结构看IP地址与MAC地址</h3><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211908.png" alt="image-20211219134730343"></p><p><strong>上层无需看懂上一层的数据结构和内容，只需要添加首部相关信息即可，然后继续交付给下一层。</strong></p><hr><h3 id="数据包转发过程中IP地址与MAC地址的变化情况"><a href="#数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="数据包转发过程中IP地址与MAC地址的变化情况"></a>数据包转发过程中IP地址与MAC地址的变化情况</h3><p>(可以想象成对应层进行水平通信)</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211931.png" alt="image-20211219154029674"></p><ul><li>数据包转发过程中<strong>源IP地址和目的IP地址保持不变</strong>；</li><li>数据包转发过程中<strong>源MAC地址和目的MAC地址逐个链路(或逐个网络)改变</strong>；</li></ul><hr><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><strong>不能跨网路使用</strong>。</p><p>通过ARP协议来通过IP地址找到对应的MAC地址。</p><hr><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><ul><li>网络层的主要任务是实现网络互连，进而实现数据包在各网络之间的传输。</li><li>要实现网络层任务，需要解决以下主要问题:<ul><li>网络层向运输层提供怎样的服务(“可靠传输”还是”不可靠传输”)</li><li>网络层寻址问题</li><li>路由选择问题</li></ul></li><li>因特网(Internet)是目前全世界用户数量最多的互联网，它使用TCP/IP协议栈。</li><li>由于TCP/IP协议栈中的网络层使用网际协议IP，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为网际层。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211550.png" alt="image-20211226105659888"></p><ul><li>综上所述 ，我们通过学习TCP/IP协议栈的网际层来学习网络层的理论知识和实践技术。</li></ul><hr><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><p><strong>面向连接的虚电路服务</strong></p><ul><li>可靠通信由网络来保证</li><li>必须建立网络层的连接——虚电路VC(Virtual Circuit)</li><li>通信双方沿着已建立的虚电路发送分组</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211454.png" alt="image-20211226110019174"></p><ul><li>目的主机的地址仅在连接建立阶段使用,之后每个分组的首部只需要携带一条虚电路的编号(构成虚电路的每一段电路都有一个虚电路编号)。</li><li>这种通信方式如果再使用可靠传输协议的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到到达、不丢失、不重复)。</li><li>通讯结束之后，需要释放之前所建立的虚电路。<ul><li>很多广域分组交换网都使用面向无连接的虚电路服务。例如，曾经的X.25和逐渐过时的帧中继FR，异步传输模式ATM等。</li></ul></li></ul><hr><p><strong>无连接的数据报服务</strong></p><ul><li>可靠通信应由用户主机来保证</li><li>不需要建立网络层链接</li><li>每个分组可走不同的路径</li><li>每个分组的首部必须携带目的主机的完整地址</li><li>这种通信方式所传送的分组可能误码、丢失、重复和失序。</li><li>由于网络本身 不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)。</li><li>因特网采用了这种设计思想，也就是将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)，而将相对简单的尽最大努力的分组交换功能置于因特网核心。、</li><li>采用这种设计思想的好处是，网络的造假大大降低，运行方式灵活，能够适应多种应用。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222200077.png" alt="image-20211226110852595"></p><hr><p><strong>由于TCP/IP体系结构的因特网的网际层提供的是简单灵活、无连接的、尽最大努力交付的数据报服务，因此本章主要围绕网际层如何传送IP数据报这个主题进行讨论。</strong></p><hr><h2 id="IPv4地址概述"><a href="#IPv4地址概述" class="headerlink" title="IPv4地址概述"></a>IPv4地址概述</h2><ul><li>IPv4地址就是给因特网上的每一台主机(或路由器)的每一个接口分配一个在全世界范围内是唯一的32比特的标识符。</li><li>IP地址由因特网名字和数字分配机构ICANN进行分配<ul><li>我国用户可向亚太网络信息中西APNIC申请IP地址，需要缴费，且一般不接受个人申请。</li></ul></li><li>IPv4地址的编址方法经历了如下三个历史阶段:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211054.png" alt="image-20211226111701850"></p><ul><li>32比特的IPv4地址采用点分十进制表示方法以方便用户使用。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211646.png" alt="image-20211226111842336"></p><hr><h2 id="分类编址的IPv4地址"><a href="#分类编址的IPv4地址" class="headerlink" title="分类编址的IPv4地址"></a>分类编址的IPv4地址</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211251.png" alt="image-20211226121806223"></p><p><strong>A类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211314.png" alt="image-20211226123045434"></p><p><strong>B类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211753.png" alt="image-20211226123300052"></p><p><strong>C类地址</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211358.png" alt="image-20211226123642556"></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211367.png" alt="image-20211226124115503"></p><hr><h2 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h2><ul><li>为新增网络申请新的网络号会带来以下弊端<ul><li> 等待需要时间和花费更多的费用</li><li> 会浪费其他路由器中路由表记录的数据</li><li> 浪费原有网络中剩余的大量IP地址</li></ul></li></ul><p><strong>解决办法</strong>:</p><ul><li>从主机号部分借用一部分作为子网号</li><li>32 比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号。<ul><li>子网掩码使用连续的比特1来对应网络号和子网号</li><li>子网掩码使用连续的比特0来对应主机号</li><li>将划分子网的IPv4地址与其相应的子网掩码进行逻辑与运算就可以得到IPv4地址所在子网的网络地址</li></ul></li><li>默认的子网掩码是指在未划分子网的情况下使用的子网掩码 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211195.png" alt="image-20211227134330831"></p><hr><h2 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h2><ul><li>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是数量巨大的C类网因为其地址空间太小并没有得到充分使用，而因特网的IP地址仍在加速消耗，整个IPv4地址空间面临全部消耗的威胁。</li><li>为此，引因特网工程任务组IETF又提出了采用无分类编址的方法来解决IP地址紧张的问题，同时还专门成立IPv6工作组负责研究新版本IP工作组负责研究新版本IP以彻底解决IP地址耗尽问题。</li><li>1993年，IETF发布了五分类域间路由器选择CIDR的RFC文档，RFC 1517 ~ 1519和1520。<ul><li>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念</li><li>CIDR可以更加有效的分配IPv4的地址空间，并且可以在新的IPv6使用之前允许因特网的规模继续增长。</li></ul></li><li>CIDR使用“斜线记法”，或称为CIDR记法。 即在IPv4地址后面加上斜线“/”,在斜线后面写上网络前缀所占的比特数量。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211645.png" alt="image-20211227135904225"></p><ul><li>CIDR实际上是将网络前缀都相同的连续IP地址组成一个”CIDR地址块”。</li><li>我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节；<ul><li>地址块的最小地址</li><li>地址块的最大地址</li><li>地址块中的地址数量</li><li>地址块聚合某类网络(A 类、B类或C类)的数量</li><li>地址掩码(也可继续称为子网掩码)</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/imges/202112271406851.png" alt="image-20211227140637756"></p><hr><h2 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h2><p> <strong>定长的子网掩码LFSM</strong></p><ul><li>使用同一子网掩码来划分子网</li><li>每个子网所分配的IP地址数量相同，造成IP地址的浪费</li><li>子网划分方式不灵活,只能划分出2的n次方个子网(n是从主机号部分借用的用来作为子网号的比特数量)</li></ul><p><strong>变长的子网掩码VLSM</strong></p><ul><li>使用不同的子网掩码来划分子网</li><li>每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</li><li>子网划分方式灵活，可以按需分配。</li></ul><hr><h2 id="IP数据报的发送和转发过程"><a href="#IP数据报的发送和转发过程" class="headerlink" title="IP数据报的发送和转发过程"></a>IP数据报的发送和转发过程</h2><ul><li>IP数据报的发送和转发过程包含以下两个部分<ul><li>主机发送IP数据报</li><li>路由器转发IP数据报</li></ul></li></ul><p><strong>主机发送IP数据报</strong></p><ul><li>判断目的主机是否与自己在同一网络<ul><li>若在同一个网络，则属于直接交付</li><li>若不在同一个网络，则属于间接交付，传输给主机所在网络的默认网关(路由器)，由默认网关帮忙转发。</li></ul></li></ul><p><strong>路由器转发IP数据报</strong></p><ol><li>检查IP数据报首部是否出错    <ul><li>若出错，则直接丢弃该IP数据报并通报源主机；</li><li>若没有出错，则进行转发。</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目<ul><li>若找到匹配条目，则转发给条目中知识的下一跳；</li><li>若找不到，则丢弃该IP数据报并通告源主机。</li></ul></li></ol><hr><h2 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h2><ul><li>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表。<ul><li>这种人工配置方式简单、开销小。但不能及时适应网络状态(流量、拓扑等)的变化。</li><li>一般只在小规模网络中可采用。</li></ul></li><li>使用静态路由配置可能出现一下情况导致产生路由环路的错误<ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul></li><li>路由条目的类型<ul><li>直连网络</li><li>静态路由(人工配置)</li><li>动态路由(路由选择协议)</li></ul></li><li>特殊的静态路由条目<ul><li>默认路由(目的网络为0,0,0,0,地址掩码为0,0,0,0)</li><li>特定主机路由(目的网络为特定主机的IP地址，地址掩码为255,255,255,255)</li><li>黑洞路由(下一条为null0)</li></ul></li></ul><hr><h2 id="路由选择协议概述"><a href="#路由选择协议概述" class="headerlink" title="路由选择协议概述"></a>路由选择协议概述</h2><ul><li><p>静态路由选择</p><ul><li>由人工配置的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。</li><li>这种人工配置方式简单、开销小。但不能即使适应网络状态(流量、拓扑等)的变化。</li><li>一般只在小规模网络中采用。</li></ul></li><li><p>动态路由选择</p><ul><li>路由器通过选协议自动获取路由信息。</li><li>比较复杂、开销比较大。</li><li>适用于大规模网络。</li></ul></li><li><p>因特网所采用的路由选择协议主要特点</p><ul><li>自适应:动态路由选择，能较好地适应网络状态的变化。</li><li>分布式:路由器之间交换路由信息。</li><li>分层次:将整个因特网划分为许多较小的自治系统AS(Autonomous System)</li></ul></li><li><p>常见的路由选择协议</p></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201192033521.png" alt="image-20220119203357327"></p><ul><li>路由器的基本结构</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211656.png" alt="image-20220119203612087"></p><hr><h2 id="路由信息协议RIP的基本工作原理"><a href="#路由信息协议RIP的基本工作原理" class="headerlink" title="路由信息协议RIP的基本工作原理"></a>路由信息协议RIP的基本工作原理</h2><ul><li> 路由信息协议RIP是内部网关协议IGP中最先得到广泛使用的协议之一，其相关标准文档为RFC 1058。</li><li> RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其它每一个网络的距离记录。这是一组距离，称为”距离向量D-V”。</li><li>RIP使用跳数(Hop Count)作为度量(Metric)来衡量到达目的网络的距离。<ul><li>路由器到直连网络的距离定义为1。</li><li>路由器到非直连网络的距离定义为所经过的路由器数加1。</li><li>允许一条路径最多只能包含15个路由器。”距离”等于16时相当于不可达。因此，RIP只适用于小型互联网。</li></ul></li><li> RIP认为好的路由就是”距离短”的路由，也就是所通过路由器数量最少的路由。</li><li> 当到达同一目的网络有多条”距离相等”的路由时，可以进行等价负载均衡。</li><li>RIP包含以下三个要点：<ul><li>和谁交换信息，仅和相邻路由器交换信息</li><li>交换什么信息，自己的路由表</li><li>何时交换信息，周期性交换(例如每30秒)</li></ul></li><li> RIP存在”坏消息传播 “的问题。</li><li>“坏消息传播得慢”又称为路由环路或距离无穷计数问题，这是距离向量算法的一个固有问题。可以采取多种措施减少出现该问题的概率或减小该问题带来的危害。<ul><li>限制最大路径距离为15(16表示不可达)</li><li>当路由表发生变化时就立即发送更新报文(即”触发更新”)，而不仅是周期性发送。</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送(即”水平分割”)</li></ul></li></ul><hr><h2 id="开放最短路径优先OSPF的基本工作原理"><a href="#开放最短路径优先OSPF的基本工作原理" class="headerlink" title="开放最短路径优先OSPF的基本工作原理"></a>开放最短路径优先OSPF的基本工作原理</h2><ul><li>开放最短路径优先OSPF，是为了客服RIP的缺点在1989年开发出来的。<ul><li>“开放”表明OSPF协议不是受某一家厂商控制，而是公开发表的。</li><li>“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF。</li></ul></li><li>OSPF是基于链路状态的，而不像RIP那样是基于距离向量的。</li><li>OSPF采用SPF算法计算路由，从算法上保证了不会产生路由环路。</li><li>OSPF不限制网络规模，更新效率高，收敛速度快。</li><li>链路状态是指本路由器都和哪些路由器相邻，以及相应链路的”代价”(cost)。<ul><li>“代价”用来表示费用、距离、时延、带宽、等等。这些都由网络管理人员来决定。</li></ul></li><li>OSPF相邻路由器之间通过交互问候(Hello)分组，建立和维护邻居关系。<ul><li>Hello分组封装在IP数据报中，发往组广播地址224.0.0.5。</li><li>发送周期为10秒。</li><li>40秒未收到来自邻居路由器的Hello分组，则认为该邻居路由器不可达。</li></ul></li><li>使用OFS的每个路由器都会产生链路状态通告LSA，LAS中包含了以下内容:<ul><li>直连网络的链路状态信息</li><li>邻居路由器的链路状态信息</li></ul></li><li>LSA被封装在链路状态更新分组LSU中，采用洪泛法发送。</li><li>使用OSPF的每个路由器都有一个链路状态数据路LSDB，用于从存储LSA。</li><li>通过各路由器洪泛法送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致。</li><li>使用OSPF的各路由器基于LSDB进行最短路径优先SPF计算，构建出各自到达其他各路由器的最短路径，即构建各自的路由表。</li><li>OSPF有以下五种分组类型。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201200953862.png" alt="image-20220120095314602"></p><ul><li>OSPF的基本工作过程</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211355.png" alt="image-20220120095744314"></p><ul><li>OSPF在多点接入网络中路由器邻居关系的建立<ul><li>选举指定路由器DR和备用的指定路由器BDR</li><li>所有的非DR/BDR只与DR/BDR建立邻居关系表</li><li>非DR/BDR之间通过DR/BDR交换信息</li></ul></li><li>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211410.png" alt="image-20220120100419880"></p><hr><h2 id="边际网关协议BGP的基本工作-原理"><a href="#边际网关协议BGP的基本工作-原理" class="headerlink" title="边际网关协议BGP的基本工作 原理"></a>边际网关协议BGP的基本工作 原理</h2><ul><li>因特网采用分层次的路由选择协议</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211279.png" alt="image-20220120101016898"></p><ul><li>内部网关协议IGP(例如路由信息协议RIP或开放最短路径优先OSPF)<ul><li>设法使分组在一个自治系统内尽可能有效地从开源网络传输到目的网络</li><li>无需考虑自治系统外部其他方面的策略</li></ul></li><li>外部网关协议EGP(例如边界网关协议BGP)<ul><li>在不同的自治系统内，度量路由的”代价”(距离，带宽，费用等)可能不同。因此，对于自治系统之间的路由选择，使用”代价”作为度量来寻找最佳路由是不行的。</li><li>自治系统之间的路由选择必须考虑相关策略(政治，经济，安全等)</li></ul></li><li>在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的”BGP发言人”。<ul><li>在此TCP连接上交换BGP报文以建立BGP会话。</li><li>利用BGP会话交换路由信息(例如，增加新的路由，或撤销过时的路由，以及报告出错的情况。)</li><li>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的邻站或对等站。</li></ul></li><li>BGP发言人除了运行BGP之外，还必须运行自己所在自治系统所使用的内部网关协议IGP，例如OSPF或RIP。</li><li>BGP发言人交换网络可达性的信息(要到达某个网络所要经过的一些系列自治系统)</li><li>当BGP发言人互相交换了网络可达的信息后，各BGP发言人就根据所采用的策略从收到的路由器信息中找出到达各自自治系统的较好的路由。也就是构造出树型结构、不存在回路的自治系统连通图。</li><li>BGP适用于多级结构的因特网</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211666.png" alt="image-20220120110012111"></p><ul><li>BGP-4有以下四种报文<ul><li>OPEN(打开)报文:用来与相邻的另一个BGP发言人建立关系，使通信初始化。</li><li>UPDATE(更新报文):用来通告某一路由的信息，以列出要撤出的多条路由。</li><li>KEEPALIVE(保活)报文:用来周期性地证实邻站的连通性。</li><li>NOTIFICATION(通知)报文:用来发送检测到的差错。</li></ul></li></ul><hr><h2 id="IPv4数据报的首部格式"><a href="#IPv4数据报的首部格式" class="headerlink" title="IPv4数据报的首部格式"></a>IPv4数据报的首部格式</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201256737.png" alt="image-20220120125600629"></p><ul><li>版本</li></ul><p>占4比特，表示IP协议的版本。</p><p>通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4(即IPv4)。</p><ul><li>首部长度</li></ul><p>占4个比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。</p><p>最小十进制取值为5，表示IP数据报首部只有20字节固定部分。</p><p>最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分。</p><ul><li>可选字段</li></ul><p>长度从1字节到40个字节不等。用来支持排错、测量及安全等措施。</p><p>可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。</p><ul><li>填充字段</li></ul><p>确保首部长度为4字节的整数倍。使用全0填充。</p><ul><li>区分服务</li></ul><p>占8比特，用来获得更好的服务。</p><p>该字段在旧标准中叫作服务类型，但实际上一直没有被使用过。</p><p>1998年，因特网工程任务组IETF把这个字段改名为区分服务。</p><p>利用该字段的不同数值可提供不同等级的服务质量。</p><p>只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。</p><ul><li>总长度</li></ul><p>占16比特，表示IP数据报的总长度(首部+数据载荷)。</p><p>最大取值为十进制的65535，以字节为单位。</p><ul><li> 标识</li></ul><p>占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。</p><p>IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。</p><p>与下面两个字段共同用于IP数据报分片。</p><ul><li>标志</li></ul><p>占3个比特， 各比特含义如下:</p><p>DF位:1表示不允许分片，0表示允许分片</p><p>MF位:1表示”后面还有分片”，0表示”这是最后一个分片”</p><ul><li>片偏移</li></ul><p>占13个比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。</p><p>片偏移以8个字节为单位。</p><ul><li>生存周期TT</li></ul><p>占8比特，最初以秒为单位，最大生存周期为255秒；路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。 </p><p>现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。</p><ul><li> 协议</li></ul><p>占8比特，指明IPv4数据报的数据部分是何种协议数据单元。</p><p>常用的一些协议和相应协议字段值如下。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211532.png" alt="image-20220120133158792"></p><p>例如:</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201332349.png" alt="image-20220120133245278"></p><ul><li>首部检验和</li></ul><p>占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和。</p><p>IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段(生存时间、标志、片偏移等)的取值可能发生变化。</p><p>由于IP层本身并不提供可靠传输的服务，并且计算首部校验和是一项耗时的操作，因此在IPv6中，路由器不再计算首部校验和，从而更快转发IP数据报。</p><ul><li> 源IP地址和目的IP地址</li></ul><p>各占32比特，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址。</p><hr><h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><ul><li>为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)。</li><li>主机或路由器使用ICMP来发送差错报告报文和询问的报文。</li><li>ICMP报文被封装在IP数据报中发送。</li><li>ICMP差错报告报文共有以下5种:<ul><li>终点不可达<ul><li>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。具体可再根据ICMP的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。</li></ul></li><li>源点抑制<ul><li>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。</li></ul></li><li>时间超过<ul><li>当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。若结构不为0，则将该IP数据报转发出去；若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文。</li><li>另外，当终点在预先规定的时间内不能收到一个数据报的全部报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。</li></ul></li><li>参数问题<ul><li>当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码，就丢弃该数据报，并向源点发送参数问题报文。</li></ul></li><li>改变路由(重定向)<ul><li>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更改好的路由)。</li></ul></li></ul></li><li>以下情况不应发送ICMP差错报告报文:<ul><li>对ICMP差错报告不再发送ICMP差错报告报文</li><li>对第一个分片的数据数据报片的所有后序数据报片都不发送ICMP差错报告报文</li><li>对具有多播地址的数据报都不发送ICMP差错报告报文</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告</li></ul></li><li>常见的ICMP询问报文有以下两种:<ul><li>回送请求和回答:ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。这种询问报文用来测试目的站是否可达及了解其有关状态。</li><li>时间戳请求和回答:ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从1900年1月1日起到当前时刻一共有多少秒。这种询问报文用来进行时钟同步和测量时间。</li></ul></li><li>ICMP应用举例<ul><li>分组网间探测PING(Packet InterNet Groper)<ul><li>用来测试主机或路由器间的连通性</li><li>应用层直接使用网际层的ICMP(没有通过运输层的TCP或UDP)</li><li>使用ICMP回送请求和报文回答</li></ul></li><li>跟踪路由(traceroute)<ul><li>用来测试IP数据报从源主机到达目的主机要经过哪些路由器</li><li>Windows版本<ul><li>tracert命令</li><li>应用层直接使用网际层ICMP</li><li>使用了ICMP回送请求和回答报文以及差错报告报文。</li></ul></li><li>Unix版本<ul><li>traceroute命令</li><li>在运输层使用UDP协议</li><li>仅使用ICMP差错报告报文</li></ul></li></ul></li></ul></li></ul><hr><h2 id="虚拟专用网VPN与网络地址转换NAT"><a href="#虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="虚拟专用网VPN与网络地址转换NAT"></a>虚拟专用网VPN与网络地址转换NAT</h2><ul><li>虚拟专用网VPN(Virtual Private Network)</li></ul><p>利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称虚拟专用网。由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往小于本机构所拥有的主机数量。因此，虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址，而不是需要申请的、在因特网上使用的公有地址。</p><p>如下图所示，同一个机构内不同部门的内部网络所构成的虚拟专用网VPN又称为内联网VPN。</p><p>有时一个机构的VPN需要有某些外部机构(通常就是合作伙伴)参加进来。这样的VPN就称为外联网VPN。</p><p>在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。这种VPN称为远程接入VPN。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201201702232.png" alt="image-20220120170254113"></p><ul><li>网络地址转换NAT(Network Address Translation)</li></ul><p>虽然因特网采用了无分类编制方式来减缓IPv4地址空间耗尽的速度，但由于因特网用户数目的激增，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，IPv4地址空间即将面临耗尽的危险仍然没有被解除。</p><p>1994年提出了一种网络地址转换NAT的方法再次缓解了IPv4地址空间即将耗尽的问题。</p><p>NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。</p><p>由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。</p><p>这样，用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。这种将端口和IP地址一起进行转换的技术叫做NAPT(Network Address and Port Translation)。</p><p> 对于一些P2P网络应用，需要外网主机主动与内网主机进行通信，在通过NAT时会遇到问题，需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。</p><p>另外，由于NAT对外网屏蔽了内网主机的网络地址，能为内网主机提供一定的安全保护。</p><hr><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><ul><li>计算机网络体系中的物理层、数据链路层以及网络层它们共同解决了将主机通过异构网络互联起来所面临的问题，<strong>实现了主机到主机的通信</strong>。</li><li>但实际上在计算机网络中进行通信的真正实体是位于通信两端主机中的进程。</li><li><strong>如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务，运输层协议又称为端到端协议。</strong> </li></ul><p><strong>运输层直接为应用进程间的逻辑通信提供服务。</strong></p><p>运输层向高层用户屏蔽了下面网络核心的细节(如网络拓扑、所采用的路由选择协议等)，它使应用进程看见的就好像在两个运输层实体之间有一条端到端的逻辑通信信道。</p><p>根据应用需求的不同，因特网的运输层为应用层提供了两种不同的运输协议，即面向连接的TCP和面向无连接的UDP。  </p><hr><h2 id="运输层端口号、复用与分用的概念"><a href="#运输层端口号、复用与分用的概念" class="headerlink" title="运输层端口号、复用与分用的概念"></a>运输层端口号、复用与分用的概念</h2><ul><li>运行在计算机上的进程使用进程标识符PID来标志。</li><li>因特网上的计算机并不是统一的操作系统，不同的操作系统又使用不同格式的进程标识符。</li><li>为了使运行不同操作系统的计算机的应用进程之间能够进行网络通信，就必须使用统一的方法对TCP/IP体系的应用进程之间进行标识。</li><li>TCP/IP体系的运输层使用端口号来区分应用层的不同应用进程。<ul><li>端口号使用16比特来表示，取值范围0~65535<ul><li>熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如：FTP使用21/20，HTTP使用80，DNS使用53。</li><li>登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如：Microsoft RDP微软远程桌面使用端口3389。</li><li>短暂端口号:49152~65535,留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li></ul></li><li>端口号只具有本地意义，即端口号知识为了标识本计算机的应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。</li></ul></li><li>发送方的复用和接收方的分用</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211744.png" alt="image-20220121105513721"></p><ul><li>TCP/IP体现的应用层常用协议所使用的运输层熟知端口号。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211662.png" alt="image-20220121105632816"></p><hr><h2 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h2><ul><li>UDP和TCP是TCP/IP体系结构运输层中的两个重要协议。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211887.png" alt="image-20220121110338706"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211085.png" alt="image-20220121120948641"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211207.png" alt="image-20220121121305265"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211004.png"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121121824930.png" alt="image-20220121121824930"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211294.png" alt="image-20220121143745015"></p><p><strong>总结：</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121143837490.png"></p><hr><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><ul><li>一般来说，我们总是希望数据传输的快一点。<ul><li>但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</li></ul></li><li>所谓流量控制(flow control)就是让发送方的发送速率不要太快，要让接收方来得及接收。</li><li>利用<strong>滑动窗口机制</strong>可以很方便地在TCP连接上实现对发送方的流量控制。<ul><li>TCP接收方利用自己的接收窗口的大小来限制发送方发送窗口的大小。</li><li>TCP发送方收到接收方的零窗口通知后，应启动持续计时器。持续计时器超时后，向接收方发送零窗口探测报文。</li></ul></li></ul><hr><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><ul><li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。这种情况就叫做拥塞。<ul><li>在计算机网络中的链路容量(即带宽)、交换结点中的缓存和处理机等，都是网络的资源。</li></ul></li><li>若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降。</li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211875.png" alt="image-20220121154141570"></p><p><strong>TCP四种拥塞控制算法</strong></p><p>假定如下条件:</p><ol><li>数据是单方向传送，而另一个方向只传送确认。</li><li>接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定。</li><li>以最大报文段MSS的个数为讨论问题的单位，而不是以字节为单位。</li></ol><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211310.png" alt="image-20220121154528835"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211868.png" alt="image-20220121155107915"></p><ul><li>慢开始和拥塞避免算法是1988天提出的TCP拥塞控制算法(TCP Tahoe版本)。</li><li>1990年又增加了两个新的拥塞控制算法(改进TCP的性能)，这就是快重传和快恢复(TCP Reno版本)<ul><li>有时个别报文段会在网络中丢失，但实际上网络并未发生拥塞。<ul><li>这将导致发送方超时重传，并误认为网络发生了拥塞；</li><li>发送方把拥塞窗口cwnd又设置为最小值1，并错误地启动慢开始算法，因而降低了传输效率。</li></ul></li></ul></li><li>采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。</li><li>所谓快重传，就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传。<ul><li>要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认。</li><li>即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。</li><li>发送方一旦收到了3个连续的重复确认，就将相应的报文段立即重传，而不是等待该报文段的超时重传计时器超时再重传。</li><li>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞(进而降低拥塞窗口cwnd为11)。使用快重传可以使整个网络的吞吐量提高约20%。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211987.png" alt="image-20220121161125618"></p><ul><li>发送方一旦接收3个重复确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法。<ul><li>发送方将慢开始门限ssthresh值和拥塞窗口值调整为当前窗口的一半；开始执行拥塞避免算法。</li><li>也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些，即等于新的ssthresh+3。<ul><li>既然发送方收到3个重复的确认，就表明有3个数据报文已经离开了网络；</li><li>这3个报文段不再小号网络资源而是停留在接收方的接受缓存中；</li><li>可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些。</li></ul></li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211405.png" alt="image-20220121161846216"></p><hr><h2 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h2><ul><li>超时重传时间的选择是TCP最复杂的问题之一</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211706.png" alt="image-20220121173233822"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211160.png" alt="image-20220121173348663"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121173551734.png" alt="image-20220121173551734"></p><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121173707202.png" alt="image-20220121173707202"></p><hr><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ul><li>TCP基于以字节为单位的滑动窗口来实现</li></ul><p><strong>发送方个各部分解释</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121174734786.png" alt="image-20220121174734786"></p><p><strong>如何描述发送窗口的状态?</strong><br><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211148.png" alt="image-20220121174906895"></p><p><strong>接收方各部分解释</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211531.png" alt="image-20220121175530759"></p><hr><ul><li>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接受窗口一样大。 <ul><li>网络传送窗口值需要经历一定的时间滞后，并且这个时间还是不确定的。</li><li>发送方还可能根据网路当时的拥塞情况适当减小自己的发送窗口尺寸。</li></ul></li><li>对于不按序到达的数据应如何处理，TCP并无明确规定。  <ul><li>如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样对网络资源的利用不利，因为发送方会重复传送较多的数据。</li><li>TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li></ul></li><li>TCP要求接收方必须有积累确认和捎带确认机制，这样可以减小传出开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送的时候把确认信息顺便捎带上。<ul><li>接收方不应过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。<ul><li>TCP标准规定，确认推迟的时间不应超过0.5秒。若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认[RFC 1122]</li><li>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</li></ul></li></ul></li><li><strong>TCP的通信是全双工通信</strong>。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时，一定要弄清是哪一方的窗口。</li></ul><hr><h2 id="TCP的运输连接管理——TCP的连接建立"><a href="#TCP的运输连接管理——TCP的连接建立" class="headerlink" title="TCP的运输连接管理——TCP的连接建立"></a>TCP的运输连接管理——TCP的连接建立</h2><ul><li>TCP是面向连接的协议，它基于运输连接来传送TCP报文段。</li><li>TCP运输连接的建立和释放是每一次面向连接的通信中必不可少的过程。</li><li>TCP运输连接有以下三个阶段:<ol><li>建立TCP连接</li><li>数据传送</li><li>释放TCP连接</li></ol></li><li>TCP的运输连接管理就是使运输连接的建立和释放都能正常地进行。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211495.png" alt="image-20220121195406514"></p><ul><li>TCP的连接过程建立要解决以下三个问题:<ul><li>使TCP双方能够确知对方的存在；</li><li>使TCP双方能够协商一些参数(如:最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等)；</li><li>使TCP双方能够对运输实体资源(如:缓存大小、连接表中的项目等)进行分配。</li></ul></li><li>TCP使用”三报文握手”建立连接</li></ul><p><strong>将TCP建立连接的过程比喻为”握手”。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121225849023.png" alt="image-20220121225849023"></p><p><strong>注意:</strong></p><ol><li>TCP的标准规定，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</li><li>TCP的标准规定，普通的确认报文段如果不携带数据，则 不消耗序号。</li></ol><hr><h2 id="TCP的运输连接管理——TCP的连接释放"><a href="#TCP的运输连接管理——TCP的连接释放" class="headerlink" title="TCP的运输连接管理——TCP的连接释放"></a>TCP的运输连接管理——TCP的连接释放</h2><ul><li>TCP通过”四报文挥手”来释放连接</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211307.png" alt="image-20220122110727990"></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211240.png" alt="image-20220122110816636"></p><ul><li>TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动保活计时器(2小时定时)。</li><li>若保活计时器定时周期未收到TCP客户进程发来的数据，则当保活计时器到时后，TCP服务器进程就向TCP客户进程发送一个探测报文段，以后则每个75秒发送一次。若发送10个探测报文段后仍无TCP客户进程的响应，TCP服务器进程就认为TCP客户进程所在主机出了故障，接着就关闭这个连接。</li></ul><hr><h2 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h2><ul><li>为了实现可靠传输，TCP采用了面向字节流的方式。</li><li>但TCP在发送数据时，是从发送缓存中去除一部分或全部自己并给其添加一个首部使之成为TCP报文段后进行发送。<ul><li>一个TCP报文段由首部和数据载荷两部分构成。</li><li>TCP的全部功能都体现在它首部中各字段的作用。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211719.png" alt="image-20220122111430437"></p><p><strong>TCP报文段的首部格式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211728.png" alt="image-20220122111459273"></p><ul><li><p>源端口:占16比特，写入源端口号，用来标识发送该TCP报文段的应用进程。</p></li><li><p>目的端口号:占16比特，写入目的端口号，用来标识接收该TCP报文段的应用进程。</p></li><li><p>序号:占32比特，取值范围[0,2的32次方-1]，序号增加到最后一个后，下一个序号就又回到0。</p><ul><li>指出本TCP报文段数据载荷的第一个字节的序号。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221119697.png" alt="image-20220122111941601"></p></li><li><p>确认号:占32比特，取值范围[0,2的32次方-1]，确认号增加到最后一个后，下一个确认号就又回到0。</p><ul><li>指出期望收到对方下一个TCP报文段的数据的第一个字节的序号，同时也是对之前收到的所有数据的确认。</li><li>若确认好为n,则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据。</li></ul></li><li><p>确认标志位ACK:取值为1时确认号字段才有效；取值为0时确认号字段无效。</p></li><li><p>数据偏移:占4比特，并以4字节为单位。</p><ul><li>用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远。</li><li>这个字段实际上是指出了TCP报文段的首部长度。<ul><li>首部固定长度为20字节，因此数据偏移字段的最小值为0101(2进制)。</li><li>首部最大长度为60字节，因此数据偏移字段的最大值为1111(2进制)。</li></ul></li></ul></li><li><p>保留字段:占6比特，保留为今后使用，但目前应置为0。</p></li><li><p>窗口:占16比特，以字节为单位。指出发送本报文段的一方的接受窗口。</p><ul><li>窗口值作为接收方让发送方设置其发送窗口的依据。 </li><li>这是以接受方的接收能力来控制发送方的发送能力，称为流量控制。</li></ul></li><li><p>校验和:占16比特，检查范围包括TCP报文段的首部和数据载荷两部分。</p><ul><li>在计算校验和时，要在TCP报文段的前面加上12字节的伪首部。</li></ul></li><li><p>同步标志位SYN：在TCP连接建立时用来同步序号。</p></li><li><p>终止标志位FIN:用来释放TCP连接。</p></li><li><p>复位标志位RST:用来复位TCP连接。</p><ul><li>当RST=1时，表明TCP连接出现了异常，必须释放连接，然后再重新建立连接。</li><li>RST置1还用来拒绝一个非法的报文段或拒绝打开一个TCP连接。</li></ul></li><li><p>推送标志位PSH:接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p></li><li><p>紧急标志位URG:取值为1时紧急指针字段有效；取值为0时紧急指针字段无效。</p></li><li><p>紧急指针:占16比特，以字节为单位，用来指明紧急数据的长度。</p><ul><li>当发送方有紧急数据时，可将紧急数据插队到发送缓存的最前面，并立刻封装到一个TCP报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据。</li></ul></li><li><p>选项(长度可变)字段</p><ul><li>最大报文段长度MSS选项:TCP报文段数据载荷部分的最大长度。</li><li>窗口扩大选项:为了扩大窗口(提高吞吐率)。</li><li>时间戳选项：<ul><li>用来计算往返时间RTT</li><li>用于处理序号超范围的情况，又称为防止序号绕回PAWS。</li></ul></li></ul></li><li><p>填充字段:</p><ul><li>由于选项的长度可变，因此使用填充来确保报文段首部能被4整除(因为数据偏移字段，也就是首部长度字段，是以4字节为单位的)。</li></ul></li></ul><hr><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211179.png" alt="image-20220122132028215"></p><ul><li>应用层是计算机网路体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分。<ul><li>早起基于文本的应用(电子邮件、远程登录、文件传输、新闻组)</li><li>20世纪90年代将因特网带入千家万户的万维网WWW</li><li>当今流行的即时通信、P2P文件共享及各种音视频应用</li><li>计算设备的小型化和”无处不在”，宽带住宅接入和无线接入的日益普及和迅速发展，为未来更多的新型应用提供了广阔的舞台。</li></ul></li></ul><hr><h2 id="客户-服务器方式-C-S方式-和对等方式-P2P方式"><a href="#客户-服务器方式-C-S方式-和对等方式-P2P方式" class="headerlink" title="客户/服务器方式(C/S方式)和对等方式(P2P方式)"></a>客户/服务器方式(C/S方式)和对等方式(P2P方式)</h2><ul><li>网络应用程序运行在处于网络边缘的不同的端系统上，通过彼此间的通信来共同完成某项任务。</li><li>开发一种新的网络应用首先要考虑的问题就是网络应用程序在各种端系统上的组织方式和它们之间的关系。目前流行的主要有一下两种:<ul><li>客户/服务器(Client/Server,C/S)方式</li><li>对等(Peer-to-Peer，P2P)方式</li></ul></li><li>客户/服务器方式<ul><li>客户和服务器是指通信中所涉及的两个应用进程。</li><li>客户/服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务请求方，服务器是服务提供方。</li><li>服务器总是处于运行状态，并等待客户的服务请求。服务器具有固定端口号(例如HTTP服务器的默认端口号为80)，而运行服务器的主机也具有固定的IP地址。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221554415.png" alt="image-20220122155410294"></p><ul><li>C/S方式是因特网上传统的、同时也是最成熟的方式，很多我们熟悉的网络应用采用的都是C/S方式。包括万维网WWW、电子邮件、文件传输FTP等。</li><li>基于C/S方式的应用服务通常是服务集中型的，即应用服务集中在网络中比客户计算机少得多的服务器计算机上。<ul><li>由于一台服务器计算机要为多个客户机提供服务，在C/S应用中，常会出现服务器计算机跟不上众多客户机请求的情况。</li><li>为此，在C/S应用中，常用计算机集群(或服务器场)构建一个强大的虚拟服务器。</li></ul></li><li>对等方式<ul><li>在P2P方式中，没有固定的服务请求者和服务提供者，分部在网络边缘的各端系统中的应用进程是对等的，被称为对等方。对等方相互之间直接通信，每个对等方既是服务的请求者，又是服务的提供者。</li></ul></li><li>目前，在因特网上流行的P2P应用主要包括P2P文件共享、即时通信。P2P流媒体、分布式存储等。</li><li>基于P2P的应用是服务分散型的，因为服务不是集中在少数几个服务器计算机中，而是分部在大量对等计算机中，这些计算机并不为服务提供商所有，而是为个人控制的桌面计算机和笔记本电脑，它们通常位于住宅、校园和办公室中。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221602031.png" alt="image-20220122160212877"></p><ul><li>P2P方式的最突出特性之一就是它的可扩展性。因为系统每增加一个对等方，不仅增加的是服务的请求者，同时也增加了服务的提供者，系统性能不会因规模的增大而降低。</li><li>P2P方式具有成本上的优势，因为它通常不需要庞大的服务器设施和服务器带宽。为了降低成本，服务提供商对于将P2P方式用于应用的兴趣越来越大。</li></ul><hr><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><ul><li>DHCP的作用<ul><li>动态主机配置协议DHCP提供了一种机制，称为即插即用连网。这种机制允许一台计算机加入新网络时可自动获取IP地址等网络配置信息，而不用手工参与。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211039.png"></p><ul><li>DHCP的工作过程 </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211953.png" alt="image-20220122162618095"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211300.png" alt="image-20220122162011727"></p><ul><li>DHCP中继代理<ul><li>在每一个网络上都设置一个DHCP服务器会使DHCP服务器的数量太多。因此现在是使每一个网络至少有一个DHCP中继代理(通常是一台路由器)，它配置了DHCP服务器的IP地址信息，作为各网络中计算机与DHCP服务器的桥梁。</li></ul></li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211628.png" alt="image-20220122162136764"></p><hr><h2 id="域名系统DNS-Domain-Name-System"><a href="#域名系统DNS-Domain-Name-System" class="headerlink" title="域名系统DNS(Domain Name System)"></a>域名系统DNS(Domain Name System)</h2><ul><li>域名系统DNS的作用  </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221630519.png" alt="image-20220122163005418"></p><p><strong>因特网是否可以只使用一台DNS服务器？</strong></p><p>这种做法并不可取。因为因特网的规模很大， 这样的又名服务器很定会因为超负荷而无法正常工作，而且一旦域名服务器出现故障，整个因特网就会瘫痪。</p><p>早在1983年，因特网就开始采用层次结构的命名树作为主机的名字(即域名)，并使用分布式的域名系统DNS。</p><p>DNS使大多数域名都在本地解析，仅少量解析需要在因特网上通信，因此系统效率很高。</p><p>由于DNS是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行。</p><ul><li>因特网采用层次树状结构的域名结构</li><li>域名的结构由若干个分量组成，各分量之间用”点”隔开，分别代表不同级别的域名。<ul><li>例如:……三级域名.二级域名.顶级域名</li><li>每一级的域名都由英文字母和数字组成，不超过63个字符，不区分大小写字母。</li><li>级别最低的域名写在最左边，而级别最高的顶级域名写在最右边。</li><li>完整的域名不超过255个字符。</li></ul></li><li>域名系统既不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。</li><li>各级域名由其上一级的域名管理机构管理，而最高的顶级域名则是由因特网名称与数字地址分配机构ICANN进行管理。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211132.png" alt="image-20220122164141563"></p><p><strong>举例:因特网的域名空间</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211306.png" alt="image-20220122164339259"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211249.png" alt="image-20220122164622233"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211171.png" alt="image-20220122164848121"></p><ul><li>为了提高DNS的查询效率，并减轻根域名服务器的负荷和减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存，高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。</li><li>由于域名到IP地址的映射关系并不是永久不变，为保持高速缓存表中的内容正确， 域名服务器应为每项内容设置计时器并删除超过合理时间的项(例如，每个项目只存放两天)。</li><li>不但在本地域名服务器中需要高速缓存，在用户主机中也很需要。许多用户主机在启动时从本地域名服务器下载域名和IP地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到域名时才向域名服务器查询。同理，主机也需要保持高速缓存中内容的正确性。</li></ul><hr><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><ul><li>将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即文件传送。</li><li>文件传送协议FTP是因特网上使用最广泛的文件传送协议。<ul><li>FTP提供交互式的访问， 允许客户指明文件的类型与格式(如指明是否使用ASCII码),并允许文件具有存取权限(如访问文件的用户必须经过授权，并输入有效的口令)。</li><li>FTP屏蔽了各计算机系统的细节，因而适用于在异构网络中任意计算机之间传送文件。</li></ul></li><li>在因特网发展的早期阶段，用FTP传送文件约占整个因特网的通信量的三分之一，而由电子邮件和域名系统所产生的通信量还要小于FTP所产生的通信量。只是到了1995年，万维网WWW的通信量才首次超过FTP。</li><li>FTP的常见用途是在计算机之间传输文件，尤其是用于批量传输文件。</li><li>FTP的另一个常见用途是让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器。</li><li>FTP的基本工作原理  </li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211857.png" alt="image-20220122185645526"></p><hr><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211814.png" alt="image-20220122185843732"></p><ul><li>电子邮件系统采用客户/服务器方式；</li><li>电子邮件系统的三个主要组成构建：用户代理，邮件服务器，以及电子邮件所需的协议。<ul><li>用户代理是用户与电子邮件系统的接口，又称为电子邮件客户端软件。</li><li>邮件服务器是电子邮件系统的基础设施，因特网上所有的LSP都有邮件服务器，其功能是发送和接收邮件，同时还要负责维护用户的邮箱。</li><li>协议包括邮件发送协议(例如SMTP)和邮件读取协议(例如POP3,IMAP)。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211826.png" alt="image-20220122190900927"></p><ul><li>简单的邮件传送协议SMTP的基本工作原理</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221912329.png" alt="image-20220122191220999"></p><ul><li>电子邮件的信息格式并不是SMTP定义的，而是在RFC 822中单独定义的。这个RFC文档已在2008年更新为RFC 5322。一个电子邮件有信封和内容两部分。而内容又由首部和主体两部分构成。 </li></ul><p> <img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211490.png" alt="image-20220122191606512"></p><ul><li>SMTP协议只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。</li><li>SMTP不能满足传送多媒体邮件(例如带有图片、音频或视频数据)的需要。并且许多其他非英语国家的文字(例如中文、俄文、甚至带有重音符号法文或德文)也无法用SMTP传送。</li><li>为了解决SMTP传送非ASCII码文本的问题，提出了多用途因特网邮件扩展MIME。<ul><li>增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息。</li><li>定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。</li><li>定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。 </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221925613.png" alt="image-20220122192558527"></p><ul><li>实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP。</li></ul><hr><ul><li>常用的邮件读取协议有以下两个:<ul><li>邮局协议POP，POP3是其第三个版本，是因特网正式标准。<ul><li>POP3非常简单、功能有限的有限读取协议。用户只能以下载并删除方式或下载并保留方式从邮件服务器下载邮件到用户方计算机。不允许用户在邮件服务器上管理自己的邮件。(例如创建文件夹，对邮件进行分类管理等)。</li></ul></li><li>因特网邮件访问协议IMAP,IMAP4是其第四个版本，目前还只是因特网建议标准。 <ul><li>IMAP4功能比POP3强大的邮件读取协议。用户在自己的计算机上就可以操控邮件服务器中的邮件，就像在本地操控一样，因此IMAP是一个联机协议。</li></ul></li><li>POP3和IMAP4都采用基于TCP连接的客户/服务器方式。POP3使用熟知端口110，IMAP4使用熟知端口143。</li></ul></li></ul><hr><ul><li>基于万维网的电子邮件<ul><li>通过浏览器登录(提供用户名和口令)邮件服务器万维网网站就可以撰写、收发。阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。</li><li>邮件服务器网站通常都提供非常强大和方便的邮件管理功能，用户可以在邮件服务器网站上管理和处理自己的邮件，而不需要将邮件下载到本地进行管理。</li><li>这种工作模式在用户浏览器与邮件服务器之间使用HTTP协议，而邮件服务器之间使用SMTP协议。</li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221941760.png" alt="image-20220122194155654"></p><hr><h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201221948654.png" alt="image-20220122194840548"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211104.png" alt="image-20220122201959631"></p><ul><li>浏览器最重要的部分是渲染引擎，就是浏览器内核。负责对网页内容进行解析和显示。<ul><li>不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里显示的效果可能不同；</li><li>网页编写者需要在不同内核的浏览器中测试网页显示效果 。</li></ul></li><li>为了方便地访问在世界范围的文档，万维网使用同一资源定位符URL来指明因特网上任何种类”资源”的位置。</li><li>URL的一般形式由以下四个部分组成:</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211563.png" alt="image-20220122203154458"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211372.png" alt="image-20220122203357702"></p><ul><li>超文本传输协议HTTP</li></ul><p>HTTP定义了浏览器(即万维网客户进程)怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211202.png" alt="image-20220122203829928"></p><ul><li>HTTP/1.0采用非持续连接方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立TCP连接，当收到相应后就立即关闭连接。<ul><li>每请求一个文档就要两倍的RTT的开销。若一个网页上有多个引用对象(例如图片等)，那么请求每个对象都需要花费2RTT的时间。</li><li>为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重。 </li></ul></li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211566.png" alt="image-20220122204320755"></p><ul><li>HTTP/1.1采用持续连接方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一客户(浏览器)和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。<ul><li>为了进一步提高效率，HTTP/1.1的持续连接还可以使用流水线方式工作，即浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。</li></ul></li><li>HTTP的报文格式</li></ul><p>HTTP是面向文本的，其报文中的每一个字段都是一些ASCII码串，并且每个字段的长度都是不确定的。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211012.png" alt="image-20220122205332275"></p><p><strong>HTTP请求报文支持以下方法</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211164.png" alt="image-20220122205414486"></p><p><strong>HTTP相应报文格式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222057665.png" alt="image-20220122205705564"></p><p><strong>相应报文中常见的状态行</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211483.png" alt="image-20220122205728780"></p><ul><li>使用Cookie在服务器上记录用户信息</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211197.png" alt="image-20220122210035934"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222100496.png"></p><ul><li>万维网缓存与代理服务器</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201222211361.png" alt="image-20220122210538427"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;相关视频&lt;/strong&gt;——&lt;a href=&quot;https://www.bilibili.com/video/BV1c4411d7jb?p=1&quot;&gt;计算机网络微课堂（有字幕无背景音乐版）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://doraemon-hub-art.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="-计算机网络" scheme="https://doraemon-hub-art.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>PicGo+Gitee搭建图床的注意事项</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/21/PicGo-Gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/21/PicGo-Gitee%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2022-01-21T03:51:00.000Z</published>
    <updated>2022-01-21T04:08:07.174Z</updated>
    
    <content type="html"><![CDATA[<p>刚才想把Gitee图床换成Github来托管，无奈失败了，加上Gitee访问速度更快一些，那就不瞎搞了，随便写一下，具体的搭建过程还请见其他作者的教程。</p><p>我选的是这个插件。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121115416330.png"></p><p>owner只包括你的Gitee用户名，<strong>repo只包括你的仓库名</strong>，具体的名字从链接里面看，例如:</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120449631.png" alt="image-20220121120449631"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121115520221.png" alt="image-20220121115520221"></p><p>我的Typora设置。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120054032.png" alt="image-20220121120054032"></p><p>粘贴图片会自动上传到Gitee中，并且弹出”上传完成的提示”。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/image-20220121120152543.png" alt="image-20220121120152543"></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚才想把Gitee图床换成Github来托管，无奈失败了，加上Gitee访问速度更快一些，那就不瞎搞了，随便写一下，具体的搭建过程还请见其他作者的教程。&lt;/p&gt;
&lt;p&gt;我选的是这个插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/</summary>
      
    
    
    
    <category term="计算机" scheme="https://doraemon-hub-art.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="-Pic" scheme="https://doraemon-hub-art.github.io/tags/Pic/"/>
    
    <category term="-Gitee" scheme="https://doraemon-hub-art.github.io/tags/Gitee/"/>
    
    <category term="-图床" scheme="https://doraemon-hub-art.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Python基础语法(1)</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/19/%E3%80%90Python%E3%80%91Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(1)/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/19/%E3%80%90Python%E3%80%91Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(1)/</id>
    <published>2022-01-19T04:36:50.000Z</published>
    <updated>2022-01-19T04:37:36.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python基础知识"><a href="#Python基础知识" class="headerlink" title="Python基础知识"></a>Python基础知识</h1><p><strong>相关视频</strong>——<a href="https://www.bilibili.com/video/BV12E411A7ZQ?from=search&seid=9145828381968044237&spm_id_from=333.337.0.0">Python爬虫编程基础5天速成（2021全新合集）Python入门+数据分析</a></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Python是一门解释型、面向对象的高级编程语言。</li><li>Python是开源免费的，支持交互式、可跨平台移植的脚本语言。</li><li>Python的设计混合了传统语言的软件软件工程的特点和脚本语言的易用性。<ul><li>具有如下特性:</li><li>开源、易于维护</li><li>可移植</li><li>易于使用、简单优雅</li><li>广泛的标准库、功能强大</li><li>可扩展、可嵌入</li><li>……</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多行注释</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">单行注释</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><ul><li>变量无需先定义,直接使用即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">Python解释器干了两件事</span><br><span class="line"><span class="number">1</span>在内存中创建了一个<span class="string">&#x27;ABC&#x27;</span>的字符串</span><br><span class="line"><span class="number">2</span>在内存中创建了一个名为a的变量，并把它指向<span class="string">&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>print</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">占位符——格式化输入</span><br><span class="line">age = <span class="number">3</span></span><br><span class="line">print(<span class="string">&quot;我今年%d岁了&quot;</span>，age)</span><br></pre></td></tr></table></figure><ul><li>input——进行输入</li><li>type(变量名)查看变量的类型</li><li>强制类型转换——变量类型(变量)</li><li>**——次方</li></ul><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> c &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">&quot;大于10&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> c &lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">&quot;小于10&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;等于10&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过缩进来告诉编译器这几行代码属于同一个代码段。</p><h2 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h2><p>import xxx或者from … import 来导入相应的模块</p><p>可以选择全部引入还是引入部分函数。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>for…in,可以依次把list或者tuple中的元素迭代出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment"># 0 1 2 3 4</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从0开始以3为增量(步进值 )，11为限制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>):</span><br><span class="line">    print(i)    </span><br><span class="line">    <span class="comment">#0 3 6 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逐个遍历字符串中的每个字母</span></span><br><span class="line">name = <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#遍历列表中的每个元素</span></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    print(a[i])</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>while</p><p>python没有++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#计算<span class="number">1</span>到<span class="number">100</span>的和</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    sum += i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>python总while可以和else使用，当while条件不满足的时候执行else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i =<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    print(i,<span class="string">&quot;小于10&quot;</span>)</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,<span class="string">&quot;大于等于10&quot;</span>) <span class="comment">#不满足while执行条件，循环终止。</span></span><br></pre></td></tr></table></figure><ul><li>break、continue同其他编程语言</li><li>pass是空语句，一般用做占位语句，不做任何事情。</li></ul><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>String</strong></p><ul><li>Python中的字符串可以使用单引号、双引号或者三引号，反斜杠\转义特殊字符。</li><li>Python3源码文件默认以UFT-8编码，所有字符串都是unicode字符串。</li><li>支持字符串拼接、截取等多种运算。</li></ul><p>三引号，默认保留编写程序时的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">ABC</span></span><br><span class="line"><span class="string">A1B2C3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单双引号使用时候区别，有的字符串用到单引号就需要使用转义字符，类似情况同理，使用转义字符。</p><p> <strong>字符串的截取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;123ABC&quot;</span></span><br><span class="line"><span class="comment">#访问某一个字符，就当做字符数组使用</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#xx[起始位置:结束位置]</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#字符串访问中同样也有步进值</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#起始位置可以省略，默认为从第一个开始</span></span><br><span class="line">print(<span class="built_in">str</span>[:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#结束位置可以省略,默认为到最后一个结束</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:])</span><br></pre></td></tr></table></figure><p><strong>字符串的拼接</strong></p><p>“xxx”+”xxx”</p><p>引号前加r取消转义,内容全部保留</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r&quot;123\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串相关函数</strong></p><p>略……,现用现查吧。</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>类似于其他编程语言中的数组。</p><ul><li>列表可以完成大多数集合类的数据结构实现。<strong>列表中有元素的类型可以不相同</strong>，它支持数字、字符串、甚至可以包括列表(嵌套)。</li><li>列表是写在方括号[]之间，用逗号分隔开的元素列表</li><li>列表索引值以0为开始值，-1为从末尾的位置开始。</li><li>列表可以使用+操作符进行拼接。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line">nameList = []#定义一个空列表</span><br><span class="line">nameList1 = [<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;小李&quot;</span>]</span><br><span class="line">print(nameList1)#打印全部内容</span><br><span class="line">testList = [<span class="number">123</span>,<span class="string">&quot;ABC&quot;</span>]#怎么定义的，就是什么类型</span><br><span class="line">#遍历</span><br><span class="line"><span class="keyword">for</span> name in testList:</span><br><span class="line">    print(name)</span><br><span class="line">#长度</span><br><span class="line">length = len(testList)</span><br><span class="line">#常用的方法</span><br><span class="line">#增加</span><br><span class="line">#在末尾追加一个元素</span><br><span class="line">nameList.append(<span class="string">&quot;添加一个数据&quot;</span>)</span><br><span class="line">#扩展，将另一个列表中的数据逐一添加到末尾</span><br><span class="line">nameList.extend(nameList1)</span><br><span class="line"><span class="meta">#insert</span></span><br><span class="line">nameList.insert(<span class="number">1</span>,<span class="string">&quot;数据&quot;</span>)</span><br><span class="line">#删除</span><br><span class="line">#指定下标删除元素</span><br><span class="line">del nameList[<span class="number">1</span>]</span><br><span class="line">#删除末尾元素</span><br><span class="line">nameList.pop()</span><br><span class="line">#指定数据元素删除-多个匹配内容只会删除找到的第一个</span><br><span class="line">nameList.remove(<span class="string">&quot;元素名字&quot;</span>)</span><br><span class="line">#修改</span><br><span class="line">nameList[<span class="number">1</span>] = <span class="string">&quot;我是新的数据&quot;</span></span><br><span class="line">#查找</span><br><span class="line">findName = input(<span class="string">&quot;查找内容&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> findName in nameList:</span><br><span class="line">    print(<span class="string">&quot;找到了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    print(<span class="string">&quot;没有&quot;</span>)</span><br><span class="line">#指定范围查找指定内容,找到返回下标，左闭又开</span><br><span class="line">nameList.index(<span class="string">&quot;查找内容&quot;</span>,<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">#统计某个元素出现几次</span><br><span class="line">nameList.count(<span class="string">&quot;元素&quot;</span>)</span><br><span class="line">#反转</span><br><span class="line">nameList.reverse()</span><br><span class="line">#排序-升序</span><br><span class="line">nameList.sort()</span><br><span class="line">#排序-降序</span><br><span class="line">nameList.sort(reverse=True)</span><br><span class="line">#嵌套</span><br><span class="line">#有三个元素的空列表，其中的每个元素都是一个空列表</span><br><span class="line">schoolNames = [[],[],[]]</span><br><span class="line">SecondNames= [[<span class="string">&#x27;赵&#x27;</span>,<span class="string">&#x27;钱&#x27;</span>],[<span class="string">&#x27;孙&#x27;</span>,<span class="string">&#x27;李&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">#例子-将元素随机分配</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">office=[[],[],[]]</span><br><span class="line">names = [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;G&quot;</span>,<span class="string">&quot;H&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name in names:</span><br><span class="line">    index = random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    office[index].append(name);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li>类似于list,不同之处在于元组的元组不能修改，写在小括号里。</li><li>元组的元素不可变，但可以包含可变对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建元组</span></span><br><span class="line">tupTest = (<span class="number">50</span>)</span><br><span class="line"><span class="comment">#多数操作同List</span></span><br><span class="line">tup1 = (<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>)</span><br><span class="line"><span class="comment">#元组中的元素不能被修改的</span></span><br><span class="line"><span class="comment">#增——将两个元组链接到一起在一起</span></span><br><span class="line">tup2 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">tup = tup1 + tup2</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">del</span> tup<span class="comment">#删除了整个元组变量</span></span><br></pre></td></tr></table></figure><hr><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典是无序的对象集合，使用键-值(key-value)存储，具有极快的查找速度。</li><li>键(key)必须使用不可变类型。</li><li>同一个字典中，键(key)必须是唯一的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建</span></span><br><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;快乐的威猛先生&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">#访问不存在的键，不报错方法</span></span><br><span class="line">info.get(<span class="string">&quot;test&quot;</span>)<span class="comment">#不存在默认返回None</span></span><br><span class="line"><span class="comment">#可以设定找不到的默认返回值</span></span><br><span class="line">info.get(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;m&quot;</span>)<span class="comment">#m为默认返回值</span></span><br><span class="line"><span class="comment">#增</span></span><br><span class="line">newID = <span class="built_in">input</span>()</span><br><span class="line">info[<span class="string">&quot;ID&quot;</span>] = newID</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&quot;name&quot;</span>]<span class="comment">#删除了整个键值对</span></span><br><span class="line"><span class="keyword">del</span> info<span class="comment">#删除整个字典，在内存中清除这个变量</span></span><br><span class="line"><span class="comment">#改</span></span><br><span class="line">info[<span class="string">&quot;age&quot;</span>] = <span class="number">19</span></span><br><span class="line"><span class="comment">#拿到所有的键，列表形式</span></span><br><span class="line">info.keys()</span><br><span class="line"><span class="comment">#拿到所有的值</span></span><br><span class="line">info.values()</span><br><span class="line"><span class="comment">#拿到所有的对儿, 每个键值对是与元组形式</span></span><br><span class="line">info.items()</span><br><span class="line"><span class="comment">#遍历key value</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> info.items():</span><br><span class="line">    print(<span class="string">&quot;key=%s,value=%s&quot;</span>(key,value))</span><br><span class="line"><span class="comment">#使用枚举函数拿到列表元素及其下标</span></span><br><span class="line">mylist = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(mylist):</span><br><span class="line">    print(i,x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>和字典类似，也是一组key的结合，但不存储value。key不能重复。</li><li>集合是无序的，重复的元素在set中自动被过滤。去重操作。</li></ul><p>略……</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>把具有独立功能的代码块组织为一个小模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunction</span>():</span></span><br><span class="line">    print(<span class="string">&quot;---MyFunction---&quot;</span>)</span><br><span class="line"><span class="comment">#函数的调用</span></span><br><span class="line">myfunction()</span><br><span class="line"><span class="comment">#带参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2Num</span>(<span class="params">a,b</span>):</span></span><br><span class="line">     <span class="keyword">return</span> a+b</span><br><span class="line"><span class="comment">#返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">10</span>,b+<span class="number">10</span></span><br><span class="line"><span class="comment">#接收</span></span><br><span class="line">tmp1,tmp2 = test(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line">r = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">tmp =r.read(<span class="number">6</span>)<span class="comment">#读6个</span></span><br><span class="line"><span class="comment">#read方法读取指定的字符，开始定位于文件头部，随着指定往后移动</span></span><br><span class="line">print(tmp)</span><br><span class="line"><span class="comment">#全部读完,放到列表中</span></span><br><span class="line">tmp2=r.readline()</span><br><span class="line"><span class="comment">#每次读一行</span></span><br><span class="line">tmp3=r.readline()</span><br><span class="line">r.close()</span><br><span class="line"><span class="comment">#删除重命名等操作在os这个库中，删除时注意路径</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;text2.txt&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可能发生问题的代码块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment">#捕获处理异常</span></span><br><span class="line"><span class="keyword">except</span> (IOError,NameError)<span class="keyword">as</span> result:<span class="comment">#异常类型想要被捕获，需要一致。逗号分隔多种异常</span></span><br><span class="line">    <span class="comment">#捕获异常后指定的内容</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#result获取异常描述</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#try---finally，和嵌套</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="comment">#这里出现问题会直接跳出，到 except</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = r.readline()</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(content) == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        r.close()</span><br><span class="line">        print(<span class="string">&quot;文件关闭&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment">#无论有没有异常都会被执行</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python基础知识&quot;&gt;&lt;a href=&quot;#Python基础知识&quot; class=&quot;headerlink&quot; title=&quot;Python基础知识&quot;&gt;&lt;/a&gt;Python基础知识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;相关视频&lt;/strong&gt;——&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="Python" scheme="https://doraemon-hub-art.github.io/categories/Python/"/>
    
    
    <category term="-Python" scheme="https://doraemon-hub-art.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT容器</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/18/%E3%80%90QT%E3%80%91QT%E5%AE%B9%E5%99%A8/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/18/%E3%80%90QT%E3%80%91QT%E5%AE%B9%E5%99%A8/</id>
    <published>2022-01-18T08:45:02.000Z</published>
    <updated>2022-01-18T08:47:34.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT容器"><a href="#QT容器" class="headerlink" title="QT容器"></a>QT容器</h1><h2 id="QString类"><a href="#QString类" class="headerlink" title="QString类"></a>QString类</h2><p><strong>隐式共享:</strong></p><p>隐式数据共享机制去最大化资源有效利用和最小化复制克隆操作。</p><p>隐式数据共享类当作为函数参数传递的时候，不仅安全而且效率很高，因为传递的时候只是传递了数据的指针，数据本身只当自己被修改的时候才会去复制。简称写时复制。</p><p>数据相同时，执行浅拷贝，仅复制指向数据块的指针，数据不同时则执行深拷贝。</p><p>隐式共享技术可以大大降低对内存的开销以及，CPU资源的消耗，很大程度提高应用程序的运行效率。</p><p>QString类保存了16位的Unicode值(宽字节)，Unicode把所有语言都统一到一套编码里，Unicode提供UTF-8、UTF-16、UTF-32编码方式。</p><p>UTF-8以字节为单位对Unicode进行编码，对不同范围的字体使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。</p><p><strong>代码示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QString s = <span class="string">&quot;Hello&quot;</span>;<span class="comment">//Hello数据块引用计数为1</span></span><br><span class="line">QString s1 = s;<span class="comment">//Hello数据块引用计数为2</span></span><br><span class="line">QString s2 = s;<span class="comment">//Hello数据块引用计数为3</span></span><br><span class="line"><span class="comment">//其中一个进行球盖</span></span><br><span class="line">s2 = <span class="string">&quot;He&quot;</span>;<span class="comment">//不在引用Hello这个数据块，Hello数据块引用-1，He数据块引用计数为1</span></span><br><span class="line">QString s3 = s;<span class="comment">//Hello数据块引用计数为3</span></span><br><span class="line">QString s4 = s2;<span class="comment">//He数据块引用计数为2</span></span><br><span class="line">QString s5 = s2;<span class="comment">//He数据块引用计数为2</span></span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const char* 初始化</span></span><br><span class="line">QString s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function">QString <span class="title">str</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//QChar数组初始化</span></span><br><span class="line">QChar cHi[<span class="number">3</span>] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;;</span><br><span class="line"><span class="function">QString <span class="title">strHi</span><span class="params">(cHi,<span class="number">2</span>)</span></span>;Z</span><br><span class="line"><span class="comment">//类对象初始化</span></span><br><span class="line">QString s1 = s;</span><br></pre></td></tr></table></figure><p><strong>转换</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QString转数字</span></span><br><span class="line">  <span class="function">QString <span class="title">strAge</span><span class="params">(<span class="string">&quot;18&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> nAge = strAge.toInt();<span class="comment">//默认是10进制</span></span><br><span class="line">  <span class="function">QString <span class="title">strRate</span><span class="params">(<span class="string">&quot;3.14&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">float</span> nRate = strRate.toFloat();</span><br><span class="line">  <span class="function">QString <span class="title">strDouble</span><span class="params">(<span class="string">&quot;3.333&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">double</span> strD = strDouble.toDouble();</span><br><span class="line">  <span class="comment">//数字转QString</span></span><br><span class="line">  <span class="keyword">int</span> year = <span class="number">2022</span>;</span><br><span class="line">  <span class="keyword">float</span> height = <span class="number">1.70f</span>;</span><br><span class="line">  QString strYear;</span><br><span class="line">  strYear =  strYear.number(year);</span><br><span class="line">  QString strHeight;</span><br><span class="line">  strHeight = strHeight.number(height);</span><br><span class="line">  QString strTest;</span><br><span class="line">  strTest = strTest.setNum(year);</span><br><span class="line">  <span class="comment">//QString转QByteArray</span></span><br><span class="line">  QString strTom = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">  QByteArray tomArray = strTom.toUtf8();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* cTom = tomArray.data();</span><br><span class="line">  <span class="comment">//QString转QDataTime</span></span><br><span class="line">  QString strTime = <span class="string">&quot;1949-10-01 10:00:00&quot;</span>;</span><br><span class="line">  QDateTime dtTime = QDateTime::fromString(strTime,<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">  <span class="comment">//QDateTime转QString</span></span><br><span class="line">  QDateTime dtCurrent = QDateTime::currentDateTime();</span><br><span class="line">  QString strCurrent = dtCurrent.toString(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QString的拼接</span></span><br><span class="line">    QString s = <span class="string">&quot;对不起&quot;</span>;</span><br><span class="line">    s += <span class="string">&quot;我是警察。&quot;</span>;</span><br><span class="line">    s.append(<span class="string">&quot;Sorry。&quot;</span>);<span class="comment">// 结尾添加</span></span><br><span class="line">    <span class="comment">//QString格式化</span></span><br><span class="line">    QString s0;</span><br><span class="line">    s0.<span class="built_in">sprintf</span>(<span class="string">&quot;%s%d%s&quot;</span>,<span class="string">&quot;我&quot;</span>,<span class="number">19</span>,<span class="string">&quot;岁了。&quot;</span>);</span><br><span class="line">    QString s1;</span><br><span class="line">    s1 = QString(<span class="string">&quot;%1%2%3&quot;</span>).arg(<span class="string">&quot;我&quot;</span>).arg(<span class="number">19</span>).arg(<span class="string">&quot;岁了。&quot;</span>);</span><br><span class="line">    <span class="comment">//以索引方式访问</span></span><br><span class="line">    QChar qc1= s1.at(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//插入字符</span></span><br><span class="line">    QString s2= <span class="string">&quot;我岁了。&quot;</span>;</span><br><span class="line">    QString s3 = <span class="string">&quot;19&quot;</span>;</span><br><span class="line">    s2.insert(<span class="number">1</span>,s3.toUtf8());</span><br><span class="line">    <span class="comment">//在字符串起始位置插入</span></span><br><span class="line">    s2.prepend(<span class="string">&quot;今年&quot;</span>);</span><br><span class="line">    <span class="comment">//指定位置进行替换</span></span><br><span class="line">    s2.replace(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&quot;去年&quot;</span>);</span><br><span class="line">    <span class="comment">//去除字符串两端的空格,中间的空格变为一个空格</span></span><br><span class="line">    s2.trimmed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询字符</span></span><br><span class="line">    QString s4 = <span class="string">&quot;哔哩哔哩关注快乐的威猛先生&quot;</span>;</span><br><span class="line">    <span class="comment">//查询是否以xx开头,BOOL</span></span><br><span class="line">    qDebug()&lt;&lt;s4.startsWith(<span class="string">&quot;哔哩哔哩&quot;</span>);</span><br><span class="line">    QString s5 = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">    qDebug()&lt;&lt;s5.startsWith(<span class="string">&quot;tom&quot;</span>,Qt::CaseSensitive);<span class="comment">//大小写敏感</span></span><br><span class="line">    <span class="comment">//查询是否以xx结尾</span></span><br><span class="line">    qDebug()&lt;&lt;s5.endsWith(<span class="string">&quot;威猛先生&quot;</span>);<span class="comment">//同样可以表明大小写是否敏感</span></span><br><span class="line">    <span class="comment">//是否包含</span></span><br><span class="line">   qDebug()&lt;&lt;s5.contains(<span class="string">&quot;o&quot;</span>);<span class="comment">//同样可以表明大小写是否敏感</span></span><br><span class="line">   <span class="comment">//比较</span></span><br><span class="line">    qDebug()&lt;&lt;QString::compare(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;tom&quot;</span>,Qt::CaseInsensitive);<span class="comment">//判断字符串是否相等，大小写是否敏感</span></span><br><span class="line">    <span class="comment">//分割字符串</span></span><br><span class="line">    QString strTime =  <span class="string">&quot;2022/1/17&quot;</span>;</span><br><span class="line">    QStringList timeList = strTime.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    foreach (QString ss,timeList) &#123;<span class="comment">//循环读取容器中的元素，用一个变量来接收读取到的数据</span></span><br><span class="line">       qDebug()&lt;&lt;ss;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//截取字符串</span></span><br><span class="line">    QString sFriends = <span class="string">&quot;EnvyuskenyS&quot;</span>;</span><br><span class="line">    qDebug()&lt;&lt;sFriends.mid(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断NULL字符串isNull()，采用默认构造函数，或者用const char*xx =&#x27;\0&#x27;来对QString进行构造</span></span><br><span class="line"><span class="comment">//判断空字符传isEmpty()</span></span><br></pre></td></tr></table></figure><hr><h2 id="QStringList"><a href="#QStringList" class="headerlink" title="QStringList"></a>QStringList</h2><p>QString类型的链表</p><p>常用操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> QStringList weekList;</span><br><span class="line"> weekList&lt;&lt;<span class="string">&quot;星期一&quot;</span>&lt;&lt;<span class="string">&quot;星期二&quot;</span>&lt;&lt;<span class="string">&quot;星期三&quot;</span>&lt;&lt;<span class="string">&quot;星期四&quot;</span>&lt;&lt;<span class="string">&quot;星期五&quot;</span>&lt;&lt;<span class="string">&quot;星期六&quot;</span>;</span><br><span class="line"> weekList.append(<span class="string">&quot;星期天&quot;</span>);<span class="comment">//尾插</span></span><br><span class="line"> qDebug()&lt;&lt;weekList;</span><br><span class="line"> <span class="comment">//for遍历链表</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; weekList.size();i++)</span><br><span class="line"> &#123;</span><br><span class="line">      qDebug()&lt;&lt;weekList.at(i);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//foreach遍历链表</span></span><br><span class="line"> foreach (QString ss, weekList) &#123;</span><br><span class="line">    qDebug()&lt;&lt;ss;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//STL风格迭代器</span></span><br><span class="line"> QStringList::iterator it = weekList.begin();</span><br><span class="line"> <span class="keyword">for</span>(;it !=  weekList.end();it++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;*it;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格迭代</span></span><br><span class="line"> QListIterator&lt;QString&gt;itr(weekList);</span><br><span class="line"> <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">     qDebug()&lt;&lt;itr.next();<span class="comment">//java风格的迭代器初识位置在第一个元素的前一个位置</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//查看链表中是否包含某个元素</span></span><br><span class="line"> qDebug()&lt;&lt;weekList.contains(<span class="string">&quot;星期八&quot;</span>);</span><br><span class="line"> <span class="comment">//插入元素</span></span><br><span class="line"> weekList.insert(<span class="number">0</span>,<span class="string">&quot;星期零&quot;</span>);</span><br><span class="line"> weekList.append(<span class="string">&quot;星期八&quot;</span>);</span><br><span class="line"> <span class="comment">//删除元素</span></span><br><span class="line"> weekList.removeFirst();</span><br><span class="line"> weekList.removeLast();</span><br><span class="line"> weekList.removeOne(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line"> weekList.removeAt(<span class="number">0</span>);</span><br><span class="line"> weekList.clear();</span><br></pre></td></tr></table></figure><hr><h2 id="QList"><a href="#QList" class="headerlink" title="QList"></a>QList</h2><p>QList&lt; T &gt;是最常用的容器类。QList以列表形态存储并管理数据，并能进行基于快速索引的访问，也可以进行快速的数据删除操作。继承自QList类的子类有QItemSelection、QQueue、QStringList、QTestEventList.</p><p>可用运算符&lt;&lt; 、append()、prepend()进行添加元素，insert()进行插入。QList&lt; T &gt;维护了一个指针数组，数组元素指向每一个链表项，因此QList&lt; T &gt; 提供了基于下标的快速访问。</p><p>Java风格迭代器迭代点位置：第一个列表项前、两个列表项中间、最后一个列表项之后。STL风格迭代器迭代点位置：直接指向列表项。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201181647149.png" alt="image-20220117165954098"></p><p>QString中可以通过[]来访问元素。因为里面放的是指针，通过指针访问元素。</p><p><strong>相关操作示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;<span class="keyword">int</span>&gt;<span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//添加与元素</span></span><br><span class="line">    <span class="built_in">list</span>&lt;&lt;1&lt;&lt;2&lt;&lt;3&lt;&lt;4&lt;&lt;5;</span><br><span class="line">    <span class="built_in">list</span>.append(0);</span><br><span class="line">    <span class="built_in">list</span>.prepend(6);</span><br><span class="line">    <span class="built_in">list</span>.insert(0,99);</span><br><span class="line">    //查找元素</span><br><span class="line">   <span class="built_in">list</span>.at(2);</span><br><span class="line">   <span class="built_in">list</span>[2];</span><br><span class="line">    //查看是否包含</span><br><span class="line">   <span class="built_in">list</span>.contains(8);</span><br><span class="line">    //修改元素</span><br><span class="line">    <span class="built_in">list</span>.replace(1,66);</span><br><span class="line">    <span class="built_in">list</span>[2] = 77;</span><br><span class="line">    //删除元素</span><br><span class="line">    <span class="built_in">list</span>.removeFirst();</span><br><span class="line">    <span class="built_in">list</span>.removeLast();</span><br><span class="line">    //删除指定位置元素</span><br><span class="line">    <span class="built_in">list</span>.removeAt(2);</span><br><span class="line">    //指定元素删除</span><br><span class="line">    <span class="built_in">list</span>.removeOne(66);</span><br><span class="line">    //清空链表</span><br><span class="line">    <span class="built_in">list</span>.clear();</span><br></pre></td></tr></table></figure><p><strong>迭代器</strong></p><p><strong>JAVA风格迭代器</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JAVA风格迭代器</span></span><br><span class="line">   QList&lt;<span class="keyword">int</span>&gt;montList;</span><br><span class="line">   <span class="function">QMutableListIterator&lt;<span class="keyword">int</span>&gt; <span class="title">it_mrw</span><span class="params">(montList)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;   <span class="number">12</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       it_mrw.insert(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反遍历</span></span><br><span class="line">   <span class="comment">//将迭代器移到结尾，判断前面是否有数据</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toBack();it_mrw.hasPrevious();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mrw.previous();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//正遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toFront();it_mrw.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mrw.next();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//删除、修改</span></span><br><span class="line">   <span class="keyword">for</span>(it_mrw.toFront(); it_mrw.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">int</span> month = it_mrw.next();</span><br><span class="line">        <span class="keyword">if</span>(month== <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             it_mrw.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(month == <span class="number">11</span>)</span><br><span class="line">       &#123;</span><br><span class="line">             it_mrw.setValue(<span class="number">12</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   qDebug()&lt;&lt;montList;</span><br><span class="line">   <span class="comment">//只读迭代器</span></span><br><span class="line">   QListIterator&lt;<span class="keyword">int</span>&gt;it_mr(montList);</span><br><span class="line">   <span class="comment">//正遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mr.toFront();it_mr.hasNext();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mr.next();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反遍历</span></span><br><span class="line">   <span class="keyword">for</span>(it_mr.toBack();it_mr.hasPrevious();)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_mr.previous();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>STL风格迭代器</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//STL风格迭代器</span></span><br><span class="line">QList&lt;<span class="keyword">int</span>&gt;numList;</span><br><span class="line">numList&lt;&lt;<span class="number">10</span>&lt;&lt;<span class="number">11</span>&lt;&lt;<span class="number">12</span>&lt;&lt;<span class="number">13</span>;</span><br><span class="line"><span class="comment">//读写迭代器</span></span><br><span class="line"> QList&lt;<span class="keyword">int</span>&gt;::iterator it_numRW;</span><br><span class="line"> <span class="keyword">for</span>( it_numRW = numList.begin();it_numRW != numList.end();it_numRW++)</span><br><span class="line"> &#123;</span><br><span class="line">     *it_numRW =*it_numRW *  <span class="number">10</span>;</span><br><span class="line">      qDebug()&lt;&lt;*it_numRW;</span><br><span class="line"> &#125;</span><br><span class="line"> qDebug()&lt;&lt;<span class="string">&quot;---&quot;</span>;</span><br><span class="line"> <span class="comment">//只读迭代器</span></span><br><span class="line"> QList&lt;<span class="keyword">int</span>&gt;::const_iterator it_numR;</span><br><span class="line"> <span class="comment">//constEnd方法返回的迭代器指向最后一个元素之后，是虚拟的。</span></span><br><span class="line"> <span class="keyword">for</span>( it_numR = numList.constBegin();it_numR != numList.constEnd();it_numR++)</span><br><span class="line"> &#123;</span><br><span class="line">         qDebug()&lt;&lt;*it_numR;</span><br><span class="line"> &#125;</span><br><span class="line">   qDebug()&lt;&lt;<span class="string">&quot;---&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="QLinkedList"><a href="#QLinkedList" class="headerlink" title="QLinkedList"></a>QLinkedList</h2><p> 更加高效，大量数据情况下运行速度更快。是一个更加”纯粹”的链表。</p><p>不支持下标访问，不用维护那个指针数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">QLinkedList&lt;QString&gt;weekList;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">8</span> ;j ++ )</span><br><span class="line"> &#123;</span><br><span class="line">      weekList&lt;&lt;QString(<span class="string">&quot;%1%2&quot;</span>).arg(<span class="string">&quot;星期&quot;</span>).arg(j);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line">  QLinkedListIterator&lt;QString&gt;it_wr(weekList);</span><br><span class="line">  <span class="keyword">for</span>(it_wr.toFront();it_wr.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_wr.next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Java风格读写迭代器</span></span><br><span class="line">  QMutableLinkedListIterator&lt;QString&gt;it_wrw(weekList);</span><br><span class="line">  <span class="keyword">for</span>(it_wrw.toFront();it_wrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      QString day = it_wrw.next();</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期3&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          it_wrw.setValue(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期5&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          it_wrw.setValue(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(day == <span class="string">&quot;星期6&quot;</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          it_wrw.insert(<span class="string">&quot;星期六6&quot;</span>);<span class="comment">//插入到当前位置的后面</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>( it_wrw.toFront();it_wrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">       qDebug()&lt;&lt;it_wrw.next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//QLinkedList不能支持下标访问</span></span><br></pre></td></tr></table></figure><hr><h2 id="QVector"><a href="#QVector" class="headerlink" title="QVector"></a>QVector</h2><p>QVector在相邻的内存中存储给定数据类型T的一组数据。在QVector前部或中间位置插入操作速度都很慢，因为会导致内存中大量数据的移动。访问数据可使用下标，也可以使用迭代器。继承自QVector类的子类有QPolygon、QPolygonF、QStack。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">QVector&lt;QString&gt;vStarts;</span><br><span class="line">  <span class="comment">//添加元素</span></span><br><span class="line"> vStarts&lt;&lt;<span class="string">&quot;星期1&quot;</span>&lt;&lt;<span class="string">&quot;星期2&quot;</span>&lt;&lt;<span class="string">&quot;星期3&quot;</span>;</span><br><span class="line"> vStarts.append(<span class="string">&quot;星期4&quot;</span>);</span><br><span class="line"> vStarts.prepend(<span class="string">&quot;星期5&quot;</span>);</span><br><span class="line"> vStarts.insert(<span class="number">0</span>,<span class="string">&quot;星期6&quot;</span>);</span><br><span class="line"> <span class="comment">//修改元素</span></span><br><span class="line"> vStarts.replace(<span class="number">0</span>,<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line"> <span class="comment">//删除元素</span></span><br><span class="line"> vStarts.remove(<span class="number">0</span>);</span><br><span class="line"> vStarts.removeFirst();</span><br><span class="line"> vStarts.removeAll(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"> <span class="comment">//访问元素</span></span><br><span class="line"> vStarts[<span class="number">2</span>];</span><br><span class="line"> vStarts.at(<span class="number">2</span>);</span><br><span class="line"> vStarts.contains(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"> <span class="comment">//JAVA风格只读迭代</span></span><br><span class="line"> QVectorIterator&lt;QString&gt;it_sr(vStarts);</span><br><span class="line"> <span class="keyword">for</span>(it_sr.toFront();it_sr.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;it_sr.next();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格读写迭代</span></span><br><span class="line"> QMutableVectorIterator&lt;QString&gt;it_srw(vStarts);</span><br><span class="line"> <span class="keyword">for</span>(it_srw.toFront();it_srw.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     QString s = it_srw.next();</span><br><span class="line">     <span class="keyword">if</span>(!QString::compare(s,<span class="string">&quot;星期1&quot;</span>))</span><br><span class="line">      &#123;</span><br><span class="line">         it_srw.setValue(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> qDebug()&lt;&lt;vStarts;</span><br></pre></td></tr></table></figure><hr><h2 id="QMap"><a href="#QMap" class="headerlink" title="QMap"></a>QMap</h2><p>QMap与QHash差别：</p><ul><li>QHash比QMap查找速度更快。</li><li>QHash以任意顺序存储，QMap以key顺序存储数据。</li><li>QHash的key必须提供operator==()及一个全局的qHash(key)函数，而QMap必须提供operator&lt;()函数。</li></ul><p>存储一键多值数据时可使用QMultiMap&lt; key,T&gt;容器或QMultiHash&lt; key, T&gt;容器</p><p><strong>默认从小到大排序。</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201181103021.png" alt="image-20220118110333932"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">QMap&lt;QString,QString&gt;infoMap;</span><br><span class="line"> infoMap.insert(<span class="string">&quot;哈哈哈哈&quot;</span>,<span class="string">&quot;鸡汤来喽&quot;</span>);</span><br><span class="line"> infoMap.insert(<span class="string">&quot;芜湖&quot;</span>,<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line"> infoMap[<span class="string">&quot;哔哩哔哩&quot;</span>]=<span class="string">&quot;快乐的威猛先生&quot;</span>;</span><br><span class="line"> infoMap[<span class="string">&quot;CSDN&quot;</span>]=<span class="string">&quot;半生瓜のblog&quot;</span>;</span><br><span class="line"> <span class="comment">//通过key查找value</span></span><br><span class="line"> qDebug()&lt;&lt;infoMap[<span class="string">&quot;哔哩哔哩&quot;</span>];</span><br><span class="line"> <span class="comment">//通过value找key</span></span><br><span class="line"> qDebug()&lt;&lt;infoMap.key(<span class="string">&quot;快乐的威猛先生&quot;</span>);</span><br><span class="line"> <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line"> QMapIterator&lt;QString,QString&gt;it_r(infoMap);</span><br><span class="line"> <span class="keyword">for</span>(it_r.toFront();it_r.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     it_r.next();</span><br><span class="line">     qDebug()&lt;&lt;it_r.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_r.value();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//JAVA风格读写迭代器</span></span><br><span class="line"> QMutableMapIterator&lt;QString,QString&gt;it_rw(infoMap);</span><br><span class="line"> <span class="keyword">for</span>(it_rw.toFront();it_rw.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     it_rw.next();</span><br><span class="line">     <span class="keyword">if</span>(it_rw.key()==<span class="string">&quot;哔哩哔哩&quot;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         it_rw.setValue(<span class="string">&quot;关注快乐的威猛先生&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//STL风格只读迭代器</span></span><br><span class="line"> QMap&lt;QString,QString&gt;::const_iterator i_r;</span><br><span class="line"> i_r = infoMap.constBegin();</span><br><span class="line"> <span class="keyword">for</span>(;i_r != infoMap.constEnd();i_r++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;i_r.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;i_r.value();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//STL风格读写迭代器</span></span><br><span class="line"> QMap&lt;QString,QString&gt;::iterator i_rw;</span><br><span class="line"> <span class="keyword">for</span>(i_rw = infoMap.begin();i_rw != infoMap.end();i_rw++)</span><br><span class="line"> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i_rw.key() == <span class="string">&quot;哔哩哔哩&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i_rw.value() = <span class="string">&quot;快关注威猛先生&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> i_rw = infoMap.find(<span class="string">&quot;哔哩哔哩&quot;</span>);</span><br><span class="line"> i_rw.value() =<span class="string">&quot;bilibili&quot;</span>;</span><br><span class="line"> <span class="keyword">for</span>(i_rw = infoMap.begin();i_rw != infoMap.end();i_rw++)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;*i_rw;<span class="comment">//value</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//一个键对应多个值</span></span><br><span class="line"> QMultiMap&lt;QString,QString&gt;wMap1;<span class="comment">//一个key对应多个value</span></span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring1&quot;</span>,<span class="string">&quot;5°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;15°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;16°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring2&quot;</span>,<span class="string">&quot;17°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring3&quot;</span>,<span class="string">&quot;25°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;35°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;36°C&quot;</span>);</span><br><span class="line"> wMap1.insert(<span class="string">&quot;spring4&quot;</span>,<span class="string">&quot;37°C&quot;</span>);</span><br><span class="line"> <span class="comment">//指定元素删除</span></span><br><span class="line"> wMap1.remove(<span class="string">&quot;spring1&quot;</span>,<span class="string">&quot;5°C&quot;</span>);</span><br><span class="line"> <span class="comment">//查询指定value</span></span><br><span class="line"> wMap1.values(<span class="string">&quot;spring2&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//JAVA风格只读迭代</span></span><br><span class="line"> QMapIterator&lt;QString,QString&gt;it_r1(wMap1);</span><br><span class="line"> <span class="keyword">for</span>(it_r1.toFront();it_r1.hasNext();)</span><br><span class="line"> &#123;</span><br><span class="line">     qDebug()&lt;&lt;it_r1.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_r1.next().value(); <span class="comment">//这个迭代器看起来比较变扭，先拿key,然后通过下一个迭代点拿value</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> qDebug()&lt;&lt;wMap1;</span><br></pre></td></tr></table></figure><hr><h2 id="QHash"><a href="#QHash" class="headerlink" title="QHash"></a>QHash</h2><p><strong>无序。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QHash类</span></span><br><span class="line">  QHash&lt;<span class="keyword">int</span>,QString&gt;moneyHash;</span><br><span class="line">  moneyHash.insert(<span class="number">1</span>,<span class="string">&quot;一块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">10</span>,<span class="string">&quot;十块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">20</span>,<span class="string">&quot;二十块钱&quot;</span>);</span><br><span class="line">  moneyHash.insert(<span class="number">50</span>,<span class="string">&quot;五十块钱&quot;</span>);</span><br><span class="line">  moneyHash[<span class="number">50</span>]  = <span class="string">&quot;50&quot;</span>;</span><br><span class="line">  moneyHash.insertMulti(<span class="number">50</span>,<span class="string">&quot;50块钱&quot;</span>);<span class="comment">//插入多个value</span></span><br><span class="line">  qDebug()&lt;&lt;moneyHash;</span><br><span class="line">  <span class="comment">//JAVA风格只读迭代器</span></span><br><span class="line">  QHashIterator&lt;<span class="keyword">int</span>,QString&gt;it_mr(moneyHash);</span><br><span class="line">  <span class="keyword">for</span>(it_mr.toFront();it_mr.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_mr.key()&lt;&lt;it_mr.next().value();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//JAVA风格读写迭代器</span></span><br><span class="line">  QMutableHashIterator&lt;<span class="keyword">int</span>,QString&gt;it_mrw(moneyHash);</span><br><span class="line">  <span class="comment">//修改数据</span></span><br><span class="line">  <span class="keyword">if</span>(  it_mrw.findNext(<span class="string">&quot;十块钱&quot;</span>))</span><br><span class="line">  &#123;</span><br><span class="line">      it_mrw.setValue(<span class="string">&quot;10元&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(it_mrw.toFront();it_mrw.hasNext();)</span><br><span class="line">  &#123;</span><br><span class="line">      qDebug()&lt;&lt;it_mrw.key()&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;it_mrw.next().value();</span><br><span class="line">  &#125;</span><br><span class="line">  qDebug()&lt;&lt;moneyHash;</span><br></pre></td></tr></table></figure><hr><h2 id="QVariant类"><a href="#QVariant类" class="headerlink" title="QVariant类"></a>QVariant类</h2><p>QVariant类能保存很多Qt类型的值，包括QColor,QBrush,QFont,QRect,QString及QSize等等，而且能存放Qt的容器类型值。</p><p>可采用toT()将QVariant对象转换为T类型数据并获取其值。如toInt()，toFloat(),toString(),可用type方法获取数据类型。对于GUI模块中定义的数据类型没有相应的转换函数，即没有toColor(),没有toImage()这样的函数提供，可通过value()方法实现转换，判断两种类型是否可以转换可通过用type方法获取数据类型，判断方法的返回值判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QVariant <span class="title">vNum</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vNum.toInt();</span><br><span class="line"><span class="function">QVariant <span class="title">vPi</span><span class="params">(<span class="number">3.1415f</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt; vPi.toFloat();</span><br><span class="line"><span class="function">QVariant <span class="title">vStr</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vStr.toString();</span><br><span class="line"><span class="function">QVariant <span class="title">vb</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">qDebug()&lt;&lt;vb.toBool();</span><br><span class="line"></span><br><span class="line">QColor c = QColor(Qt::red);</span><br><span class="line">QVariant VC = c;</span><br><span class="line">qDebug()&lt;&lt;VC.type();</span><br><span class="line">qDebug()&lt;&lt;VC.value&lt;QColor&gt;();</span><br><span class="line"></span><br><span class="line">QVariant vss = vStr;</span><br><span class="line">qDebug()&lt;&lt;vss.canConvert(QVariant::Int);<span class="comment">//返回数据类型转换能力，QVariant的转换能力</span></span><br><span class="line">qDebug()&lt;&lt;vss.convert(QVariant::Int);<span class="comment">//false,转换失败，数据清空</span></span><br><span class="line"><span class="comment">//转换成功的条件:有转换能力，且数据类型匹配。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT容器&quot;&gt;&lt;a href=&quot;#QT容器&quot; class=&quot;headerlink&quot; title=&quot;QT容器&quot;&gt;&lt;/a&gt;QT容器&lt;/h1&gt;&lt;h2 id=&quot;QString类&quot;&gt;&lt;a href=&quot;#QString类&quot; class=&quot;headerlink&quot; title=&quot;Q</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT布局管理器</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2022-01-16T13:57:29.000Z</published>
    <updated>2022-01-24T08:55:33.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h1><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201162157302.png" alt="image-20220116123759846"></p><p><strong>设计模式实现布局</strong></p><p>详情见工具栏</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161308818.png" alt="image-20220116130800777"></p><p>垂直布局，水平布局，打破布局。</p><p><strong>代码实现布局</strong></p><p><strong>main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testlayout.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QFormLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QRadioButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QSpacerItem&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    TestLayout w;</span><br><span class="line">   <span class="comment">//添加部件并且布局</span></span><br><span class="line">    <span class="comment">//添加标签</span></span><br><span class="line">    QLabel* nameLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;姓名:(&amp;N)&quot;</span>);</span><br><span class="line">    QLabel* ageLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;年龄:(&amp;A)&quot;</span>);</span><br><span class="line">    QLabel* emailLabel = <span class="keyword">new</span>  QLabel(<span class="string">&quot;邮箱:(&amp;E)&quot;</span>);</span><br><span class="line">    QLabel* doorLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;门牌号码:&quot;</span>);</span><br><span class="line">     <span class="comment">// 添加文本框</span></span><br><span class="line">     QLineEdit* nameLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* ageLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* emailLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">     QLineEdit* doorNumLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置伙伴关系——绑定快捷键</span></span><br><span class="line">    nameLabel-&gt;setBuddy(nameLineEdit);</span><br><span class="line">    ageLabel-&gt;setBuddy(ageLineEdit);</span><br><span class="line">    emailLabel-&gt;setBuddy(emailLineEdit);</span><br><span class="line">    <span class="comment">//添加布局</span></span><br><span class="line">    <span class="comment">//QFormLayout常用语表单布局</span></span><br><span class="line">    QFormLayout* headerLayout = <span class="keyword">new</span> QFormLayout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将部件添加到布局管理器中</span></span><br><span class="line">     headerLayout-&gt;addRow(nameLabel,nameLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(ageLabel,ageLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(emailLabel,emailLineEdit);</span><br><span class="line">     headerLayout-&gt;addRow(doorLabel,doorNumLineEdit);</span><br><span class="line">     <span class="comment">//性别标签</span></span><br><span class="line">     QLabel* sexLabel = <span class="keyword">new</span> QLabel(<span class="string">&quot;性别:&quot;</span>);</span><br><span class="line">     <span class="comment">//添加单选按钮</span></span><br><span class="line">    QRadioButton* mBtn = <span class="keyword">new</span> QRadioButton;</span><br><span class="line">    QRadioButton* wBtn = <span class="keyword">new</span> QRadioButton;</span><br><span class="line">    mBtn-&gt;setText(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    wBtn-&gt;setText(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    <span class="comment">//添加水平布局管理器</span></span><br><span class="line">    QHBoxLayout* sexLayout = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    sexLayout-&gt;addWidget(sexLabel);</span><br><span class="line">    sexLayout-&gt;addWidget(mBtn);</span><br><span class="line">    sexLayout-&gt;addWidget(wBtn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加垂直布局管理器</span></span><br><span class="line">    <span class="comment">//将两个布局管理器添加到一起</span></span><br><span class="line">    QVBoxLayout* mainLayout = <span class="keyword">new</span> QVBoxLayout(&amp;w);<span class="comment">//参数-指定父窗体</span></span><br><span class="line">    mainLayout-&gt;addLayout(headerLayout);<span class="comment">//添加布局</span></span><br><span class="line">    mainLayout-&gt;addLayout(sexLayout);</span><br><span class="line">    <span class="comment">//在性别选项下添加空白</span></span><br><span class="line">    QSpacerItem* spacer = <span class="keyword">new</span> QSpacerItem(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    mainLayout-&gt;addItem(spacer);<span class="comment">//添加空隙对象</span></span><br><span class="line">    <span class="comment">//添加一个按钮</span></span><br><span class="line">    QPushButton* okBtn = <span class="keyword">new</span> QPushButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">    <span class="comment">//将按钮添加到布局管理器中</span></span><br><span class="line">    mainLayout-&gt;addWidget(okBtn);<span class="comment">//添加部件</span></span><br><span class="line">    mainLayout-&gt;setMargin(<span class="number">10</span>);<span class="comment">//与窗口的间隙</span></span><br><span class="line">    mainLayout-&gt;setSpacing(<span class="number">20</span>);<span class="comment">//设置控件间的间隙</span></span><br><span class="line">    <span class="comment">//设置窗口布局管理器</span></span><br><span class="line">    w.setLayout(mainLayout);</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201162157284.png" alt="image-20220116215432704"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;布局管理器&quot;&gt;&lt;a href=&quot;#布局管理器&quot; class=&quot;headerlink&quot; title=&quot;布局管理器&quot;&gt;&lt;/a&gt;布局管理器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/Do2eM0N/blogimg/raw/master/202</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT窗口部件</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/16/%E3%80%90QT%E3%80%91QT%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/</id>
    <published>2022-01-16T04:26:40.000Z</published>
    <updated>2022-01-16T04:28:59.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT窗口部件"><a href="#QT窗口部件" class="headerlink" title="QT窗口部件"></a>QT窗口部件</h1><h2 id="默认部件基类"><a href="#默认部件基类" class="headerlink" title="默认部件基类"></a>默认部件基类</h2><p>QT提供的默认部件基类包括QMainWindow、QWidget、和QDialog，这三个部件基类也是用的最多的。</p><p>QMainWindow是带有菜单栏、工具栏、状态栏的主窗口类，它有自己单独的布局。布局有一个中心区域，通常是标准的QT部件，也可以是定制的部件，且必须有一个中心小部件。setCentralWidget()方法可设置中心部件。</p><p>QWidget类是所有部件对象的基类，被称为基础窗口部件。</p><p>QWidget提供自我绘制和处理用户输入等基本功能，如接收鼠标、键盘和其他事件，并且在屏幕上绘制自己的表现。每一个窗口部件都是矩形的，并且它们是按照**Z轴(由屏幕里到屏幕外)**顺序排列的。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。一个没有父窗口部件的窗口部件一直是顶级窗口部件。非顶级窗口部件时父窗口的子部件。</p><p>QWidget构造函数有两个参数:QWidget*parent = 0,QT:WindowFlages f = 0。</p><p>parent即父窗口，默认为0，即没有父窗口，是顶级窗口，如果指定parent值，则当前窗体将会是一个子部件。QT:WindowFlags是QT:WindowType，枚举值的组合，用来设置窗口的属性，f=0表示默认为QT:Widget风格，setWindowState()可设置窗体的状态，参数由QT:WindowStates枚举值指定。</p><p><strong>QWidget类关系表</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161228351.png" alt="image-20220115102847426"></p><p><strong>窗体状态</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201151029912.png" alt="image-20220115102920884"></p><p><strong>模态</strong></p><p>窗口间的阻塞情况，是否必须先关闭某一窗口之后，才能对另一个窗口进行操作。</p><p>被设置为模态窗口的窗口关闭之后才能对其他窗口进行操作。</p><hr><p>QDialog是各种对话框的基类，其继承自QWidget，对话框有两种表现形态:形态对话框、非模态对话框。模态对话框就是一个阻塞同一应用程序中其它可视窗口的输入对话框。用户必须完成当前对话框中的交互操作并且关闭窗口后才能操作当前音乐程序中的其它窗口。模式对话框有它们自己的本地事件循环。exec()方法可使窗口以模态方式运行。当用户关闭这个对话框，exec()将提供一个可用的返回值并且这时流程控制继续从调用exec()的地方进行。</p><p>通常，我们链接默认按钮，例如”OK”到accpet()槽并且把”Cancel”链接到reject()槽，来使对话框关闭并且返回适当的值。另外，我们也可以连接done()槽，传递给它Accepted或Rejected。</p><p><strong>模态窗口运行</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）调用exec()方法，如</span><br><span class="line">QDialog dlg;</span><br><span class="line">dlg.exec();</span><br><span class="line">（<span class="number">2</span>）调用setModal()方法设置模态，如</span><br><span class="line">QDialog dlg;</span><br><span class="line">dlg.setModal(<span class="literal">true</span>);</span><br><span class="line">dlg.show();</span><br><span class="line">（<span class="number">3</span>）QWidget widget;</span><br><span class="line">widget.setWindowModality(Qt::ApplicationModal);</span><br><span class="line">widget.show();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161228218.png" alt="image-20220115175915707"></p><hr><h2 id="其他部件"><a href="#其他部件" class="headerlink" title="其他部件"></a>其他部件</h2><p><strong>QLabel</strong></p><p>常用来显示文本、文字、图片、gif动图。</p><p>可与其他部件设置伙伴关系，此时标签起到快捷键作用。</p><p><strong>QLineEdit</strong></p><p>接收用户输入。</p><p>可以增加限制条件，例如只能让用户输入什么。</p><p>掩码字符</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201161136600.png" alt="image-20220116113648534"></p><p><strong>QPushButton</strong></p><p>按钮类，常用显示文字图标。</p><p><strong>QRadioButton</strong></p><p>单选按钮类，只能选一个，将单选框按钮加入一个分组框中时，加入的按钮是一个分组，分组中只能选中一个，具有排他性。</p><p><strong>QCheckBox</strong></p><p>多选按钮类，可多选。</p><p>略….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT窗口部件&quot;&gt;&lt;a href=&quot;#QT窗口部件&quot; class=&quot;headerlink&quot; title=&quot;QT窗口部件&quot;&gt;&lt;/a&gt;QT窗口部件&lt;/h1&gt;&lt;h2 id=&quot;默认部件基类&quot;&gt;&lt;a href=&quot;#默认部件基类&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT对象树</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%AF%B9%E8%B1%A1%E6%A0%91/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%AF%B9%E8%B1%A1%E6%A0%91/</id>
    <published>2022-01-13T14:09:50.000Z</published>
    <updated>2022-01-13T14:10:59.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT对象树"><a href="#QT对象树" class="headerlink" title="QT对象树"></a>QT对象树</h1><p>QT提供了对象树机制，能够<strong>自动</strong>、有效的组织和管理继承自QObject的对象。</p><p>每个继承自QObject类的对象通过它的对象链表(QObjectList)来管理子类对象，当用户创建一个子对象时，其对象链表相应更新子类对象的信息，对象链表可通过children()获取。</p><p>当父类对象析构的时候，其对象链表中的所有(子类)对象也会被析构，父对象会自动，将其从父对象列表中删除，QT保证没有对象会被delete两次。开发中手动回收资源时建议使用deleteLater代替delete,因为deleteLater多次是安全的。</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201131239311.png" alt="image-20220113123903219"></p><hr><p>派生于QObject的类，申请资源的时候，我们可以不用过分的去关注资源回收情况，因为当该基类销毁回收时，子类也会一起销毁回收。</p><hr><p><strong>当某一个子类进行销毁的时候，如果它也有子类，对应的子类也会销毁回收。</strong></p><hr><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201132152345.png" alt="image-20220113215247296"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201132153248.png" alt="image-20220113215301204"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT对象树&quot;&gt;&lt;a href=&quot;#QT对象树&quot; class=&quot;headerlink&quot; title=&quot;QT对象树&quot;&gt;&lt;/a&gt;QT对象树&lt;/h1&gt;&lt;p&gt;QT提供了对象树机制，能够&lt;strong&gt;自动&lt;/strong&gt;、有效的组织和管理继承自QObject的对象。&lt;/p</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】QT元对象系统</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%85%83%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/13/%E3%80%90QT%E3%80%91QT%E5%85%83%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-01-13T03:24:58.000Z</published>
    <updated>2022-01-13T03:46:16.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT元对象系统-Meta-Object-System"><a href="#QT元对象系统-Meta-Object-System" class="headerlink" title="QT元对象系统(Meta-Object-System)"></a>QT元对象系统(Meta-Object-System)</h1><h2 id="元对象系统"><a href="#元对象系统" class="headerlink" title="元对象系统"></a>元对象系统</h2><p>元对象系统是一个基于标准C++的扩展，为QT提供了信号与槽机制、实时类型信息、动态属性系统。</p><p>元对象系统的三个基本条件:类必须继承自QObject、类声明Q_OBJECT宏(默认私有)、元对象编译器moc。</p><p><strong>信号与槽机制是QT的核心机制</strong>，信号与槽是一种高级接口，应用于对象之间的通信。信号和槽是QT自行定义的一种通信机制，它独立于标准的C/C++语言，要正确的处理信号和槽，必须借助一个称为moc(Meta-Object-Compiler)，也就是”元对象编译器”。</p><p>它为高层次的事件处理自动生成所需要的必要代码。QT程序在交由标准编译器编译之前，先要使用moc分析C++源文件。如果moc发现在一个类头文件中包含了函Q_OBJECT，则会生成以moc_className.cpp(自定义类名)的.cpp文件。这个源文件中包含了Q_OBJECT宏的实现代码。新的文件同样将进入编译系统，与源文件一起参与编译。构建生成的.o文件包含与moc生成的.cpp文件中。</p><hr><h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><p><strong>产生的历史背景</strong>:</p><p>GUI用户界面中，当用户操作一个窗口部件时，需要其他窗口部件响应，传统方式经常使用callback(回调机制)来实现。所谓回调即事先将函数指针作为一个参数传递给另一个函数，然后在函数处理过程中适当地方调用函数。</p><p>回调机制有两个缺陷:类型不安全，不能保证调用过程中使用正确的参数,强耦合，处理函数必须知道调用哪个回调函数。</p><p><strong>QT的信号与槽机制:</strong></p><p>QT的信号与槽机制是类型安全的，<strong>松耦合</strong>，更灵活，更方便。</p><p>信号与槽(Signal &amp; Slot)是QT编程的基础，也是QT的一大创新。因为有了信号与槽机制的编程，在QT中处理界面的各个组件的交互操作时变得更加直观个简单。</p><p>**信号(Signal)**就是在特定情况下被发射的事件，例如PushButton最常见的信号就是鼠标单击时发射的clicked()信号。发生信号使用QT的emit关键字。QT的signals关键字指出进入了信号的声明区，随后即可声明自己的信号。</p><p>**槽(Slot)**就是对信号响应的函数。槽就是一个函数，与一般的C++函数是一样的,可以声明在类的任何部分(public、private or protected)，可以具有任何参数，也可以被直接调用。</p><p>槽函数与一般的函数不同的是:槽函数可以与一个信号关联(connect)，当信号被发射时， 关联的槽函数被自动执行。</p><p><strong>信号与槽链接方式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201121318703.png" alt="image-20220112131738342"></p><h3 id="信号与槽链接-一对一"><a href="#信号与槽链接-一对一" class="headerlink" title="信号与槽链接( 一对一)"></a>信号与槽链接( 一对一)</h3><p><strong>mainwindow.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义信号</span></span><br><span class="line">    <span class="comment">//信号的声明</span></span><br><span class="line">    <span class="comment">//信号不用实现也不能实现</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Comeon</span><span class="params">(QString&amp; str)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="comment">//同样可以手动添加槽方法-或者在设计模式中添加槽方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_WorldBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_CNBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_BJBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startSend</span><span class="params">(QString&amp; str)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>mainwindow.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;qdebug.h&gt;</span></span></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//链接信号与槽</span></span><br><span class="line">    <span class="comment">//默认是自动关联</span></span><br><span class="line">    <span class="comment">//将信号和处理这个信号的槽方法相连接起来，connect只负责将它们两个链接在一起</span></span><br><span class="line">    <span class="comment">//至于谁发的，就无所谓了。</span></span><br><span class="line">    connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br><span class="line"> <span class="comment">//或者 //connect(this,&amp;MainWindow::Comeon,this,&amp;MainWindow::startSend);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_WorldBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//发射信号</span></span><br><span class="line">    QString str = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_CNBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="string">&quot;Hello China!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_BJBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="string">&quot;Hello BeiJing!&quot;</span>;</span><br><span class="line">    <span class="function">emit <span class="title">Comeon</span><span class="params">(str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::startSend</span><span class="params">(QString &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打印调试信息</span></span><br><span class="line">     qDebug()&lt;&lt;str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="信号与槽链接-一对多"><a href="#信号与槽链接-一对多" class="headerlink" title="信号与槽链接(一对多)"></a>信号与槽链接(一对多)</h3><p>一个信号对应多个槽方法。可以多个槽响应一个信号。</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCN()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br></pre></td></tr></table></figure><p><strong>注意:<strong>一般情况下多个槽方法的参数个数保持一致，</strong>但是，</strong>有的时候，可以不使用信号传过来的这个参数，所以槽方法的参数个数可以比信号传递的参数个数少，但是，不能比信号传递过来的参数数量多。</p><p> <strong>错误示范:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCN(QString&amp;,<span class="keyword">int</span>)));</span><br></pre></td></tr></table></figure><p><strong>链接失败。</strong></p><hr><h3 id="信号与槽链接-多对一"><a href="#信号与槽链接-多对一" class="headerlink" title="信号与槽链接(多对一)"></a>信号与槽链接(多对一)</h3><p> 多个信号链接一个槽方法。进一步反应了信号与槽机制的灵活性。</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon2()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon3()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon4()),<span class="keyword">this</span>,SLOT(HelloCHP()));</span><br></pre></td></tr></table></figure><p>参数设置见上《信号与槽链接(一对多)》。</p><hr><h3 id="信号与信号-一对一"><a href="#信号与信号-一对一" class="headerlink" title="信号与信号(一对一)"></a>信号与信号(一对一)</h3><p>当一个信号发射时，发射另一个信号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(<span class="keyword">this</span>,SIGNAL(Comeon4()),<span class="keyword">this</span>,SIGNAL(Comeon3())); </span><br></pre></td></tr></table></figure><hr><h3 id="断开信号与槽链接"><a href="#断开信号与槽链接" class="headerlink" title="断开信号与槽链接"></a>断开信号与槽链接</h3><p><strong>断开一个信号和一个与它相链接的槽方法。</strong></p><p>disconnect,参数同connect</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disconnect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));</span><br></pre></td></tr></table></figure><p><strong>断开所有与该信号相连接的槽方法。</strong></p><p>与上面不同的是，后两个参数置为0，所有的对象，和所有的槽方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disconnect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="number">0</span>,<span class="number">0</span>),;</span><br></pre></td></tr></table></figure><hr><p><strong>断开指定对象的所有信号与的指定对象的所有槽方法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qDebug()&lt;&lt;<span class="string">&quot;断开this所有信号与this的所有槽方法的链接&quot;</span>;</span><br><span class="line">disconnect(<span class="keyword">this</span>,<span class="number">0</span>,<span class="keyword">this</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">disconnect(<span class="keyword">this</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//断开this所有相关的对象的槽方法的链接</span></span><br></pre></td></tr></table></figure><hr><p><strong>也可以通过connect函数的返回值来断开某个链接。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取返回值</span></span><br><span class="line">......</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">QMetaObject::Connection m_res;<span class="comment">//返回值类型</span></span><br><span class="line">......</span><br><span class="line">       m_res = connect(<span class="keyword">this</span>,SIGNAL(Comeon(QString&amp;)),<span class="keyword">this</span>,SLOT(startSend(QString&amp;)));<span class="comment">//获取返回值</span></span><br><span class="line">......</span><br><span class="line">    disconnect(m_res);<span class="comment">//断开链接</span></span><br></pre></td></tr></table></figure><hr><p><strong>总结-信号与槽机制的优越性:</strong></p><ol><li>信号与槽机制是类型安全的，相关联的信号与槽参数必需匹配(详细解释在上，相关联的槽方法的参数只能少不能多)</li><li>信号与槽是松耦合的，信号发送者不知道也不需要知道接受者的信息。</li><li>信号与槽可以使用任意类型的任意数量的参数。、</li></ol><hr><h2 id="动态属性系统"><a href="#动态属性系统" class="headerlink" title="动态属性系统"></a>动态属性系统</h2><p>在标准C++中，为了保证封装性，我们经常声明一个私有变量，然后声明两个共有函数例如set,get来对这个变量进行操作。</p><p>同理，在QT中我们可以使用宏**Q_PROPERTY()**来实现这些，函数可以使用QObject::property()和QObject::setProperty()。</p><p>在使用的时候，我们不用知道变量的所在类的任何细节，只需要知道名字即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Q_PROPERTY(type name</span><br><span class="line">             (READ getFunction [WRITE setFunction] |</span><br><span class="line">              MEMBER memberName [(READ getFunction | WRITE setFunction)])</span><br><span class="line">             [RESET resetFunction]</span><br><span class="line">             [NOTIFY notifySignal]</span><br><span class="line">             [REVISION <span class="keyword">int</span>]</span><br><span class="line">             [DESIGNABLE <span class="keyword">bool</span>]</span><br><span class="line">             [SCRIPTABLE <span class="keyword">bool</span>]</span><br><span class="line">             [STORED <span class="keyword">bool</span>]</span><br><span class="line">             [USER <span class="keyword">bool</span>]</span><br><span class="line">             [CONSTANT]</span><br><span class="line">             [FINAL])</span><br></pre></td></tr></table></figure><p>  <strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    Q_PROPERTY(QString mask READ mask WRITE setMask NOTIFY maskChanged)</span><br><span class="line">......</span><br><span class="line">    QObject* obj  = myPc;</span><br><span class="line">    qDebug()&lt;&lt;obj-&gt;property(<span class="string">&quot;mask&quot;</span>).toString();</span><br><span class="line">    qDebug()&lt;&lt;obj-&gt;property(<span class="string">&quot;mask&quot;</span>).toString();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QT元对象系统-Meta-Object-System&quot;&gt;&lt;a href=&quot;#QT元对象系统-Meta-Object-System&quot; class=&quot;headerlink&quot; title=&quot;QT元对象系统(Meta-Object-System)&quot;&gt;&lt;/a&gt;QT元对象系统</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【QT】自定义软件打包发布</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/11/%E3%80%90QT%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/11/%E3%80%90QT%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</id>
    <published>2022-01-11T10:29:34.000Z</published>
    <updated>2022-01-11T10:30:47.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义软件打包发布"><a href="#自定义软件打包发布" class="headerlink" title="自定义软件打包发布"></a>自定义软件打包发布</h1><ul><li>安装nisi和nisedit。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830396.png" alt="image-20220111172214216"></p><ul><li>打开nisedit。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111726717.png"></p><ul><li>点击——文件——新建脚本：向导。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111729295.png" alt="image-20220111172905248"></p><ul><li>设置名称等信息，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830469.png"></p><ul><li>选择安装图标——设置安装语言，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111731748.png"></p><ul><li>选择授权文件(License.txt,里面的内容自定义。)点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830536.png" alt="image-20220111173423517"></p><ul><li>选择你的程序相关文件，删掉默认的两个。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830195.png" alt="image-20220111173708350"></p><ul><li>点击添加文件，注意其中部分文件的路径。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830512.png" alt="image-20220111173816372"></p><ul><li>其中要注意的路径，就是带有文件夹的，如下图所示。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830658.png" alt="image-20220111174520365"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830635.png" alt="image-20220111174539381"></p><ul><li>添加完成，选中.exe文件，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111747350.png" alt="image-20220111174756306"></p><ul><li>默认，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111746544.png" alt="image-20220111174654495"></p><ul><li>选择自述文件，点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830098.png" alt="image-20220111174809257"></p><ul><li>设置相关文字消息提示，以及图标。点击下一步。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111803351.png" alt="image-20220111180304300"></p><ul><li>将三个选项都勾上，点击完成。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830698.png" alt="image-20220111180406001"></p><ul><li>保存文件，打包完成。</li></ul><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830687.png" alt="image-20220111180457048"></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111830547.png" alt="image-20220111180522390"></p><hr><h1 id="补充-windeployqt补全相关库"><a href="#补充-windeployqt补全相关库" class="headerlink" title="补充:windeployqt补全相关库"></a>补充:windeployqt补全相关库</h1><p>有可能补的不全，需要手动补充。</p><p>windeployqt ExamSys.exe</p><p>找不到命令添加环境变量。D:\QT5.9.6\5.9.6\mingw53_32\bin</p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201111811360.png" alt="image-20220111181158287"></p><p>完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义软件打包发布&quot;&gt;&lt;a href=&quot;#自定义软件打包发布&quot; class=&quot;headerlink&quot; title=&quot;自定义软件打包发布&quot;&gt;&lt;/a&gt;自定义软件打包发布&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装nisi和nisedit。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="QT" scheme="https://doraemon-hub-art.github.io/categories/QT/"/>
    
    
    <category term="-QT" scheme="https://doraemon-hub-art.github.io/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>【MFC】MFC文件操作和注册表操作</title>
    <link href="https://doraemon-hub-art.github.io/2022/01/09/%E3%80%90MFC%E3%80%91MFC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://doraemon-hub-art.github.io/2022/01/09/%E3%80%90MFC%E3%80%91MFC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-09T04:58:44.000Z</published>
    <updated>2022-01-09T05:24:49.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MFC文件和注册表的操作"><a href="#MFC文件和注册表的操作" class="headerlink" title="MFC文件和注册表的操作"></a>MFC文件和注册表的操作</h1><p>日志、操作配置文件、ini文件、注册表、音视频的文件存储。</p><p>Linux下一切皆文件。</p><h2 id="C-C-文件操作"><a href="#C-C-文件操作" class="headerlink" title="C/C++文件操作"></a>C/C++文件操作</h2><h3 id="常量指针和指针常量"><a href="#常量指针和指针常量" class="headerlink" title="常量指针和指针常量"></a>常量指针和指针常量</h3><p>const char*  p == char const *p 常量指针，表示指向的内容为常量，指针的指向可以修改，指针指向的内容不能修改。</p><p>char* const p  指针常量，表示地址是常量，指向不能改变，指向的内容可以改变。 </p><h3 id="C语言文件操作"><a href="#C语言文件操作" class="headerlink" title="C语言文件操作"></a>C语言文件操作</h3><p><strong>文件打开的模式</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201091305850.png" alt="image-20220108164525100"></p><p><strong>示例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">errno_t</span> err = _wfopen_s(&amp;pFile,_T(<span class="string">&quot;1.txt&quot;</span>),_T(<span class="string">&quot;w&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;Open Fail ErrorCode = %d&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(_T(<span class="string">&quot;ohguradianbyebye&quot;</span>), <span class="number">2</span>, wcslen(_T(<span class="string">&quot;ohguradianbyebye&quot;</span>))+<span class="number">1</span>, pFile); <span class="comment">//wcslen求宽字符串的长度</span></span><br><span class="line">fclose(pFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* pFile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">errno_t</span> err = _wfopen_s(&amp;pFile, _T(<span class="string">&quot;1.txt&quot;</span>), _T(<span class="string">&quot;r&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!err)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;Open Fail ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(pFile, <span class="number">0</span>, SEEK_END);<span class="comment">//偏移到结尾位置</span></span><br><span class="line"><span class="keyword">int</span> len = ftell(pFile);<span class="comment">//得到文件指针的当前位置，也就是文件长度。</span></span><br><span class="line">WCHAR *pBuf=<span class="keyword">new</span> WCHAR[len+<span class="number">1</span>];</span><br><span class="line">fseek(pFile,<span class="number">0</span>,SEEK_SET);<span class="comment">//文件指针回到开头位置</span></span><br><span class="line">    <span class="comment">//等同于rewind(pFile);</span></span><br><span class="line">fread(pBuf,<span class="number">2</span>,len,pFile);<span class="comment">//这里是宽字节所以是2</span></span><br><span class="line">pBuf[len] = <span class="number">0</span>;<span class="comment">//确保数组最后一个元素为&#x27;\0&#x27;</span></span><br><span class="line">MessageBox(pBuf);</span><br><span class="line">fclose(pFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-文件操作"><a href="#C-文件操作" class="headerlink" title="C++文件操作"></a>C++文件操作</h3><p> <strong>ofstream类</strong></p><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201081815893.png" alt="image-20220108181527795"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line">ofs.write(<span class="string">&quot;doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;droaemon&quot;</span>));</span><br><span class="line">ofs. close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;2.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">char</span> pBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">ifs.read(pBuf,<span class="number">100</span>);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Win32-API-MFC文件操作"><a href="#Win32-API-MFC文件操作" class="headerlink" title="Win32 API/MFC文件操作"></a>Win32 API/MFC文件操作</h2><h3 id="Win32-API文件操作"><a href="#Win32-API文件操作" class="headerlink" title="Win32 API文件操作"></a>Win32 API文件操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateFileA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//创建或打开的对象的名称</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           LPCSTR                lpFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//访问方式,读、读写，写、查询</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="comment">//共享方式</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="comment">//NULL不能被子进程继承 </span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//如何创建文件</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                dwCreationDisposition,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//设置文件的属性和标志</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in]           DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">//NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">  [in, optional] HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WriteFile(</span><br><span class="line">    _In_ HANDLE hFile,</span><br><span class="line">    _In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,</span><br><span class="line">    <span class="comment">//要写入的字节数</span></span><br><span class="line">    _In_ DWORD nNumberOfBytesToWrite,</span><br><span class="line">    <span class="comment">//用来接收实际写入到文件的字节数</span></span><br><span class="line">    _Out_opt_ LPDWORD lpNumberOfBytesWritten,</span><br><span class="line">    _Inout_opt_ LPOVERLAPPED lpOverlapped</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE  hFile;</span><br><span class="line">hFile = CreateFile(_T(<span class="string">&quot;3.txt&quot;</span>),GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_NEW,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;%d&quot;</span>, GetLastError());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwwrites;</span><br><span class="line">WriteFile(hFile,<span class="string">&quot;Doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;Doraemon&quot;</span>),&amp;dwwrites,<span class="literal">NULL</span>);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hFile;</span><br><span class="line">hFile = CreateFile(_T(<span class="string">&quot;3.txt&quot;</span>),GENERIC_READ,<span class="number">0</span>,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">char</span> pBuf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">DWORD dwreads;</span><br><span class="line">ReadFile(hFile,pBuf,<span class="number">100</span>,&amp;dwreads,<span class="literal">NULL</span>);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MFC文件操作"><a href="#MFC文件操作" class="headerlink" title="MFC文件操作"></a>MFC文件操作</h3><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(<span class="string">L&quot;4.txt&quot;</span>,CFile::modeCreate | CFile::modeWrite)</span></span>;</span><br><span class="line">file.Write(<span class="string">&quot;doraemon&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;doraemon&quot;</span>));</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(<span class="string">L&quot;4.txt&quot;</span>,CFile::modeRead)</span></span>;</span><br><span class="line"><span class="keyword">char</span>* pBuf;</span><br><span class="line">DWORD dwFileLen = file.GetLength();</span><br><span class="line">pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[dwFileLen + <span class="number">1</span>];</span><br><span class="line">pBuf[dwFileLen] = <span class="number">0</span>;</span><br><span class="line">file.Read(pBuf, dwFileLen);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf);</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CFileDialog(</span><br><span class="line">    <span class="comment">//TRUE构建一个打开的对话框，FLASE构建一个保存对话框</span></span><br><span class="line">    BOOL bOpenFileDialog,</span><br><span class="line">    <span class="comment">//指定默认的文件扩展名</span></span><br><span class="line">    LPCTSTR lpszDefExt = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="comment">//初始化文件名NULL默认没有初始文件名</span></span><br><span class="line">    LPCTSTR lpszFileName = <span class="literal">NULL</span>,</span><br><span class="line">    DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,</span><br><span class="line">    <span class="comment">//用来指定一个或一组文件的过滤器</span></span><br><span class="line">    LPCTSTR lpszFilter = <span class="literal">NULL</span>,</span><br><span class="line">    <span class="comment">//用来指定文件对话框的父窗口或拥有窗口</span></span><br><span class="line">    CWnd* pParentWnd = <span class="literal">NULL</span>,</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>,</span><br><span class="line">    BOOL bVistaStyle = TRUE);</span><br></pre></td></tr></table></figure><p><strong>例如:创建一个默认保存对话框</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(FALSE)</span></span>;</span><br><span class="line">fileDlg.DoModal();</span><br></pre></td></tr></table></figure><p><strong>文件夹方式保存读取文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(FALSE)</span></span>;</span><br><span class="line">fileDlg.m_ofn.lpstrTitle = <span class="string">L&quot;doraemon&quot;</span>;</span><br><span class="line">fileDlg.m_ofn.lpstrFilter = _T(<span class="string">&quot;Text Files(*.txt)\0*.txt\0All Files(*.*)\0*.*\0\0&quot;</span>);</span><br><span class="line">fileDlg.m_ofn.lpstrDefExt = <span class="string">L&quot;txt&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (fileDlg.DoModal() == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(fileDlg.GetFileName(), CFile::modeCreate | CFile::modeWrite)</span></span>;</span><br><span class="line">USES_CONVERSION;</span><br><span class="line"><span class="keyword">char</span>* szBuf = T2A(fileDlg.GetFileName());</span><br><span class="line">TRACE(<span class="string">&quot;fileDlg.GetFileName()= %s&quot;</span>, szBuf);</span><br><span class="line">file.Write(<span class="string">&quot;ZYXXX&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;ZYXXX&quot;</span>));</span><br><span class="line">file.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnFileRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CFileDialog <span class="title">fileDlg</span><span class="params">(TRUE)</span></span>;</span><br><span class="line">fileDlg.m_ofn.lpstrTitle = <span class="string">L&quot;doraemon&quot;</span>;</span><br><span class="line">fileDlg.m_ofn.lpstrFilter = _T(<span class="string">&quot;Text Files(*.txt)\0*.txt\0All Files(*.*)\0*.*\0\0&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fileDlg.DoModal() == IDOK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CFile <span class="title">file</span><span class="params">(fileDlg.GetFileName(), CFile::modeRead)</span></span>;</span><br><span class="line"><span class="keyword">char</span>* pBuf;</span><br><span class="line">DWORD dwFileLen = file.GetLength();</span><br><span class="line">pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[dwFileLen + <span class="number">1</span>];</span><br><span class="line">pBuf[dwFileLen] = <span class="number">0</span>;</span><br><span class="line">file.Read(pBuf, dwFileLen);</span><br><span class="line">file.Close();</span><br><span class="line">USES_CONVERSION;</span><br><span class="line">CString strBuf = A2W(pBuf );</span><br><span class="line">MessageBox(strBuf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Do2eM0N/blogimg/raw/master/202201091305759.png" alt="image-20220109101517226"></p><h2 id="配置文件的访问与读写"><a href="#配置文件的访问与读写" class="headerlink" title="配置文件的访问与读写"></a>配置文件的访问与读写</h2><p> <strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnWirteConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获取当前路径</span></span><br><span class="line">WCHAR strPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectoryW(MAX_PATH,strPath);</span><br><span class="line">CString strFilePath;</span><br><span class="line">strFilePath.Format(<span class="string">L&quot;%ls//Test.ini&quot;</span>,strPath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;metadata&quot;</span>,<span class="string">L&quot;title&quot;</span>,<span class="string">L&quot;搜狗双拼&quot;</span>,strFilePath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;ch&quot;</span>,<span class="string">L&quot;I&quot;</span>,strFilePath);</span><br><span class="line">WritePrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;sh&quot;</span>,<span class="string">L&quot;U&quot;</span>,strFilePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnReadConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WCHAR strPath[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strTitle[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strCh[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">WCHAR strSh[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectoryW(MAX_PATH, strPath);</span><br><span class="line">CString strFilePath;</span><br><span class="line">strFilePath.Format(<span class="string">L&quot;%ls//Test.ini&quot;</span>, strPath);</span><br><span class="line">DWORD dwNum1 = GetPrivateProfileStringW(<span class="string">L&quot;metadata&quot;</span>,<span class="string">L&quot;title&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">DWORD dwNum2 = GetPrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;ch&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">DWORD dwNum3 = GetPrivateProfileStringW(<span class="string">L&quot;声母&quot;</span>,<span class="string">L&quot;sh&quot;</span>,<span class="literal">NULL</span>,strTitle,MAX_PATH,strFilePath);</span><br><span class="line">USES_CONVERSION;</span><br><span class="line"><span class="keyword">char</span>* szTitle = W2A(strTitle);</span><br><span class="line"><span class="keyword">char</span>*  szSh = W2A(strSh);</span><br><span class="line"><span class="keyword">char</span>* szCh = W2A(strCh);</span><br><span class="line">TRACE(<span class="string">&quot;strTitle = %s . strCh = %s, strSh = %s&quot;</span>,szTitle,szCh,szSh);<span class="comment">//没读取出来-_-</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册表编程"><a href="#注册表编程" class="headerlink" title="注册表编程"></a>注册表编程</h2><p>注册表存储在二进制文件里面，win32 API提供了大量的函数操作注册表。</p><p><strong>创建注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RegCreateKeyW (</span><br><span class="line">    <span class="comment">//打开的当前项句柄,实际上就是那几个分支选项</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//打开或创建的表项的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//用来接收创建或者打开表项的句柄</span></span><br><span class="line">    _Out_ PHKEY phkResult</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>打开注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RegOpenKeyW (</span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    _Out_ PHKEY phkResult</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>写入注册表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RegSetValueW (</span><br><span class="line">   <span class="comment">//打开的当前项句柄,实际上就是那几个分支选项</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//打开或者创建的表项的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//指示被存储信息的类型REG_SZ类型</span></span><br><span class="line">    _In_ DWORD dwType,</span><br><span class="line">    <span class="comment">//要存放到注册表里面的数据</span></span><br><span class="line">    _In_reads_bytes_opt_(cbData) LPCWSTR lpData,</span><br><span class="line">    <span class="comment">//要存放的字符串数据的大小、长度</span></span><br><span class="line">    _In_ DWORD cbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>扩展——设置注册表项下指定值的数据和类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RegSetValueExW(</span><br><span class="line">    <span class="comment">//打开的当前项的句柄，</span></span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    <span class="comment">//指向一个字符串的指针，包含了将要设置值的名称</span></span><br><span class="line">    _In_opt_ LPCWSTR lpValueName,</span><br><span class="line">    <span class="comment">//保留参数 0 </span></span><br><span class="line">    _Reserved_ DWORD Reserved,</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    _In_ DWORD dwType,</span><br><span class="line">    _In_reads_bytes_opt_(cbData) CONST BYTE* lpData,</span><br><span class="line">    _In_ DWORD cbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>从注册表中读取数据</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RegQueryValueW (</span><br><span class="line">    _In_ HKEY hKey,</span><br><span class="line">    _In_opt_ LPCWSTR lpSubKey,</span><br><span class="line">    <span class="comment">//读取的缓存</span></span><br><span class="line">    _Out_writes_bytes_to_opt_(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPWSTR lpData,</span><br><span class="line">    <span class="comment">//缓存大小</span></span><br><span class="line">    _Inout_opt_ PLONG lpcbData</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写注册表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnWriteReg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwAge = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//创建注册表项 </span></span><br><span class="line"><span class="keyword">int</span> ret = ::RegCreateKeyW(HKEY_LOCAL_MACHINE, <span class="string">L&quot;SOFTWARE\\Doraemon\\admin&quot;</span>, &amp;hKey);<span class="comment">//创建失败，以管理员方式运行。</span></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegCreateKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;创建注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写注册表</span></span><br><span class="line">ret = ::RegSetValueEx(hKey, <span class="string">L&quot;age&quot;</span>, <span class="number">0</span>, REG_DWORD, (CONST BYTE*) &amp; dwAge, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegCreateKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;写注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">::RegCloseKey(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读注册表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CMFCFileView::OnReadReg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">HKEY hKey;</span><br><span class="line">DWORD dwAge;</span><br><span class="line"><span class="comment">//打开注册表项 </span></span><br><span class="line"><span class="keyword">int</span> ret = ::RegCreateKeyW(HKEY_LOCAL_MACHINE, <span class="string">L&quot;SOFTWARE\\Doraemon\\admin&quot;</span>, &amp;hKey);<span class="comment">//创建失败，以管理员方式运行。</span></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegOpenKeyW Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;打开注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读注册表</span></span><br><span class="line">DWORD dwType;</span><br><span class="line">DWORD dwValue;</span><br><span class="line"></span><br><span class="line">ret = ::RegQueryValueEx(hKey, <span class="string">L&quot;age&quot;</span>, <span class="number">0</span>, &amp;dwType, (LPBYTE) &amp; dwAge, &amp;dwValue);</span><br><span class="line"><span class="keyword">if</span> (ret != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">TRACE(<span class="string">&quot;RegQueryValueEx Failed,ErrorCode = %d&quot;</span>, GetLastError());</span><br><span class="line">MessageBox(<span class="string">L&quot;读注册表失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TRACE(<span class="string">&quot;dwType = %d,dwValue = %d,dwAge = %d&quot;</span>,dwType,dwValue,dwAge);</span><br><span class="line">::RegCloseKey(hKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件操作的实际应用"><a href="#文件操作的实际应用" class="headerlink" title="文件操作的实际应用"></a>文件操作的实际应用</h2><ol><li>调试日志debugview,文件日志:警告日志、错误日志。</li><li>视频存储</li><li>文件传输CFile和socket结合使用</li><li>C语言和MFC的文件操作用途广泛，Win32 API、ifstream,ofstream用的少。</li><li>配置文件windows</li><li>注册表操作-病毒-逆向</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MFC文件和注册表的操作&quot;&gt;&lt;a href=&quot;#MFC文件和注册表的操作&quot; class=&quot;headerlink&quot; title=&quot;MFC文件和注册表的操作&quot;&gt;&lt;/a&gt;MFC文件和注册表的操作&lt;/h1&gt;&lt;p&gt;日志、操作配置文件、ini文件、注册表、音视频的文件存储。&lt;</summary>
      
    
    
    
    <category term="MFC" scheme="https://doraemon-hub-art.github.io/categories/MFC/"/>
    
    
    <category term="-MFC" scheme="https://doraemon-hub-art.github.io/tags/MFC/"/>
    
    <category term="-文件操作" scheme="https://doraemon-hub-art.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
</feed>
